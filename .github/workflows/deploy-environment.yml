name: Deploy Environment
permissions:
  contents: read

on:
  workflow_call:
    inputs:
      environment:
        description: "Environment to deploy to (sandbox or production)"
        required: true
        type: string
      docker-digest:
        description: "Docker image digest to deploy"
        required: true
        type: string
      render-service-ids:
        description: "Comma-separated list of Render service IDs to deploy to"
        required: true
        type: string
    secrets:
      RENDER_API_TOKEN:
        required: true
      VERCEL_TOKEN:
        required: true
      VERCEL_ORG_ID:
        required: true
      VERCEL_PROJECT_ID:
        required: true
      SENTRY_AUTH_TOKEN:
        required: true
      SENTRY_ORG:
        required: true
    outputs:
      frontend-deployment-url:
        description: "Frontend deployment URL"
        value: ${{ jobs.build-frontend.outputs.deployment-url }}

jobs:
  build-frontend:
    name: "Frontend: Build and Deploy to Preview"
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs:
      deployment-url: ${{ steps.deploy.outputs.deployment-url }}
    steps:
      - uses: actions/checkout@v5

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        working-directory: clients/apps/web
        run: vercel pull --yes --environment=${{ inputs.environment }} --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Build Project Artifacts
        working-directory: clients/apps/web
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Deploy Project Artifacts to Vercel (Preview)
        id: deploy
        working-directory: clients/apps/web
        run: |
          # Always deploy as preview first, regardless of environment
          # This allows us to test before promoting to production
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "deployment-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "Preview deployment URL: $DEPLOYMENT_URL"
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  deploy-backend:
    name: "Backend: Deploy to ${{ inputs.environment }}"
    needs: build-frontend
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - uses: actions/checkout@v5

      - name: Deploy Backend to Render
        run: |
          IFS=',' read -ra SERVICE_IDS <<< "${{ inputs.render-service-ids }}"
          ./.github/workflows/deploy_server.sh ${{ inputs.docker-digest }} "${SERVICE_IDS[@]}"
        env:
          RENDER_API_TOKEN: ${{ secrets.RENDER_API_TOKEN }}

      - name: Sentry Release
        uses: getsentry/action-release@v3.2.0
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
        with:
          environment: ${{ inputs.environment }}
          dist: ${{ inputs.docker-digest }}
          version: ${{ github.sha }}
          projects: server
          working_directory: ./server

  promote-frontend:
    name: "Frontend: Promote to Production"
    needs: [build-frontend, deploy-backend]
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - uses: actions/checkout@v5

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Promote Frontend to Production
        run: |
          echo "Promoting deployment: ${{ needs.build-frontend.outputs.deployment-url }}"
          vercel promote ${{ needs.build-frontend.outputs.deployment-url }} --token=${{ secrets.VERCEL_TOKEN }}
          echo "Successfully promoted to production: ${{ needs.build-frontend.outputs.deployment-url }}"
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
