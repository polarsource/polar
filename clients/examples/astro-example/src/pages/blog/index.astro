---
import BaseHead from '../../components/BaseHead.astro'
import Header from '../../components/Header.astro'
import Footer from '../../components/Footer.astro'
import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts'
import { getCollection } from 'astro:content'
import FormattedDate from '../../components/FormattedDate.astro'
import { Polar } from '@polar-sh/astro'

const rootUrl = Astro.url.host

const posts = (await getCollection('blog')).sort(
  (a, b) => a.data.pubDate.valueOf() - b.data.pubDate.valueOf(),
)

if (!process.env.POLAR_ACCESS_TOKEN) {
  throw Error('POLAR_ACCESS_TOKEN is not set')
}

if (!process.env.POLAR_ORGANIZATION_NAME) {
  throw Error('POLAR_ORGANIZATION_NAME is not set')
}

/**
 * Upload all posts to Polar
 */
// Create a Polar client with your API key
const polar = new Polar({
  accessToken: process.env.POLAR_ACCESS_TOKEN,
})

// Upload all posts to Polar
const { error: postUploadError } = await polar
  .upload(posts, {
    organizationName: process.env.POLAR_ORGANIZATION_NAME,
  })
  // Filter for only new posts
  .filter(({ exists }) => !exists)
  // Add the correct title to the post
  .transform(({ article, entry }) => {
    article.title = entry.data.title
    return article
  })
  // Add the header image and Polar metadata to the post
  .transform(({ article, entry }) => {
    if (entry.data.heroImage) {
      article.body = `![${entry.data.title}](${rootUrl}${entry.data.heroImage.src})\n\n${article.body}`
    }
    article = {
      ...article,
      ...entry.data.polar,
      published_at: entry.data.polar?.published_at?.toISOString(),
    }
    return article
  })

if (postUploadError) {
  console.error('Error uploading posts to Polar:', postUploadError)
}
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
    <style>
      main {
        width: 960px;
      }
      ul {
        display: flex;
        flex-wrap: wrap;
        gap: 2rem;
        list-style-type: none;
        margin: 0;
        padding: 0;
      }
      ul li {
        width: calc(50% - 1rem);
      }
      ul li * {
        text-decoration: none;
        transition: 0.2s ease;
      }
      ul li:first-child {
        width: 100%;
        margin-bottom: 1rem;
        text-align: center;
      }
      ul li:first-child img {
        width: 100%;
      }
      ul li:first-child .title {
        font-size: 2.369rem;
      }
      ul li img {
        margin-bottom: 0.5rem;
        border-radius: 12px;
      }
      ul li a {
        display: block;
      }
      .title {
        margin: 0;
        color: rgb(var(--black));
        line-height: 1;
      }
      .date {
        margin: 0;
        color: rgb(var(--gray));
      }
      ul li a:hover h4,
      ul li a:hover .date {
        color: rgb(var(--accent));
      }
      ul a:hover img {
        box-shadow: var(--box-shadow);
      }
      @media (max-width: 720px) {
        ul {
          gap: 0.5em;
        }
        ul li {
          width: 100%;
          text-align: center;
        }
        ul li:first-child {
          margin-bottom: 0;
        }
        ul li:first-child .title {
          font-size: 1.563em;
        }
      }
    </style>
  </head>
  <body>
    <Header />
    <main>
      <section>
        <ul>
          {
            posts.map((post) => (
              <li>
                <a href={`/blog/${post.slug}/`}>
                  <img
                    width={720}
                    height={360}
                    src={post.data.heroImage?.src}
                    alt=""
                  />
                  <h4 class="title">{post.data.title}</h4>
                  <p class="date">
                    <FormattedDate date={post.data.pubDate} />
                  </p>
                </a>
              </li>
            ))
          }
        </ul>
      </section>
    </main>
    <Footer />
  </body>
</html>
