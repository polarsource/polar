/* tslint:disable */
/* eslint-disable */
/**
 * Polar API
 * Read the docs at https://docs.polar.sh/api-reference
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CustomerIDFilter,
  HTTPValidationError,
  ListResourceRefund,
  OrderIDFilter,
  OrganizationIDFilter1,
  Refund,
  RefundAmountTooHigh,
  RefundCreate,
  RefundIDFilter,
  RefundSortProperty,
  RefundedAlready,
  SubscriptionIDFilter,
} from '../models/index';

export interface RefundsApiCreateRequest {
    body: RefundCreate;
}

export interface RefundsApiListRequest {
    id?: RefundIDFilter | null;
    organizationId?: OrganizationIDFilter1 | null;
    orderId?: OrderIDFilter | null;
    subscriptionId?: SubscriptionIDFilter | null;
    customerId?: CustomerIDFilter | null;
    succeeded?: boolean | null;
    page?: number;
    limit?: number;
    sorting?: Array<RefundSortProperty> | null;
}

/**
 * 
 */
export class RefundsApi extends runtime.BaseAPI {

    /**
     * Create a refund.
     * Create Refund
     */
    async createRaw(requestParameters: RefundsApiCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Refund>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling create().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("pat", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("oat", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/refunds/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create a refund.
     * Create Refund
     */
    async create(requestParameters: RefundsApiCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Refund | null | undefined > {
        const response = await this.createRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 201:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     * List products.
     * List Refunds
     */
    async listRaw(requestParameters: RefundsApiListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResourceRefund>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['organizationId'] != null) {
            queryParameters['organization_id'] = requestParameters['organizationId'];
        }

        if (requestParameters['orderId'] != null) {
            queryParameters['order_id'] = requestParameters['orderId'];
        }

        if (requestParameters['subscriptionId'] != null) {
            queryParameters['subscription_id'] = requestParameters['subscriptionId'];
        }

        if (requestParameters['customerId'] != null) {
            queryParameters['customer_id'] = requestParameters['customerId'];
        }

        if (requestParameters['succeeded'] != null) {
            queryParameters['succeeded'] = requestParameters['succeeded'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sorting'] != null) {
            queryParameters['sorting'] = requestParameters['sorting'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("pat", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("oat", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/refunds/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * List products.
     * List Refunds
     */
    async list(requestParameters: RefundsApiListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResourceRefund> {
        const response = await this.listRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
