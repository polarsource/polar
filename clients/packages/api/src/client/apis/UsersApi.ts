/* tslint:disable */
/* eslint-disable */
/**
 * Polar API
 * Read the docs at https://docs.polar.sh/api-reference
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  UserRead,
  UserScopes,
  UserSetAccount,
  UserStripePortalSession,
} from '../models/index';

export interface UsersApiSetAccountRequest {
    body: UserSetAccount;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * Create Stripe Customer Portal
     */
    async createStripeCustomerPortalRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserStripePortalSession>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/users/me/stripe_customer_portal`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create Stripe Customer Portal
     */
    async createStripeCustomerPortal(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserStripePortalSession> {
        const response = await this.createStripeCustomerPortalRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Authenticated
     */
    async getAuthenticatedRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserRead>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/users/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Authenticated
     */
    async getAuthenticated(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserRead> {
        const response = await this.getAuthenticatedRaw(initOverrides);
        return await response.value();
    }

    /**
     * Scopes
     */
    async scopesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserScopes>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/users/me/scopes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Scopes
     */
    async scopes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserScopes> {
        const response = await this.scopesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Set Account
     */
    async setAccountRaw(requestParameters: UsersApiSetAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserRead>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling setAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/users/me/account`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Set Account
     */
    async setAccount(requestParameters: UsersApiSetAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserRead> {
        const response = await this.setAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
