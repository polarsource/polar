/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Authenticated */
        get: operations["users:get_authenticated"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/me/scopes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Scopes */
        get: operations["users:scopes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/me/account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Set Account */
        patch: operations["users:set_account"];
        trace?: never;
    };
    "/v1/users/me/stripe_customer_portal": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Stripe Customer Portal */
        post: operations["users:create_stripe_customer_portal"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/integrations/github/authorize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Integrations.Github.Authorize */
        get: operations["integrations_github:integrations.github.authorize"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/integrations/github/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Integrations.Github.Callback */
        get: operations["integrations_github:integrations.github.callback"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/integrations/github/lookup_user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Lookup User */
        post: operations["integrations_github:lookup_user"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/integrations/github/organizations/{id}/installation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Redirect To Organization Installation */
        get: operations["integrations_github:redirect_to_organization_installation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/integrations/github/organizations/{id}/check_permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Check Organization Permissions */
        post: operations["integrations_github:check_organization_permissions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/integrations/github/organizations/{id}/billing": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Organization Billing Plan */
        get: operations["integrations_github:get_organization_billing_plan"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/integrations/github/installations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Install */
        post: operations["integrations_github:install"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/integrations/github/webhook": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Webhook */
        post: operations["integrations_github:webhook"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/integrations/github_repository_benefit/user/authorize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Integrations.Github Repository Benefit.User Authorize */
        get: operations["integrations_github_repository_benefit:integrations.github_repository_benefit.user_authorize"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/integrations/github_repository_benefit/user/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Integrations.Github Repository Benefit.User Callback */
        get: operations["integrations_github_repository_benefit:integrations.github_repository_benefit.user_callback"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/integrations/github_repository_benefit/user/repositories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Integrations.Github Repository Benefit.User Repositories
         * @description Lists available repositories for this user
         */
        get: operations["integrations_github_repository_benefit:integrations.github_repository_benefit.user_repositories"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/integrations/github_repository_benefit/installation/install": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Integrations.Github Repository Benefit.Installation Install */
        get: operations["integrations_github_repository_benefit:integrations.github_repository_benefit.installation_install"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/integrations/github_repository_benefit/installation/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Integrations.Github Repository Benefit.Installation Callback */
        get: operations["integrations_github_repository_benefit:integrations.github_repository_benefit.installation_callback"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/integrations/discord/bot/authorize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Integrations.Discord.Bot Authorize */
        get: operations["integrations_discord:integrations.discord.bot_authorize"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/integrations/discord/bot/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Integrations.Discord.Bot Callback */
        get: operations["integrations_discord:integrations.discord.bot_callback"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/integrations/discord/guild/lookup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Discord Guild Lookup */
        get: operations["integrations_discord:discord_guild_lookup"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/backoffice/pledges": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Pledges */
        get: operations["backoffice:pledges"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/backoffice/rewards/by_issue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Rewards */
        get: operations["backoffice:rewards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/backoffice/rewards/pending": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Rewards Pending */
        get: operations["backoffice:rewards_pending"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/backoffice/issue/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Issue */
        get: operations["backoffice:issue"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/backoffice/pledges/approve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Pledge Reward Transfer */
        post: operations["backoffice:pledge_reward_transfer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/backoffice/pledges/create_invoice/{pledge_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Pledge Create Invoice */
        post: operations["backoffice:pledge_create_invoice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/backoffice/pledges/mark_disputed/{pledge_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Pledge Mark Disputed */
        post: operations["backoffice:pledge_mark_disputed"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/backoffice/badge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Manage Badge */
        post: operations["backoffice:manage_badge"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/backoffice/update_badge_contents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update Badge Contents */
        post: operations["backoffice:update_badge_contents"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/dashboard/personal": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Personal Dashboard */
        get: operations["dashboard:get_personal_dashboard"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/dashboard/organization/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Dashboard */
        get: operations["dashboard:get_dashboard"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/dashboard/dummy_do_not_use": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Dummy Do Not Use */
        get: operations["dashboard:dummy_do_not_use"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/funding/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search */
        get: operations["funding:search"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/funding/lookup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Lookup */
        get: operations["funding:lookup"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/magic_link/request": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Magic Link.Request */
        post: operations["magic_link:magic_link.request"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/magic_link/authenticate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Magic Link.Authenticate */
        post: operations["magic_link:magic_link.authenticate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/notifications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get */
        get: operations["notifications:get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/notifications/read": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Mark Read */
        post: operations["notifications:mark_read"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/external_organizations/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List External Organizations
         * @description List external organizations.
         */
        get: operations["external_organizations:list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/repositories/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Repositories
         * @description List repositories.
         */
        get: operations["repositories:list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/repositories/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Repository
         * @description Get a repository by ID.
         */
        get: operations["repositories:get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Repository
         * @description Update a repository.
         */
        patch: operations["repositories:update"];
        trace?: never;
    };
    "/v1/rewards/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search rewards
         * @description Search rewards.
         */
        get: operations["rewards:search"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/rewards/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get rewards summary
         * @description Get summary of rewards for resource.
         */
        get: operations["rewards:summary"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/personal_access_tokens/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Personal Access Tokens
         * @description List personal access tokens.
         */
        get: operations["personal_access_token:list_personal_access_tokens"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/personal_access_tokens/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Personal Access Token */
        delete: operations["personal_access_token:delete_personal_access_token"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payment_methods": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List */
        get: operations["payment_methods:list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payment_methods/{id}/detach": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Detach */
        post: operations["payment_methods:detach"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/accounts/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search */
        get: operations["accounts:search"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/accounts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get */
        get: operations["accounts:get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/accounts/{id}/onboarding_link": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Onboarding Link */
        post: operations["accounts:onboarding_link"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/accounts/{id}/dashboard_link": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Dashboard Link */
        post: operations["accounts:dashboard_link"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create */
        post: operations["accounts:create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issues/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Issues
         * @description List issues.
         */
        get: operations["issues:list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issues/lookup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Lookup */
        get: operations["issues:lookup"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issues/{id}/body": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Body */
        get: operations["issues:get_body"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issues/for_you": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** For You */
        get: operations["issues:for_you"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issues/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get issue
         * @description Get issue
         */
        get: operations["issues:get"];
        put?: never;
        /**
         * Update issue.
         * @description Update issue. Requires authentication.
         */
        post: operations["issues:update"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issues/{id}/confirm_solved": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Mark an issue as confirmed solved.
         * @description Mark an issue as confirmed solved, and configure issue reward splits. Enables payouts of pledges. Can only be done once per issue. Requires authentication.
         */
        post: operations["issues:confirm"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issues/{id}/add_badge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add Polar Badge */
        post: operations["issues:add_polar_badge"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issues/{id}/remove_badge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Remove Polar Badge */
        post: operations["issues:remove_polar_badge"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issues/{id}/comment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add Issue Comment */
        post: operations["issues:add_issue_comment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issues/{id}/badge_with_message": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Badge With Message */
        post: operations["issues:badge_with_message"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/pledges/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search pledges
         * @description Search pledges. Requires authentication. The user can only read pledges that they have made (personally or via an organization) or received (to organizations that they are a member of).
         */
        get: operations["pledges:search"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/pledges/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get pledges summary
         * @description Get summary of pledges for resource.
         */
        get: operations["pledges:summary"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/pledges/spending": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user spending
         * @description Get current user spending in the current period. Used together with spending limits.
         */
        get: operations["pledges:spending"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/pledges/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get pledge
         * @description Get a pledge. Requires authentication.
         */
        get: operations["pledges:get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/pledges": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create
         * @description Creates a pledge from a payment intent
         */
        post: operations["pledges:create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/pledges/pay_on_completion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Pay On Completion
         * @description Creates a pay_on_completion type of pledge
         */
        post: operations["pledges:create_pay_on_completion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/pledges/{id}/create_invoice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Invoice
         * @description Creates an invoice for pay_on_completion pledges
         */
        post: operations["pledges:create_invoice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/pledges/payment_intent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Payment Intent */
        post: operations["pledges:create_payment_intent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/pledges/payment_intent/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update Payment Intent */
        patch: operations["pledges:update_payment_intent"];
        trace?: never;
    };
    "/v1/pledges/{pledge_id}/dispute": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Dispute Pledge */
        post: operations["pledges:dispute_pledge"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/organizations/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Organizations
         * @description List organizations.
         */
        get: operations["organizations:list"];
        put?: never;
        /**
         * Create Organization
         * @description Create an organization.
         */
        post: operations["organizations:create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/organizations/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Organization
         * @description Get an organization by ID.
         */
        get: operations["organizations:get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Organization
         * @description Update an organization.
         */
        patch: operations["organizations:update"];
        trace?: never;
    };
    "/v1/organizations/{id}/account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Organization Account
         * @description Get the account for an organization.
         */
        get: operations["organizations:get_account"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Set Organization Account
         * @description Set the account for an organization.
         */
        patch: operations["organizations:set_account"];
        trace?: never;
    };
    "/v1/organizations/{id}/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Members
         * @description List members in an organization.
         */
        get: operations["organizations:members"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/organizations/{id}/stripe_customer_portal": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Stripe Customer Portal
         * @description Create a new Stripe Customer session for a organization.
         */
        post: operations["organizations:create_stripe_customer_portal"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/organizations/{id}/badge_settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Badge Settings
         * @description Get badge settings for an organization.
         */
        get: operations["organizations:get_badge_settings"];
        put?: never;
        /**
         * Update Badge Settings
         * @description Update badge settings for an organization.
         */
        post: operations["organizations:update_badge_settings"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/subscriptions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Subscriptions
         * @description List subscriptions.
         */
        get: operations["subscriptions:list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/subscriptions/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Export Subscriptions
         * @description Export subscriptions as a CSV file.
         */
        get: operations["subscriptions:export"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/subscriptions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Subscription
         * @description Get a subscription by ID.
         */
        get: operations["subscriptions:get"];
        put?: never;
        post?: never;
        /**
         * Revoke Subscription
         * @description Revoke a subscription, i.e cancel immediately.
         */
        delete: operations["subscriptions:revoke"];
        options?: never;
        head?: never;
        /**
         * Update Subscription
         * @description Update a subscription.
         */
        patch: operations["subscriptions:update"];
        trace?: never;
    };
    "/v1/transactions/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search Transactions */
        get: operations["transactions:search_transactions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/transactions/lookup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Lookup Transaction */
        get: operations["transactions:lookup_transaction"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/transactions/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Summary */
        get: operations["transactions:get_summary"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/transactions/payouts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Payout Estimate */
        get: operations["transactions:get_payout_estimate"];
        put?: never;
        /** Create Payout */
        post: operations["transactions:create_payout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/transactions/payouts/{id}/csv": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Payout Csv */
        get: operations["transactions:get_payout_csv"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/advertisements/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Campaigns
         * @description List active advertisement campaigns for a benefit.
         */
        get: operations["advertisements:list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/advertisements/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Campaign
         * @description Get an advertisement campaign by ID.
         */
        get: operations["advertisements:get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/advertisements/{id}/view": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Track View
         * @description Track a view on an advertisement campaign.
         */
        post: operations["advertisements:track_view"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Logout */
        get: operations["auth:logout"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/oauth2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Clients
         * @description List OAuth2 clients.
         */
        get: operations["oauth2:clients:list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/oauth2/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Client
         * @description Create an OAuth2 client.
         */
        post: operations["oauth2:clients:oauth2:create_client"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/oauth2/register/{client_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Client
         * @description Get an OAuth2 client by Client ID.
         */
        get: operations["oauth2:clients:oauth2:get_client"];
        /**
         * Update Client
         * @description Update an OAuth2 client.
         */
        put: operations["oauth2:clients:oauth2:update_client"];
        post?: never;
        /**
         * Delete Client
         * @description Delete an OAuth2 client.
         */
        delete: operations["oauth2:clients:oauth2:delete_client"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/oauth2/authorize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Authorize */
        get: operations["oauth2:authorize"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/oauth2/consent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Consent */
        post: operations["oauth2:consent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/oauth2/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Request Token
         * @description Request an access token using a valid grant.
         */
        post: operations["oauth2:request_token"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/oauth2/revoke": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Revoke Token
         * @description Revoke an access token or a refresh token.
         */
        post: operations["oauth2:revoke_token"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/oauth2/introspect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Introspect Token
         * @description Get information about an access token.
         */
        post: operations["oauth2:introspect_token"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/oauth2/userinfo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Info
         * @description Get information about the authenticated user.
         */
        get: operations["oauth2:userinfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/benefits/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Benefits
         * @description List benefits.
         */
        get: operations["benefits:list"];
        put?: never;
        /**
         * Create Benefit
         * @description Create a benefit.
         */
        post: operations["benefits:create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/benefits/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Benefit
         * @description Get a benefit by ID.
         */
        get: operations["benefits:get"];
        put?: never;
        post?: never;
        /**
         * Delete Benefit
         * @description Delete a benefit.
         *
         *     > [!WARNING]
         *     > Every grants associated with the benefit will be revoked.
         *     > Users will lose access to the benefit.
         */
        delete: operations["benefits:delete"];
        options?: never;
        head?: never;
        /**
         * Update Benefit
         * @description Update a benefit.
         */
        patch: operations["benefits:update"];
        trace?: never;
    };
    "/v1/benefits/{id}/grants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Benefit Grants
         * @description List the individual grants for a benefit.
         *
         *     It's especially useful to check if a user has been granted a benefit.
         */
        get: operations["benefits:grants"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/webhooks/endpoints": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Webhook Endpoints
         * @description List webhook endpoints.
         */
        get: operations["webhooks:list_webhook_endpoints"];
        put?: never;
        /**
         * Create Webhook Endpoint
         * @description Create a webhook endpoint.
         */
        post: operations["webhooks:create_webhook_endpoint"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/webhooks/endpoints/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Webhook Endpoint
         * @description Get a webhook endpoint by ID.
         */
        get: operations["webhooks:get_webhook_endpoint"];
        put?: never;
        post?: never;
        /**
         * Delete Webhook Endpoint
         * @description Delete a webhook endpoint.
         */
        delete: operations["webhooks:delete_webhook_endpoint"];
        options?: never;
        head?: never;
        /**
         * Update Webhook Endpoint
         * @description Update a webhook endpoint.
         */
        patch: operations["webhooks:update_webhook_endpoint"];
        trace?: never;
    };
    "/v1/webhooks/deliveries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Webhook Deliveries
         * @description List webhook deliveries.
         *
         *     Deliveries are all the attempts to deliver a webhook event to an endpoint.
         */
        get: operations["webhooks:list_webhook_deliveries"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/webhooks/events/{id}/redeliver": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Redeliver Webhook Event
         * @description Schedule the re-delivery of a webhook event.
         */
        post: operations["webhooks:redeliver_webhook_event"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/products/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Products
         * @description List products.
         */
        get: operations["products:list"];
        put?: never;
        /**
         * Create Product
         * @description Create a product.
         */
        post: operations["products:create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/products/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Product
         * @description Get a product by ID.
         */
        get: operations["products:get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Product
         * @description Update a product.
         */
        patch: operations["products:update"];
        trace?: never;
    };
    "/v1/products/{id}/benefits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update Product Benefits
         * @description Update benefits granted by a product.
         */
        post: operations["products:update_benefits"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orders/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Orders
         * @description List orders.
         */
        get: operations["orders:list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orders/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Order
         * @description Get an order by ID.
         */
        get: operations["orders:get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orders/{id}/invoice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Order Invoice
         * @description Get an order's invoice data.
         */
        get: operations["orders:invoice"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/refunds/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Refunds
         * @description List products.
         */
        get: operations["refunds:list"];
        put?: never;
        /**
         * Create Refund
         * @description Create a refund.
         */
        post: operations["refunds:create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/checkouts/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Checkout Sessions
         * @description List checkout sessions.
         */
        get: operations["checkouts:list"];
        put?: never;
        /**
         * Create Checkout Session
         * @description Create a checkout session.
         */
        post: operations["checkouts:create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/checkouts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Checkout Session
         * @description Get a checkout session by ID.
         */
        get: operations["checkouts:get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Checkout Session
         * @description Update a checkout session.
         */
        patch: operations["checkouts:update"];
        trace?: never;
    };
    "/v1/checkouts/client/{client_secret}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Checkout Session from Client
         * @description Get a checkout session by client secret.
         */
        get: operations["checkouts:client_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Checkout Session from Client
         * @description Update a checkout session by client secret.
         */
        patch: operations["checkouts:client_update"];
        trace?: never;
    };
    "/v1/checkouts/client/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Checkout Session from Client
         * @description Create a checkout session from a client. Suitable to build checkout links.
         */
        post: operations["checkouts:client_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/checkouts/client/{client_secret}/confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Confirm Checkout Session from Client
         * @description Confirm a checkout session by client secret.
         *
         *     Orders and subscriptions will be processed.
         */
        post: operations["checkouts:client_confirm"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/files/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Files
         * @description List files.
         */
        get: operations["files:list"];
        put?: never;
        /**
         * Create File
         * @description Create a file.
         */
        post: operations["files:create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/files/{id}/uploaded": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Complete File Upload
         * @description Complete a file upload.
         */
        post: operations["files:uploaded"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/files/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete File
         * @description Delete a file.
         */
        delete: operations["files:delete"];
        options?: never;
        head?: never;
        /**
         * Update File
         * @description Update a file.
         */
        patch: operations["files:update"];
        trace?: never;
    };
    "/v1/metrics/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Metrics
         * @description Get metrics about your orders and subscriptions.
         */
        get: operations["metrics:get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/metrics/limits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Metrics Limits
         * @description Get the interval limits for the metrics endpoint.
         */
        get: operations["metrics:limits"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/integrations/google/authorize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Integrations.Google.Authorize */
        get: operations["integrations_google:integrations.google.authorize"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/integrations/google/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Integrations.Google.Callback */
        get: operations["integrations_google:integrations.google.callback"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/license-keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List License Keys
         * @description Get license keys connected to the given organization & filters.
         */
        get: operations["license_keys:list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/license-keys/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get License Key
         * @description Get a license key.
         */
        get: operations["license_keys:get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update License Key
         * @description Update a license key.
         */
        patch: operations["license_keys:update"];
        trace?: never;
    };
    "/v1/license-keys/{id}/activations/{activation_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Activation
         * @description Get a license key activation.
         */
        get: operations["license_keys:get_activation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/checkout-links/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Checkout Links
         * @description List checkout links.
         */
        get: operations["checkout-links:list"];
        put?: never;
        /**
         * Create Checkout Link
         * @description Create a checkout link.
         */
        post: operations["checkout-links:create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/checkout-links/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Checkout Link
         * @description Get a checkout link by ID.
         */
        get: operations["checkout-links:get"];
        put?: never;
        post?: never;
        /**
         * Delete Checkout Link
         * @description Delete a checkout link.
         */
        delete: operations["checkout-links:delete"];
        options?: never;
        head?: never;
        /**
         * Update Checkout Link
         * @description Update a checkout link.
         */
        patch: operations["checkout-links:update"];
        trace?: never;
    };
    "/v1/storefronts/{slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Organization Storefront
         * @description Get an organization storefront by slug.
         */
        get: operations["storefronts:get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/custom-fields/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Custom Fields
         * @description List custom fields.
         */
        get: operations["custom-fields:list"];
        put?: never;
        /**
         * Create Custom Field
         * @description Create a custom field.
         */
        post: operations["custom-fields:create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/custom-fields/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Custom Field
         * @description Get a custom field by ID.
         */
        get: operations["custom-fields:get"];
        put?: never;
        post?: never;
        /**
         * Delete Custom Field
         * @description Delete a custom field.
         */
        delete: operations["custom-fields:delete"];
        options?: never;
        head?: never;
        /**
         * Update Custom Field
         * @description Update a custom field.
         */
        patch: operations["custom-fields:update"];
        trace?: never;
    };
    "/v1/embed/product/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Product Embed
         * @description Get product card.
         */
        get: operations["embeds:get_product"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/discounts/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Discounts
         * @description List discounts.
         */
        get: operations["discounts:list"];
        put?: never;
        /**
         * Create Discount
         * @description Create a discount.
         */
        post: operations["discounts:create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/discounts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Discount
         * @description Get a discount by ID.
         */
        get: operations["discounts:get"];
        put?: never;
        post?: never;
        /**
         * Delete Discount
         * @description Delete a discount.
         */
        delete: operations["discounts:delete"];
        options?: never;
        head?: never;
        /**
         * Update Discount
         * @description Update a discount.
         */
        patch: operations["discounts:update"];
        trace?: never;
    };
    "/v1/customers/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Customers
         * @description List customers.
         */
        get: operations["customers:list"];
        put?: never;
        /**
         * Create Customer
         * @description Create a customer.
         */
        post: operations["customers:create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customers/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Customer
         * @description Get a customer by ID.
         */
        get: operations["customers:get"];
        put?: never;
        post?: never;
        /**
         * Delete Customer
         * @description Delete a customer.
         *
         *     Immediately cancels any active subscriptions and revokes any active benefits.
         */
        delete: operations["customers:delete"];
        options?: never;
        head?: never;
        /**
         * Update Customer
         * @description Update a customer.
         */
        patch: operations["customers:update"];
        trace?: never;
    };
    "/v1/customer-portal/benefit-grants/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Benefit Grants
         * @description List benefits grants of the authenticated customer or user.
         */
        get: operations["customer_portal:benefit-grants:list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customer-portal/benefit-grants/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Benefit Grant
         * @description Get a benefit grant by ID for the authenticated customer or user.
         */
        get: operations["customer_portal:benefit-grants:get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Benefit Grant
         * @description Update a benefit grant for the authenticated customer or user.
         */
        patch: operations["customer_portal:benefit-grants:update"];
        trace?: never;
    };
    "/v1/customer-portal/customers/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Customer
         * @description Get a customer by ID for the authenticated customer or user.
         */
        get: operations["customer_portal:customers:get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customer-portal/customer-session/request": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Customer Portal.Customer Session.Request */
        post: operations["customer_portal:customer-session:customer_portal.customer_session.request"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customer-portal/customer-session/authenticate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Customer Portal.Customer Session.Authenticate */
        post: operations["customer_portal:customer-session:customer_portal.customer_session.authenticate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customer-portal/downloadables/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Downloadables */
        get: operations["customer_portal:downloadables:list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customer-portal/downloadables/{token}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Downloadable */
        get: operations["customer_portal:downloadables:customer_portal.downloadables.get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customer-portal/license-keys/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List License Keys */
        get: operations["customer_portal:license_keys:list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customer-portal/license-keys/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get License Key
         * @description Get a license key.
         */
        get: operations["customer_portal:license_keys:get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customer-portal/license-keys/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate License Key
         * @description Validate a license key.
         */
        post: operations["customer_portal:license_keys:validate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customer-portal/license-keys/activate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Activate License Key
         * @description Activate a license key instance.
         */
        post: operations["customer_portal:license_keys:activate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customer-portal/license-keys/deactivate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Deactivate License Key
         * @description Deactivate a license key instance.
         */
        post: operations["customer_portal:license_keys:deactivate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customer-portal/oauth-accounts/authorize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Customer Portal.Oauth Accounts.Authorize */
        get: operations["customer_portal:oauth-accounts:customer_portal.oauth_accounts.authorize"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customer-portal/oauth-accounts/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Customer Portal.Oauth Accounts.Callback */
        get: operations["customer_portal:oauth-accounts:customer_portal.oauth_accounts.callback"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customer-portal/orders/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Orders
         * @description List orders of the authenticated customer or user.
         */
        get: operations["customer_portal:orders:list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customer-portal/orders/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Order
         * @description Get an order by ID for the authenticated customer or user.
         */
        get: operations["customer_portal:orders:get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customer-portal/orders/{id}/invoice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Order Invoice
         * @description Get an order's invoice data.
         */
        get: operations["customer_portal:orders:invoice"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customer-portal/organizations/{slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Organization
         * @description Get a customer portal's organization by slug.
         */
        get: operations["customer_portal:organizations:get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customer-portal/subscriptions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Subscriptions
         * @description List subscriptions of the authenticated customer or user.
         */
        get: operations["customer_portal:subscriptions:list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customer-portal/subscriptions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Subscription
         * @description Get a subscription for the authenticated customer or user.
         */
        get: operations["customer_portal:subscriptions:get"];
        put?: never;
        post?: never;
        /**
         * Cancel Subscription
         * @description Cancel a subscription of the authenticated customer or user.
         */
        delete: operations["customer_portal:subscriptions:cancel"];
        options?: never;
        head?: never;
        /**
         * Update Subscription
         * @description Update a subscription of the authenticated customer or user.
         */
        patch: operations["customer_portal:subscriptions:update"];
        trace?: never;
    };
    "/v1/email-update/request": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Request Email Update */
        post: operations["email-update:request_email_update"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/email-update/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Verify Email Update */
        post: operations["email-update:verify_email_update"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customer-sessions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Customer Session
         * @description Create a customer session.
         */
        post: operations["customer-sessions:create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/events/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Events
         * @description List events.
         */
        get: operations["events:list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/events/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Event
         * @description Get an event by ID.
         */
        get: operations["events:get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/events/ingest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Ingest Events
         * @description Ingest batch of events.
         */
        post: operations["events:ingest"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/meters/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Meters
         * @description List meters.
         */
        get: operations["meters:list"];
        put?: never;
        /**
         * Create Meter
         * @description Create a meter.
         */
        post: operations["meters:create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/meters/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Meter
         * @description Get a meter by ID.
         */
        get: operations["meters:get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Meter
         * @description Update a meter.
         */
        patch: operations["meters:update"];
        trace?: never;
    };
    "/v1/meters/{id}/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Meter Events
         * @description Get events matching the filter of a meter.
         */
        get: operations["meters:events"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/meters/{id}/quantities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Meter Quantities
         * @description Get quantities of a meter over a time period.
         */
        get: operations["meters:quantities"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/organization-access-tokens/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List
         * @description List organization access tokens.
         */
        get: operations["organization_access_token:list"];
        put?: never;
        /** Create */
        post: operations["organization_access_token:create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/organization-access-tokens/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete */
        delete: operations["organization_access_token:delete"];
        options?: never;
        head?: never;
        /** Update */
        patch: operations["organization_access_token:update"];
        trace?: never;
    };
}
export interface webhooks {
    "checkout.created": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * checkout.created
         * @description Sent when a new checkout is created.
         *
         *     **Discord & Slack support:** Basic
         */
        post: operations["_endpointcheckout_created_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "checkout.updated": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * checkout.updated
         * @description Sent when a checkout is updated.
         *
         *     **Discord & Slack support:** Basic
         */
        post: operations["_endpointcheckout_updated_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "order.created": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * order.created
         * @description Sent when a new order is created.
         *
         *     **Discord & Slack support:** Full
         */
        post: operations["_endpointorder_created_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "order.refunded": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * order.refunded
         * @description Sent when an order is fully or partially refunded.
         *
         *     **Discord & Slack support:** Full
         */
        post: operations["_endpointorder_refunded_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "subscription.created": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * subscription.created
         * @description Sent when a new subscription is created.
         *
         *     **Discord & Slack support:** Full
         */
        post: operations["_endpointsubscription_created_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "subscription.updated": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * subscription.updated
         * @description Sent when a subscription is updated. This event fires for all changes to the subscription, including renewals.
         *
         *     If you want more specific events, you can listen to `subscription.active`, `subscription.canceled`, and `subscription.revoked`.
         *
         *     To listen specifically for renewals, you can listen to `order.created` events and check the `billing_reason` field.
         *
         *     **Discord & Slack support:** On cancellation and revocation. Renewals are skipped.
         */
        post: operations["_endpointsubscription_updated_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "subscription.active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * subscription.active
         * @description Sent when a subscription becomes active,
         *     whether because it's a new paid subscription or because payment was recovered.
         *
         *     **Discord & Slack support:** Full
         */
        post: operations["_endpointsubscription_active_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "subscription.canceled": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * subscription.canceled
         * @description Sent when a subscription is canceled.
         *     Customers might still have access until the end of the current period.
         *
         *     **Discord & Slack support:** Full
         */
        post: operations["_endpointsubscription_canceled_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "subscription.uncanceled": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * subscription.uncanceled
         * @description Sent when a subscription is uncanceled.
         *
         *     **Discord & Slack support:** Full
         */
        post: operations["_endpointsubscription_uncanceled_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "subscription.revoked": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * subscription.revoked
         * @description Sent when a subscription is revoked, the user looses access immediately.
         *     Happens when the subscription is canceled, or payment is past due.
         *
         *     **Discord & Slack support:** Full
         */
        post: operations["_endpointsubscription_revoked_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "refund.created": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * refund.created
         * @description Sent when a refund is created regardless of status.
         *
         *     **Discord & Slack support:** Full
         */
        post: operations["_endpointrefund_created_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "refund.updated": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * refund.updated
         * @description Sent when a refund is updated.
         *
         *     **Discord & Slack support:** Full
         */
        post: operations["_endpointrefund_updated_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "product.created": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * product.created
         * @description Sent when a new product is created.
         *
         *     **Discord & Slack support:** Basic
         */
        post: operations["_endpointproduct_created_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "product.updated": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * product.updated
         * @description Sent when a product is updated.
         *
         *     **Discord & Slack support:** Basic
         */
        post: operations["_endpointproduct_updated_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "pledge.created": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * pledge.created
         * @description Sent when a new pledge is created. Note that this does mean that the pledge has been paid yet.
         *
         *     **Discord & Slack support:** Full
         */
        post: operations["_endpointpledge_created_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "pledge.updated": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * pledge.updated
         * @description Sent when a pledge is updated.
         *
         *     **Discord & Slack support:** Basic
         */
        post: operations["_endpointpledge_updated_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "organization.updated": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * organization.updated
         * @description Sent when a organization is updated.
         *
         *     **Discord & Slack support:** Basic
         */
        post: operations["_endpointorganization_updated_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "benefit.created": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * benefit.created
         * @description Sent when a new benefit is created.
         *
         *     **Discord & Slack support:** Basic
         */
        post: operations["_endpointbenefit_created_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "benefit.updated": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * benefit.updated
         * @description Sent when a benefit is updated.
         *
         *     **Discord & Slack support:** Basic
         */
        post: operations["_endpointbenefit_updated_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "benefit_grant.created": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * benefit_grant.created
         * @description Sent when a new benefit grant is created.
         *
         *     **Discord & Slack support:** Basic
         */
        post: operations["_endpointbenefit_grant_created_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "benefit_grant.updated": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * benefit_grant.updated
         * @description Sent when a new benefit grant is updated.
         *
         *     **Discord & Slack support:** Basic
         */
        post: operations["_endpointbenefit_grant_updated_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "benefit_grant.revoked": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * benefit_grant.revoked
         * @description Sent when a new benefit grant is revoked.
         *
         *     **Discord & Slack support:** Basic
         */
        post: operations["_endpointbenefit_grant_revoked_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export interface components {
    schemas: {
        /** Account */
        Account: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            account_type: components["schemas"]["AccountType"];
            status: components["schemas"]["Status"];
            /** Stripe Id */
            stripe_id: string | null;
            /** Open Collective Slug */
            open_collective_slug: string | null;
            /** Is Details Submitted */
            is_details_submitted: boolean;
            /** Is Charges Enabled */
            is_charges_enabled: boolean;
            /** Is Payouts Enabled */
            is_payouts_enabled: boolean;
            /** Country */
            country: string;
            /** Users */
            users: components["schemas"]["UserBase"][];
            /** Organizations */
            organizations: components["schemas"]["Organization"][];
        };
        /** AccountCreate */
        AccountCreate: {
            account_type: components["schemas"]["AccountType"];
            /** Open Collective Slug */
            open_collective_slug?: string | null;
            /**
             * Country
             * @description Two letter uppercase country code
             */
            country: string;
        };
        /** AccountLink */
        AccountLink: {
            /** Url */
            url: string;
        };
        /**
         * AccountType
         * @enum {string}
         */
        AccountType: "stripe" | "open_collective";
        /** Address */
        Address: {
            /** Line1 */
            line1?: string | null;
            /** Line2 */
            line2?: string | null;
            /** Postal Code */
            postal_code?: string | null;
            /** City */
            city?: string | null;
            /** State */
            state?: string | null;
            /** Country */
            country: string;
        };
        /** AdvertisementCampaign */
        AdvertisementCampaign: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             */
            id: string;
            /**
             * Image Url
             * Format: uri
             */
            image_url: string;
            /** Image Url Dark */
            image_url_dark: string | null;
            /** Text */
            text: string;
            /**
             * Link Url
             * Format: uri
             */
            link_url: string;
        };
        /** AdvertisementCampaignListResource */
        AdvertisementCampaignListResource: {
            /** Items */
            items: components["schemas"]["AdvertisementCampaign"][];
            pagination: components["schemas"]["Pagination"];
            /**
             * Dimensions
             * @description The dimensions (width, height) in pixels of the advertisement images.
             */
            dimensions: [
                number,
                number
            ];
        };
        /**
         * AdvertisementSortProperty
         * @enum {string}
         */
        AdvertisementSortProperty: "created_at" | "-created_at" | "granted_at" | "-granted_at" | "views" | "-views" | "clicks" | "-clicks";
        /** AlreadyActiveSubscriptionError */
        AlreadyActiveSubscriptionError: {
            /**
             * Error
             * @constant
             */
            error: "AlreadyActiveSubscriptionError";
            /** Detail */
            detail: string;
        };
        /** AlreadyCanceledSubscription */
        AlreadyCanceledSubscription: {
            /**
             * Error
             * @constant
             */
            error: "AlreadyCanceledSubscription";
            /** Detail */
            detail: string;
        };
        /**
         * AppPermissionsType
         * @description App Permissions
         *
         *     The permissions granted to the user access token.
         *
         *     Examples:
         *         {'contents': 'read', 'issues': 'read', 'deployments': 'write', 'single_file':
         *     'read'}
         */
        AppPermissionsType: {
            /**
             * Actions
             * @enum {string}
             */
            actions?: "read" | "write";
            /**
             * Administration
             * @enum {string}
             */
            administration?: "read" | "write";
            /**
             * Checks
             * @enum {string}
             */
            checks?: "read" | "write";
            /**
             * Codespaces
             * @enum {string}
             */
            codespaces?: "read" | "write";
            /**
             * Contents
             * @enum {string}
             */
            contents?: "read" | "write";
            /**
             * Dependabot Secrets
             * @enum {string}
             */
            dependabot_secrets?: "read" | "write";
            /**
             * Deployments
             * @enum {string}
             */
            deployments?: "read" | "write";
            /**
             * Environments
             * @enum {string}
             */
            environments?: "read" | "write";
            /**
             * Issues
             * @enum {string}
             */
            issues?: "read" | "write";
            /**
             * Metadata
             * @enum {string}
             */
            metadata?: "read" | "write";
            /**
             * Packages
             * @enum {string}
             */
            packages?: "read" | "write";
            /**
             * Pages
             * @enum {string}
             */
            pages?: "read" | "write";
            /**
             * Pull Requests
             * @enum {string}
             */
            pull_requests?: "read" | "write";
            /**
             * Repository Custom Properties
             * @enum {string}
             */
            repository_custom_properties?: "read" | "write";
            /**
             * Repository Hooks
             * @enum {string}
             */
            repository_hooks?: "read" | "write";
            /**
             * Repository Projects
             * @enum {string}
             */
            repository_projects?: "read" | "write" | "admin";
            /**
             * Secret Scanning Alerts
             * @enum {string}
             */
            secret_scanning_alerts?: "read" | "write";
            /**
             * Secrets
             * @enum {string}
             */
            secrets?: "read" | "write";
            /**
             * Security Events
             * @enum {string}
             */
            security_events?: "read" | "write";
            /**
             * Single File
             * @enum {string}
             */
            single_file?: "read" | "write";
            /**
             * Statuses
             * @enum {string}
             */
            statuses?: "read" | "write";
            /**
             * Vulnerability Alerts
             * @enum {string}
             */
            vulnerability_alerts?: "read" | "write";
            /**
             * Workflows
             * @constant
             */
            workflows?: "write";
            /**
             * Members
             * @enum {string}
             */
            members?: "read" | "write";
            /**
             * Organization Administration
             * @enum {string}
             */
            organization_administration?: "read" | "write";
            /**
             * Organization Custom Roles
             * @enum {string}
             */
            organization_custom_roles?: "read" | "write";
            /**
             * Organization Custom Org Roles
             * @enum {string}
             */
            organization_custom_org_roles?: "read" | "write";
            /**
             * Organization Custom Properties
             * @enum {string}
             */
            organization_custom_properties?: "read" | "write" | "admin";
            /**
             * Organization Copilot Seat Management
             * @constant
             */
            organization_copilot_seat_management?: "write";
            /**
             * Organization Announcement Banners
             * @enum {string}
             */
            organization_announcement_banners?: "read" | "write";
            /**
             * Organization Events
             * @constant
             */
            organization_events?: "read";
            /**
             * Organization Hooks
             * @enum {string}
             */
            organization_hooks?: "read" | "write";
            /**
             * Organization Personal Access Tokens
             * @enum {string}
             */
            organization_personal_access_tokens?: "read" | "write";
            /**
             * Organization Personal Access Token Requests
             * @enum {string}
             */
            organization_personal_access_token_requests?: "read" | "write";
            /**
             * Organization Plan
             * @constant
             */
            organization_plan?: "read";
            /**
             * Organization Projects
             * @enum {string}
             */
            organization_projects?: "read" | "write" | "admin";
            /**
             * Organization Packages
             * @enum {string}
             */
            organization_packages?: "read" | "write";
            /**
             * Organization Secrets
             * @enum {string}
             */
            organization_secrets?: "read" | "write";
            /**
             * Organization Self Hosted Runners
             * @enum {string}
             */
            organization_self_hosted_runners?: "read" | "write";
            /**
             * Organization User Blocking
             * @enum {string}
             */
            organization_user_blocking?: "read" | "write";
            /**
             * Team Discussions
             * @enum {string}
             */
            team_discussions?: "read" | "write";
            /**
             * Email Addresses
             * @enum {string}
             */
            email_addresses?: "read" | "write";
            /**
             * Followers
             * @enum {string}
             */
            followers?: "read" | "write";
            /**
             * Git Ssh Keys
             * @enum {string}
             */
            git_ssh_keys?: "read" | "write";
            /**
             * Gpg Keys
             * @enum {string}
             */
            gpg_keys?: "read" | "write";
            /**
             * Interaction Limits
             * @enum {string}
             */
            interaction_limits?: "read" | "write";
            /**
             * Profile
             * @constant
             */
            profile?: "write";
            /**
             * Starring
             * @enum {string}
             */
            starring?: "read" | "write";
        };
        /** Assignee */
        Assignee: {
            /** Id */
            id: number;
            /** Login */
            login: string;
            /**
             * Html Url
             * Format: uri
             */
            html_url: string;
            /**
             * Avatar Url
             * Format: uri
             */
            avatar_url: string;
        };
        /**
         * AttachedCustomField
         * @description Schema of a custom field attached to a resource.
         */
        AttachedCustomField: {
            /**
             * Custom Field Id
             * Format: uuid4
             * @description ID of the custom field.
             */
            custom_field_id: string;
            /** CustomField */
            custom_field: components["schemas"]["CustomField"];
            /**
             * Order
             * @description Order of the custom field in the resource.
             */
            order: number;
            /**
             * Required
             * @description Whether the value is required for this custom field.
             */
            required: boolean;
        };
        /**
         * AttachedCustomFieldCreate
         * @description Schema to attach a custom field to a resource.
         */
        AttachedCustomFieldCreate: {
            /**
             * Custom Field Id
             * Format: uuid4
             * @description ID of the custom field to attach.
             */
            custom_field_id: string;
            /**
             * Required
             * @description Whether the value is required for this custom field.
             */
            required: boolean;
        };
        /** Author */
        Author: {
            /** Id */
            id: number;
            /** Login */
            login: string;
            /**
             * Html Url
             * Format: uri
             */
            html_url: string;
            /**
             * Avatar Url
             * Format: uri
             */
            avatar_url: string;
        };
        /** AuthorizeOrganization */
        AuthorizeOrganization: {
            /**
             * Id
             * Format: uuid4
             */
            id: string;
            /** Slug */
            slug: string;
            /** Avatar Url */
            avatar_url: string | null;
        };
        /** AuthorizeResponse */
        AuthorizeResponse: {
            /** Url */
            url: string;
        };
        /** AuthorizeResponseOrganization */
        AuthorizeResponseOrganization: {
            client: components["schemas"]["OAuth2ClientPublic"];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            sub_type: "organization";
            sub: components["schemas"]["AuthorizeOrganization"] | null;
            /** Scopes */
            scopes: components["schemas"]["Scope"][];
            /** Organizations */
            organizations: components["schemas"]["AuthorizeOrganization"][];
        };
        /** AuthorizeResponseUser */
        AuthorizeResponseUser: {
            client: components["schemas"]["OAuth2ClientPublic"];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            sub_type: "user";
            sub: components["schemas"]["AuthorizeUser"] | null;
            /** Scopes */
            scopes: components["schemas"]["Scope"][];
        };
        /** AuthorizeUser */
        AuthorizeUser: {
            /**
             * Id
             * Format: uuid4
             */
            id: string;
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Avatar Url */
            avatar_url: string | null;
        };
        /**
         * AvailableScope
         * @enum {string}
         */
        AvailableScope: "openid" | "profile" | "email" | "user:read" | "organizations:read" | "organizations:write" | "custom_fields:read" | "custom_fields:write" | "discounts:read" | "discounts:write" | "checkout_links:read" | "checkout_links:write" | "checkouts:read" | "checkouts:write" | "products:read" | "products:write" | "benefits:read" | "benefits:write" | "events:read" | "events:write" | "meters:read" | "meters:write" | "files:read" | "files:write" | "subscriptions:read" | "subscriptions:write" | "customers:read" | "customers:write" | "customer_sessions:write" | "orders:read" | "refunds:read" | "refunds:write" | "metrics:read" | "webhooks:read" | "webhooks:write" | "external_organizations:read" | "license_keys:read" | "license_keys:write" | "repositories:read" | "repositories:write" | "issues:read" | "issues:write" | "customer_portal:read" | "customer_portal:write";
        /** BackofficeBadge */
        BackofficeBadge: {
            /** Org Slug */
            org_slug: string;
            /** Repo Slug */
            repo_slug: string;
            /** Issue Number */
            issue_number: number;
            /**
             * Action
             * @enum {string}
             */
            action: "embed" | "remove";
        };
        /** BackofficeBadgeResponse */
        BackofficeBadgeResponse: {
            /** Org Slug */
            org_slug: string;
            /** Repo Slug */
            repo_slug: string;
            /** Issue Number */
            issue_number: number;
            /**
             * Action
             * @enum {string}
             */
            action: "embed" | "remove";
            /** Success */
            success: boolean;
        };
        /** BackofficePledge */
        BackofficePledge: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /**
             * Amount
             * @description Amount pledged towards the issue
             */
            amount: number;
            /** Currency */
            currency: string;
            /** @description Current state of the pledge */
            state: components["schemas"]["PledgeState"];
            /** @description Type of pledge */
            type: components["schemas"]["PledgeType"];
            /**
             * Refunded At
             * @description If and when the pledge was refunded to the pledger
             */
            refunded_at?: string | null;
            /**
             * Scheduled Payout At
             * @description When the payout is scheduled to be made to the maintainers behind the issue. Disputes must be made before this date.
             */
            scheduled_payout_at?: string | null;
            /** @description The issue that the pledge was made towards */
            issue: components["schemas"]["Issue"];
            /** @description The user or organization that made this pledge */
            pledger?: components["schemas"]["Pledger"] | null;
            /**
             * Hosted Invoice Url
             * @description URL of invoice for this pledge
             */
            hosted_invoice_url?: string | null;
            /**
             * Authed Can Admin Sender
             * @description If the currently authenticated subject can perform admin actions on behalf of the maker of the peldge
             * @default false
             */
            authed_can_admin_sender: boolean;
            /**
             * Authed Can Admin Received
             * @description If the currently authenticated subject can perform admin actions on behalf of the receiver of the peldge
             * @default false
             */
            authed_can_admin_received: boolean;
            /** @description For pledges made by an organization, or on behalf of an organization. This is the user that made the pledge. Only visible for members of said organization. */
            created_by?: components["schemas"]["Pledger"] | null;
            /** Payment Id */
            payment_id: string | null;
            /** Dispute Reason */
            dispute_reason: string | null;
            /** Disputed By User Id */
            disputed_by_user_id: string | null;
            /** Disputed At */
            disputed_at: string | null;
            /** Pledger Email */
            pledger_email: string | null;
        };
        /** BackofficeReward */
        BackofficeReward: {
            /** @description The pledge that the reward was split from */
            pledge: components["schemas"]["Pledge"];
            /** @description The user that received the reward (if any) */
            user?: components["schemas"]["User"] | null;
            /** @description The organization that received the reward (if any) */
            organization?: components["schemas"]["Organization"] | null;
            amount: components["schemas"]["CurrencyAmount"];
            state: components["schemas"]["RewardState"];
            /**
             * Paid At
             * @description If and when the reward was paid out.
             */
            paid_at?: string | null;
            /** Transfer Id */
            transfer_id: string | null;
            /**
             * Issue Reward Id
             * Format: uuid
             */
            issue_reward_id: string;
            /** Pledge Payment Id */
            pledge_payment_id: string | null;
            /** Pledger Email */
            pledger_email: string | null;
        };
        Benefit: components["schemas"]["BenefitAds"] | components["schemas"]["BenefitCustom"] | components["schemas"]["BenefitDiscord"] | components["schemas"]["BenefitGitHubRepository"] | components["schemas"]["BenefitDownloadables"] | components["schemas"]["BenefitLicenseKeys"];
        /**
         * BenefitAds
         * @description A benefit of type `ads`.
         *
         *     Use it so your backers can display ads on your README, website, etc.
         */
        BenefitAds: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the benefit.
             */
            id: string;
            /**
             * Type
             * @constant
             */
            type: "ads";
            /**
             * Description
             * @description The description of the benefit.
             */
            description: string;
            /**
             * Selectable
             * @description Whether the benefit is selectable when creating a product.
             */
            selectable: boolean;
            /**
             * Deletable
             * @description Whether the benefit is deletable.
             */
            deletable: boolean;
            /**
             * Organization Id
             * Format: uuid4
             * @description The ID of the organization owning the benefit.
             */
            organization_id: string;
            properties: components["schemas"]["BenefitAdsProperties"];
        };
        /** BenefitAdsCreate */
        BenefitAdsCreate: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "ads";
            /**
             * Description
             * @description The description of the benefit. Will be displayed on products having this benefit.
             */
            description: string;
            /**
             * Organization Id
             * @description The ID of the organization owning the benefit. **Required unless you use an organization token.**
             */
            organization_id?: string | null;
            properties: components["schemas"]["BenefitAdsProperties"];
        };
        /**
         * BenefitAdsProperties
         * @description Properties for a benefit of type `ads`.
         */
        BenefitAdsProperties: {
            /**
             * Image Height
             * @description The height of the displayed ad.
             * @default 400
             */
            image_height: number;
            /**
             * Image Width
             * @description The width of the displayed ad.
             * @default 400
             */
            image_width: number;
        };
        /** BenefitAdsSubscriber */
        BenefitAdsSubscriber: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the benefit.
             */
            id: string;
            /**
             * Type
             * @constant
             */
            type: "ads";
            /**
             * Description
             * @description The description of the benefit.
             */
            description: string;
            /**
             * Selectable
             * @description Whether the benefit is selectable when creating a product.
             */
            selectable: boolean;
            /**
             * Deletable
             * @description Whether the benefit is deletable.
             */
            deletable: boolean;
            /**
             * Organization Id
             * Format: uuid4
             * @description The ID of the organization owning the benefit.
             */
            organization_id: string;
            organization: components["schemas"]["Organization"];
            properties: components["schemas"]["BenefitAdsProperties"];
        };
        /** BenefitAdsUpdate */
        BenefitAdsUpdate: {
            /**
             * Description
             * @description The description of the benefit. Will be displayed on products having this benefit.
             */
            description?: string | null;
            /**
             * Type
             * @constant
             */
            type: "ads";
            properties?: components["schemas"]["BenefitAdsProperties"] | null;
        };
        /** BenefitBase */
        BenefitBase: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the benefit.
             */
            id: string;
            /** @description The type of the benefit. */
            type: components["schemas"]["BenefitType"];
            /**
             * Description
             * @description The description of the benefit.
             */
            description: string;
            /**
             * Selectable
             * @description Whether the benefit is selectable when creating a product.
             */
            selectable: boolean;
            /**
             * Deletable
             * @description Whether the benefit is deletable.
             */
            deletable: boolean;
            /**
             * Organization Id
             * Format: uuid4
             * @description The ID of the organization owning the benefit.
             */
            organization_id: string;
        };
        BenefitCreate: components["schemas"]["BenefitCustomCreate"] | components["schemas"]["BenefitAdsCreate"] | components["schemas"]["BenefitDiscordCreate"] | components["schemas"]["BenefitGitHubRepositoryCreate"] | components["schemas"]["BenefitDownloadablesCreate"] | components["schemas"]["BenefitLicenseKeysCreate"];
        /**
         * BenefitCustom
         * @description A benefit of type `custom`.
         *
         *     Use it to grant any kind of benefit that doesn't fit in the other types.
         */
        BenefitCustom: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the benefit.
             */
            id: string;
            /**
             * Type
             * @constant
             */
            type: "custom";
            /**
             * Description
             * @description The description of the benefit.
             */
            description: string;
            /**
             * Selectable
             * @description Whether the benefit is selectable when creating a product.
             */
            selectable: boolean;
            /**
             * Deletable
             * @description Whether the benefit is deletable.
             */
            deletable: boolean;
            /**
             * Organization Id
             * Format: uuid4
             * @description The ID of the organization owning the benefit.
             */
            organization_id: string;
            properties: components["schemas"]["BenefitCustomProperties"];
            /**
             * Is Tax Applicable
             * @deprecated
             */
            is_tax_applicable: boolean;
        };
        /**
         * BenefitCustomCreate
         * @description Schema to create a benefit of type `custom`.
         */
        BenefitCustomCreate: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "custom";
            /**
             * Description
             * @description The description of the benefit. Will be displayed on products having this benefit.
             */
            description: string;
            /**
             * Organization Id
             * @description The ID of the organization owning the benefit. **Required unless you use an organization token.**
             */
            organization_id?: string | null;
            properties: components["schemas"]["BenefitCustomCreateProperties"];
        };
        /**
         * BenefitCustomCreateProperties
         * @description Properties for creating a benefit of type `custom`.
         */
        BenefitCustomCreateProperties: {
            /** Note */
            note?: (string | null) | null;
        };
        /**
         * BenefitCustomProperties
         * @description Properties for a benefit of type `custom`.
         */
        BenefitCustomProperties: {
            /** Note */
            note: (string | null) | null;
        };
        /** BenefitCustomSubscriber */
        BenefitCustomSubscriber: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the benefit.
             */
            id: string;
            /**
             * Type
             * @constant
             */
            type: "custom";
            /**
             * Description
             * @description The description of the benefit.
             */
            description: string;
            /**
             * Selectable
             * @description Whether the benefit is selectable when creating a product.
             */
            selectable: boolean;
            /**
             * Deletable
             * @description Whether the benefit is deletable.
             */
            deletable: boolean;
            /**
             * Organization Id
             * Format: uuid4
             * @description The ID of the organization owning the benefit.
             */
            organization_id: string;
            organization: components["schemas"]["Organization"];
            properties: components["schemas"]["BenefitCustomSubscriberProperties"];
        };
        /**
         * BenefitCustomSubscriberProperties
         * @description Properties available to subscribers for a benefit of type `custom`.
         */
        BenefitCustomSubscriberProperties: {
            /** Note */
            note: (string | null) | null;
        };
        /** BenefitCustomUpdate */
        BenefitCustomUpdate: {
            /**
             * Description
             * @description The description of the benefit. Will be displayed on products having this benefit.
             */
            description?: string | null;
            /**
             * Type
             * @constant
             */
            type: "custom";
            properties?: components["schemas"]["BenefitCustomProperties"] | null;
        };
        /**
         * BenefitDiscord
         * @description A benefit of type `discord`.
         *
         *     Use it to automatically invite your backers to a Discord server.
         */
        BenefitDiscord: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the benefit.
             */
            id: string;
            /**
             * Type
             * @constant
             */
            type: "discord";
            /**
             * Description
             * @description The description of the benefit.
             */
            description: string;
            /**
             * Selectable
             * @description Whether the benefit is selectable when creating a product.
             */
            selectable: boolean;
            /**
             * Deletable
             * @description Whether the benefit is deletable.
             */
            deletable: boolean;
            /**
             * Organization Id
             * Format: uuid4
             * @description The ID of the organization owning the benefit.
             */
            organization_id: string;
            properties: components["schemas"]["BenefitDiscordProperties"];
        };
        /** BenefitDiscordCreate */
        BenefitDiscordCreate: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "discord";
            /**
             * Description
             * @description The description of the benefit. Will be displayed on products having this benefit.
             */
            description: string;
            /**
             * Organization Id
             * @description The ID of the organization owning the benefit. **Required unless you use an organization token.**
             */
            organization_id?: string | null;
            properties: components["schemas"]["BenefitDiscordCreateProperties"];
        };
        /**
         * BenefitDiscordCreateProperties
         * @description Properties to create a benefit of type `discord`.
         */
        BenefitDiscordCreateProperties: {
            /** Guild Token */
            guild_token: string;
            /**
             * Role Id
             * @description The ID of the Discord role to grant.
             */
            role_id: string;
        };
        /**
         * BenefitDiscordProperties
         * @description Properties for a benefit of type `discord`.
         */
        BenefitDiscordProperties: {
            /**
             * Guild Id
             * @description The ID of the Discord server.
             */
            guild_id: string;
            /**
             * Role Id
             * @description The ID of the Discord role to grant.
             */
            role_id: string;
            /** Guild Token */
            readonly guild_token: string;
        };
        /** BenefitDiscordSubscriber */
        BenefitDiscordSubscriber: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the benefit.
             */
            id: string;
            /**
             * Type
             * @constant
             */
            type: "discord";
            /**
             * Description
             * @description The description of the benefit.
             */
            description: string;
            /**
             * Selectable
             * @description Whether the benefit is selectable when creating a product.
             */
            selectable: boolean;
            /**
             * Deletable
             * @description Whether the benefit is deletable.
             */
            deletable: boolean;
            /**
             * Organization Id
             * Format: uuid4
             * @description The ID of the organization owning the benefit.
             */
            organization_id: string;
            organization: components["schemas"]["Organization"];
            properties: components["schemas"]["BenefitDiscordSubscriberProperties"];
        };
        /**
         * BenefitDiscordSubscriberProperties
         * @description Properties available to subscribers for a benefit of type `discord`.
         */
        BenefitDiscordSubscriberProperties: {
            /**
             * Guild Id
             * @description The ID of the Discord server.
             */
            guild_id: string;
        };
        /** BenefitDiscordUpdate */
        BenefitDiscordUpdate: {
            /**
             * Description
             * @description The description of the benefit. Will be displayed on products having this benefit.
             */
            description?: string | null;
            /**
             * Type
             * @constant
             */
            type: "discord";
            properties?: components["schemas"]["BenefitDiscordCreateProperties"] | null;
        };
        /** BenefitDownloadables */
        BenefitDownloadables: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the benefit.
             */
            id: string;
            /**
             * Type
             * @constant
             */
            type: "downloadables";
            /**
             * Description
             * @description The description of the benefit.
             */
            description: string;
            /**
             * Selectable
             * @description Whether the benefit is selectable when creating a product.
             */
            selectable: boolean;
            /**
             * Deletable
             * @description Whether the benefit is deletable.
             */
            deletable: boolean;
            /**
             * Organization Id
             * Format: uuid4
             * @description The ID of the organization owning the benefit.
             */
            organization_id: string;
            properties: components["schemas"]["BenefitDownloadablesProperties"];
        };
        /** BenefitDownloadablesCreate */
        BenefitDownloadablesCreate: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "downloadables";
            /**
             * Description
             * @description The description of the benefit. Will be displayed on products having this benefit.
             */
            description: string;
            /**
             * Organization Id
             * @description The ID of the organization owning the benefit. **Required unless you use an organization token.**
             */
            organization_id?: string | null;
            properties: components["schemas"]["BenefitDownloadablesCreateProperties"];
        };
        /** BenefitDownloadablesCreateProperties */
        BenefitDownloadablesCreateProperties: {
            /**
             * Archived
             * @default {}
             */
            archived: {
                [key: string]: boolean;
            };
            /** Files */
            files: string[];
        };
        /** BenefitDownloadablesProperties */
        BenefitDownloadablesProperties: {
            /** Archived */
            archived: {
                [key: string]: boolean;
            };
            /** Files */
            files: string[];
        };
        /** BenefitDownloadablesSubscriber */
        BenefitDownloadablesSubscriber: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the benefit.
             */
            id: string;
            /**
             * Type
             * @constant
             */
            type: "downloadables";
            /**
             * Description
             * @description The description of the benefit.
             */
            description: string;
            /**
             * Selectable
             * @description Whether the benefit is selectable when creating a product.
             */
            selectable: boolean;
            /**
             * Deletable
             * @description Whether the benefit is deletable.
             */
            deletable: boolean;
            /**
             * Organization Id
             * Format: uuid4
             * @description The ID of the organization owning the benefit.
             */
            organization_id: string;
            organization: components["schemas"]["Organization"];
            properties: components["schemas"]["BenefitDownloadablesSubscriberProperties"];
        };
        /** BenefitDownloadablesSubscriberProperties */
        BenefitDownloadablesSubscriberProperties: {
            /** Active Files */
            active_files: string[];
        };
        /** BenefitDownloadablesUpdate */
        BenefitDownloadablesUpdate: {
            /**
             * Description
             * @description The description of the benefit. Will be displayed on products having this benefit.
             */
            description?: string | null;
            /**
             * Type
             * @constant
             */
            type: "downloadables";
            properties?: components["schemas"]["BenefitDownloadablesCreateProperties"] | null;
        };
        /**
         * BenefitGitHubRepository
         * @description A benefit of type `github_repository`.
         *
         *     Use it to automatically invite your backers to a private GitHub repository.
         */
        BenefitGitHubRepository: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the benefit.
             */
            id: string;
            /**
             * Type
             * @constant
             */
            type: "github_repository";
            /**
             * Description
             * @description The description of the benefit.
             */
            description: string;
            /**
             * Selectable
             * @description Whether the benefit is selectable when creating a product.
             */
            selectable: boolean;
            /**
             * Deletable
             * @description Whether the benefit is deletable.
             */
            deletable: boolean;
            /**
             * Organization Id
             * Format: uuid4
             * @description The ID of the organization owning the benefit.
             */
            organization_id: string;
            properties: components["schemas"]["BenefitGitHubRepositoryProperties"];
        };
        /** BenefitGitHubRepositoryCreate */
        BenefitGitHubRepositoryCreate: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "github_repository";
            /**
             * Description
             * @description The description of the benefit. Will be displayed on products having this benefit.
             */
            description: string;
            /**
             * Organization Id
             * @description The ID of the organization owning the benefit. **Required unless you use an organization token.**
             */
            organization_id?: string | null;
            properties: components["schemas"]["BenefitGitHubRepositoryCreateProperties"];
        };
        /**
         * BenefitGitHubRepositoryCreateProperties
         * @description Properties to create a benefit of type `github_repository`.
         */
        BenefitGitHubRepositoryCreateProperties: {
            /**
             * Repository Owner
             * @description The owner of the repository.
             */
            repository_owner: string;
            /**
             * Repository Name
             * @description The name of the repository.
             */
            repository_name: string;
            /**
             * Permission
             * @description The permission level to grant. Read more about roles and their permissions on [GitHub documentation](https://docs.github.com/en/organizations/managing-user-access-to-your-organizations-repositories/managing-repository-roles/repository-roles-for-an-organization#permissions-for-each-role).
             * @enum {string}
             */
            permission: "pull" | "triage" | "push" | "maintain" | "admin";
        };
        /**
         * BenefitGitHubRepositoryProperties
         * @description Properties for a benefit of type `github_repository`.
         */
        BenefitGitHubRepositoryProperties: {
            /**
             * Repository Owner
             * @description The owner of the repository.
             */
            repository_owner: string;
            /**
             * Repository Name
             * @description The name of the repository.
             */
            repository_name: string;
            /**
             * Permission
             * @description The permission level to grant. Read more about roles and their permissions on [GitHub documentation](https://docs.github.com/en/organizations/managing-user-access-to-your-organizations-repositories/managing-repository-roles/repository-roles-for-an-organization#permissions-for-each-role).
             * @enum {string}
             */
            permission: "pull" | "triage" | "push" | "maintain" | "admin";
            /**
             * Repository Id
             * @deprecated
             */
            repository_id?: string | null;
        };
        /** BenefitGitHubRepositorySubscriber */
        BenefitGitHubRepositorySubscriber: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the benefit.
             */
            id: string;
            /**
             * Type
             * @constant
             */
            type: "github_repository";
            /**
             * Description
             * @description The description of the benefit.
             */
            description: string;
            /**
             * Selectable
             * @description Whether the benefit is selectable when creating a product.
             */
            selectable: boolean;
            /**
             * Deletable
             * @description Whether the benefit is deletable.
             */
            deletable: boolean;
            /**
             * Organization Id
             * Format: uuid4
             * @description The ID of the organization owning the benefit.
             */
            organization_id: string;
            organization: components["schemas"]["Organization"];
            properties: components["schemas"]["BenefitGitHubRepositorySubscriberProperties"];
        };
        /**
         * BenefitGitHubRepositorySubscriberProperties
         * @description Properties available to subscribers for a benefit of type `github_repository`.
         */
        BenefitGitHubRepositorySubscriberProperties: {
            /**
             * Repository Owner
             * @description The owner of the repository.
             */
            repository_owner: string;
            /**
             * Repository Name
             * @description The name of the repository.
             */
            repository_name: string;
        };
        /** BenefitGitHubRepositoryUpdate */
        BenefitGitHubRepositoryUpdate: {
            /**
             * Description
             * @description The description of the benefit. Will be displayed on products having this benefit.
             */
            description?: string | null;
            /**
             * Type
             * @constant
             */
            type: "github_repository";
            properties?: components["schemas"]["BenefitGitHubRepositoryCreateProperties"] | null;
        };
        /** BenefitGrant */
        BenefitGrant: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the grant.
             */
            id: string;
            /**
             * Granted At
             * @description The timestamp when the benefit was granted. If `None`, the benefit is not granted.
             */
            granted_at?: string | null;
            /**
             * Is Granted
             * @description Whether the benefit is granted.
             */
            is_granted: boolean;
            /**
             * Revoked At
             * @description The timestamp when the benefit was revoked. If `None`, the benefit is not revoked.
             */
            revoked_at?: string | null;
            /**
             * Is Revoked
             * @description Whether the benefit is revoked.
             */
            is_revoked: boolean;
            /**
             * Subscription Id
             * @description The ID of the subscription that granted this benefit.
             */
            subscription_id: string | null;
            /**
             * Order Id
             * @description The ID of the order that granted this benefit.
             */
            order_id: string | null;
            /**
             * Customer Id
             * Format: uuid4
             * @description The ID of the customer concerned by this grant.
             */
            customer_id: string;
            /**
             * User Id
             * Format: uuid4
             * @deprecated
             */
            user_id: string;
            /**
             * Benefit Id
             * Format: uuid4
             * @description The ID of the benefit concerned by this grant.
             */
            benefit_id: string;
            customer: components["schemas"]["Customer"];
            /** Properties */
            properties: components["schemas"]["BenefitGrantDiscordProperties"] | components["schemas"]["BenefitGrantGitHubRepositoryProperties"] | components["schemas"]["BenefitGrantDownloadablesProperties"] | components["schemas"]["BenefitGrantLicenseKeysProperties"] | components["schemas"]["BenefitGrantAdsProperties"] | components["schemas"]["BenefitGrantCustomProperties"];
        };
        /** BenefitGrantAdsProperties */
        BenefitGrantAdsProperties: {
            /** Advertisement Campaign Id */
            advertisement_campaign_id: string;
        };
        /** BenefitGrantCustomProperties */
        BenefitGrantCustomProperties: Record<string, never>;
        /** BenefitGrantDiscordProperties */
        BenefitGrantDiscordProperties: {
            /** Account Id */
            account_id?: string;
            /** Guild Id */
            guild_id?: string;
            /** Role Id */
            role_id?: string;
        };
        /** BenefitGrantDownloadablesProperties */
        BenefitGrantDownloadablesProperties: {
            /** Files */
            files?: string[];
        };
        /** BenefitGrantGitHubRepositoryProperties */
        BenefitGrantGitHubRepositoryProperties: {
            /** Account Id */
            account_id?: string;
            /** Repository Owner */
            repository_owner?: string;
            /** Repository Name */
            repository_name?: string;
            /**
             * Permission
             * @enum {string}
             */
            permission?: "pull" | "triage" | "push" | "maintain" | "admin";
        };
        /** BenefitGrantLicenseKeysProperties */
        BenefitGrantLicenseKeysProperties: {
            /** License Key Id */
            license_key_id?: string;
            /** Display Key */
            display_key?: string;
        };
        /** BenefitGrantWebhook */
        BenefitGrantWebhook: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the grant.
             */
            id: string;
            /**
             * Granted At
             * @description The timestamp when the benefit was granted. If `None`, the benefit is not granted.
             */
            granted_at?: string | null;
            /**
             * Is Granted
             * @description Whether the benefit is granted.
             */
            is_granted: boolean;
            /**
             * Revoked At
             * @description The timestamp when the benefit was revoked. If `None`, the benefit is not revoked.
             */
            revoked_at?: string | null;
            /**
             * Is Revoked
             * @description Whether the benefit is revoked.
             */
            is_revoked: boolean;
            /**
             * Subscription Id
             * @description The ID of the subscription that granted this benefit.
             */
            subscription_id: string | null;
            /**
             * Order Id
             * @description The ID of the order that granted this benefit.
             */
            order_id: string | null;
            /**
             * Customer Id
             * Format: uuid4
             * @description The ID of the customer concerned by this grant.
             */
            customer_id: string;
            /**
             * User Id
             * Format: uuid4
             * @deprecated
             */
            user_id: string;
            /**
             * Benefit Id
             * Format: uuid4
             * @description The ID of the benefit concerned by this grant.
             */
            benefit_id: string;
            customer: components["schemas"]["Customer"];
            /** Properties */
            properties: components["schemas"]["BenefitGrantDiscordProperties"] | components["schemas"]["BenefitGrantGitHubRepositoryProperties"] | components["schemas"]["BenefitGrantDownloadablesProperties"] | components["schemas"]["BenefitGrantLicenseKeysProperties"] | components["schemas"]["BenefitGrantAdsProperties"] | components["schemas"]["BenefitGrantCustomProperties"];
            /** Benefit */
            benefit: components["schemas"]["Benefit"];
            /** Previous Properties */
            previous_properties?: components["schemas"]["BenefitGrantDiscordProperties"] | components["schemas"]["BenefitGrantGitHubRepositoryProperties"] | components["schemas"]["BenefitGrantDownloadablesProperties"] | components["schemas"]["BenefitGrantLicenseKeysProperties"] | components["schemas"]["BenefitGrantAdsProperties"] | components["schemas"]["BenefitGrantCustomProperties"] | null;
        };
        /** BenefitLicenseKeyActivationProperties */
        BenefitLicenseKeyActivationProperties: {
            /** Limit */
            limit: number;
            /** Enable Customer Admin */
            enable_customer_admin: boolean;
        };
        /** BenefitLicenseKeyExpirationProperties */
        BenefitLicenseKeyExpirationProperties: {
            /** Ttl */
            ttl: number;
            /**
             * Timeframe
             * @enum {string}
             */
            timeframe: "year" | "month" | "day";
        };
        /** BenefitLicenseKeys */
        BenefitLicenseKeys: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the benefit.
             */
            id: string;
            /**
             * Type
             * @constant
             */
            type: "license_keys";
            /**
             * Description
             * @description The description of the benefit.
             */
            description: string;
            /**
             * Selectable
             * @description Whether the benefit is selectable when creating a product.
             */
            selectable: boolean;
            /**
             * Deletable
             * @description Whether the benefit is deletable.
             */
            deletable: boolean;
            /**
             * Organization Id
             * Format: uuid4
             * @description The ID of the organization owning the benefit.
             */
            organization_id: string;
            properties: components["schemas"]["BenefitLicenseKeysProperties"];
        };
        /** BenefitLicenseKeysCreate */
        BenefitLicenseKeysCreate: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "license_keys";
            /**
             * Description
             * @description The description of the benefit. Will be displayed on products having this benefit.
             */
            description: string;
            /**
             * Organization Id
             * @description The ID of the organization owning the benefit. **Required unless you use an organization token.**
             */
            organization_id?: string | null;
            properties: components["schemas"]["BenefitLicenseKeysCreateProperties"];
        };
        /** BenefitLicenseKeysCreateProperties */
        BenefitLicenseKeysCreateProperties: {
            /** Prefix */
            prefix?: string | null;
            expires?: components["schemas"]["BenefitLicenseKeyExpirationProperties"] | null;
            activations?: components["schemas"]["BenefitLicenseKeyActivationProperties"] | null;
            /** Limit Usage */
            limit_usage?: number | null;
        };
        /** BenefitLicenseKeysProperties */
        BenefitLicenseKeysProperties: {
            /** Prefix */
            prefix: string | null;
            expires: components["schemas"]["BenefitLicenseKeyExpirationProperties"] | null;
            activations: components["schemas"]["BenefitLicenseKeyActivationProperties"] | null;
            /** Limit Usage */
            limit_usage: number | null;
        };
        /** BenefitLicenseKeysSubscriber */
        BenefitLicenseKeysSubscriber: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the benefit.
             */
            id: string;
            /**
             * Type
             * @constant
             */
            type: "license_keys";
            /**
             * Description
             * @description The description of the benefit.
             */
            description: string;
            /**
             * Selectable
             * @description Whether the benefit is selectable when creating a product.
             */
            selectable: boolean;
            /**
             * Deletable
             * @description Whether the benefit is deletable.
             */
            deletable: boolean;
            /**
             * Organization Id
             * Format: uuid4
             * @description The ID of the organization owning the benefit.
             */
            organization_id: string;
            organization: components["schemas"]["Organization"];
            properties: components["schemas"]["BenefitLicenseKeysSubscriberProperties"];
        };
        /** BenefitLicenseKeysSubscriberProperties */
        BenefitLicenseKeysSubscriberProperties: {
            /** Prefix */
            prefix: string | null;
            expires: components["schemas"]["BenefitLicenseKeyExpirationProperties"] | null;
            activations: components["schemas"]["BenefitLicenseKeyActivationProperties"] | null;
            /** Limit Usage */
            limit_usage: number | null;
        };
        /** BenefitLicenseKeysUpdate */
        BenefitLicenseKeysUpdate: {
            /**
             * Description
             * @description The description of the benefit. Will be displayed on products having this benefit.
             */
            description?: string | null;
            /**
             * Type
             * @constant
             */
            type: "license_keys";
            properties?: components["schemas"]["BenefitLicenseKeysCreateProperties"] | null;
        };
        /**
         * BenefitType
         * @enum {string}
         */
        BenefitType: "custom" | "ads" | "discord" | "github_repository" | "downloadables" | "license_keys";
        /** Body_email-update:verify_email_update */
        "Body_email-update_verify_email_update": {
            /** Token */
            token: string;
        };
        /** Body_oauth2:consent */
        Body_oauth2_consent: {
            /**
             * Action
             * @enum {string}
             */
            action: "allow" | "deny";
        };
        /**
         * Checkout
         * @description Checkout session data retrieved using an access token.
         */
        Checkout: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /**
             * Custom Field Data
             * @description Key-value object storing custom field values.
             */
            custom_field_data?: {
                [key: string]: string | number | boolean | null;
            };
            /** @description Payment processor used. */
            payment_processor: components["schemas"]["PaymentProcessor"];
            /** @description Status of the checkout session. */
            status: components["schemas"]["CheckoutStatus"];
            /**
             * Client Secret
             * @description Client secret used to update and complete the checkout session from the client.
             */
            client_secret: string;
            /**
             * Url
             * @description URL where the customer can access the checkout session.
             */
            url: string;
            /**
             * Expires At
             * Format: date-time
             * @description Expiration date and time of the checkout session.
             */
            expires_at: string;
            /**
             * Success Url
             * @description URL where the customer will be redirected after a successful payment.
             */
            success_url: string;
            /**
             * Embed Origin
             * @description When checkout is embedded, represents the Origin of the page embedding the checkout. Used as a security measure to send messages only to the embedding page.
             */
            embed_origin: string | null;
            /** Amount */
            amount: number | null;
            /**
             * Tax Amount
             * @description Computed tax amount to pay in cents.
             */
            tax_amount: number | null;
            /**
             * Currency
             * @description Currency code of the checkout session.
             */
            currency: string | null;
            /**
             * Subtotal Amount
             * @description Subtotal amount in cents, including discounts and before tax.
             */
            subtotal_amount: number | null;
            /**
             * Total Amount
             * @description Total amount to pay in cents, including discounts and after tax.
             */
            total_amount: number | null;
            /**
             * Product Id
             * Format: uuid4
             * @description ID of the product to checkout.
             */
            product_id: string;
            /**
             * Product Price Id
             * Format: uuid4
             * @description ID of the product price to checkout.
             */
            product_price_id: string;
            /**
             * Discount Id
             * @description ID of the discount applied to the checkout.
             */
            discount_id: string | null;
            /**
             * Allow Discount Codes
             * @description Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it.
             */
            allow_discount_codes: boolean;
            /**
             * Is Discount Applicable
             * @description Whether the discount is applicable to the checkout. Typically, free and custom prices are not discountable.
             */
            is_discount_applicable: boolean;
            /**
             * Is Free Product Price
             * @description Whether the product price is free, regardless of discounts.
             */
            is_free_product_price: boolean;
            /**
             * Is Payment Required
             * @description Whether the checkout requires payment, e.g. in case of free products or discounts that cover the total amount.
             */
            is_payment_required: boolean;
            /**
             * Is Payment Setup Required
             * @description Whether the checkout requires setting up a payment method, regardless of the amount, e.g. subscriptions that have first free cycles.
             */
            is_payment_setup_required: boolean;
            /**
             * Is Payment Form Required
             * @description Whether the checkout requires a payment form, whether because of a payment or payment method setup.
             */
            is_payment_form_required: boolean;
            /** Customer Id */
            customer_id: string | null;
            /**
             * Customer Name
             * @description Name of the customer.
             */
            customer_name: string | null;
            /**
             * Customer Email
             * @description Email address of the customer.
             */
            customer_email: string | null;
            /** Customer Ip Address */
            customer_ip_address: string | null;
            customer_billing_address: components["schemas"]["Address"] | null;
            /** Customer Tax Id */
            customer_tax_id: string | null;
            /** Payment Processor Metadata */
            payment_processor_metadata: {
                [key: string]: string;
            };
            /** Metadata */
            metadata: {
                [key: string]: string | number | boolean;
            };
            product: components["schemas"]["CheckoutProduct"];
            product_price: components["schemas"]["ProductPrice"];
            /** Discount */
            discount: (components["schemas"]["CheckoutDiscountFixedOnceForeverDuration"] | components["schemas"]["CheckoutDiscountFixedRepeatDuration"] | components["schemas"]["CheckoutDiscountPercentageOnceForeverDuration"] | components["schemas"]["CheckoutDiscountPercentageRepeatDuration"]) | null;
            /** Subscription Id */
            subscription_id: string | null;
            /** Attached Custom Fields */
            attached_custom_fields: components["schemas"]["AttachedCustomField"][];
            /** Customer Metadata */
            customer_metadata: {
                [key: string]: string | number | boolean;
            };
        };
        /**
         * CheckoutConfirmStripe
         * @description Confirm a checkout session using a Stripe confirmation token.
         */
        CheckoutConfirmStripe: {
            /**
             * Custom Field Data
             * @description Key-value object storing custom field values.
             */
            custom_field_data?: {
                [key: string]: string | number | boolean | null;
            };
            /**
             * Product Price Id
             * @description ID of the product price to checkout. Must correspond to a price linked to the same product.
             */
            product_price_id?: string | null;
            /** Amount */
            amount?: number | null;
            /** Customer Name */
            customer_name?: string | null;
            /** Customer Email */
            customer_email?: string | null;
            customer_billing_address?: components["schemas"]["Address"] | null;
            /** Customer Tax Id */
            customer_tax_id?: string | null;
            /**
             * Discount Code
             * @description Discount code to apply to the checkout.
             */
            discount_code?: string | null;
            /**
             * Confirmation Token Id
             * @description ID of the Stripe confirmation token. Required for fixed prices and custom prices.
             */
            confirmation_token_id?: string | null;
        };
        CheckoutCreate: components["schemas"]["CheckoutProductCreate"] | components["schemas"]["CheckoutPriceCreate"];
        /**
         * CheckoutCreatePublic
         * @description Create a new checkout session from a client.
         */
        CheckoutCreatePublic: {
            /**
             * Product Price Id
             * Format: uuid4
             * @description ID of the product price to checkout.
             */
            product_price_id: string;
            /** Customer Email */
            customer_email?: string | null;
            /**
             * From Legacy Checkout Link
             * @default false
             */
            from_legacy_checkout_link: boolean;
            /**
             * Subscription Id
             * @description ID of a subscription to upgrade. It must be on a free pricing. If checkout is successful, metadata set on this checkout will be copied to the subscription, and existing keys will be overwritten.
             */
            subscription_id?: string | null;
        };
        /**
         * CheckoutDiscountFixedOnceForeverDuration
         * @description Schema for a fixed amount discount that is applied once or forever.
         */
        CheckoutDiscountFixedOnceForeverDuration: {
            duration: components["schemas"]["DiscountDuration"];
            type: components["schemas"]["DiscountType"];
            /** Amount */
            amount: number;
            /** Currency */
            currency: string;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /** Name */
            name: string;
            /** Code */
            code: string | null;
        };
        /**
         * CheckoutDiscountFixedRepeatDuration
         * @description Schema for a fixed amount discount that is applied on every invoice
         *     for a certain number of months.
         */
        CheckoutDiscountFixedRepeatDuration: {
            duration: components["schemas"]["DiscountDuration"];
            /** Duration In Months */
            duration_in_months: number;
            type: components["schemas"]["DiscountType"];
            /** Amount */
            amount: number;
            /** Currency */
            currency: string;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /** Name */
            name: string;
            /** Code */
            code: string | null;
        };
        /**
         * CheckoutDiscountPercentageOnceForeverDuration
         * @description Schema for a percentage discount that is applied once or forever.
         */
        CheckoutDiscountPercentageOnceForeverDuration: {
            duration: components["schemas"]["DiscountDuration"];
            type: components["schemas"]["DiscountType"];
            /** Basis Points */
            basis_points: number;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /** Name */
            name: string;
            /** Code */
            code: string | null;
        };
        /**
         * CheckoutDiscountPercentageRepeatDuration
         * @description Schema for a percentage discount that is applied on every invoice
         *     for a certain number of months.
         */
        CheckoutDiscountPercentageRepeatDuration: {
            duration: components["schemas"]["DiscountDuration"];
            /** Duration In Months */
            duration_in_months: number;
            type: components["schemas"]["DiscountType"];
            /** Basis Points */
            basis_points: number;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /** Name */
            name: string;
            /** Code */
            code: string | null;
        };
        CheckoutForbiddenError: components["schemas"]["AlreadyActiveSubscriptionError"] | components["schemas"]["NotOpenCheckout"];
        /**
         * CheckoutLink
         * @description Checkout link data.
         */
        CheckoutLink: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /** Metadata */
            metadata: {
                [key: string]: string | number | boolean;
            };
            /** @description Payment processor used. */
            payment_processor: components["schemas"]["PaymentProcessor"];
            /**
             * Client Secret
             * @description Client secret used to access the checkout link.
             */
            client_secret: string;
            /**
             * Success Url
             * @description URL where the customer will be redirected after a successful payment.
             */
            success_url: string | null;
            /**
             * Label
             * @description Optional label to distinguish links internally
             */
            label: string | null;
            /**
             * Allow Discount Codes
             * @description Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it.
             */
            allow_discount_codes: boolean;
            /**
             * Product Id
             * Format: uuid4
             * @description ID of the product to checkout.
             */
            product_id: string;
            /**
             * Product Price Id
             * @description ID of the product price to checkout. First available price will be selected unless an explicit price ID is set.
             */
            product_price_id: string | null;
            /**
             * Discount Id
             * @description ID of the discount to apply to the checkout. If the discount is not applicable anymore when opening the checkout link, it'll be ignored.
             */
            discount_id: string | null;
            product: components["schemas"]["CheckoutLinkProduct"];
            product_price: components["schemas"]["ProductPrice"] | null;
            /** Discount */
            discount: (components["schemas"]["DiscountFixedOnceForeverDurationBase"] | components["schemas"]["DiscountFixedRepeatDurationBase"] | components["schemas"]["DiscountPercentageOnceForeverDurationBase"] | components["schemas"]["DiscountPercentageRepeatDurationBase"]) | null;
            /** Url */
            readonly url: string;
        };
        CheckoutLinkCreate: components["schemas"]["CheckoutLinkProductCreate"] | components["schemas"]["CheckoutLinkPriceCreate"];
        /** CheckoutLinkPriceCreate */
        CheckoutLinkPriceCreate: {
            /**
             * Metadata
             * @description Key-value object allowing you to store additional information.
             *
             *     The key must be a string with a maximum length of **40 characters**.
             *     The value must be either:
             *
             *     * A string with a maximum length of **500 characters**
             *     * An integer
             *     * A boolean
             *
             *     You can store up to **50 key-value pairs**.
             */
            metadata?: {
                [key: string]: string | number | boolean;
            };
            /**
             * Payment Processor
             * @description Payment processor to use. Currently only Stripe is supported.
             * @constant
             */
            payment_processor: "stripe";
            /**
             * Label
             * @description Optional label to distinguish links internally
             */
            label?: string | null;
            /**
             * Allow Discount Codes
             * @description Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it.
             * @default true
             */
            allow_discount_codes: boolean;
            /**
             * Discount Id
             * @description ID of the discount to apply to the checkout. If the discount is not applicable anymore when opening the checkout link, it'll be ignored.
             */
            discount_id?: string | null;
            /**
             * Success Url
             * @description URL where the customer will be redirected after a successful payment.You can add the `checkout_id={CHECKOUT_ID}` query parameter to retrieve the checkout session id.
             */
            success_url?: string | null;
            /**
             * Product Price Id
             * Format: uuid4
             * @description ID of the product price to checkout.
             */
            product_price_id: string;
        };
        /**
         * CheckoutLinkProduct
         * @description Product data for a checkout link.
         */
        CheckoutLinkProduct: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the product.
             */
            id: string;
            /**
             * Name
             * @description The name of the product.
             */
            name: string;
            /**
             * Description
             * @description The description of the product.
             */
            description: string | null;
            /**
             * Is Recurring
             * @description Whether the product is a subscription tier.
             */
            is_recurring: boolean;
            /**
             * Is Archived
             * @description Whether the product is archived and no longer available.
             */
            is_archived: boolean;
            /**
             * Organization Id
             * Format: uuid4
             * @description The ID of the organization owning the product.
             */
            organization_id: string;
            /**
             * Prices
             * @description List of prices for this product.
             */
            prices: components["schemas"]["ProductPrice"][];
            /**
             * BenefitPublic
             * @description List of benefits granted by the product.
             */
            benefits: components["schemas"]["BenefitBase"][];
            /**
             * Medias
             * @description List of medias associated to the product.
             */
            medias: components["schemas"]["ProductMediaFileRead"][];
        };
        /** CheckoutLinkProductCreate */
        CheckoutLinkProductCreate: {
            /**
             * Metadata
             * @description Key-value object allowing you to store additional information.
             *
             *     The key must be a string with a maximum length of **40 characters**.
             *     The value must be either:
             *
             *     * A string with a maximum length of **500 characters**
             *     * An integer
             *     * A boolean
             *
             *     You can store up to **50 key-value pairs**.
             */
            metadata?: {
                [key: string]: string | number | boolean;
            };
            /**
             * Payment Processor
             * @description Payment processor to use. Currently only Stripe is supported.
             * @constant
             */
            payment_processor: "stripe";
            /**
             * Label
             * @description Optional label to distinguish links internally
             */
            label?: string | null;
            /**
             * Allow Discount Codes
             * @description Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it.
             * @default true
             */
            allow_discount_codes: boolean;
            /**
             * Discount Id
             * @description ID of the discount to apply to the checkout. If the discount is not applicable anymore when opening the checkout link, it'll be ignored.
             */
            discount_id?: string | null;
            /**
             * Success Url
             * @description URL where the customer will be redirected after a successful payment.You can add the `checkout_id={CHECKOUT_ID}` query parameter to retrieve the checkout session id.
             */
            success_url?: string | null;
            /**
             * Product Id
             * Format: uuid4
             * @description ID of the product to checkout. First available price will be selected.
             */
            product_id: string;
        };
        /**
         * CheckoutLinkSortProperty
         * @enum {string}
         */
        CheckoutLinkSortProperty: "created_at" | "-created_at";
        /**
         * CheckoutLinkUpdate
         * @description Schema to update an existing checkout link.
         */
        CheckoutLinkUpdate: {
            /** Metadata */
            metadata?: {
                [key: string]: string | number | boolean;
            } | null;
            /** Label */
            label?: string | null;
            /**
             * Allow Discount Codes
             * @description Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it.
             */
            allow_discount_codes?: boolean | null;
            /** Product Price Id */
            product_price_id?: string | null;
            /**
             * Discount Id
             * @description ID of the discount to apply to the checkout. If the discount is not applicable anymore when opening the checkout link, it'll be ignored.
             */
            discount_id?: string | null;
            /**
             * Success Url
             * @description URL where the customer will be redirected after a successful payment.You can add the `checkout_id={CHECKOUT_ID}` query parameter to retrieve the checkout session id.
             */
            success_url?: string | null;
        };
        /**
         * CheckoutPriceCreate
         * @description Create a new checkout session from a product price.
         *
         *     Metadata set on the checkout will be copied
         *     to the resulting order and/or subscription.
         */
        CheckoutPriceCreate: {
            /**
             * Metadata
             * @description Key-value object allowing you to store additional information.
             *
             *     The key must be a string with a maximum length of **40 characters**.
             *     The value must be either:
             *
             *     * A string with a maximum length of **500 characters**
             *     * An integer
             *     * A boolean
             *
             *     You can store up to **50 key-value pairs**.
             */
            metadata?: {
                [key: string]: string | number | boolean;
            };
            /**
             * Custom Field Data
             * @description Key-value object storing custom field values.
             */
            custom_field_data?: {
                [key: string]: string | number | boolean | null;
            };
            /**
             * Discount Id
             * @description ID of the discount to apply to the checkout.
             */
            discount_id?: string | null;
            /**
             * Allow Discount Codes
             * @description Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it.
             * @default true
             */
            allow_discount_codes: boolean;
            /** Amount */
            amount?: number | null;
            /**
             * Customer Id
             * @description ID of an existing customer in the organization. The customer data will be pre-filled in the checkout form. The resulting order will be linked to this customer.
             */
            customer_id?: string | null;
            /** Customer Name */
            customer_name?: string | null;
            /** Customer Email */
            customer_email?: string | null;
            /** Customer Ip Address */
            customer_ip_address?: string | null;
            customer_billing_address?: components["schemas"]["Address"] | null;
            /** Customer Tax Id */
            customer_tax_id?: string | null;
            /**
             * Customer Metadata
             * @description Key-value object allowing you to store additional information that'll be copied to the created customer.
             *
             *     The key must be a string with a maximum length of **40 characters**.
             *     The value must be either:
             *
             *     * A string with a maximum length of **500 characters**
             *     * An integer
             *     * A boolean
             *
             *     You can store up to **50 key-value pairs**.
             */
            customer_metadata?: {
                [key: string]: string | number | boolean;
            };
            /**
             * Subscription Id
             * @description ID of a subscription to upgrade. It must be on a free pricing. If checkout is successful, metadata set on this checkout will be copied to the subscription, and existing keys will be overwritten.
             */
            subscription_id?: string | null;
            /**
             * Success Url
             * @description URL where the customer will be redirected after a successful payment.You can add the `checkout_id={CHECKOUT_ID}` query parameter to retrieve the checkout session id.
             */
            success_url?: string | null;
            /**
             * Embed Origin
             * @description If you plan to embed the checkout session, set this to the Origin of the embedding page. It'll allow the Polar iframe to communicate with the parent page.
             */
            embed_origin?: string | null;
            /**
             * Product Price Id
             * Format: uuid4
             * @description ID of the product price to checkout.
             */
            product_price_id: string;
        };
        /**
         * CheckoutProduct
         * @description Product data for a checkout session.
         */
        CheckoutProduct: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the product.
             */
            id: string;
            /**
             * Name
             * @description The name of the product.
             */
            name: string;
            /**
             * Description
             * @description The description of the product.
             */
            description: string | null;
            /**
             * Is Recurring
             * @description Whether the product is a subscription tier.
             */
            is_recurring: boolean;
            /**
             * Is Archived
             * @description Whether the product is archived and no longer available.
             */
            is_archived: boolean;
            /**
             * Organization Id
             * Format: uuid4
             * @description The ID of the organization owning the product.
             */
            organization_id: string;
            /**
             * Prices
             * @description List of prices for this product.
             */
            prices: components["schemas"]["ProductPrice"][];
            /**
             * BenefitPublic
             * @description List of benefits granted by the product.
             */
            benefits: components["schemas"]["BenefitBase"][];
            /**
             * Medias
             * @description List of medias associated to the product.
             */
            medias: components["schemas"]["ProductMediaFileRead"][];
        };
        /**
         * CheckoutProductCreate
         * @description Create a new checkout session from a product.
         *
         *     Metadata set on the checkout will be copied
         *     to the resulting order and/or subscription.
         */
        CheckoutProductCreate: {
            /**
             * Metadata
             * @description Key-value object allowing you to store additional information.
             *
             *     The key must be a string with a maximum length of **40 characters**.
             *     The value must be either:
             *
             *     * A string with a maximum length of **500 characters**
             *     * An integer
             *     * A boolean
             *
             *     You can store up to **50 key-value pairs**.
             */
            metadata?: {
                [key: string]: string | number | boolean;
            };
            /**
             * Custom Field Data
             * @description Key-value object storing custom field values.
             */
            custom_field_data?: {
                [key: string]: string | number | boolean | null;
            };
            /**
             * Discount Id
             * @description ID of the discount to apply to the checkout.
             */
            discount_id?: string | null;
            /**
             * Allow Discount Codes
             * @description Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it.
             * @default true
             */
            allow_discount_codes: boolean;
            /** Amount */
            amount?: number | null;
            /**
             * Customer Id
             * @description ID of an existing customer in the organization. The customer data will be pre-filled in the checkout form. The resulting order will be linked to this customer.
             */
            customer_id?: string | null;
            /** Customer Name */
            customer_name?: string | null;
            /** Customer Email */
            customer_email?: string | null;
            /** Customer Ip Address */
            customer_ip_address?: string | null;
            customer_billing_address?: components["schemas"]["Address"] | null;
            /** Customer Tax Id */
            customer_tax_id?: string | null;
            /**
             * Customer Metadata
             * @description Key-value object allowing you to store additional information that'll be copied to the created customer.
             *
             *     The key must be a string with a maximum length of **40 characters**.
             *     The value must be either:
             *
             *     * A string with a maximum length of **500 characters**
             *     * An integer
             *     * A boolean
             *
             *     You can store up to **50 key-value pairs**.
             */
            customer_metadata?: {
                [key: string]: string | number | boolean;
            };
            /**
             * Subscription Id
             * @description ID of a subscription to upgrade. It must be on a free pricing. If checkout is successful, metadata set on this checkout will be copied to the subscription, and existing keys will be overwritten.
             */
            subscription_id?: string | null;
            /**
             * Success Url
             * @description URL where the customer will be redirected after a successful payment.You can add the `checkout_id={CHECKOUT_ID}` query parameter to retrieve the checkout session id.
             */
            success_url?: string | null;
            /**
             * Embed Origin
             * @description If you plan to embed the checkout session, set this to the Origin of the embedding page. It'll allow the Polar iframe to communicate with the parent page.
             */
            embed_origin?: string | null;
            /**
             * Product Id
             * Format: uuid4
             * @description ID of the product to checkout. First available price will be selected.
             */
            product_id: string;
        };
        /**
         * CheckoutPublic
         * @description Checkout session data retrieved using the client secret.
         */
        CheckoutPublic: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /**
             * Custom Field Data
             * @description Key-value object storing custom field values.
             */
            custom_field_data?: {
                [key: string]: string | number | boolean | null;
            };
            /** @description Payment processor used. */
            payment_processor: components["schemas"]["PaymentProcessor"];
            /** @description Status of the checkout session. */
            status: components["schemas"]["CheckoutStatus"];
            /**
             * Client Secret
             * @description Client secret used to update and complete the checkout session from the client.
             */
            client_secret: string;
            /**
             * Url
             * @description URL where the customer can access the checkout session.
             */
            url: string;
            /**
             * Expires At
             * Format: date-time
             * @description Expiration date and time of the checkout session.
             */
            expires_at: string;
            /**
             * Success Url
             * @description URL where the customer will be redirected after a successful payment.
             */
            success_url: string;
            /**
             * Embed Origin
             * @description When checkout is embedded, represents the Origin of the page embedding the checkout. Used as a security measure to send messages only to the embedding page.
             */
            embed_origin: string | null;
            /** Amount */
            amount: number | null;
            /**
             * Tax Amount
             * @description Computed tax amount to pay in cents.
             */
            tax_amount: number | null;
            /**
             * Currency
             * @description Currency code of the checkout session.
             */
            currency: string | null;
            /**
             * Subtotal Amount
             * @description Subtotal amount in cents, including discounts and before tax.
             */
            subtotal_amount: number | null;
            /**
             * Total Amount
             * @description Total amount to pay in cents, including discounts and after tax.
             */
            total_amount: number | null;
            /**
             * Product Id
             * Format: uuid4
             * @description ID of the product to checkout.
             */
            product_id: string;
            /**
             * Product Price Id
             * Format: uuid4
             * @description ID of the product price to checkout.
             */
            product_price_id: string;
            /**
             * Discount Id
             * @description ID of the discount applied to the checkout.
             */
            discount_id: string | null;
            /**
             * Allow Discount Codes
             * @description Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it.
             */
            allow_discount_codes: boolean;
            /**
             * Is Discount Applicable
             * @description Whether the discount is applicable to the checkout. Typically, free and custom prices are not discountable.
             */
            is_discount_applicable: boolean;
            /**
             * Is Free Product Price
             * @description Whether the product price is free, regardless of discounts.
             */
            is_free_product_price: boolean;
            /**
             * Is Payment Required
             * @description Whether the checkout requires payment, e.g. in case of free products or discounts that cover the total amount.
             */
            is_payment_required: boolean;
            /**
             * Is Payment Setup Required
             * @description Whether the checkout requires setting up a payment method, regardless of the amount, e.g. subscriptions that have first free cycles.
             */
            is_payment_setup_required: boolean;
            /**
             * Is Payment Form Required
             * @description Whether the checkout requires a payment form, whether because of a payment or payment method setup.
             */
            is_payment_form_required: boolean;
            /** Customer Id */
            customer_id: string | null;
            /**
             * Customer Name
             * @description Name of the customer.
             */
            customer_name: string | null;
            /**
             * Customer Email
             * @description Email address of the customer.
             */
            customer_email: string | null;
            /** Customer Ip Address */
            customer_ip_address: string | null;
            customer_billing_address: components["schemas"]["Address"] | null;
            /** Customer Tax Id */
            customer_tax_id: string | null;
            /** Payment Processor Metadata */
            payment_processor_metadata: {
                [key: string]: string;
            };
            product: components["schemas"]["CheckoutProduct"];
            product_price: components["schemas"]["ProductPrice"];
            /** Discount */
            discount: (components["schemas"]["CheckoutDiscountFixedOnceForeverDuration"] | components["schemas"]["CheckoutDiscountFixedRepeatDuration"] | components["schemas"]["CheckoutDiscountPercentageOnceForeverDuration"] | components["schemas"]["CheckoutDiscountPercentageRepeatDuration"]) | null;
            organization: components["schemas"]["Organization"];
            /** Attached Custom Fields */
            attached_custom_fields: components["schemas"]["AttachedCustomField"][];
        };
        /**
         * CheckoutPublicConfirmed
         * @description Checkout session data retrieved using the client secret after confirmation.
         *
         *     It contains a customer session token to retrieve order information
         *     right after the checkout.
         */
        CheckoutPublicConfirmed: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /**
             * Custom Field Data
             * @description Key-value object storing custom field values.
             */
            custom_field_data?: {
                [key: string]: string | number | boolean | null;
            };
            /** @description Payment processor used. */
            payment_processor: components["schemas"]["PaymentProcessor"];
            /**
             * Status
             * @constant
             */
            status: "confirmed";
            /**
             * Client Secret
             * @description Client secret used to update and complete the checkout session from the client.
             */
            client_secret: string;
            /**
             * Url
             * @description URL where the customer can access the checkout session.
             */
            url: string;
            /**
             * Expires At
             * Format: date-time
             * @description Expiration date and time of the checkout session.
             */
            expires_at: string;
            /**
             * Success Url
             * @description URL where the customer will be redirected after a successful payment.
             */
            success_url: string;
            /**
             * Embed Origin
             * @description When checkout is embedded, represents the Origin of the page embedding the checkout. Used as a security measure to send messages only to the embedding page.
             */
            embed_origin: string | null;
            /** Amount */
            amount: number | null;
            /**
             * Tax Amount
             * @description Computed tax amount to pay in cents.
             */
            tax_amount: number | null;
            /**
             * Currency
             * @description Currency code of the checkout session.
             */
            currency: string | null;
            /**
             * Subtotal Amount
             * @description Subtotal amount in cents, including discounts and before tax.
             */
            subtotal_amount: number | null;
            /**
             * Total Amount
             * @description Total amount to pay in cents, including discounts and after tax.
             */
            total_amount: number | null;
            /**
             * Product Id
             * Format: uuid4
             * @description ID of the product to checkout.
             */
            product_id: string;
            /**
             * Product Price Id
             * Format: uuid4
             * @description ID of the product price to checkout.
             */
            product_price_id: string;
            /**
             * Discount Id
             * @description ID of the discount applied to the checkout.
             */
            discount_id: string | null;
            /**
             * Allow Discount Codes
             * @description Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it.
             */
            allow_discount_codes: boolean;
            /**
             * Is Discount Applicable
             * @description Whether the discount is applicable to the checkout. Typically, free and custom prices are not discountable.
             */
            is_discount_applicable: boolean;
            /**
             * Is Free Product Price
             * @description Whether the product price is free, regardless of discounts.
             */
            is_free_product_price: boolean;
            /**
             * Is Payment Required
             * @description Whether the checkout requires payment, e.g. in case of free products or discounts that cover the total amount.
             */
            is_payment_required: boolean;
            /**
             * Is Payment Setup Required
             * @description Whether the checkout requires setting up a payment method, regardless of the amount, e.g. subscriptions that have first free cycles.
             */
            is_payment_setup_required: boolean;
            /**
             * Is Payment Form Required
             * @description Whether the checkout requires a payment form, whether because of a payment or payment method setup.
             */
            is_payment_form_required: boolean;
            /** Customer Id */
            customer_id: string | null;
            /**
             * Customer Name
             * @description Name of the customer.
             */
            customer_name: string | null;
            /**
             * Customer Email
             * @description Email address of the customer.
             */
            customer_email: string | null;
            /** Customer Ip Address */
            customer_ip_address: string | null;
            customer_billing_address: components["schemas"]["Address"] | null;
            /** Customer Tax Id */
            customer_tax_id: string | null;
            /** Payment Processor Metadata */
            payment_processor_metadata: {
                [key: string]: string;
            };
            product: components["schemas"]["CheckoutProduct"];
            product_price: components["schemas"]["ProductPrice"];
            /** Discount */
            discount: (components["schemas"]["CheckoutDiscountFixedOnceForeverDuration"] | components["schemas"]["CheckoutDiscountFixedRepeatDuration"] | components["schemas"]["CheckoutDiscountPercentageOnceForeverDuration"] | components["schemas"]["CheckoutDiscountPercentageRepeatDuration"]) | null;
            organization: components["schemas"]["Organization"];
            /** Attached Custom Fields */
            attached_custom_fields: components["schemas"]["AttachedCustomField"][];
            /** Customer Session Token */
            customer_session_token: string;
        };
        /**
         * CheckoutSortProperty
         * @enum {string}
         */
        CheckoutSortProperty: "created_at" | "-created_at" | "expires_at" | "-expires_at";
        /**
         * CheckoutStatus
         * @enum {string}
         */
        CheckoutStatus: "open" | "expired" | "confirmed" | "succeeded" | "failed";
        /**
         * CheckoutUpdate
         * @description Update an existing checkout session using an access token.
         */
        CheckoutUpdate: {
            /**
             * Custom Field Data
             * @description Key-value object storing custom field values.
             */
            custom_field_data?: {
                [key: string]: string | number | boolean | null;
            } | null;
            /**
             * Product Price Id
             * @description ID of the product price to checkout. Must correspond to a price linked to the same product.
             */
            product_price_id?: string | null;
            /** Amount */
            amount?: number | null;
            /** Customer Name */
            customer_name?: string | null;
            /** Customer Email */
            customer_email?: string | null;
            customer_billing_address?: components["schemas"]["Address"] | null;
            /** Customer Tax Id */
            customer_tax_id?: string | null;
            /** Metadata */
            metadata?: {
                [key: string]: string | number | boolean;
            } | null;
            /**
             * Discount Id
             * @description ID of the discount to apply to the checkout.
             */
            discount_id?: string | null;
            /**
             * Allow Discount Codes
             * @description Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it.
             */
            allow_discount_codes?: boolean | null;
            /** Customer Ip Address */
            customer_ip_address?: string | null;
            /**
             * Customer Metadata
             * @description Key-value object allowing you to store additional information that'll be copied to the created customer.
             *
             *     The key must be a string with a maximum length of **40 characters**.
             *     The value must be either:
             *
             *     * A string with a maximum length of **500 characters**
             *     * An integer
             *     * A boolean
             *
             *     You can store up to **50 key-value pairs**.
             */
            customer_metadata?: {
                [key: string]: string | number | boolean;
            } | null;
            /**
             * Success Url
             * @description URL where the customer will be redirected after a successful payment.You can add the `checkout_id={CHECKOUT_ID}` query parameter to retrieve the checkout session id.
             */
            success_url?: string | null;
            /**
             * Embed Origin
             * @description If you plan to embed the checkout session, set this to the Origin of the embedding page. It'll allow the Polar iframe to communicate with the parent page.
             */
            embed_origin?: string | null;
        };
        /**
         * CheckoutUpdatePublic
         * @description Update an existing checkout session using the client secret.
         */
        CheckoutUpdatePublic: {
            /**
             * Custom Field Data
             * @description Key-value object storing custom field values.
             */
            custom_field_data?: {
                [key: string]: string | number | boolean | null;
            } | null;
            /**
             * Product Price Id
             * @description ID of the product price to checkout. Must correspond to a price linked to the same product.
             */
            product_price_id?: string | null;
            /** Amount */
            amount?: number | null;
            /** Customer Name */
            customer_name?: string | null;
            /** Customer Email */
            customer_email?: string | null;
            customer_billing_address?: components["schemas"]["Address"] | null;
            /** Customer Tax Id */
            customer_tax_id?: string | null;
            /**
             * Discount Code
             * @description Discount code to apply to the checkout.
             */
            discount_code?: string | null;
        };
        /** ConfirmIssue */
        ConfirmIssue: {
            /** Splits */
            splits: components["schemas"]["ConfirmIssueSplit"][];
        };
        /** ConfirmIssueSplit */
        ConfirmIssueSplit: {
            /** Organization Id */
            organization_id?: string | null;
            /** Github Username */
            github_username?: string | null;
            /** Share Thousands */
            share_thousands: number;
        };
        /** CountAggregation */
        CountAggregation: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            func: "count";
        };
        /** CreatePledgeFromPaymentIntent */
        CreatePledgeFromPaymentIntent: {
            /** Payment Intent Id */
            payment_intent_id: string;
        };
        /** CreatePledgePayLater */
        CreatePledgePayLater: {
            /**
             * Issue Id
             * Format: uuid
             */
            issue_id: string;
            /** Amount */
            amount: number;
            /**
             * Currency
             * @description The currency. Currently, only `usd` is supported.
             * @default usd
             */
            currency: string;
            /**
             * On Behalf Of Organization Id
             * @description The organization to give credit to. The pledge will be paid by the authenticated user.
             */
            on_behalf_of_organization_id?: string | null;
            /**
             * By Organization Id
             * @description The organization to create the pledge as. The pledge will be paid by this organization.
             */
            by_organization_id?: string | null;
        };
        /** CurrencyAmount */
        CurrencyAmount: {
            /**
             * Currency
             * @description Three letter currency code (eg: USD)
             */
            currency: string;
            /**
             * Amount
             * @description Amount in the currencies smallest unit (cents if currency is USD)
             */
            amount: number;
        };
        CustomField: components["schemas"]["CustomFieldText"] | components["schemas"]["CustomFieldNumber"] | components["schemas"]["CustomFieldDate"] | components["schemas"]["CustomFieldCheckbox"] | components["schemas"]["CustomFieldSelect"];
        /**
         * CustomFieldCheckbox
         * @description Schema for a custom field of type checkbox.
         */
        CustomFieldCheckbox: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /** Metadata */
            metadata: {
                [key: string]: string | number | boolean;
            };
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "checkbox";
            /**
             * Slug
             * @description Identifier of the custom field. It'll be used as key when storing the value.
             */
            slug: string;
            /**
             * Name
             * @description Name of the custom field.
             */
            name: string;
            /**
             * Organization Id
             * Format: uuid4
             * @description The ID of the organization owning the custom field.
             */
            organization_id: string;
            properties: components["schemas"]["CustomFieldCheckboxProperties"];
        };
        /** CustomFieldCheckboxProperties */
        CustomFieldCheckboxProperties: {
            /** Form Label */
            form_label?: string;
            /** Form Help Text */
            form_help_text?: string;
            /** Form Placeholder */
            form_placeholder?: string;
        };
        CustomFieldCreate: components["schemas"]["CustomFieldCreateText"] | components["schemas"]["CustomFieldCreateNumber"] | components["schemas"]["CustomFieldCreateDate"] | components["schemas"]["CustomFieldCreateCheckbox"] | components["schemas"]["CustomFieldCreateSelect"];
        /**
         * CustomFieldCreateCheckbox
         * @description Schema to create a custom field of type checkbox.
         */
        CustomFieldCreateCheckbox: {
            /**
             * Metadata
             * @description Key-value object allowing you to store additional information.
             *
             *     The key must be a string with a maximum length of **40 characters**.
             *     The value must be either:
             *
             *     * A string with a maximum length of **500 characters**
             *     * An integer
             *     * A boolean
             *
             *     You can store up to **50 key-value pairs**.
             */
            metadata?: {
                [key: string]: string | number | boolean;
            };
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "checkbox";
            /**
             * Slug
             * @description Identifier of the custom field. It'll be used as key when storing the value. Must be unique across the organization.It can only contain ASCII letters, numbers and hyphens.
             */
            slug: string;
            /**
             * Name
             * @description Name of the custom field.
             */
            name: string;
            /**
             * Organization Id
             * @description The ID of the organization owning the custom field. **Required unless you use an organization token.**
             */
            organization_id?: string | null;
            properties: components["schemas"]["CustomFieldCheckboxProperties"];
        };
        /**
         * CustomFieldCreateDate
         * @description Schema to create a custom field of type date.
         */
        CustomFieldCreateDate: {
            /**
             * Metadata
             * @description Key-value object allowing you to store additional information.
             *
             *     The key must be a string with a maximum length of **40 characters**.
             *     The value must be either:
             *
             *     * A string with a maximum length of **500 characters**
             *     * An integer
             *     * A boolean
             *
             *     You can store up to **50 key-value pairs**.
             */
            metadata?: {
                [key: string]: string | number | boolean;
            };
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "date";
            /**
             * Slug
             * @description Identifier of the custom field. It'll be used as key when storing the value. Must be unique across the organization.It can only contain ASCII letters, numbers and hyphens.
             */
            slug: string;
            /**
             * Name
             * @description Name of the custom field.
             */
            name: string;
            /**
             * Organization Id
             * @description The ID of the organization owning the custom field. **Required unless you use an organization token.**
             */
            organization_id?: string | null;
            properties: components["schemas"]["CustomFieldDateProperties"];
        };
        /**
         * CustomFieldCreateNumber
         * @description Schema to create a custom field of type number.
         */
        CustomFieldCreateNumber: {
            /**
             * Metadata
             * @description Key-value object allowing you to store additional information.
             *
             *     The key must be a string with a maximum length of **40 characters**.
             *     The value must be either:
             *
             *     * A string with a maximum length of **500 characters**
             *     * An integer
             *     * A boolean
             *
             *     You can store up to **50 key-value pairs**.
             */
            metadata?: {
                [key: string]: string | number | boolean;
            };
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "number";
            /**
             * Slug
             * @description Identifier of the custom field. It'll be used as key when storing the value. Must be unique across the organization.It can only contain ASCII letters, numbers and hyphens.
             */
            slug: string;
            /**
             * Name
             * @description Name of the custom field.
             */
            name: string;
            /**
             * Organization Id
             * @description The ID of the organization owning the custom field. **Required unless you use an organization token.**
             */
            organization_id?: string | null;
            properties: components["schemas"]["CustomFieldNumberProperties"];
        };
        /**
         * CustomFieldCreateSelect
         * @description Schema to create a custom field of type select.
         */
        CustomFieldCreateSelect: {
            /**
             * Metadata
             * @description Key-value object allowing you to store additional information.
             *
             *     The key must be a string with a maximum length of **40 characters**.
             *     The value must be either:
             *
             *     * A string with a maximum length of **500 characters**
             *     * An integer
             *     * A boolean
             *
             *     You can store up to **50 key-value pairs**.
             */
            metadata?: {
                [key: string]: string | number | boolean;
            };
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "select";
            /**
             * Slug
             * @description Identifier of the custom field. It'll be used as key when storing the value. Must be unique across the organization.It can only contain ASCII letters, numbers and hyphens.
             */
            slug: string;
            /**
             * Name
             * @description Name of the custom field.
             */
            name: string;
            /**
             * Organization Id
             * @description The ID of the organization owning the custom field. **Required unless you use an organization token.**
             */
            organization_id?: string | null;
            properties: components["schemas"]["CustomFieldSelectProperties"];
        };
        /**
         * CustomFieldCreateText
         * @description Schema to create a custom field of type text.
         */
        CustomFieldCreateText: {
            /**
             * Metadata
             * @description Key-value object allowing you to store additional information.
             *
             *     The key must be a string with a maximum length of **40 characters**.
             *     The value must be either:
             *
             *     * A string with a maximum length of **500 characters**
             *     * An integer
             *     * A boolean
             *
             *     You can store up to **50 key-value pairs**.
             */
            metadata?: {
                [key: string]: string | number | boolean;
            };
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "text";
            /**
             * Slug
             * @description Identifier of the custom field. It'll be used as key when storing the value. Must be unique across the organization.It can only contain ASCII letters, numbers and hyphens.
             */
            slug: string;
            /**
             * Name
             * @description Name of the custom field.
             */
            name: string;
            /**
             * Organization Id
             * @description The ID of the organization owning the custom field. **Required unless you use an organization token.**
             */
            organization_id?: string | null;
            properties: components["schemas"]["CustomFieldTextProperties"];
        };
        /**
         * CustomFieldDate
         * @description Schema for a custom field of type date.
         */
        CustomFieldDate: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /** Metadata */
            metadata: {
                [key: string]: string | number | boolean;
            };
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "date";
            /**
             * Slug
             * @description Identifier of the custom field. It'll be used as key when storing the value.
             */
            slug: string;
            /**
             * Name
             * @description Name of the custom field.
             */
            name: string;
            /**
             * Organization Id
             * Format: uuid4
             * @description The ID of the organization owning the custom field.
             */
            organization_id: string;
            properties: components["schemas"]["CustomFieldDateProperties"];
        };
        /** CustomFieldDateProperties */
        CustomFieldDateProperties: {
            /** Form Label */
            form_label?: string;
            /** Form Help Text */
            form_help_text?: string;
            /** Form Placeholder */
            form_placeholder?: string;
            /** Ge */
            ge?: number;
            /** Le */
            le?: number;
        };
        /**
         * CustomFieldNumber
         * @description Schema for a custom field of type number.
         */
        CustomFieldNumber: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /** Metadata */
            metadata: {
                [key: string]: string | number | boolean;
            };
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "number";
            /**
             * Slug
             * @description Identifier of the custom field. It'll be used as key when storing the value.
             */
            slug: string;
            /**
             * Name
             * @description Name of the custom field.
             */
            name: string;
            /**
             * Organization Id
             * Format: uuid4
             * @description The ID of the organization owning the custom field.
             */
            organization_id: string;
            properties: components["schemas"]["CustomFieldNumberProperties"];
        };
        /** CustomFieldNumberProperties */
        CustomFieldNumberProperties: {
            /** Form Label */
            form_label?: string;
            /** Form Help Text */
            form_help_text?: string;
            /** Form Placeholder */
            form_placeholder?: string;
            /** Ge */
            ge?: number;
            /** Le */
            le?: number;
        };
        /**
         * CustomFieldSelect
         * @description Schema for a custom field of type select.
         */
        CustomFieldSelect: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /** Metadata */
            metadata: {
                [key: string]: string | number | boolean;
            };
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "select";
            /**
             * Slug
             * @description Identifier of the custom field. It'll be used as key when storing the value.
             */
            slug: string;
            /**
             * Name
             * @description Name of the custom field.
             */
            name: string;
            /**
             * Organization Id
             * Format: uuid4
             * @description The ID of the organization owning the custom field.
             */
            organization_id: string;
            properties: components["schemas"]["CustomFieldSelectProperties"];
        };
        /** CustomFieldSelectOption */
        CustomFieldSelectOption: {
            /** Value */
            value: string;
            /** Label */
            label: string;
        };
        /** CustomFieldSelectProperties */
        CustomFieldSelectProperties: {
            /** Form Label */
            form_label?: string;
            /** Form Help Text */
            form_help_text?: string;
            /** Form Placeholder */
            form_placeholder?: string;
            /** Options */
            options: components["schemas"]["CustomFieldSelectOption"][];
        };
        /**
         * CustomFieldSortProperty
         * @enum {string}
         */
        CustomFieldSortProperty: "created_at" | "-created_at" | "slug" | "-slug" | "name" | "-name" | "type" | "-type";
        /**
         * CustomFieldText
         * @description Schema for a custom field of type text.
         */
        CustomFieldText: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /** Metadata */
            metadata: {
                [key: string]: string | number | boolean;
            };
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "text";
            /**
             * Slug
             * @description Identifier of the custom field. It'll be used as key when storing the value.
             */
            slug: string;
            /**
             * Name
             * @description Name of the custom field.
             */
            name: string;
            /**
             * Organization Id
             * Format: uuid4
             * @description The ID of the organization owning the custom field.
             */
            organization_id: string;
            properties: components["schemas"]["CustomFieldTextProperties"];
        };
        /** CustomFieldTextProperties */
        CustomFieldTextProperties: {
            /** Form Label */
            form_label?: string;
            /** Form Help Text */
            form_help_text?: string;
            /** Form Placeholder */
            form_placeholder?: string;
            /** Textarea */
            textarea?: boolean;
            /** Min Length */
            min_length?: number;
            /** Max Length */
            max_length?: number;
        };
        /**
         * CustomFieldType
         * @enum {string}
         */
        CustomFieldType: "text" | "number" | "date" | "checkbox" | "select";
        CustomFieldUpdate: components["schemas"]["CustomFieldUpdateText"] | components["schemas"]["CustomFieldUpdateNumber"] | components["schemas"]["CustomFieldUpdateDate"] | components["schemas"]["CustomFieldUpdateCheckbox"] | components["schemas"]["CustomFieldUpdateSelect"];
        /**
         * CustomFieldUpdateCheckbox
         * @description Schema to update a custom field of type checkbox.
         */
        CustomFieldUpdateCheckbox: {
            /** Metadata */
            metadata?: {
                [key: string]: string | number | boolean;
            } | null;
            /** Name */
            name?: string | null;
            /** Slug */
            slug?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "checkbox";
            properties?: components["schemas"]["CustomFieldCheckboxProperties"] | null;
        };
        /**
         * CustomFieldUpdateDate
         * @description Schema to update a custom field of type date.
         */
        CustomFieldUpdateDate: {
            /** Metadata */
            metadata?: {
                [key: string]: string | number | boolean;
            } | null;
            /** Name */
            name?: string | null;
            /** Slug */
            slug?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "date";
            properties?: components["schemas"]["CustomFieldDateProperties"] | null;
        };
        /**
         * CustomFieldUpdateNumber
         * @description Schema to update a custom field of type number.
         */
        CustomFieldUpdateNumber: {
            /** Metadata */
            metadata?: {
                [key: string]: string | number | boolean;
            } | null;
            /** Name */
            name?: string | null;
            /** Slug */
            slug?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "number";
            properties?: components["schemas"]["CustomFieldNumberProperties"] | null;
        };
        /**
         * CustomFieldUpdateSelect
         * @description Schema to update a custom field of type select.
         */
        CustomFieldUpdateSelect: {
            /** Metadata */
            metadata?: {
                [key: string]: string | number | boolean;
            } | null;
            /** Name */
            name?: string | null;
            /** Slug */
            slug?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "select";
            properties?: components["schemas"]["CustomFieldSelectProperties"] | null;
        };
        /**
         * CustomFieldUpdateText
         * @description Schema to update a custom field of type text.
         */
        CustomFieldUpdateText: {
            /** Metadata */
            metadata?: {
                [key: string]: string | number | boolean;
            } | null;
            /** Name */
            name?: string | null;
            /** Slug */
            slug?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "text";
            properties?: components["schemas"]["CustomFieldTextProperties"] | null;
        };
        /**
         * Customer
         * @description A customer in an organization.
         */
        Customer: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /** Metadata */
            metadata: {
                [key: string]: string | number | boolean;
            };
            /** Email */
            email: string;
            /** Email Verified */
            email_verified: boolean;
            /** Name */
            name: string | null;
            billing_address: components["schemas"]["Address"] | null;
            /** Tax Id */
            tax_id: [
                string,
                components["schemas"]["TaxIDFormat"]
            ] | null;
            /**
             * Organization Id
             * Format: uuid4
             */
            organization_id: string;
            /** Avatar Url */
            readonly avatar_url: string;
        };
        CustomerBenefitGrant: components["schemas"]["CustomerBenefitGrantDiscord"] | components["schemas"]["CustomerBenefitGrantGitHubRepository"] | components["schemas"]["CustomerBenefitGrantDownloadables"] | components["schemas"]["CustomerBenefitGrantLicenseKeys"] | components["schemas"]["CustomerBenefitGrantAds"] | components["schemas"]["CustomerBenefitGrantCustom"];
        /** CustomerBenefitGrantAds */
        CustomerBenefitGrantAds: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /** Granted At */
            granted_at: string | null;
            /** Revoked At */
            revoked_at: string | null;
            /**
             * Customer Id
             * Format: uuid4
             */
            customer_id: string;
            /**
             * Benefit Id
             * Format: uuid4
             */
            benefit_id: string;
            /** Subscription Id */
            subscription_id: string | null;
            /** Order Id */
            order_id: string | null;
            /** Is Granted */
            is_granted: boolean;
            /** Is Revoked */
            is_revoked: boolean;
            customer: components["schemas"]["CustomerPortalCustomer"];
            benefit: components["schemas"]["BenefitAdsSubscriber"];
            properties: components["schemas"]["BenefitGrantAdsProperties"];
        };
        /** CustomerBenefitGrantAdsUpdate */
        CustomerBenefitGrantAdsUpdate: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            benefit_type: "ads";
        };
        /** CustomerBenefitGrantCustom */
        CustomerBenefitGrantCustom: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /** Granted At */
            granted_at: string | null;
            /** Revoked At */
            revoked_at: string | null;
            /**
             * Customer Id
             * Format: uuid4
             */
            customer_id: string;
            /**
             * Benefit Id
             * Format: uuid4
             */
            benefit_id: string;
            /** Subscription Id */
            subscription_id: string | null;
            /** Order Id */
            order_id: string | null;
            /** Is Granted */
            is_granted: boolean;
            /** Is Revoked */
            is_revoked: boolean;
            customer: components["schemas"]["CustomerPortalCustomer"];
            benefit: components["schemas"]["BenefitCustomSubscriber"];
            properties: components["schemas"]["BenefitGrantCustomProperties"];
        };
        /** CustomerBenefitGrantCustomUpdate */
        CustomerBenefitGrantCustomUpdate: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            benefit_type: "custom";
        };
        /** CustomerBenefitGrantDiscord */
        CustomerBenefitGrantDiscord: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /** Granted At */
            granted_at: string | null;
            /** Revoked At */
            revoked_at: string | null;
            /**
             * Customer Id
             * Format: uuid4
             */
            customer_id: string;
            /**
             * Benefit Id
             * Format: uuid4
             */
            benefit_id: string;
            /** Subscription Id */
            subscription_id: string | null;
            /** Order Id */
            order_id: string | null;
            /** Is Granted */
            is_granted: boolean;
            /** Is Revoked */
            is_revoked: boolean;
            customer: components["schemas"]["CustomerPortalCustomer"];
            benefit: components["schemas"]["BenefitDiscordSubscriber"];
            properties: components["schemas"]["BenefitGrantDiscordProperties"];
        };
        /** CustomerBenefitGrantDiscordPropertiesUpdate */
        CustomerBenefitGrantDiscordPropertiesUpdate: {
            /** Account Id */
            account_id: string;
        };
        /** CustomerBenefitGrantDiscordUpdate */
        CustomerBenefitGrantDiscordUpdate: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            benefit_type: "discord";
            properties: components["schemas"]["CustomerBenefitGrantDiscordPropertiesUpdate"];
        };
        /** CustomerBenefitGrantDownloadables */
        CustomerBenefitGrantDownloadables: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /** Granted At */
            granted_at: string | null;
            /** Revoked At */
            revoked_at: string | null;
            /**
             * Customer Id
             * Format: uuid4
             */
            customer_id: string;
            /**
             * Benefit Id
             * Format: uuid4
             */
            benefit_id: string;
            /** Subscription Id */
            subscription_id: string | null;
            /** Order Id */
            order_id: string | null;
            /** Is Granted */
            is_granted: boolean;
            /** Is Revoked */
            is_revoked: boolean;
            customer: components["schemas"]["CustomerPortalCustomer"];
            benefit: components["schemas"]["BenefitDownloadablesSubscriber"];
            properties: components["schemas"]["BenefitGrantDownloadablesProperties"];
        };
        /** CustomerBenefitGrantDownloadablesUpdate */
        CustomerBenefitGrantDownloadablesUpdate: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            benefit_type: "downloadables";
        };
        /** CustomerBenefitGrantGitHubRepository */
        CustomerBenefitGrantGitHubRepository: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /** Granted At */
            granted_at: string | null;
            /** Revoked At */
            revoked_at: string | null;
            /**
             * Customer Id
             * Format: uuid4
             */
            customer_id: string;
            /**
             * Benefit Id
             * Format: uuid4
             */
            benefit_id: string;
            /** Subscription Id */
            subscription_id: string | null;
            /** Order Id */
            order_id: string | null;
            /** Is Granted */
            is_granted: boolean;
            /** Is Revoked */
            is_revoked: boolean;
            customer: components["schemas"]["CustomerPortalCustomer"];
            benefit: components["schemas"]["BenefitGitHubRepositorySubscriber"];
            properties: components["schemas"]["BenefitGrantGitHubRepositoryProperties"];
        };
        /** CustomerBenefitGrantGitHubRepositoryPropertiesUpdate */
        CustomerBenefitGrantGitHubRepositoryPropertiesUpdate: {
            /** Account Id */
            account_id: string;
        };
        /** CustomerBenefitGrantGitHubRepositoryUpdate */
        CustomerBenefitGrantGitHubRepositoryUpdate: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            benefit_type: "github_repository";
            properties: components["schemas"]["CustomerBenefitGrantGitHubRepositoryPropertiesUpdate"];
        };
        /** CustomerBenefitGrantLicenseKeys */
        CustomerBenefitGrantLicenseKeys: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /** Granted At */
            granted_at: string | null;
            /** Revoked At */
            revoked_at: string | null;
            /**
             * Customer Id
             * Format: uuid4
             */
            customer_id: string;
            /**
             * Benefit Id
             * Format: uuid4
             */
            benefit_id: string;
            /** Subscription Id */
            subscription_id: string | null;
            /** Order Id */
            order_id: string | null;
            /** Is Granted */
            is_granted: boolean;
            /** Is Revoked */
            is_revoked: boolean;
            customer: components["schemas"]["CustomerPortalCustomer"];
            benefit: components["schemas"]["BenefitLicenseKeysSubscriber"];
            properties: components["schemas"]["BenefitGrantLicenseKeysProperties"];
        };
        /** CustomerBenefitGrantLicenseKeysUpdate */
        CustomerBenefitGrantLicenseKeysUpdate: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            benefit_type: "license_keys";
        };
        /**
         * CustomerBenefitGrantSortProperty
         * @enum {string}
         */
        CustomerBenefitGrantSortProperty: "granted_at" | "-granted_at" | "type" | "-type" | "organization" | "-organization";
        CustomerBenefitGrantUpdate: components["schemas"]["CustomerBenefitGrantDiscordUpdate"] | components["schemas"]["CustomerBenefitGrantGitHubRepositoryUpdate"] | components["schemas"]["CustomerBenefitGrantDownloadablesUpdate"] | components["schemas"]["CustomerBenefitGrantLicenseKeysUpdate"] | components["schemas"]["CustomerBenefitGrantAdsUpdate"] | components["schemas"]["CustomerBenefitGrantCustomUpdate"];
        /**
         * CustomerCancellationReason
         * @enum {string}
         */
        CustomerCancellationReason: "customer_service" | "low_quality" | "missing_features" | "switched_service" | "too_complex" | "too_expensive" | "unused" | "other";
        /** CustomerCreate */
        CustomerCreate: {
            /**
             * Metadata
             * @description Key-value object allowing you to store additional information.
             *
             *     The key must be a string with a maximum length of **40 characters**.
             *     The value must be either:
             *
             *     * A string with a maximum length of **500 characters**
             *     * An integer
             *     * A boolean
             *
             *     You can store up to **50 key-value pairs**.
             */
            metadata?: {
                [key: string]: string | number | boolean;
            };
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Name */
            name?: string | null;
            billing_address?: components["schemas"]["Address"] | null;
            /** Tax Id */
            tax_id?: [
                string,
                components["schemas"]["TaxIDFormat"]
            ] | null;
            /**
             * Organization Id
             * @description The ID of the organization owning the customer. **Required unless you use an organization token.**
             */
            organization_id?: string | null;
        };
        /**
         * CustomerOAuthPlatform
         * @enum {string}
         */
        CustomerOAuthPlatform: "github" | "discord";
        /** CustomerOrder */
        CustomerOrder: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             */
            id: string;
            /** Amount */
            amount: number;
            /** Tax Amount */
            tax_amount: number;
            /** Currency */
            currency: string;
            /**
             * Customer Id
             * Format: uuid4
             */
            customer_id: string;
            /**
             * Product Id
             * Format: uuid4
             */
            product_id: string;
            /**
             * Product Price Id
             * Format: uuid4
             */
            product_price_id: string;
            /** Subscription Id */
            subscription_id: string | null;
            /**
             * User Id
             * Format: uuid4
             * @deprecated
             */
            user_id: string;
            product: components["schemas"]["CustomerOrderProduct"];
            product_price: components["schemas"]["ProductPrice"];
            subscription: components["schemas"]["CustomerOrderSubscription"] | null;
        };
        /**
         * CustomerOrderInvoice
         * @description Order's invoice data.
         */
        CustomerOrderInvoice: {
            /**
             * Url
             * @description The URL to the invoice.
             */
            url: string;
        };
        /** CustomerOrderProduct */
        CustomerOrderProduct: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the product.
             */
            id: string;
            /**
             * Name
             * @description The name of the product.
             */
            name: string;
            /**
             * Description
             * @description The description of the product.
             */
            description: string | null;
            /**
             * Is Recurring
             * @description Whether the product is a subscription tier.
             */
            is_recurring: boolean;
            /**
             * Is Archived
             * @description Whether the product is archived and no longer available.
             */
            is_archived: boolean;
            /**
             * Organization Id
             * Format: uuid4
             * @description The ID of the organization owning the product.
             */
            organization_id: string;
            /**
             * Prices
             * @description List of prices for this product.
             */
            prices: components["schemas"]["ProductPrice"][];
            /**
             * BenefitPublic
             * @description List of benefits granted by the product.
             */
            benefits: components["schemas"]["BenefitBase"][];
            /**
             * Medias
             * @description List of medias associated to the product.
             */
            medias: components["schemas"]["ProductMediaFileRead"][];
            organization: components["schemas"]["Organization"];
        };
        /**
         * CustomerOrderSortProperty
         * @enum {string}
         */
        CustomerOrderSortProperty: "created_at" | "-created_at" | "amount" | "-amount" | "organization" | "-organization" | "product" | "-product" | "subscription" | "-subscription";
        /** CustomerOrderSubscription */
        CustomerOrderSubscription: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /** Amount */
            amount: number | null;
            /** Currency */
            currency: string | null;
            recurring_interval: components["schemas"]["SubscriptionRecurringInterval"];
            status: components["schemas"]["SubscriptionStatus"];
            /**
             * Current Period Start
             * Format: date-time
             */
            current_period_start: string;
            /** Current Period End */
            current_period_end: string | null;
            /** Cancel At Period End */
            cancel_at_period_end: boolean;
            /** Canceled At */
            canceled_at: string | null;
            /** Started At */
            started_at: string | null;
            /** Ends At */
            ends_at: string | null;
            /** Ended At */
            ended_at: string | null;
            /**
             * Customer Id
             * Format: uuid4
             */
            customer_id: string;
            /**
             * Product Id
             * Format: uuid4
             */
            product_id: string;
            /**
             * Price Id
             * Format: uuid4
             */
            price_id: string;
            /** Discount Id */
            discount_id: string | null;
            /** Checkout Id */
            checkout_id: string | null;
            customer_cancellation_reason: components["schemas"]["CustomerCancellationReason"] | null;
            /** Customer Cancellation Comment */
            customer_cancellation_comment: string | null;
        };
        /**
         * CustomerOrganization
         * @description Schema of an organization and related data for customer portal.
         */
        CustomerOrganization: {
            organization: components["schemas"]["Organization"];
            /** Products */
            products: components["schemas"]["CustomerProduct"][];
        };
        /** CustomerPortalCustomer */
        CustomerPortalCustomer: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /** Email */
            email: string;
            /** Email Verified */
            email_verified: boolean;
            /** Name */
            name: string | null;
            billing_address: components["schemas"]["Address"] | null;
            /** Tax Id */
            tax_id: [
                string,
                components["schemas"]["TaxIDFormat"]
            ] | null;
            /** Oauth Accounts */
            oauth_accounts: {
                [key: string]: components["schemas"]["CustomerPortalOAuthAccount"];
            };
        };
        /** CustomerPortalOAuthAccount */
        CustomerPortalOAuthAccount: {
            /** Account Id */
            account_id: string;
            /** Account Username */
            account_username: string | null;
        };
        /**
         * CustomerProduct
         * @description Schema of a product for customer portal.
         */
        CustomerProduct: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the product.
             */
            id: string;
            /**
             * Name
             * @description The name of the product.
             */
            name: string;
            /**
             * Description
             * @description The description of the product.
             */
            description: string | null;
            /**
             * Is Recurring
             * @description Whether the product is a subscription tier.
             */
            is_recurring: boolean;
            /**
             * Is Archived
             * @description Whether the product is archived and no longer available.
             */
            is_archived: boolean;
            /**
             * Organization Id
             * Format: uuid4
             * @description The ID of the organization owning the product.
             */
            organization_id: string;
            /**
             * Prices
             * @description List of available prices for this product.
             */
            prices: components["schemas"]["ProductPrice"][];
            /**
             * BenefitPublic
             * @description The benefits granted by the product.
             */
            benefits: components["schemas"]["BenefitBase"][];
            /**
             * Medias
             * @description The medias associated to the product.
             */
            medias: components["schemas"]["ProductMediaFileRead"][];
        };
        /**
         * CustomerSession
         * @description A customer session that can be used to authenticate as a customer.
         */
        CustomerSession: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /** Token */
            token: string;
            /**
             * Expires At
             * Format: date-time
             */
            expires_at: string;
            /** Customer Portal Url */
            customer_portal_url: string;
            /**
             * Customer Id
             * Format: uuid4
             */
            customer_id: string;
            customer: components["schemas"]["Customer"];
        };
        /** CustomerSessionCodeAuthenticateRequest */
        CustomerSessionCodeAuthenticateRequest: {
            /** Code */
            code: string;
        };
        /** CustomerSessionCodeAuthenticateResponse */
        CustomerSessionCodeAuthenticateResponse: {
            /** Token */
            token: string;
        };
        /** CustomerSessionCodeRequest */
        CustomerSessionCodeRequest: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /**
             * Organization Id
             * Format: uuid4
             */
            organization_id: string;
        };
        /**
         * CustomerSessionCreate
         * @description Schema for creating a customer session.
         */
        CustomerSessionCreate: {
            /**
             * Customer Id
             * Format: uuid4
             * @description ID of the customer to create a session for.
             */
            customer_id: string;
        };
        /**
         * CustomerSortProperty
         * @enum {string}
         */
        CustomerSortProperty: "created_at" | "-created_at" | "email" | "-email" | "name" | "-name";
        /** CustomerSubscription */
        CustomerSubscription: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /** Amount */
            amount: number | null;
            /** Currency */
            currency: string | null;
            recurring_interval: components["schemas"]["SubscriptionRecurringInterval"];
            status: components["schemas"]["SubscriptionStatus"];
            /**
             * Current Period Start
             * Format: date-time
             */
            current_period_start: string;
            /** Current Period End */
            current_period_end: string | null;
            /** Cancel At Period End */
            cancel_at_period_end: boolean;
            /** Canceled At */
            canceled_at: string | null;
            /** Started At */
            started_at: string | null;
            /** Ends At */
            ends_at: string | null;
            /** Ended At */
            ended_at: string | null;
            /**
             * Customer Id
             * Format: uuid4
             */
            customer_id: string;
            /**
             * Product Id
             * Format: uuid4
             */
            product_id: string;
            /**
             * Price Id
             * Format: uuid4
             */
            price_id: string;
            /** Discount Id */
            discount_id: string | null;
            /** Checkout Id */
            checkout_id: string | null;
            customer_cancellation_reason: components["schemas"]["CustomerCancellationReason"] | null;
            /** Customer Cancellation Comment */
            customer_cancellation_comment: string | null;
            /**
             * User Id
             * Format: uuid4
             * @deprecated
             */
            user_id: string;
            product: components["schemas"]["CustomerSubscriptionProduct"];
            price: components["schemas"]["ProductPrice"];
        };
        /** CustomerSubscriptionCancel */
        CustomerSubscriptionCancel: {
            /**
             * Cancel At Period End
             * @description Cancel an active subscription once the current period ends.
             *
             *     Or uncancel a subscription currently set to be revoked at period end.
             */
            cancel_at_period_end?: boolean | null;
            /** @description Customers reason for cancellation.
             *
             *     * `too_expensive`: Too expensive for the customer.
             *     * `missing_features`: Customer is missing certain features.
             *     * `switched_service`: Customer switched to another service.
             *     * `unused`: Customer is not using it enough.
             *     * `customer_service`: Customer is not satisfied with the customer service.
             *     * `low_quality`: Customer is unhappy with the quality.
             *     * `too_complex`: Customer considers the service too complicated.
             *     * `other`: Other reason(s). */
            cancellation_reason?: components["schemas"]["CustomerCancellationReason"] | null;
            /**
             * Cancellation Comment
             * @description Customer feedback and why they decided to cancel.
             */
            cancellation_comment?: string | null;
        };
        /** CustomerSubscriptionProduct */
        CustomerSubscriptionProduct: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the product.
             */
            id: string;
            /**
             * Name
             * @description The name of the product.
             */
            name: string;
            /**
             * Description
             * @description The description of the product.
             */
            description: string | null;
            /**
             * Is Recurring
             * @description Whether the product is a subscription tier.
             */
            is_recurring: boolean;
            /**
             * Is Archived
             * @description Whether the product is archived and no longer available.
             */
            is_archived: boolean;
            /**
             * Organization Id
             * Format: uuid4
             * @description The ID of the organization owning the product.
             */
            organization_id: string;
            /**
             * Prices
             * @description List of prices for this product.
             */
            prices: components["schemas"]["ProductPrice"][];
            /**
             * BenefitPublic
             * @description List of benefits granted by the product.
             */
            benefits: components["schemas"]["BenefitBase"][];
            /**
             * Medias
             * @description List of medias associated to the product.
             */
            medias: components["schemas"]["ProductMediaFileRead"][];
            organization: components["schemas"]["Organization"];
        };
        /**
         * CustomerSubscriptionSortProperty
         * @enum {string}
         */
        CustomerSubscriptionSortProperty: "started_at" | "-started_at" | "amount" | "-amount" | "status" | "-status" | "organization" | "-organization" | "product" | "-product";
        CustomerSubscriptionUpdate: components["schemas"]["CustomerSubscriptionUpdatePrice"] | components["schemas"]["CustomerSubscriptionCancel"];
        /** CustomerSubscriptionUpdatePrice */
        CustomerSubscriptionUpdatePrice: {
            /**
             * Product Price Id
             * Format: uuid4
             * @description Update subscription to another price.
             */
            product_price_id: string;
        };
        /** CustomerUpdate */
        CustomerUpdate: {
            /** Metadata */
            metadata?: {
                [key: string]: string | number | boolean;
            } | null;
            /** Email */
            email?: string | null;
            /** Name */
            name?: string | null;
            billing_address?: components["schemas"]["Address"] | null;
            /** Tax Id */
            tax_id?: [
                string,
                components["schemas"]["TaxIDFormat"]
            ] | null;
        };
        /** DiscordGuild */
        DiscordGuild: {
            /** Name */
            name: string;
            /** Roles */
            roles: components["schemas"]["DiscordGuildRole"][];
        };
        /** DiscordGuildRole */
        DiscordGuildRole: {
            /** Id */
            id: string;
            /** Name */
            name: string;
            /** Position */
            position: number;
            /** Is Polar Bot */
            is_polar_bot: boolean;
            /**
             * Color
             * Format: color
             */
            color: string;
        };
        Discount: components["schemas"]["DiscountFixedOnceForeverDuration"] | components["schemas"]["DiscountFixedRepeatDuration"] | components["schemas"]["DiscountPercentageOnceForeverDuration"] | components["schemas"]["DiscountPercentageRepeatDuration"];
        DiscountCreate: components["schemas"]["DiscountFixedOnceForeverDurationCreate"] | components["schemas"]["DiscountFixedRepeatDurationCreate"] | components["schemas"]["DiscountPercentageOnceForeverDurationCreate"] | components["schemas"]["DiscountPercentageRepeatDurationCreate"];
        /**
         * DiscountDuration
         * @enum {string}
         */
        DiscountDuration: "once" | "forever" | "repeating";
        /**
         * DiscountFixedOnceForeverDuration
         * @description Schema for a fixed amount discount that is applied once or forever.
         */
        DiscountFixedOnceForeverDuration: {
            duration: components["schemas"]["DiscountDuration"];
            type: components["schemas"]["DiscountType"];
            /** Amount */
            amount: number;
            /** Currency */
            currency: string;
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /** Metadata */
            metadata: {
                [key: string]: string | number | boolean;
            };
            /**
             * Name
             * @description Name of the discount. Will be displayed to the customer when the discount is applied.
             */
            name: string;
            /**
             * Code
             * @description Code customers can use to apply the discount during checkout.
             */
            code: string | null;
            /**
             * Starts At
             * @description Timestamp after which the discount is redeemable.
             */
            starts_at: string | null;
            /**
             * Ends At
             * @description Timestamp after which the discount is no longer redeemable.
             */
            ends_at: string | null;
            /**
             * Max Redemptions
             * @description Maximum number of times the discount can be redeemed.
             */
            max_redemptions: number | null;
            /**
             * Redemptions Count
             * @description Number of times the discount has been redeemed.
             */
            redemptions_count: number;
            /**
             * Organization Id
             * Format: uuid4
             * @description The organization ID.
             */
            organization_id: string;
            /** Products */
            products: components["schemas"]["DiscountProduct"][];
        };
        /** DiscountFixedOnceForeverDurationBase */
        DiscountFixedOnceForeverDurationBase: {
            duration: components["schemas"]["DiscountDuration"];
            type: components["schemas"]["DiscountType"];
            /** Amount */
            amount: number;
            /** Currency */
            currency: string;
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /** Metadata */
            metadata: {
                [key: string]: string | number | boolean;
            };
            /**
             * Name
             * @description Name of the discount. Will be displayed to the customer when the discount is applied.
             */
            name: string;
            /**
             * Code
             * @description Code customers can use to apply the discount during checkout.
             */
            code: string | null;
            /**
             * Starts At
             * @description Timestamp after which the discount is redeemable.
             */
            starts_at: string | null;
            /**
             * Ends At
             * @description Timestamp after which the discount is no longer redeemable.
             */
            ends_at: string | null;
            /**
             * Max Redemptions
             * @description Maximum number of times the discount can be redeemed.
             */
            max_redemptions: number | null;
            /**
             * Redemptions Count
             * @description Number of times the discount has been redeemed.
             */
            redemptions_count: number;
            /**
             * Organization Id
             * Format: uuid4
             * @description The organization ID.
             */
            organization_id: string;
        };
        /**
         * DiscountFixedOnceForeverDurationCreate
         * @description Schema to create a fixed amount discount that is applied once or forever.
         */
        DiscountFixedOnceForeverDurationCreate: {
            duration: components["schemas"]["DiscountDuration"];
            /** @description Type of the discount. */
            type: components["schemas"]["DiscountType"];
            /**
             * Amount
             * @description Fixed amount to discount from the invoice total.
             */
            amount: number;
            /**
             * Currency
             * @description The currency. Currently, only `usd` is supported.
             * @default usd
             */
            currency: string;
            /**
             * Metadata
             * @description Key-value object allowing you to store additional information.
             *
             *     The key must be a string with a maximum length of **40 characters**.
             *     The value must be either:
             *
             *     * A string with a maximum length of **500 characters**
             *     * An integer
             *     * A boolean
             *
             *     You can store up to **50 key-value pairs**.
             */
            metadata?: {
                [key: string]: string | number | boolean;
            };
            /**
             * Name
             * @description Name of the discount. Will be displayed to the customer when the discount is applied.
             */
            name: string;
            /**
             * Code
             * @description Code customers can use to apply the discount during checkout. Must be between 3 and 256 characters long and contain only alphanumeric characters.If not provided, the discount can only be applied via the API.
             */
            code?: string | null;
            /**
             * Starts At
             * @description Optional timestamp after which the discount is redeemable.
             */
            starts_at?: string | null;
            /**
             * Ends At
             * @description Optional timestamp after which the discount is no longer redeemable.
             */
            ends_at?: string | null;
            /**
             * Max Redemptions
             * @description Optional maximum number of times the discount can be redeemed.
             */
            max_redemptions?: number | null;
            /** Products */
            products?: string[] | null;
            /**
             * Organization Id
             * @description The ID of the organization owning the discount. **Required unless you use an organization token.**
             */
            organization_id?: string | null;
        };
        /**
         * DiscountFixedRepeatDuration
         * @description Schema for a fixed amount discount that is applied on every invoice
         *     for a certain number of months.
         */
        DiscountFixedRepeatDuration: {
            duration: components["schemas"]["DiscountDuration"];
            /** Duration In Months */
            duration_in_months: number;
            type: components["schemas"]["DiscountType"];
            /** Amount */
            amount: number;
            /** Currency */
            currency: string;
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /** Metadata */
            metadata: {
                [key: string]: string | number | boolean;
            };
            /**
             * Name
             * @description Name of the discount. Will be displayed to the customer when the discount is applied.
             */
            name: string;
            /**
             * Code
             * @description Code customers can use to apply the discount during checkout.
             */
            code: string | null;
            /**
             * Starts At
             * @description Timestamp after which the discount is redeemable.
             */
            starts_at: string | null;
            /**
             * Ends At
             * @description Timestamp after which the discount is no longer redeemable.
             */
            ends_at: string | null;
            /**
             * Max Redemptions
             * @description Maximum number of times the discount can be redeemed.
             */
            max_redemptions: number | null;
            /**
             * Redemptions Count
             * @description Number of times the discount has been redeemed.
             */
            redemptions_count: number;
            /**
             * Organization Id
             * Format: uuid4
             * @description The organization ID.
             */
            organization_id: string;
            /** Products */
            products: components["schemas"]["DiscountProduct"][];
        };
        /** DiscountFixedRepeatDurationBase */
        DiscountFixedRepeatDurationBase: {
            duration: components["schemas"]["DiscountDuration"];
            /** Duration In Months */
            duration_in_months: number;
            type: components["schemas"]["DiscountType"];
            /** Amount */
            amount: number;
            /** Currency */
            currency: string;
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /** Metadata */
            metadata: {
                [key: string]: string | number | boolean;
            };
            /**
             * Name
             * @description Name of the discount. Will be displayed to the customer when the discount is applied.
             */
            name: string;
            /**
             * Code
             * @description Code customers can use to apply the discount during checkout.
             */
            code: string | null;
            /**
             * Starts At
             * @description Timestamp after which the discount is redeemable.
             */
            starts_at: string | null;
            /**
             * Ends At
             * @description Timestamp after which the discount is no longer redeemable.
             */
            ends_at: string | null;
            /**
             * Max Redemptions
             * @description Maximum number of times the discount can be redeemed.
             */
            max_redemptions: number | null;
            /**
             * Redemptions Count
             * @description Number of times the discount has been redeemed.
             */
            redemptions_count: number;
            /**
             * Organization Id
             * Format: uuid4
             * @description The organization ID.
             */
            organization_id: string;
        };
        /**
         * DiscountFixedRepeatDurationCreate
         * @description Schema to create a fixed amount discount that is applied on every invoice
         *     for a certain number of months.
         */
        DiscountFixedRepeatDurationCreate: {
            duration: components["schemas"]["DiscountDuration"];
            /**
             * Duration In Months
             * @description Number of months the discount should be applied.
             *
             *     For this to work on yearly pricing, you should multiply this by 12.
             *     For example, to apply the discount for 2 years, set this to 24.
             */
            duration_in_months: number;
            /** @description Type of the discount. */
            type: components["schemas"]["DiscountType"];
            /**
             * Amount
             * @description Fixed amount to discount from the invoice total.
             */
            amount: number;
            /**
             * Currency
             * @description The currency. Currently, only `usd` is supported.
             * @default usd
             */
            currency: string;
            /**
             * Metadata
             * @description Key-value object allowing you to store additional information.
             *
             *     The key must be a string with a maximum length of **40 characters**.
             *     The value must be either:
             *
             *     * A string with a maximum length of **500 characters**
             *     * An integer
             *     * A boolean
             *
             *     You can store up to **50 key-value pairs**.
             */
            metadata?: {
                [key: string]: string | number | boolean;
            };
            /**
             * Name
             * @description Name of the discount. Will be displayed to the customer when the discount is applied.
             */
            name: string;
            /**
             * Code
             * @description Code customers can use to apply the discount during checkout. Must be between 3 and 256 characters long and contain only alphanumeric characters.If not provided, the discount can only be applied via the API.
             */
            code?: string | null;
            /**
             * Starts At
             * @description Optional timestamp after which the discount is redeemable.
             */
            starts_at?: string | null;
            /**
             * Ends At
             * @description Optional timestamp after which the discount is no longer redeemable.
             */
            ends_at?: string | null;
            /**
             * Max Redemptions
             * @description Optional maximum number of times the discount can be redeemed.
             */
            max_redemptions?: number | null;
            /** Products */
            products?: string[] | null;
            /**
             * Organization Id
             * @description The ID of the organization owning the discount. **Required unless you use an organization token.**
             */
            organization_id?: string | null;
        };
        /**
         * DiscountPercentageOnceForeverDuration
         * @description Schema for a percentage discount that is applied once or forever.
         */
        DiscountPercentageOnceForeverDuration: {
            duration: components["schemas"]["DiscountDuration"];
            type: components["schemas"]["DiscountType"];
            /** Basis Points */
            basis_points: number;
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /** Metadata */
            metadata: {
                [key: string]: string | number | boolean;
            };
            /**
             * Name
             * @description Name of the discount. Will be displayed to the customer when the discount is applied.
             */
            name: string;
            /**
             * Code
             * @description Code customers can use to apply the discount during checkout.
             */
            code: string | null;
            /**
             * Starts At
             * @description Timestamp after which the discount is redeemable.
             */
            starts_at: string | null;
            /**
             * Ends At
             * @description Timestamp after which the discount is no longer redeemable.
             */
            ends_at: string | null;
            /**
             * Max Redemptions
             * @description Maximum number of times the discount can be redeemed.
             */
            max_redemptions: number | null;
            /**
             * Redemptions Count
             * @description Number of times the discount has been redeemed.
             */
            redemptions_count: number;
            /**
             * Organization Id
             * Format: uuid4
             * @description The organization ID.
             */
            organization_id: string;
            /** Products */
            products: components["schemas"]["DiscountProduct"][];
        };
        /** DiscountPercentageOnceForeverDurationBase */
        DiscountPercentageOnceForeverDurationBase: {
            duration: components["schemas"]["DiscountDuration"];
            type: components["schemas"]["DiscountType"];
            /** Basis Points */
            basis_points: number;
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /** Metadata */
            metadata: {
                [key: string]: string | number | boolean;
            };
            /**
             * Name
             * @description Name of the discount. Will be displayed to the customer when the discount is applied.
             */
            name: string;
            /**
             * Code
             * @description Code customers can use to apply the discount during checkout.
             */
            code: string | null;
            /**
             * Starts At
             * @description Timestamp after which the discount is redeemable.
             */
            starts_at: string | null;
            /**
             * Ends At
             * @description Timestamp after which the discount is no longer redeemable.
             */
            ends_at: string | null;
            /**
             * Max Redemptions
             * @description Maximum number of times the discount can be redeemed.
             */
            max_redemptions: number | null;
            /**
             * Redemptions Count
             * @description Number of times the discount has been redeemed.
             */
            redemptions_count: number;
            /**
             * Organization Id
             * Format: uuid4
             * @description The organization ID.
             */
            organization_id: string;
        };
        /**
         * DiscountPercentageOnceForeverDurationCreate
         * @description Schema to create a percentage discount that is applied once or forever.
         */
        DiscountPercentageOnceForeverDurationCreate: {
            duration: components["schemas"]["DiscountDuration"];
            /** @description Type of the discount. */
            type: components["schemas"]["DiscountType"];
            /**
             * Basis Points
             * @description Discount percentage in basis points.
             *
             *     A basis point is 1/100th of a percent.
             *     For example, to create a 25.5% discount, set this to 2550.
             */
            basis_points: number;
            /**
             * Metadata
             * @description Key-value object allowing you to store additional information.
             *
             *     The key must be a string with a maximum length of **40 characters**.
             *     The value must be either:
             *
             *     * A string with a maximum length of **500 characters**
             *     * An integer
             *     * A boolean
             *
             *     You can store up to **50 key-value pairs**.
             */
            metadata?: {
                [key: string]: string | number | boolean;
            };
            /**
             * Name
             * @description Name of the discount. Will be displayed to the customer when the discount is applied.
             */
            name: string;
            /**
             * Code
             * @description Code customers can use to apply the discount during checkout. Must be between 3 and 256 characters long and contain only alphanumeric characters.If not provided, the discount can only be applied via the API.
             */
            code?: string | null;
            /**
             * Starts At
             * @description Optional timestamp after which the discount is redeemable.
             */
            starts_at?: string | null;
            /**
             * Ends At
             * @description Optional timestamp after which the discount is no longer redeemable.
             */
            ends_at?: string | null;
            /**
             * Max Redemptions
             * @description Optional maximum number of times the discount can be redeemed.
             */
            max_redemptions?: number | null;
            /** Products */
            products?: string[] | null;
            /**
             * Organization Id
             * @description The ID of the organization owning the discount. **Required unless you use an organization token.**
             */
            organization_id?: string | null;
        };
        /**
         * DiscountPercentageRepeatDuration
         * @description Schema for a percentage discount that is applied on every invoice
         *     for a certain number of months.
         */
        DiscountPercentageRepeatDuration: {
            duration: components["schemas"]["DiscountDuration"];
            /** Duration In Months */
            duration_in_months: number;
            type: components["schemas"]["DiscountType"];
            /** Basis Points */
            basis_points: number;
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /** Metadata */
            metadata: {
                [key: string]: string | number | boolean;
            };
            /**
             * Name
             * @description Name of the discount. Will be displayed to the customer when the discount is applied.
             */
            name: string;
            /**
             * Code
             * @description Code customers can use to apply the discount during checkout.
             */
            code: string | null;
            /**
             * Starts At
             * @description Timestamp after which the discount is redeemable.
             */
            starts_at: string | null;
            /**
             * Ends At
             * @description Timestamp after which the discount is no longer redeemable.
             */
            ends_at: string | null;
            /**
             * Max Redemptions
             * @description Maximum number of times the discount can be redeemed.
             */
            max_redemptions: number | null;
            /**
             * Redemptions Count
             * @description Number of times the discount has been redeemed.
             */
            redemptions_count: number;
            /**
             * Organization Id
             * Format: uuid4
             * @description The organization ID.
             */
            organization_id: string;
            /** Products */
            products: components["schemas"]["DiscountProduct"][];
        };
        /** DiscountPercentageRepeatDurationBase */
        DiscountPercentageRepeatDurationBase: {
            duration: components["schemas"]["DiscountDuration"];
            /** Duration In Months */
            duration_in_months: number;
            type: components["schemas"]["DiscountType"];
            /** Basis Points */
            basis_points: number;
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /** Metadata */
            metadata: {
                [key: string]: string | number | boolean;
            };
            /**
             * Name
             * @description Name of the discount. Will be displayed to the customer when the discount is applied.
             */
            name: string;
            /**
             * Code
             * @description Code customers can use to apply the discount during checkout.
             */
            code: string | null;
            /**
             * Starts At
             * @description Timestamp after which the discount is redeemable.
             */
            starts_at: string | null;
            /**
             * Ends At
             * @description Timestamp after which the discount is no longer redeemable.
             */
            ends_at: string | null;
            /**
             * Max Redemptions
             * @description Maximum number of times the discount can be redeemed.
             */
            max_redemptions: number | null;
            /**
             * Redemptions Count
             * @description Number of times the discount has been redeemed.
             */
            redemptions_count: number;
            /**
             * Organization Id
             * Format: uuid4
             * @description The organization ID.
             */
            organization_id: string;
        };
        /**
         * DiscountPercentageRepeatDurationCreate
         * @description Schema to create a percentage discount that is applied on every invoice
         *     for a certain number of months.
         */
        DiscountPercentageRepeatDurationCreate: {
            duration: components["schemas"]["DiscountDuration"];
            /**
             * Duration In Months
             * @description Number of months the discount should be applied.
             *
             *     For this to work on yearly pricing, you should multiply this by 12.
             *     For example, to apply the discount for 2 years, set this to 24.
             */
            duration_in_months: number;
            /** @description Type of the discount. */
            type: components["schemas"]["DiscountType"];
            /**
             * Basis Points
             * @description Discount percentage in basis points.
             *
             *     A basis point is 1/100th of a percent.
             *     For example, to create a 25.5% discount, set this to 2550.
             */
            basis_points: number;
            /**
             * Metadata
             * @description Key-value object allowing you to store additional information.
             *
             *     The key must be a string with a maximum length of **40 characters**.
             *     The value must be either:
             *
             *     * A string with a maximum length of **500 characters**
             *     * An integer
             *     * A boolean
             *
             *     You can store up to **50 key-value pairs**.
             */
            metadata?: {
                [key: string]: string | number | boolean;
            };
            /**
             * Name
             * @description Name of the discount. Will be displayed to the customer when the discount is applied.
             */
            name: string;
            /**
             * Code
             * @description Code customers can use to apply the discount during checkout. Must be between 3 and 256 characters long and contain only alphanumeric characters.If not provided, the discount can only be applied via the API.
             */
            code?: string | null;
            /**
             * Starts At
             * @description Optional timestamp after which the discount is redeemable.
             */
            starts_at?: string | null;
            /**
             * Ends At
             * @description Optional timestamp after which the discount is no longer redeemable.
             */
            ends_at?: string | null;
            /**
             * Max Redemptions
             * @description Optional maximum number of times the discount can be redeemed.
             */
            max_redemptions?: number | null;
            /** Products */
            products?: string[] | null;
            /**
             * Organization Id
             * @description The ID of the organization owning the discount. **Required unless you use an organization token.**
             */
            organization_id?: string | null;
        };
        /**
         * DiscountProduct
         * @description A product that a discount can be applied to.
         */
        DiscountProduct: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the product.
             */
            id: string;
            /**
             * Name
             * @description The name of the product.
             */
            name: string;
            /**
             * Description
             * @description The description of the product.
             */
            description: string | null;
            /**
             * Is Recurring
             * @description Whether the product is a subscription tier.
             */
            is_recurring: boolean;
            /**
             * Is Archived
             * @description Whether the product is archived and no longer available.
             */
            is_archived: boolean;
            /**
             * Organization Id
             * Format: uuid4
             * @description The ID of the organization owning the product.
             */
            organization_id: string;
        };
        /**
         * DiscountSortProperty
         * @enum {string}
         */
        DiscountSortProperty: "created_at" | "-created_at" | "name" | "-name" | "code" | "-code" | "redemptions_count" | "-redemptions_count";
        /**
         * DiscountType
         * @enum {string}
         */
        DiscountType: "fixed" | "percentage";
        /**
         * DiscountUpdate
         * @description Schema to update a discount.
         */
        DiscountUpdate: {
            /** Metadata */
            metadata?: {
                [key: string]: string | number | boolean;
            } | null;
            /** Name */
            name?: string | null;
            /** Code */
            code?: (string | null) | null;
            /** Starts At */
            starts_at?: (string | null) | null;
            /** Ends At */
            ends_at?: (string | null) | null;
            /** Max Redemptions */
            max_redemptions?: (number | null) | null;
            duration?: components["schemas"]["DiscountDuration"] | null;
            /** Duration In Months */
            duration_in_months?: number | null;
            type?: components["schemas"]["DiscountType"] | null;
            /** Amount */
            amount?: number | null;
            /** Currency */
            currency?: string | null;
            /** Basis Points */
            basis_points?: number | null;
            /** Products */
            products?: string[] | null;
        };
        /**
         * DownloadableFileCreate
         * @description Schema to create a file to be associated with the downloadables benefit.
         */
        DownloadableFileCreate: {
            /** Organization Id */
            organization_id?: string | null;
            /** Name */
            name: string;
            /** Mime Type */
            mime_type: string;
            /** Size */
            size: number;
            /** Checksum Sha256 Base64 */
            checksum_sha256_base64?: string | null;
            upload: components["schemas"]["S3FileCreateMultipart"];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            service: "downloadable";
            /** Version */
            version?: string | null;
        };
        /**
         * DownloadableFileRead
         * @description File to be associated with the downloadables benefit.
         */
        DownloadableFileRead: {
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /**
             * Organization Id
             * Format: uuid4
             */
            organization_id: string;
            /** Name */
            name: string;
            /** Path */
            path: string;
            /** Mime Type */
            mime_type: string;
            /** Size */
            size: number;
            /** Storage Version */
            storage_version: string | null;
            /** Checksum Etag */
            checksum_etag: string | null;
            /** Checksum Sha256 Base64 */
            checksum_sha256_base64: string | null;
            /** Checksum Sha256 Hex */
            checksum_sha256_hex: string | null;
            /** Last Modified At */
            last_modified_at: string | null;
            /** Version */
            version: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            service: "downloadable";
            /** Is Uploaded */
            is_uploaded: boolean;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Size Readable */
            readonly size_readable: string;
        };
        /** DownloadableRead */
        DownloadableRead: {
            /**
             * Id
             * Format: uuid4
             */
            id: string;
            /**
             * Benefit Id
             * Format: uuid4
             */
            benefit_id: string;
            file: components["schemas"]["FileDownload"];
        };
        /** EmailUpdateRequest */
        EmailUpdateRequest: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Return To */
            return_to?: string | null;
        };
        /** Entry */
        Entry: {
            /** Type */
            type: string;
            /** Id */
            id: string;
            attributes: components["schemas"]["Issue"];
            /** Rewards */
            rewards: components["schemas"]["Reward"][] | null;
            pledges_summary: components["schemas"]["PledgesTypeSummaries"] | null;
            /** Pledges */
            pledges: components["schemas"]["Pledge"][] | null;
        };
        /** Event */
        Event: {
            /** Metadata */
            metadata: {
                [key: string]: string | number | boolean;
            };
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /**
             * Timestamp
             * Format: date-time
             * @description The timestamp of the event.
             */
            timestamp: string;
            /**
             * Name
             * @description The name of the event.
             */
            name: string;
            /** @description The source of the event. `system` events are created by Polar. `user` events are the one you create through our ingestion API. */
            source: components["schemas"]["EventSource"];
            /**
             * Organization Id
             * Format: uuid4
             * @description The ID of the organization owning the event.
             */
            organization_id: string;
            /**
             * Customer Id
             * @description ID of the customer in your Polar organization associated with the event.
             */
            customer_id: string | null;
            /** @description The customer associated with the event. */
            customer: components["schemas"]["Customer"] | null;
            /**
             * External Customer Id
             * @description ID of the customer in your system associated with the event.
             */
            external_customer_id: string | null;
        };
        /** EventCreateCustomer */
        EventCreateCustomer: {
            /**
             * Metadata
             * @description Key-value object allowing you to store additional information.
             *
             *     The key must be a string with a maximum length of **40 characters**.
             *     The value must be either:
             *
             *     * A string with a maximum length of **500 characters**
             *     * An integer
             *     * A boolean
             *
             *     You can store up to **50 key-value pairs**.
             */
            metadata?: {
                [key: string]: string | number | boolean;
            };
            /**
             * Timestamp
             * Format: date-time
             * @description The timestamp of the event.
             */
            timestamp?: string;
            /**
             * Name
             * @description The name of the event.
             */
            name: string;
            /**
             * Organization Id
             * @description The ID of the organization owning the event. **Required unless you use an organization token.**
             */
            organization_id?: string | null;
            /**
             * Customer Id
             * Format: uuid4
             * @description ID of the customer in your Polar organization associated with the event.
             */
            customer_id: string;
        };
        /** EventCreateExternalCustomer */
        EventCreateExternalCustomer: {
            /**
             * Metadata
             * @description Key-value object allowing you to store additional information.
             *
             *     The key must be a string with a maximum length of **40 characters**.
             *     The value must be either:
             *
             *     * A string with a maximum length of **500 characters**
             *     * An integer
             *     * A boolean
             *
             *     You can store up to **50 key-value pairs**.
             */
            metadata?: {
                [key: string]: string | number | boolean;
            };
            /**
             * Timestamp
             * Format: date-time
             * @description The timestamp of the event.
             */
            timestamp?: string;
            /**
             * Name
             * @description The name of the event.
             */
            name: string;
            /**
             * Organization Id
             * @description The ID of the organization owning the event. **Required unless you use an organization token.**
             */
            organization_id?: string | null;
            /**
             * External Customer Id
             * @description ID of the customer in your system associated with the event.
             */
            external_customer_id: string;
        };
        /**
         * EventSortProperty
         * @enum {string}
         */
        EventSortProperty: "timestamp" | "-timestamp";
        /**
         * EventSource
         * @enum {string}
         */
        EventSource: "system" | "user";
        /** EventsIngest */
        EventsIngest: {
            /**
             * Events
             * @description List of events to ingest.
             */
            events: (components["schemas"]["EventCreateCustomer"] | components["schemas"]["EventCreateExternalCustomer"])[];
        };
        /** EventsIngestResponse */
        EventsIngestResponse: {
            /**
             * Inserted
             * @description Number of events inserted.
             */
            inserted: number;
        };
        /**
         * ExistingProductPrice
         * @description A price that already exists for this product.
         *
         *     Useful when updating a product if you want to keep an existing price.
         */
        ExistingProductPrice: {
            /**
             * Id
             * Format: uuid4
             */
            id: string;
        };
        /** ExternalOrganization */
        ExternalOrganization: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            platform: components["schemas"]["Platforms"];
            /** Name */
            name: string;
            /** Avatar Url */
            avatar_url: string;
            /** Is Personal */
            is_personal: boolean;
            /** Bio */
            bio: string | null;
            /** Pretty Name */
            pretty_name: string | null;
            /** Company */
            company: string | null;
            /** Blog */
            blog: string | null;
            /** Location */
            location: string | null;
            /** Email */
            email: string | null;
            /** Twitter Username */
            twitter_username: string | null;
            /** Organization Id */
            organization_id: string | null;
        };
        /**
         * ExternalOrganizationSortProperty
         * @enum {string}
         */
        ExternalOrganizationSortProperty: "created_at" | "-created_at" | "name" | "-name";
        FileCreate: components["schemas"]["DownloadableFileCreate"] | components["schemas"]["ProductMediaFileCreate"] | components["schemas"]["OrganizationAvatarFileCreate"];
        /** FileDownload */
        FileDownload: {
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /**
             * Organization Id
             * Format: uuid4
             */
            organization_id: string;
            /** Name */
            name: string;
            /** Path */
            path: string;
            /** Mime Type */
            mime_type: string;
            /** Size */
            size: number;
            /** Storage Version */
            storage_version: string | null;
            /** Checksum Etag */
            checksum_etag: string | null;
            /** Checksum Sha256 Base64 */
            checksum_sha256_base64: string | null;
            /** Checksum Sha256 Hex */
            checksum_sha256_hex: string | null;
            /** Last Modified At */
            last_modified_at: string | null;
            download: components["schemas"]["S3DownloadURL"];
            /** Version */
            version: string | null;
            /** Is Uploaded */
            is_uploaded: boolean;
            service: components["schemas"]["FileServiceTypes"];
            /** Size Readable */
            readonly size_readable: string;
        };
        /** FilePatch */
        FilePatch: {
            /** Name */
            name?: string | null;
            /** Version */
            version?: string | null;
        };
        /**
         * FileServiceTypes
         * @enum {string}
         */
        FileServiceTypes: "downloadable" | "product_media" | "organization_avatar";
        /** FileUpload */
        FileUpload: {
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /**
             * Organization Id
             * Format: uuid4
             */
            organization_id: string;
            /** Name */
            name: string;
            /** Path */
            path: string;
            /** Mime Type */
            mime_type: string;
            /** Size */
            size: number;
            /** Storage Version */
            storage_version: string | null;
            /** Checksum Etag */
            checksum_etag: string | null;
            /** Checksum Sha256 Base64 */
            checksum_sha256_base64: string | null;
            /** Checksum Sha256 Hex */
            checksum_sha256_hex: string | null;
            /** Last Modified At */
            last_modified_at: string | null;
            upload: components["schemas"]["S3FileUploadMultipart"];
            /** Version */
            version: string | null;
            /**
             * Is Uploaded
             * @default false
             */
            is_uploaded: boolean;
            service: components["schemas"]["FileServiceTypes"];
            /** Size Readable */
            readonly size_readable: string;
        };
        /** FileUploadCompleted */
        FileUploadCompleted: {
            /** Id */
            id: string;
            /** Path */
            path: string;
            /** Parts */
            parts: components["schemas"]["S3FileUploadCompletedPart"][];
        };
        /** Filter */
        Filter: {
            conjunction: components["schemas"]["FilterConjunction"];
            /** Clauses */
            clauses: (components["schemas"]["FilterClause"] | components["schemas"]["Filter"])[];
        };
        /** FilterClause */
        FilterClause: {
            /** Property */
            property: string;
            operator: components["schemas"]["FilterOperator"];
            /** Value */
            value: string | number | boolean;
        };
        /**
         * FilterConjunction
         * @enum {string}
         */
        FilterConjunction: "and" | "or";
        /**
         * FilterOperator
         * @enum {string}
         */
        FilterOperator: "eq" | "ne" | "gt" | "gte" | "lt" | "lte" | "like" | "not_like";
        /** Funding */
        Funding: {
            funding_goal?: components["schemas"]["CurrencyAmount"] | null;
            /** @description Sum of pledges to this isuse (including currently open pledges and pledges that have been paid out). Always in USD. */
            pledges_sum?: components["schemas"]["CurrencyAmount"] | null;
        };
        /** GitHubInvitesBenefitOrganization */
        GitHubInvitesBenefitOrganization: {
            /** Name */
            name: string;
            /** Is Personal */
            is_personal: boolean;
            /** Plan Name */
            plan_name: string;
            /** Is Free */
            is_free: boolean;
        };
        /** GitHubInvitesBenefitRepositories */
        GitHubInvitesBenefitRepositories: {
            /** Repositories */
            repositories: components["schemas"]["GitHubInvitesBenefitRepository"][];
            /** Organizations */
            organizations: components["schemas"]["GitHubInvitesBenefitOrganization"][];
        };
        /** GitHubInvitesBenefitRepository */
        GitHubInvitesBenefitRepository: {
            /** Repository Owner */
            repository_owner: string;
            /** Repository Name */
            repository_name: string;
        };
        /** GithubUser */
        GithubUser: {
            /** Username */
            username: string;
            /** Avatar Url */
            avatar_url: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** InstallationCreate */
        InstallationCreate: {
            /** Installation Id */
            installation_id: number;
            /**
             * Organization Id
             * Format: uuid4
             * @description The organization ID.
             */
            organization_id: string;
        };
        /** IntrospectTokenResponse */
        IntrospectTokenResponse: {
            /** Active */
            active: boolean;
            /** Client Id */
            client_id: string;
            /**
             * Token Type
             * @enum {string}
             */
            token_type: "access_token" | "refresh_token";
            /** Scope */
            scope: string;
            sub_type: components["schemas"]["SubType"];
            /** Sub */
            sub: string;
            /** Aud */
            aud: string;
            /** Iss */
            iss: string;
            /** Exp */
            exp: number;
            /** Iat */
            iat: number;
        };
        /** Issue */
        Issue: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** @description Issue platform (currently always GitHub) */
            platform: components["schemas"]["Platforms"];
            /**
             * Number
             * @description GitHub #number
             */
            number: number;
            /**
             * Title
             * @description GitHub issue title
             */
            title: string;
            /**
             * Body
             * @description GitHub issue body
             */
            body?: string | null;
            /**
             * Comments
             * @description Number of GitHub comments made on the issue
             */
            comments?: number | null;
            /**
             * Labels
             * @default []
             */
            labels: components["schemas"]["Label"][];
            /** @description GitHub author */
            author?: components["schemas"]["Author"] | null;
            /**
             * Assignees
             * @description GitHub assignees
             */
            assignees?: components["schemas"]["Assignee"][] | null;
            /** @description GitHub reactions */
            reactions?: components["schemas"]["Reactions"] | null;
            state: components["schemas"]["State"];
            /** Issue Closed At */
            issue_closed_at?: string | null;
            /** Issue Modified At */
            issue_modified_at?: string | null;
            /**
             * Issue Created At
             * Format: date-time
             */
            issue_created_at: string;
            /**
             * Needs Confirmation Solved
             * @description If a maintainer needs to mark this issue as solved
             */
            needs_confirmation_solved: boolean;
            /**
             * Confirmed Solved At
             * @description If this issue has been marked as confirmed solved through Polar
             */
            confirmed_solved_at?: string | null;
            funding: components["schemas"]["Funding"];
            /** @description The repository that the issue is in */
            repository: components["schemas"]["Repository"];
            /**
             * Upfront Split To Contributors
             * @description Share of rewrads that will be rewarded to contributors of this issue. A number between 0 and 100 (inclusive).
             */
            upfront_split_to_contributors?: number | null;
            /**
             * Pledge Badge Currently Embedded
             * @description If this issue currently has the Polar badge SVG embedded
             */
            pledge_badge_currently_embedded: boolean;
            /**
             * Badge Custom Content
             * @description Optional custom badge SVG promotional content
             */
            badge_custom_content?: string | null;
        };
        /** IssueFunding */
        IssueFunding: {
            issue: components["schemas"]["Issue"];
            funding_goal: components["schemas"]["CurrencyAmount"] | null;
            total: components["schemas"]["CurrencyAmount"];
            pledges_summaries: components["schemas"]["PledgesTypeSummaries"];
        };
        /** IssueListResponse */
        IssueListResponse: {
            /** Data */
            data: components["schemas"]["Entry"][];
            pagination: components["schemas"]["PaginationResponse"];
        };
        /**
         * IssueSortBy
         * @enum {string}
         */
        IssueSortBy: "newest" | "recently_updated" | "least_recently_updated" | "pledged_amount_desc" | "relevance" | "dependencies_default" | "issues_default" | "most_engagement" | "most_positive_reactions" | "funding_goal_desc_and_most_positive_reactions" | "most_recently_funded";
        /**
         * IssueSortProperty
         * @enum {string}
         */
        IssueSortProperty: "created_at" | "-created_at" | "modified_at" | "-modified_at" | "engagement" | "-engagement" | "positive_reactions" | "-positive_reactions" | "funding_goal" | "-funding_goal";
        /** IssueUpdateBadgeMessage */
        IssueUpdateBadgeMessage: {
            /** Message */
            message: string;
        };
        /** Label */
        Label: {
            /** Name */
            name: string;
            /** Color */
            color: string;
        };
        /** LicenseKeyActivate */
        LicenseKeyActivate: {
            /** Key */
            key: string;
            /**
             * Organization Id
             * Format: uuid4
             */
            organization_id: string;
            /** Label */
            label: string;
            /**
             * Conditions
             * @default {}
             */
            conditions: Record<string, never>;
            /**
             * Meta
             * @default {}
             */
            meta: Record<string, never>;
        };
        /** LicenseKeyActivationBase */
        LicenseKeyActivationBase: {
            /**
             * Id
             * Format: uuid4
             */
            id: string;
            /**
             * License Key Id
             * Format: uuid4
             */
            license_key_id: string;
            /** Label */
            label: string;
            /** Meta */
            meta: Record<string, never>;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Modified At */
            modified_at: string | null;
        };
        /** LicenseKeyActivationRead */
        LicenseKeyActivationRead: {
            /**
             * Id
             * Format: uuid4
             */
            id: string;
            /**
             * License Key Id
             * Format: uuid4
             */
            license_key_id: string;
            /** Label */
            label: string;
            /** Meta */
            meta: Record<string, never>;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Modified At */
            modified_at: string | null;
            license_key: components["schemas"]["LicenseKeyRead"];
        };
        /** LicenseKeyCustomer */
        LicenseKeyCustomer: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /** Metadata */
            metadata: {
                [key: string]: string | number | boolean;
            };
            /** Email */
            email: string;
            /** Email Verified */
            email_verified: boolean;
            /** Name */
            name: string | null;
            billing_address: components["schemas"]["Address"] | null;
            /** Tax Id */
            tax_id: [
                string,
                components["schemas"]["TaxIDFormat"]
            ] | null;
            /**
             * Organization Id
             * Format: uuid4
             */
            organization_id: string;
            /** Avatar Url */
            readonly avatar_url: string;
        };
        /** LicenseKeyDeactivate */
        LicenseKeyDeactivate: {
            /** Key */
            key: string;
            /**
             * Organization Id
             * Format: uuid4
             */
            organization_id: string;
            /**
             * Activation Id
             * Format: uuid4
             */
            activation_id: string;
        };
        /** LicenseKeyRead */
        LicenseKeyRead: {
            /**
             * Id
             * Format: uuid4
             */
            id: string;
            /**
             * Organization Id
             * Format: uuid4
             */
            organization_id: string;
            /**
             * User Id
             * Format: uuid4
             * @deprecated
             */
            user_id: string;
            /**
             * Customer Id
             * Format: uuid4
             */
            customer_id: string;
            /** @deprecated */
            user: components["schemas"]["LicenseKeyUser"];
            customer: components["schemas"]["LicenseKeyCustomer"];
            /**
             * Benefit Id
             * Format: uuid4
             * @description The benefit ID.
             */
            benefit_id: string;
            /** Key */
            key: string;
            /** Display Key */
            display_key: string;
            status: components["schemas"]["LicenseKeyStatus"];
            /** Limit Activations */
            limit_activations: number | null;
            /** Usage */
            usage: number;
            /** Limit Usage */
            limit_usage: number | null;
            /** Validations */
            validations: number;
            /** Last Validated At */
            last_validated_at: string | null;
            /** Expires At */
            expires_at: string | null;
        };
        /**
         * LicenseKeyStatus
         * @enum {string}
         */
        LicenseKeyStatus: "granted" | "revoked" | "disabled";
        /** LicenseKeyUpdate */
        LicenseKeyUpdate: {
            status?: components["schemas"]["LicenseKeyStatus"] | null;
            /**
             * Usage
             * @default 0
             */
            usage: number;
            /** Limit Activations */
            limit_activations?: number | null;
            /** Limit Usage */
            limit_usage?: number | null;
            /** Expires At */
            expires_at?: string | null;
        };
        /** LicenseKeyUser */
        LicenseKeyUser: {
            /**
             * Id
             * Format: uuid4
             */
            id: string;
            /** Email */
            email: string;
            /** Public Name */
            public_name: string;
            /** Avatar Url */
            avatar_url?: string | null;
        };
        /** LicenseKeyValidate */
        LicenseKeyValidate: {
            /** Key */
            key: string;
            /**
             * Organization Id
             * Format: uuid4
             */
            organization_id: string;
            /** Activation Id */
            activation_id?: string | null;
            /** Benefit Id */
            benefit_id?: string | null;
            /** Customer Id */
            customer_id?: string | null;
            /** Increment Usage */
            increment_usage?: number | null;
            /**
             * Conditions
             * @default {}
             */
            conditions: Record<string, never>;
        };
        /** LicenseKeyWithActivations */
        LicenseKeyWithActivations: {
            /**
             * Id
             * Format: uuid4
             */
            id: string;
            /**
             * Organization Id
             * Format: uuid4
             */
            organization_id: string;
            /**
             * User Id
             * Format: uuid4
             * @deprecated
             */
            user_id: string;
            /**
             * Customer Id
             * Format: uuid4
             */
            customer_id: string;
            /** @deprecated */
            user: components["schemas"]["LicenseKeyUser"];
            customer: components["schemas"]["LicenseKeyCustomer"];
            /**
             * Benefit Id
             * Format: uuid4
             * @description The benefit ID.
             */
            benefit_id: string;
            /** Key */
            key: string;
            /** Display Key */
            display_key: string;
            status: components["schemas"]["LicenseKeyStatus"];
            /** Limit Activations */
            limit_activations: number | null;
            /** Usage */
            usage: number;
            /** Limit Usage */
            limit_usage: number | null;
            /** Validations */
            validations: number;
            /** Last Validated At */
            last_validated_at: string | null;
            /** Expires At */
            expires_at: string | null;
            /** Activations */
            activations: components["schemas"]["LicenseKeyActivationBase"][];
        };
        /**
         * ListFundingSortBy
         * @enum {string}
         */
        ListFundingSortBy: "oldest" | "newest" | "most_funded" | "most_recently_funded" | "most_engagement";
        /** ListResource[Account] */
        ListResource_Account_: {
            /** Items */
            items: components["schemas"]["Account"][];
            pagination: components["schemas"]["Pagination"];
        };
        /** ListResource[BackofficeReward] */
        ListResource_BackofficeReward_: {
            /** Items */
            items: components["schemas"]["BackofficeReward"][];
            pagination: components["schemas"]["Pagination"];
        };
        /** ListResource[BenefitGrant] */
        ListResource_BenefitGrant_: {
            /** Items */
            items: components["schemas"]["BenefitGrant"][];
            pagination: components["schemas"]["Pagination"];
        };
        /** ListResource[Benefit] */
        ListResource_Benefit_: {
            /** Items */
            items: components["schemas"]["Benefit"][];
            pagination: components["schemas"]["Pagination"];
        };
        /** ListResource[CheckoutLink] */
        ListResource_CheckoutLink_: {
            /** Items */
            items: components["schemas"]["CheckoutLink"][];
            pagination: components["schemas"]["Pagination"];
        };
        /** ListResource[Checkout] */
        ListResource_Checkout_: {
            /** Items */
            items: components["schemas"]["Checkout"][];
            pagination: components["schemas"]["Pagination"];
        };
        /** ListResource[CustomField] */
        ListResource_CustomField_: {
            /** Items */
            items: components["schemas"]["CustomField"][];
            pagination: components["schemas"]["Pagination"];
        };
        /** ListResource[CustomerBenefitGrant] */
        ListResource_CustomerBenefitGrant_: {
            /** Items */
            items: components["schemas"]["CustomerBenefitGrant"][];
            pagination: components["schemas"]["Pagination"];
        };
        /** ListResource[CustomerOrder] */
        ListResource_CustomerOrder_: {
            /** Items */
            items: components["schemas"]["CustomerOrder"][];
            pagination: components["schemas"]["Pagination"];
        };
        /** ListResource[CustomerSubscription] */
        ListResource_CustomerSubscription_: {
            /** Items */
            items: components["schemas"]["CustomerSubscription"][];
            pagination: components["schemas"]["Pagination"];
        };
        /** ListResource[Customer] */
        ListResource_Customer_: {
            /** Items */
            items: components["schemas"]["Customer"][];
            pagination: components["schemas"]["Pagination"];
        };
        /** ListResource[Discount] */
        ListResource_Discount_: {
            /** Items */
            items: components["schemas"]["Discount"][];
            pagination: components["schemas"]["Pagination"];
        };
        /** ListResource[DownloadableRead] */
        ListResource_DownloadableRead_: {
            /** Items */
            items: components["schemas"]["DownloadableRead"][];
            pagination: components["schemas"]["Pagination"];
        };
        /** ListResource[Event] */
        ListResource_Event_: {
            /** Items */
            items: components["schemas"]["Event"][];
            pagination: components["schemas"]["Pagination"];
        };
        /** ListResource[ExternalOrganization] */
        ListResource_ExternalOrganization_: {
            /** Items */
            items: components["schemas"]["ExternalOrganization"][];
            pagination: components["schemas"]["Pagination"];
        };
        /** ListResource[FileRead] */
        ListResource_FileRead_: {
            /** Items */
            items: (components["schemas"]["DownloadableFileRead"] | components["schemas"]["ProductMediaFileRead"] | components["schemas"]["OrganizationAvatarFileRead"])[];
            pagination: components["schemas"]["Pagination"];
        };
        /** ListResource[IssueFunding] */
        ListResource_IssueFunding_: {
            /** Items */
            items: components["schemas"]["IssueFunding"][];
            pagination: components["schemas"]["Pagination"];
        };
        /** ListResource[Issue] */
        ListResource_Issue_: {
            /** Items */
            items: components["schemas"]["Issue"][];
            pagination: components["schemas"]["Pagination"];
        };
        /** ListResource[LicenseKeyRead] */
        ListResource_LicenseKeyRead_: {
            /** Items */
            items: components["schemas"]["LicenseKeyRead"][];
            pagination: components["schemas"]["Pagination"];
        };
        /** ListResource[Meter] */
        ListResource_Meter_: {
            /** Items */
            items: components["schemas"]["Meter"][];
            pagination: components["schemas"]["Pagination"];
        };
        /** ListResource[OAuth2Client] */
        ListResource_OAuth2Client_: {
            /** Items */
            items: components["schemas"]["OAuth2Client"][];
            pagination: components["schemas"]["Pagination"];
        };
        /** ListResource[Order] */
        ListResource_Order_: {
            /** Items */
            items: components["schemas"]["Order"][];
            pagination: components["schemas"]["Pagination"];
        };
        /** ListResource[OrganizationAccessToken] */
        ListResource_OrganizationAccessToken_: {
            /** Items */
            items: components["schemas"]["OrganizationAccessToken"][];
            pagination: components["schemas"]["Pagination"];
        };
        /** ListResource[OrganizationMember] */
        ListResource_OrganizationMember_: {
            /** Items */
            items: components["schemas"]["OrganizationMember"][];
            pagination: components["schemas"]["Pagination"];
        };
        /** ListResource[Organization] */
        ListResource_Organization_: {
            /** Items */
            items: components["schemas"]["Organization"][];
            pagination: components["schemas"]["Pagination"];
        };
        /** ListResource[PaymentMethod] */
        ListResource_PaymentMethod_: {
            /** Items */
            items: components["schemas"]["PaymentMethod"][];
            pagination: components["schemas"]["Pagination"];
        };
        /** ListResource[PersonalAccessToken] */
        ListResource_PersonalAccessToken_: {
            /** Items */
            items: components["schemas"]["PersonalAccessToken"][];
            pagination: components["schemas"]["Pagination"];
        };
        /** ListResource[Pledge] */
        ListResource_Pledge_: {
            /** Items */
            items: components["schemas"]["Pledge"][];
            pagination: components["schemas"]["Pagination"];
        };
        /** ListResource[Product] */
        ListResource_Product_: {
            /** Items */
            items: components["schemas"]["Product"][];
            pagination: components["schemas"]["Pagination"];
        };
        /** ListResource[Refund] */
        ListResource_Refund_: {
            /** Items */
            items: components["schemas"]["Refund"][];
            pagination: components["schemas"]["Pagination"];
        };
        /** ListResource[Repository] */
        ListResource_Repository_: {
            /** Items */
            items: components["schemas"]["Repository"][];
            pagination: components["schemas"]["Pagination"];
        };
        /** ListResource[Reward] */
        ListResource_Reward_: {
            /** Items */
            items: components["schemas"]["Reward"][];
            pagination: components["schemas"]["Pagination"];
        };
        /** ListResource[Subscription] */
        ListResource_Subscription_: {
            /** Items */
            items: components["schemas"]["Subscription"][];
            pagination: components["schemas"]["Pagination"];
        };
        /** ListResource[Transaction] */
        ListResource_Transaction_: {
            /** Items */
            items: components["schemas"]["Transaction"][];
            pagination: components["schemas"]["Pagination"];
        };
        /** ListResource[WebhookDelivery] */
        ListResource_WebhookDelivery_: {
            /** Items */
            items: components["schemas"]["WebhookDelivery"][];
            pagination: components["schemas"]["Pagination"];
        };
        /** ListResource[WebhookEndpoint] */
        ListResource_WebhookEndpoint_: {
            /** Items */
            items: components["schemas"]["WebhookEndpoint"][];
            pagination: components["schemas"]["Pagination"];
        };
        /** LookupUserRequest */
        LookupUserRequest: {
            /** Username */
            username: string;
        };
        /** MagicLinkRequest */
        MagicLinkRequest: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Return To */
            return_to?: string | null;
            attribution?: components["schemas"]["UserSignupAttribution"] | null;
        };
        /** MaintainerAccountReviewedNotification */
        MaintainerAccountReviewedNotification: {
            /**
             * Id
             * Format: uuid4
             */
            id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "MaintainerAccountReviewedNotification";
            payload: components["schemas"]["MaintainerAccountReviewedNotificationPayload"];
        };
        /** MaintainerAccountReviewedNotificationPayload */
        MaintainerAccountReviewedNotificationPayload: {
            /** Account Type */
            account_type: string;
        };
        /** MaintainerAccountUnderReviewNotification */
        MaintainerAccountUnderReviewNotification: {
            /**
             * Id
             * Format: uuid4
             */
            id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "MaintainerAccountUnderReviewNotification";
            payload: components["schemas"]["MaintainerAccountUnderReviewNotificationPayload"];
        };
        /** MaintainerAccountUnderReviewNotificationPayload */
        MaintainerAccountUnderReviewNotificationPayload: {
            /** Account Type */
            account_type: string;
        };
        /** MaintainerCreateAccountNotification */
        MaintainerCreateAccountNotification: {
            /**
             * Id
             * Format: uuid4
             */
            id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "MaintainerCreateAccountNotification";
            payload: components["schemas"]["MaintainerCreateAccountNotificationPayload"];
        };
        /** MaintainerCreateAccountNotificationPayload */
        MaintainerCreateAccountNotificationPayload: {
            /** Organization Name */
            organization_name: string;
            /** Url */
            url: string;
        };
        /** MaintainerNewPaidSubscriptionNotification */
        MaintainerNewPaidSubscriptionNotification: {
            /**
             * Id
             * Format: uuid4
             */
            id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "MaintainerNewPaidSubscriptionNotification";
            payload: components["schemas"]["MaintainerNewPaidSubscriptionNotificationPayload"];
        };
        /** MaintainerNewPaidSubscriptionNotificationPayload */
        MaintainerNewPaidSubscriptionNotificationPayload: {
            /** Subscriber Name */
            subscriber_name: string;
            /** Tier Name */
            tier_name: string;
            /** Tier Price Amount */
            tier_price_amount: number | null;
            /** Tier Price Recurring Interval */
            tier_price_recurring_interval: string;
            /** Tier Organization Name */
            tier_organization_name: string;
        };
        /** MaintainerNewProductSaleNotification */
        MaintainerNewProductSaleNotification: {
            /**
             * Id
             * Format: uuid4
             */
            id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "MaintainerNewProductSaleNotification";
            payload: components["schemas"]["MaintainerNewProductSaleNotificationPayload"];
        };
        /** MaintainerNewProductSaleNotificationPayload */
        MaintainerNewProductSaleNotificationPayload: {
            /** Customer Name */
            customer_name: string;
            /** Product Name */
            product_name: string;
            /** Product Price Amount */
            product_price_amount: number;
            /** Organization Name */
            organization_name: string;
        };
        /** MaintainerPledgeConfirmationPendingNotification */
        MaintainerPledgeConfirmationPendingNotification: {
            /**
             * Id
             * Format: uuid4
             */
            id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "MaintainerPledgeConfirmationPendingNotification";
            payload: components["schemas"]["MaintainerPledgeConfirmationPendingNotificationPayload"];
        };
        /** MaintainerPledgeConfirmationPendingNotificationPayload */
        MaintainerPledgeConfirmationPendingNotificationPayload: {
            /** Pledger Name */
            pledger_name: string;
            /** Pledge Amount */
            pledge_amount: string;
            /** Issue Url */
            issue_url: string;
            /** Issue Title */
            issue_title: string;
            /** Issue Org Name */
            issue_org_name: string;
            /** Issue Repo Name */
            issue_repo_name: string;
            /** Issue Number */
            issue_number: number;
            /** Maintainer Has Stripe Account */
            maintainer_has_stripe_account: boolean;
            /** Pledge Id */
            pledge_id: string | null;
        };
        /** MaintainerPledgeCreatedNotification */
        MaintainerPledgeCreatedNotification: {
            /**
             * Id
             * Format: uuid4
             */
            id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "MaintainerPledgeCreatedNotification";
            payload: components["schemas"]["MaintainerPledgeCreatedNotificationPayload"];
        };
        /** MaintainerPledgeCreatedNotificationPayload */
        MaintainerPledgeCreatedNotificationPayload: {
            /** Pledger Name */
            pledger_name: string | null;
            /** Pledge Amount */
            pledge_amount: string;
            /** Issue Url */
            issue_url: string;
            /** Issue Title */
            issue_title: string;
            /** Issue Org Name */
            issue_org_name: string;
            /** Issue Repo Name */
            issue_repo_name: string;
            /** Issue Number */
            issue_number: number;
            /** Maintainer Has Stripe Account */
            maintainer_has_stripe_account: boolean;
            /** Pledge Id */
            pledge_id: string | null;
            pledge_type: components["schemas"]["PledgeType"] | null;
        };
        /** MaintainerPledgePaidNotification */
        MaintainerPledgePaidNotification: {
            /**
             * Id
             * Format: uuid4
             */
            id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "MaintainerPledgePaidNotification";
            payload: components["schemas"]["MaintainerPledgePaidNotificationPayload"];
        };
        /** MaintainerPledgePaidNotificationPayload */
        MaintainerPledgePaidNotificationPayload: {
            /** Paid Out Amount */
            paid_out_amount: string;
            /** Issue Url */
            issue_url: string;
            /** Issue Title */
            issue_title: string;
            /** Issue Org Name */
            issue_org_name: string;
            /** Issue Repo Name */
            issue_repo_name: string;
            /** Issue Number */
            issue_number: number;
            /** Pledge Id */
            pledge_id: string | null;
        };
        /** MaintainerPledgePendingNotification */
        MaintainerPledgePendingNotification: {
            /**
             * Id
             * Format: uuid4
             */
            id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "MaintainerPledgePendingNotification";
            payload: components["schemas"]["MaintainerPledgePendingNotificationPayload"];
        };
        /** MaintainerPledgePendingNotificationPayload */
        MaintainerPledgePendingNotificationPayload: {
            /** Pledger Name */
            pledger_name: string;
            /** Pledge Amount */
            pledge_amount: string;
            /** Issue Url */
            issue_url: string;
            /** Issue Title */
            issue_title: string;
            /** Issue Org Name */
            issue_org_name: string;
            /** Issue Repo Name */
            issue_repo_name: string;
            /** Issue Number */
            issue_number: number;
            /** Maintainer Has Stripe Account */
            maintainer_has_stripe_account: boolean;
            /** Pledge Id */
            pledge_id: string | null;
        };
        /** MaintainerPledgedIssueConfirmationPendingNotification */
        MaintainerPledgedIssueConfirmationPendingNotification: {
            /**
             * Id
             * Format: uuid4
             */
            id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "MaintainerPledgedIssueConfirmationPendingNotification";
            payload: components["schemas"]["MaintainerPledgedIssueConfirmationPendingNotificationPayload"];
        };
        /** MaintainerPledgedIssueConfirmationPendingNotificationPayload */
        MaintainerPledgedIssueConfirmationPendingNotificationPayload: {
            /** Pledge Amount Sum */
            pledge_amount_sum: string;
            /**
             * Issue Id
             * Format: uuid
             */
            issue_id: string;
            /** Issue Url */
            issue_url: string;
            /** Issue Title */
            issue_title: string;
            /** Issue Org Name */
            issue_org_name: string;
            /** Issue Repo Name */
            issue_repo_name: string;
            /** Issue Number */
            issue_number: number;
            /** Maintainer Has Account */
            maintainer_has_account: boolean;
        };
        /** MaintainerPledgedIssuePendingNotification */
        MaintainerPledgedIssuePendingNotification: {
            /**
             * Id
             * Format: uuid4
             */
            id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "MaintainerPledgedIssuePendingNotification";
            payload: components["schemas"]["MaintainerPledgedIssuePendingNotificationPayload"];
        };
        /** MaintainerPledgedIssuePendingNotificationPayload */
        MaintainerPledgedIssuePendingNotificationPayload: {
            /** Pledge Amount Sum */
            pledge_amount_sum: string;
            /**
             * Issue Id
             * Format: uuid
             */
            issue_id: string;
            /** Issue Url */
            issue_url: string;
            /** Issue Title */
            issue_title: string;
            /** Issue Org Name */
            issue_org_name: string;
            /** Issue Repo Name */
            issue_repo_name: string;
            /** Issue Number */
            issue_number: number;
            /** Maintainer Has Account */
            maintainer_has_account: boolean;
        };
        /** Meter */
        Meter: {
            /** Metadata */
            metadata: {
                [key: string]: string | number | boolean;
            };
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /**
             * Name
             * @description The name of the meter. Will be shown on customer's invoices and usage.
             */
            name: string;
            /** @description The filter to apply on events that'll be used to calculate the meter. */
            filter: components["schemas"]["Filter"];
            /**
             * Aggregation
             * @description The aggregation to apply on the filtered events to calculate the meter.
             */
            aggregation: components["schemas"]["CountAggregation"] | components["schemas"]["PropertyAggregation"];
            /**
             * Organization Id
             * Format: uuid4
             * @description The ID of the organization owning the meter.
             */
            organization_id: string;
        };
        /** MeterCreate */
        MeterCreate: {
            /**
             * Metadata
             * @description Key-value object allowing you to store additional information.
             *
             *     The key must be a string with a maximum length of **40 characters**.
             *     The value must be either:
             *
             *     * A string with a maximum length of **500 characters**
             *     * An integer
             *     * A boolean
             *
             *     You can store up to **50 key-value pairs**.
             */
            metadata?: {
                [key: string]: string | number | boolean;
            };
            /**
             * Name
             * @description The name of the meter. Will be shown on customer's invoices and usage.
             */
            name: string;
            /** @description The filter to apply on events that'll be used to calculate the meter. */
            filter: components["schemas"]["Filter"];
            /**
             * Aggregation
             * @description The aggregation to apply on the filtered events to calculate the meter.
             */
            aggregation: components["schemas"]["CountAggregation"] | components["schemas"]["PropertyAggregation"];
            /**
             * Organization Id
             * @description The ID of the organization owning the meter. **Required unless you use an organization token.**
             */
            organization_id?: string | null;
        };
        /** MeterQuantities */
        MeterQuantities: {
            /** Quantities */
            quantities: components["schemas"]["MeterQuantity"][];
        };
        /** MeterQuantity */
        MeterQuantity: {
            /**
             * Timestamp
             * Format: date-time
             * @description The timestamp for the current period.
             */
            timestamp: string;
            /**
             * Quantity
             * @description The quantity for the current period.
             */
            quantity: number;
        };
        /**
         * MeterSortProperty
         * @enum {string}
         */
        MeterSortProperty: "created_at" | "-created_at" | "name" | "-name";
        /** MeterUpdate */
        MeterUpdate: {
            /** Metadata */
            metadata?: {
                [key: string]: string | number | boolean;
            } | null;
            /**
             * Name
             * @description The name of the meter. Will be shown on customer's invoices and usage.
             */
            name?: string | null;
            /** @description The filter to apply on events that'll be used to calculate the meter. */
            filter?: components["schemas"]["Filter"] | null;
            /**
             * Aggregation
             * @description The aggregation to apply on the filtered events to calculate the meter.
             */
            aggregation?: (components["schemas"]["CountAggregation"] | components["schemas"]["PropertyAggregation"]) | null;
        };
        /**
         * Metric
         * @description Information about a metric.
         */
        Metric: {
            /**
             * Slug
             * @description Unique identifier for the metric.
             */
            slug: string;
            /**
             * Display Name
             * @description Human-readable name for the metric.
             */
            display_name: string;
            /** @description Type of the metric, useful to know the unit or format of the value. */
            type: components["schemas"]["MetricType"];
        };
        /** MetricPeriod */
        MetricPeriod: {
            /**
             * Timestamp
             * Format: date-time
             * @description Timestamp of this period data.
             */
            timestamp: string;
            /** Orders */
            orders: number;
            /** Revenue */
            revenue: number;
            /** Cumulative Revenue */
            cumulative_revenue: number;
            /** Average Order Value */
            average_order_value: number;
            /** One Time Products */
            one_time_products: number;
            /** One Time Products Revenue */
            one_time_products_revenue: number;
            /** New Subscriptions */
            new_subscriptions: number;
            /** New Subscriptions Revenue */
            new_subscriptions_revenue: number;
            /** Renewed Subscriptions */
            renewed_subscriptions: number;
            /** Renewed Subscriptions Revenue */
            renewed_subscriptions_revenue: number;
            /** Active Subscriptions */
            active_subscriptions: number;
            /** Monthly Recurring Revenue */
            monthly_recurring_revenue: number;
        };
        /**
         * MetricType
         * @enum {string}
         */
        MetricType: "scalar" | "currency";
        /** Metrics */
        Metrics: {
            orders: components["schemas"]["Metric"];
            revenue: components["schemas"]["Metric"];
            cumulative_revenue: components["schemas"]["Metric"];
            average_order_value: components["schemas"]["Metric"];
            one_time_products: components["schemas"]["Metric"];
            one_time_products_revenue: components["schemas"]["Metric"];
            new_subscriptions: components["schemas"]["Metric"];
            new_subscriptions_revenue: components["schemas"]["Metric"];
            renewed_subscriptions: components["schemas"]["Metric"];
            renewed_subscriptions_revenue: components["schemas"]["Metric"];
            active_subscriptions: components["schemas"]["Metric"];
            monthly_recurring_revenue: components["schemas"]["Metric"];
        };
        /**
         * MetricsIntervalLimit
         * @description Date interval limit to get metrics for a given interval.
         */
        MetricsIntervalLimit: {
            /**
             * Max Days
             * @description Maximum number of days for this interval.
             */
            max_days: number;
        };
        /**
         * MetricsIntervalsLimits
         * @description Date interval limits to get metrics for each interval.
         */
        MetricsIntervalsLimits: {
            /** @description Limits for the hour interval. */
            hour: components["schemas"]["MetricsIntervalLimit"];
            /** @description Limits for the day interval. */
            day: components["schemas"]["MetricsIntervalLimit"];
            /** @description Limits for the week interval. */
            week: components["schemas"]["MetricsIntervalLimit"];
            /** @description Limits for the month interval. */
            month: components["schemas"]["MetricsIntervalLimit"];
            /** @description Limits for the year interval. */
            year: components["schemas"]["MetricsIntervalLimit"];
        };
        /**
         * MetricsLimits
         * @description Date limits to get metrics.
         */
        MetricsLimits: {
            /**
             * Min Date
             * Format: date
             * @description Minimum date to get metrics.
             */
            min_date: string;
            /** @description Limits for each interval. */
            intervals: components["schemas"]["MetricsIntervalsLimits"];
        };
        /**
         * MetricsResponse
         * @description Metrics response schema.
         */
        MetricsResponse: {
            /**
             * Periods
             * @description List of data for each timestamp.
             */
            periods: components["schemas"]["MetricPeriod"][];
            /** @description Information about the returned metrics. */
            metrics: components["schemas"]["Metrics"];
        };
        /** NotOpenCheckout */
        NotOpenCheckout: {
            /**
             * Error
             * @constant
             */
            error: "NotOpenCheckout";
            /** Detail */
            detail: string;
        };
        /** NotPermitted */
        NotPermitted: {
            /**
             * Error
             * @constant
             */
            error: "NotPermitted";
            /** Detail */
            detail: string;
        };
        /** NotificationsList */
        NotificationsList: {
            /** Notifications */
            notifications: (components["schemas"]["MaintainerPledgeCreatedNotification"] | components["schemas"]["MaintainerPledgeConfirmationPendingNotification"] | components["schemas"]["MaintainerPledgedIssueConfirmationPendingNotification"] | components["schemas"]["MaintainerPledgePendingNotification"] | components["schemas"]["MaintainerPledgedIssuePendingNotification"] | components["schemas"]["MaintainerPledgePaidNotification"] | components["schemas"]["RewardPaidNotification"] | components["schemas"]["PledgerPledgePendingNotification"] | components["schemas"]["TeamAdminMemberPledgedNotification"] | components["schemas"]["MaintainerAccountUnderReviewNotification"] | components["schemas"]["MaintainerAccountReviewedNotification"] | components["schemas"]["MaintainerNewPaidSubscriptionNotification"] | components["schemas"]["MaintainerNewProductSaleNotification"] | components["schemas"]["MaintainerCreateAccountNotification"])[];
            /** Last Read Notification Id */
            last_read_notification_id: string | null;
        };
        /** NotificationsMarkRead */
        NotificationsMarkRead: {
            /**
             * Notification Id
             * Format: uuid4
             */
            notification_id: string;
        };
        /** OAuth2Client */
        OAuth2Client: {
            /** Redirect Uris */
            redirect_uris: string[];
            /**
             * Token Endpoint Auth Method
             * @default client_secret_post
             * @enum {string}
             */
            token_endpoint_auth_method: "client_secret_basic" | "client_secret_post" | "none";
            /**
             * Grant Types
             * @default [
             *       "authorization_code",
             *       "refresh_token"
             *     ]
             */
            grant_types: ("authorization_code" | "refresh_token")[];
            /**
             * Response Types
             * @default [
             *       "code"
             *     ]
             */
            response_types: "code"[];
            /**
             * Scope
             * @default openid profile email user:read organizations:read organizations:write custom_fields:read custom_fields:write discounts:read discounts:write checkout_links:read checkout_links:write checkouts:read checkouts:write products:read products:write benefits:read benefits:write events:read events:write meters:read meters:write files:read files:write subscriptions:read subscriptions:write customers:read customers:write customer_sessions:write orders:read refunds:read refunds:write metrics:read webhooks:read webhooks:write external_organizations:read license_keys:read license_keys:write repositories:read repositories:write issues:read issues:write customer_portal:read customer_portal:write
             */
            scope: string;
            /** Client Name */
            client_name: string;
            /** Client Uri */
            client_uri?: string | null;
            /** Logo Uri */
            logo_uri?: string | null;
            /** Tos Uri */
            tos_uri?: string | null;
            /** Policy Uri */
            policy_uri?: string | null;
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /** Client Id */
            client_id: string;
            /** Client Secret */
            client_secret: string;
            /** Client Id Issued At */
            client_id_issued_at: number;
            /** Client Secret Expires At */
            client_secret_expires_at: number;
        };
        /** OAuth2ClientConfiguration */
        OAuth2ClientConfiguration: {
            /** Redirect Uris */
            redirect_uris: string[];
            /**
             * Token Endpoint Auth Method
             * @default client_secret_post
             * @enum {string}
             */
            token_endpoint_auth_method: "client_secret_basic" | "client_secret_post" | "none";
            /**
             * Grant Types
             * @default [
             *       "authorization_code",
             *       "refresh_token"
             *     ]
             */
            grant_types: ("authorization_code" | "refresh_token")[];
            /**
             * Response Types
             * @default [
             *       "code"
             *     ]
             */
            response_types: "code"[];
            /**
             * Scope
             * @default openid profile email user:read organizations:read organizations:write custom_fields:read custom_fields:write discounts:read discounts:write checkout_links:read checkout_links:write checkouts:read checkouts:write products:read products:write benefits:read benefits:write events:read events:write meters:read meters:write files:read files:write subscriptions:read subscriptions:write customers:read customers:write customer_sessions:write orders:read refunds:read refunds:write metrics:read webhooks:read webhooks:write external_organizations:read license_keys:read license_keys:write repositories:read repositories:write issues:read issues:write customer_portal:read customer_portal:write
             */
            scope: string;
            /** Client Name */
            client_name: string;
            /** Client Uri */
            client_uri?: string | null;
            /** Logo Uri */
            logo_uri?: string | null;
            /** Tos Uri */
            tos_uri?: string | null;
            /** Policy Uri */
            policy_uri?: string | null;
        };
        /** OAuth2ClientConfigurationUpdate */
        OAuth2ClientConfigurationUpdate: {
            /** Redirect Uris */
            redirect_uris: string[];
            /**
             * Token Endpoint Auth Method
             * @default client_secret_post
             * @enum {string}
             */
            token_endpoint_auth_method: "client_secret_basic" | "client_secret_post" | "none";
            /**
             * Grant Types
             * @default [
             *       "authorization_code",
             *       "refresh_token"
             *     ]
             */
            grant_types: ("authorization_code" | "refresh_token")[];
            /**
             * Response Types
             * @default [
             *       "code"
             *     ]
             */
            response_types: "code"[];
            /**
             * Scope
             * @default openid profile email user:read organizations:read organizations:write custom_fields:read custom_fields:write discounts:read discounts:write checkout_links:read checkout_links:write checkouts:read checkouts:write products:read products:write benefits:read benefits:write events:read events:write meters:read meters:write files:read files:write subscriptions:read subscriptions:write customers:read customers:write customer_sessions:write orders:read refunds:read refunds:write metrics:read webhooks:read webhooks:write external_organizations:read license_keys:read license_keys:write repositories:read repositories:write issues:read issues:write customer_portal:read customer_portal:write
             */
            scope: string;
            /** Client Name */
            client_name: string;
            /** Client Uri */
            client_uri?: string | null;
            /** Logo Uri */
            logo_uri?: string | null;
            /** Tos Uri */
            tos_uri?: string | null;
            /** Policy Uri */
            policy_uri?: string | null;
            /** Client Id */
            client_id: string;
        };
        /** OAuth2ClientPublic */
        OAuth2ClientPublic: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /** Client Id */
            client_id: string;
            /** Client Name */
            client_name: string | null;
            /** Client Uri */
            client_uri: string | null;
            /** Logo Uri */
            logo_uri: string | null;
            /** Tos Uri */
            tos_uri: string | null;
            /** Policy Uri */
            policy_uri: string | null;
        };
        /** OAuthAccountRead */
        OAuthAccountRead: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            platform: components["schemas"]["OAuthPlatform"];
            /** Account Id */
            account_id: string;
            /** Account Email */
            account_email: string;
            /** Account Username */
            account_username: string | null;
        };
        /**
         * OAuthPlatform
         * @enum {string}
         */
        OAuthPlatform: "github" | "github_repository_benefit" | "google";
        /** Order */
        Order: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /** Metadata */
            metadata: {
                [key: string]: string | number | boolean;
            };
            /**
             * Custom Field Data
             * @description Key-value object storing custom field values.
             */
            custom_field_data?: {
                [key: string]: string | number | boolean | null;
            };
            /** Status */
            status: string;
            /** Amount */
            amount: number;
            /** Tax Amount */
            tax_amount: number;
            /**
             * Refunded Amount
             * @description Amount refunded
             */
            refunded_amount: number;
            /**
             * Refunded Tax Amount
             * @description Sales tax refunded
             */
            refunded_tax_amount: number;
            /** Currency */
            currency: string;
            billing_reason: components["schemas"]["OrderBillingReason"];
            billing_address: components["schemas"]["Address"] | null;
            /**
             * Customer Id
             * Format: uuid4
             */
            customer_id: string;
            /**
             * Product Id
             * Format: uuid4
             */
            product_id: string;
            /**
             * Product Price Id
             * Format: uuid4
             */
            product_price_id: string;
            /** Discount Id */
            discount_id: string | null;
            /** Subscription Id */
            subscription_id: string | null;
            /** Checkout Id */
            checkout_id: string | null;
            customer: components["schemas"]["OrderCustomer"];
            /**
             * User Id
             * Format: uuid4
             * @deprecated
             */
            user_id: string;
            /** @deprecated */
            user: components["schemas"]["OrderUser"];
            product: components["schemas"]["OrderProduct"];
            product_price: components["schemas"]["ProductPrice"];
            /** Discount */
            discount: (components["schemas"]["DiscountFixedOnceForeverDurationBase"] | components["schemas"]["DiscountFixedRepeatDurationBase"] | components["schemas"]["DiscountPercentageOnceForeverDurationBase"] | components["schemas"]["DiscountPercentageRepeatDurationBase"]) | null;
            subscription: components["schemas"]["OrderSubscription"] | null;
        };
        /**
         * OrderBillingReason
         * @enum {string}
         */
        OrderBillingReason: "purchase" | "subscription_create" | "subscription_cycle" | "subscription_update";
        /** OrderCustomer */
        OrderCustomer: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /** Metadata */
            metadata: {
                [key: string]: string | number | boolean;
            };
            /** Email */
            email: string;
            /** Email Verified */
            email_verified: boolean;
            /** Name */
            name: string | null;
            billing_address: components["schemas"]["Address"] | null;
            /** Tax Id */
            tax_id: [
                string,
                components["schemas"]["TaxIDFormat"]
            ] | null;
            /**
             * Organization Id
             * Format: uuid4
             */
            organization_id: string;
            /** Avatar Url */
            readonly avatar_url: string;
        };
        /**
         * OrderInvoice
         * @description Order's invoice data.
         */
        OrderInvoice: {
            /**
             * Url
             * @description The URL to the invoice.
             */
            url: string;
        };
        /** OrderProduct */
        OrderProduct: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the product.
             */
            id: string;
            /**
             * Name
             * @description The name of the product.
             */
            name: string;
            /**
             * Description
             * @description The description of the product.
             */
            description: string | null;
            /**
             * Is Recurring
             * @description Whether the product is a subscription tier.
             */
            is_recurring: boolean;
            /**
             * Is Archived
             * @description Whether the product is archived and no longer available.
             */
            is_archived: boolean;
            /**
             * Organization Id
             * Format: uuid4
             * @description The ID of the organization owning the product.
             */
            organization_id: string;
        };
        /**
         * OrderSortProperty
         * @enum {string}
         */
        OrderSortProperty: "created_at" | "-created_at" | "amount" | "-amount" | "customer" | "-customer" | "product" | "-product" | "discount" | "-discount" | "subscription" | "-subscription";
        /** OrderSubscription */
        OrderSubscription: {
            /** Metadata */
            metadata: {
                [key: string]: string | number | boolean;
            };
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /** Amount */
            amount: number | null;
            /** Currency */
            currency: string | null;
            recurring_interval: components["schemas"]["SubscriptionRecurringInterval"];
            status: components["schemas"]["SubscriptionStatus"];
            /**
             * Current Period Start
             * Format: date-time
             */
            current_period_start: string;
            /** Current Period End */
            current_period_end: string | null;
            /** Cancel At Period End */
            cancel_at_period_end: boolean;
            /** Canceled At */
            canceled_at: string | null;
            /** Started At */
            started_at: string | null;
            /** Ends At */
            ends_at: string | null;
            /** Ended At */
            ended_at: string | null;
            /**
             * Customer Id
             * Format: uuid4
             */
            customer_id: string;
            /**
             * Product Id
             * Format: uuid4
             */
            product_id: string;
            /**
             * Price Id
             * Format: uuid4
             */
            price_id: string;
            /** Discount Id */
            discount_id: string | null;
            /** Checkout Id */
            checkout_id: string | null;
            customer_cancellation_reason: components["schemas"]["CustomerCancellationReason"] | null;
            /** Customer Cancellation Comment */
            customer_cancellation_comment: string | null;
            /**
             * User Id
             * Format: uuid4
             * @deprecated
             */
            user_id: string;
        };
        /** OrderUser */
        OrderUser: {
            /**
             * Id
             * Format: uuid4
             */
            id: string;
            /** Email */
            email: string;
            /** Public Name */
            public_name: string;
            /** Avatar Url */
            avatar_url?: string | null;
            /** Github Username */
            github_username?: string | null;
        };
        /** Organization */
        Organization: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The organization ID.
             */
            id: string;
            /** Name */
            name: string;
            /** Slug */
            slug: string;
            /** Avatar Url */
            avatar_url: string | null;
            /** Bio */
            bio: string | null;
            /** Company */
            company: string | null;
            /** Blog */
            blog: string | null;
            /** Location */
            location: string | null;
            /** Email */
            email: string | null;
            /** Twitter Username */
            twitter_username: string | null;
            /** Pledge Minimum Amount */
            pledge_minimum_amount: number;
            /** Pledge Badge Show Amount */
            pledge_badge_show_amount: boolean;
            /** Default Upfront Split To Contributors */
            default_upfront_split_to_contributors: number | null;
            /** @description Settings for the organization profile */
            profile_settings: components["schemas"]["OrganizationProfileSettings"] | null;
            /** @description Settings for the organization features */
            feature_settings: components["schemas"]["OrganizationFeatureSettings"] | null;
            /** @description Settings related to subscriptions management */
            subscription_settings: components["schemas"]["OrganizationSubscriptionSettings"];
        };
        /** OrganizationAccessToken */
        OrganizationAccessToken: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             */
            id: string;
            /** Scopes */
            scopes: components["schemas"]["Scope"][];
            /** Expires At */
            expires_at: string | null;
            /** Comment */
            comment: string;
            /** Last Used At */
            last_used_at: string | null;
        };
        /** OrganizationAccessTokenCreate */
        OrganizationAccessTokenCreate: {
            /**
             * Organization Id
             * Format: uuid4
             */
            organization_id: string;
            /** Comment */
            comment: string;
            /** Expires In */
            expires_in?: string | null;
            /** Scopes */
            scopes: components["schemas"]["AvailableScope"][];
        };
        /** OrganizationAccessTokenCreateResponse */
        OrganizationAccessTokenCreateResponse: {
            organization_access_token: components["schemas"]["OrganizationAccessToken"];
            /** Token */
            token: string;
        };
        /** OrganizationAccessTokenUpdate */
        OrganizationAccessTokenUpdate: {
            /** Comment */
            comment?: string | null;
            /** Scopes */
            scopes?: components["schemas"]["AvailableScope"][] | null;
        };
        /**
         * OrganizationAvatarFileCreate
         * @description Schema to create a file to be used as an organization avatar.
         */
        OrganizationAvatarFileCreate: {
            /** Organization Id */
            organization_id?: string | null;
            /** Name */
            name: string;
            /**
             * Mime Type
             * @description MIME type of the file. Only images are supported for this type of file.
             */
            mime_type: string;
            /**
             * Size
             * @description Size of the file. A maximum of 1 MB is allowed for this type of file.
             */
            size: number;
            /** Checksum Sha256 Base64 */
            checksum_sha256_base64?: string | null;
            upload: components["schemas"]["S3FileCreateMultipart"];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            service: "organization_avatar";
            /** Version */
            version?: string | null;
        };
        /**
         * OrganizationAvatarFileRead
         * @description File to be used as an organization avatar.
         */
        OrganizationAvatarFileRead: {
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /**
             * Organization Id
             * Format: uuid4
             */
            organization_id: string;
            /** Name */
            name: string;
            /** Path */
            path: string;
            /** Mime Type */
            mime_type: string;
            /** Size */
            size: number;
            /** Storage Version */
            storage_version: string | null;
            /** Checksum Etag */
            checksum_etag: string | null;
            /** Checksum Sha256 Base64 */
            checksum_sha256_base64: string | null;
            /** Checksum Sha256 Hex */
            checksum_sha256_hex: string | null;
            /** Last Modified At */
            last_modified_at: string | null;
            /** Version */
            version: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            service: "organization_avatar";
            /** Is Uploaded */
            is_uploaded: boolean;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Size Readable */
            readonly size_readable: string;
            /** Public Url */
            readonly public_url: string;
        };
        /** OrganizationBadgeSettingsRead */
        OrganizationBadgeSettingsRead: {
            /** Show Amount */
            show_amount: boolean;
            /** Minimum Amount */
            minimum_amount: number;
            /** Message */
            message: string | null;
            /** Repositories */
            repositories: components["schemas"]["RepositoryBadgeSettingsRead"][];
        };
        /** OrganizationBadgeSettingsUpdate */
        OrganizationBadgeSettingsUpdate: {
            /** Show Amount */
            show_amount: boolean;
            /** Minimum Amount */
            minimum_amount: number;
            /** Message */
            message: string;
            /** Repositories */
            repositories: components["schemas"]["RepositoryBadgeSettingsUpdate"][];
        };
        /** OrganizationBillingPlan */
        OrganizationBillingPlan: {
            /**
             * Organization Id
             * Format: uuid4
             */
            organization_id: string;
            /** Is Free */
            is_free: boolean;
            /** Plan Name */
            plan_name: string;
        };
        /** OrganizationCheckPermissionsInput */
        OrganizationCheckPermissionsInput: {
            permissions: components["schemas"]["AppPermissionsType"];
        };
        /** OrganizationCreate */
        OrganizationCreate: {
            /** Name */
            name: string;
            /** Slug */
            slug: string;
            /** Avatar Url */
            avatar_url?: string | null;
            feature_settings?: components["schemas"]["OrganizationFeatureSettings"] | null;
            subscription_settings?: components["schemas"]["OrganizationSubscriptionSettings"] | null;
        };
        /** OrganizationFeatureSettings */
        OrganizationFeatureSettings: {
            /**
             * Issue Funding Enabled
             * @description If this organization has issue funding enabled
             * @default false
             */
            issue_funding_enabled: boolean;
        };
        /** OrganizationMember */
        OrganizationMember: {
            /** Email */
            email: string;
            /** Avatar Url */
            avatar_url: string | null;
        };
        /** OrganizationProfileSettings */
        OrganizationProfileSettings: {
            /**
             * Enabled
             * @description If this organization has a profile enabled
             */
            enabled?: boolean | null;
            /**
             * Description
             * @description A description of the organization
             */
            description?: string | null;
            /**
             * Featured Projects
             * @description A list of featured projects
             */
            featured_projects?: string[] | null;
            /**
             * Featured Organizations
             * @description A list of featured organizations
             */
            featured_organizations?: string[] | null;
            /**
             * Links
             * @description A list of links associated with the organization
             */
            links?: string[] | null;
            /**
             * @description Subscription promotion settings
             * @default {
             *       "promote": true,
             *       "show_count": true,
             *       "count_free": true
             *     }
             */
            subscribe: components["schemas"]["OrganizationSubscribePromoteSettings"] | null;
            /**
             * Accent Color
             * @description Accent color for the organization
             */
            accent_color?: string | null;
        };
        /** OrganizationSetAccount */
        OrganizationSetAccount: {
            /**
             * Account Id
             * Format: uuid4
             */
            account_id: string;
        };
        /**
         * OrganizationSortProperty
         * @enum {string}
         */
        OrganizationSortProperty: "created_at" | "-created_at" | "name" | "-name";
        /** OrganizationStripePortalSession */
        OrganizationStripePortalSession: {
            /** Url */
            url: string;
        };
        /** OrganizationSubscribePromoteSettings */
        OrganizationSubscribePromoteSettings: {
            /**
             * Promote
             * @description Promote email subscription (free)
             * @default true
             */
            promote: boolean;
            /**
             * Show Count
             * @description Show subscription count publicly
             * @default true
             */
            show_count: boolean;
            /**
             * Count Free
             * @description Include free subscribers in total count
             * @default true
             */
            count_free: boolean;
        };
        /** OrganizationSubscriptionSettings */
        OrganizationSubscriptionSettings: {
            /** Allow Multiple Subscriptions */
            allow_multiple_subscriptions: boolean;
            /** Allow Customer Updates */
            allow_customer_updates: boolean;
            proration_behavior: components["schemas"]["SubscriptionProrationBehavior"];
        };
        /** OrganizationUpdate */
        OrganizationUpdate: {
            /** Name */
            name?: string | null;
            /** Avatar Url */
            avatar_url?: string | null;
            /** Default Upfront Split To Contributors */
            default_upfront_split_to_contributors?: number | null;
            /**
             * Pledge Badge Show Amount
             * @default false
             */
            pledge_badge_show_amount: boolean;
            /** Billing Email */
            billing_email?: string | null;
            /** Default Badge Custom Content */
            default_badge_custom_content?: string | null;
            /**
             * Pledge Minimum Amount
             * @default 2000
             */
            pledge_minimum_amount: number;
            /** Total Monthly Spending Limit */
            total_monthly_spending_limit?: number | null;
            /** Per User Monthly Spending Limit */
            per_user_monthly_spending_limit?: number | null;
            profile_settings?: components["schemas"]["OrganizationProfileSettings"] | null;
            feature_settings?: components["schemas"]["OrganizationFeatureSettings"] | null;
            subscription_settings?: components["schemas"]["OrganizationSubscriptionSettings"] | null;
        };
        /** Pagination */
        Pagination: {
            /** Total Count */
            total_count: number;
            /** Max Page */
            max_page: number;
        };
        /** PaginationResponse */
        PaginationResponse: {
            /** Total Count */
            total_count: number;
            /** Page */
            page: number;
            /** Next Page */
            next_page: number | null;
        };
        /** PaymentError */
        PaymentError: {
            /**
             * Error
             * @constant
             */
            error: "PaymentError";
            /** Detail */
            detail: string;
        };
        /** PaymentMethod */
        PaymentMethod: {
            /** Stripe Payment Method Id */
            stripe_payment_method_id: string;
            /**
             * Type
             * @enum {unknown}
             */
            type: "card" | null;
            /** Brand */
            brand: string | null;
            /** Last4 */
            last4: string;
            /** Exp Month */
            exp_month: number;
            /** Exp Year */
            exp_year: number;
        };
        /**
         * PaymentProcessor
         * @enum {string}
         */
        PaymentProcessor: "stripe";
        /** PayoutCreate */
        PayoutCreate: {
            /**
             * Account Id
             * Format: uuid4
             */
            account_id: string;
        };
        /** PayoutEstimate */
        PayoutEstimate: {
            /**
             * Account Id
             * Format: uuid4
             */
            account_id: string;
            /** Gross Amount */
            gross_amount: number;
            /** Fees Amount */
            fees_amount: number;
            /** Net Amount */
            net_amount: number;
        };
        /** PersonalAccessToken */
        PersonalAccessToken: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             */
            id: string;
            /** Scopes */
            scopes: components["schemas"]["Scope"][];
            /** Expires At */
            expires_at: string | null;
            /** Comment */
            comment: string;
            /** Last Used At */
            last_used_at: string | null;
        };
        /**
         * PlatformFeeType
         * @description Type of fees applied by Polar, and billed to the users.
         * @enum {string}
         */
        PlatformFeeType: "payment" | "international_payment" | "subscription" | "invoice" | "cross_border_transfer" | "payout" | "account" | "dispute" | "platform";
        /**
         * Platforms
         * @enum {string}
         */
        Platforms: "github";
        /** Pledge */
        Pledge: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /**
             * Amount
             * @description Amount pledged towards the issue
             */
            amount: number;
            /** Currency */
            currency: string;
            /** @description Current state of the pledge */
            state: components["schemas"]["PledgeState"];
            /** @description Type of pledge */
            type: components["schemas"]["PledgeType"];
            /**
             * Refunded At
             * @description If and when the pledge was refunded to the pledger
             */
            refunded_at?: string | null;
            /**
             * Scheduled Payout At
             * @description When the payout is scheduled to be made to the maintainers behind the issue. Disputes must be made before this date.
             */
            scheduled_payout_at?: string | null;
            /** @description The issue that the pledge was made towards */
            issue: components["schemas"]["Issue"];
            /** @description The user or organization that made this pledge */
            pledger?: components["schemas"]["Pledger"] | null;
            /**
             * Hosted Invoice Url
             * @description URL of invoice for this pledge
             */
            hosted_invoice_url?: string | null;
            /**
             * Authed Can Admin Sender
             * @description If the currently authenticated subject can perform admin actions on behalf of the maker of the peldge
             * @default false
             */
            authed_can_admin_sender: boolean;
            /**
             * Authed Can Admin Received
             * @description If the currently authenticated subject can perform admin actions on behalf of the receiver of the peldge
             * @default false
             */
            authed_can_admin_received: boolean;
            /** @description For pledges made by an organization, or on behalf of an organization. This is the user that made the pledge. Only visible for members of said organization. */
            created_by?: components["schemas"]["Pledger"] | null;
        };
        /** PledgePledgesSummary */
        PledgePledgesSummary: {
            funding: components["schemas"]["Funding"];
            /** Pledges */
            pledges: components["schemas"]["SummaryPledge"][];
        };
        /** PledgeRewardTransfer */
        PledgeRewardTransfer: {
            /**
             * Pledge Id
             * Format: uuid
             */
            pledge_id: string;
            /**
             * Issue Reward Id
             * Format: uuid
             */
            issue_reward_id: string;
        };
        /** PledgeSpending */
        PledgeSpending: {
            /** Amount */
            amount: number;
            /** Currency */
            currency: string;
        };
        /**
         * PledgeState
         * @enum {string}
         */
        PledgeState: "initiated" | "created" | "pending" | "refunded" | "disputed" | "charge_disputed" | "cancelled";
        /** PledgeStripePaymentIntentCreate */
        PledgeStripePaymentIntentCreate: {
            /**
             * Issue Id
             * Format: uuid
             */
            issue_id: string;
            /** Email */
            email: string;
            /** Amount */
            amount: number;
            /**
             * Currency
             * @description The currency. Currently, only `usd` is supported.
             * @default usd
             */
            currency: string;
            /**
             * Setup Future Usage
             * @description If the payment method should be saved for future usage.
             */
            setup_future_usage?: "on_session" | null;
            /**
             * On Behalf Of Organization Id
             * @description The organization to give credit to. The pledge will be paid by the authenticated user.
             */
            on_behalf_of_organization_id?: string | null;
        };
        /** PledgeStripePaymentIntentMutationResponse */
        PledgeStripePaymentIntentMutationResponse: {
            /** Payment Intent Id */
            payment_intent_id: string;
            /** Amount */
            amount: number;
            /** Currency */
            currency: string;
            /** Fee */
            fee: number;
            /** Amount Including Fee */
            amount_including_fee: number;
            /** Client Secret */
            client_secret: string | null;
        };
        /** PledgeStripePaymentIntentUpdate */
        PledgeStripePaymentIntentUpdate: {
            /** Email */
            email: string;
            /** Amount */
            amount: number;
            /**
             * Currency
             * @description The currency. Currently, only `usd` is supported.
             * @default usd
             */
            currency: string;
            /**
             * Setup Future Usage
             * @description If the payment method should be saved for future usage.
             */
            setup_future_usage?: "on_session" | null;
            /**
             * On Behalf Of Organization Id
             * @description The organization to give credit to. The pledge will be paid by the authenticated user.
             */
            on_behalf_of_organization_id?: string | null;
        };
        /**
         * PledgeType
         * @enum {string}
         */
        PledgeType: "pay_upfront" | "pay_on_completion" | "pay_directly";
        /** Pledger */
        Pledger: {
            /** Name */
            name: string;
            /** Github Username */
            github_username: string | null;
            /** Avatar Url */
            avatar_url: string | null;
        };
        /** PledgerPledgePendingNotification */
        PledgerPledgePendingNotification: {
            /**
             * Id
             * Format: uuid4
             */
            id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "PledgerPledgePendingNotification";
            payload: components["schemas"]["PledgerPledgePendingNotificationPayload"];
        };
        /** PledgerPledgePendingNotificationPayload */
        PledgerPledgePendingNotificationPayload: {
            /** Pledge Amount */
            pledge_amount: string;
            /** Issue Url */
            issue_url: string;
            /** Issue Title */
            issue_title: string;
            /** Issue Number */
            issue_number: number;
            /** Issue Org Name */
            issue_org_name: string;
            /** Issue Repo Name */
            issue_repo_name: string;
            /** Pledge Date */
            pledge_date: string;
            /** Pledge Id */
            pledge_id: string | null;
            pledge_type: components["schemas"]["PledgeType"] | null;
        };
        /** PledgesSummary */
        PledgesSummary: {
            total: components["schemas"]["CurrencyAmount"];
            /** Pledgers */
            pledgers: components["schemas"]["Pledger"][];
        };
        /** PledgesTypeSummaries */
        PledgesTypeSummaries: {
            pay_upfront: components["schemas"]["PledgesSummary"];
            pay_on_completion: components["schemas"]["PledgesSummary"];
            pay_directly: components["schemas"]["PledgesSummary"];
        };
        /** PostIssueComment */
        PostIssueComment: {
            /** Message */
            message: string;
            /**
             * Append Badge
             * @default false
             */
            append_badge: boolean;
        };
        /**
         * Processor
         * @description Supported payment or payout processors, i.e rails for transactions.
         * @enum {string}
         */
        Processor: "stripe" | "open_collective";
        /**
         * Product
         * @description A product.
         */
        Product: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the product.
             */
            id: string;
            /**
             * Name
             * @description The name of the product.
             */
            name: string;
            /**
             * Description
             * @description The description of the product.
             */
            description: string | null;
            /**
             * Is Recurring
             * @description Whether the product is a subscription tier.
             */
            is_recurring: boolean;
            /**
             * Is Archived
             * @description Whether the product is archived and no longer available.
             */
            is_archived: boolean;
            /**
             * Organization Id
             * Format: uuid4
             * @description The ID of the organization owning the product.
             */
            organization_id: string;
            /** Metadata */
            metadata: {
                [key: string]: string | number | boolean;
            };
            /**
             * Prices
             * @description List of prices for this product.
             */
            prices: components["schemas"]["ProductPrice"][];
            /**
             * Benefits
             * @description List of benefits granted by the product.
             */
            benefits: components["schemas"]["Benefit"][];
            /**
             * Medias
             * @description List of medias associated to the product.
             */
            medias: components["schemas"]["ProductMediaFileRead"][];
            /**
             * Attached Custom Fields
             * @description List of custom fields attached to the product.
             */
            attached_custom_fields: components["schemas"]["AttachedCustomField"][];
        };
        /**
         * ProductBenefitsUpdate
         * @description Schema to update the benefits granted by a product.
         */
        ProductBenefitsUpdate: {
            /**
             * Benefits
             * @description List of benefit IDs. Each one must be on the same organization as the product.
             */
            benefits: string[];
        };
        ProductCreate: components["schemas"]["ProductRecurringCreate"] | components["schemas"]["ProductOneTimeCreate"];
        /** ProductEmbed */
        ProductEmbed: {
            /**
             * Id
             * Format: uuid4
             */
            id: string;
            /** Name */
            name: string;
            /** Description */
            description: string | null;
            /** Is Recurring */
            is_recurring: boolean;
            /**
             * Organization Id
             * Format: uuid4
             */
            organization_id: string;
            price: components["schemas"]["ProductPrice"];
            cover: components["schemas"]["ProductMediaFileRead"] | null;
            /**
             * Benefits
             * @description List of benefits granted by the product.
             */
            benefits: components["schemas"]["Benefit"][];
            /** Etag */
            etag: string;
        };
        /**
         * ProductMediaFileCreate
         * @description Schema to create a file to be used as a product media file.
         */
        ProductMediaFileCreate: {
            /** Organization Id */
            organization_id?: string | null;
            /** Name */
            name: string;
            /**
             * Mime Type
             * @description MIME type of the file. Only images are supported for this type of file.
             */
            mime_type: string;
            /**
             * Size
             * @description Size of the file. A maximum of 10 MB is allowed for this type of file.
             */
            size: number;
            /** Checksum Sha256 Base64 */
            checksum_sha256_base64?: string | null;
            upload: components["schemas"]["S3FileCreateMultipart"];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            service: "product_media";
            /** Version */
            version?: string | null;
        };
        /**
         * ProductMediaFileRead
         * @description File to be used as a product media file.
         */
        ProductMediaFileRead: {
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /**
             * Organization Id
             * Format: uuid4
             */
            organization_id: string;
            /** Name */
            name: string;
            /** Path */
            path: string;
            /** Mime Type */
            mime_type: string;
            /** Size */
            size: number;
            /** Storage Version */
            storage_version: string | null;
            /** Checksum Etag */
            checksum_etag: string | null;
            /** Checksum Sha256 Base64 */
            checksum_sha256_base64: string | null;
            /** Checksum Sha256 Hex */
            checksum_sha256_hex: string | null;
            /** Last Modified At */
            last_modified_at: string | null;
            /** Version */
            version: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            service: "product_media";
            /** Is Uploaded */
            is_uploaded: boolean;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Size Readable */
            readonly size_readable: string;
            /** Public Url */
            readonly public_url: string;
        };
        /**
         * ProductOneTimeCreate
         * @description Schema to create a one-time product.
         */
        ProductOneTimeCreate: {
            /**
             * Metadata
             * @description Key-value object allowing you to store additional information.
             *
             *     The key must be a string with a maximum length of **40 characters**.
             *     The value must be either:
             *
             *     * A string with a maximum length of **500 characters**
             *     * An integer
             *     * A boolean
             *
             *     You can store up to **50 key-value pairs**.
             */
            metadata?: {
                [key: string]: string | number | boolean;
            };
            /**
             * Name
             * @description The name of the product.
             */
            name: string;
            /**
             * Description
             * @description The description of the product.
             */
            description?: string | null;
            /**
             * ProductPriceOneTimeCreate
             * @description List of available prices for this product.
             */
            prices: (components["schemas"]["ProductPriceOneTimeFixedCreate"] | components["schemas"]["ProductPriceOneTimeCustomCreate"] | components["schemas"]["ProductPriceOneTimeFreeCreate"])[];
            /**
             * Medias
             * @description List of file IDs. Each one must be on the same organization as the product, of type `product_media` and correctly uploaded.
             */
            medias?: string[] | null;
            /**
             * Attached Custom Fields
             * @description List of custom fields to attach.
             */
            attached_custom_fields?: components["schemas"]["AttachedCustomFieldCreate"][];
            /**
             * Organization Id
             * @description The ID of the organization owning the product. **Required unless you use an organization token.**
             */
            organization_id?: string | null;
        };
        ProductPrice: components["schemas"]["ProductPriceRecurring"] | components["schemas"]["ProductPriceOneTime"];
        ProductPriceOneTime: components["schemas"]["ProductPriceOneTimeFixed"] | components["schemas"]["ProductPriceOneTimeCustom"] | components["schemas"]["ProductPriceOneTimeFree"];
        /**
         * ProductPriceOneTimeCustom
         * @description A pay-what-you-want price for a one-time product.
         */
        ProductPriceOneTimeCustom: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the price.
             */
            id: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            amount_type: "custom";
            /**
             * Is Archived
             * @description Whether the price is archived and no longer available.
             */
            is_archived: boolean;
            /**
             * Product Id
             * Format: uuid4
             * @description The ID of the product owning the price.
             */
            product_id: string;
            /**
             * Price Currency
             * @description The currency.
             */
            price_currency: string;
            /**
             * Minimum Amount
             * @description The minimum amount the customer can pay.
             */
            minimum_amount: number | null;
            /**
             * Maximum Amount
             * @description The maximum amount the customer can pay.
             */
            maximum_amount: number | null;
            /**
             * Preset Amount
             * @description The initial amount shown to the customer.
             */
            preset_amount: number | null;
            /**
             * Type
             * @description The type of the price.
             * @constant
             */
            type: "one_time";
        };
        /**
         * ProductPriceOneTimeCustomCreate
         * @description Schema to create a pay-what-you-want price for a one-time product.
         */
        ProductPriceOneTimeCustomCreate: {
            /**
             * Type
             * @constant
             */
            type: "one_time";
            /**
             * Amount Type
             * @constant
             */
            amount_type: "custom";
            /**
             * Price Currency
             * @description The currency. Currently, only `usd` is supported.
             * @default usd
             */
            price_currency: string;
            /**
             * Minimum Amount
             * @description The minimum amount the customer can pay.
             */
            minimum_amount?: number | null;
            /**
             * Maximum Amount
             * @description The maximum amount the customer can pay.
             */
            maximum_amount?: number | null;
            /**
             * Preset Amount
             * @description The initial amount shown to the customer.
             */
            preset_amount?: number | null;
        };
        /**
         * ProductPriceOneTimeFixed
         * @description A one-time price for a product.
         */
        ProductPriceOneTimeFixed: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the price.
             */
            id: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            amount_type: "fixed";
            /**
             * Is Archived
             * @description Whether the price is archived and no longer available.
             */
            is_archived: boolean;
            /**
             * Product Id
             * Format: uuid4
             * @description The ID of the product owning the price.
             */
            product_id: string;
            /**
             * Price Currency
             * @description The currency.
             */
            price_currency: string;
            /**
             * Price Amount
             * @description The price in cents.
             */
            price_amount: number;
            /**
             * Type
             * @description The type of the price.
             * @constant
             */
            type: "one_time";
        };
        /**
         * ProductPriceOneTimeFixedCreate
         * @description Schema to create a one-time product price.
         */
        ProductPriceOneTimeFixedCreate: {
            /**
             * Type
             * @constant
             */
            type: "one_time";
            /**
             * Amount Type
             * @constant
             */
            amount_type: "fixed";
            /**
             * Price Amount
             * @description The price in cents.
             */
            price_amount: number;
            /**
             * Price Currency
             * @description The currency. Currently, only `usd` is supported.
             * @default usd
             */
            price_currency: string;
        };
        /**
         * ProductPriceOneTimeFree
         * @description A free one-time price for a product.
         */
        ProductPriceOneTimeFree: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the price.
             */
            id: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            amount_type: "free";
            /**
             * Is Archived
             * @description Whether the price is archived and no longer available.
             */
            is_archived: boolean;
            /**
             * Product Id
             * Format: uuid4
             * @description The ID of the product owning the price.
             */
            product_id: string;
            /**
             * Type
             * @description The type of the price.
             * @constant
             */
            type: "one_time";
        };
        /**
         * ProductPriceOneTimeFreeCreate
         * @description Schema to create a free one-time product price.
         */
        ProductPriceOneTimeFreeCreate: {
            /**
             * Type
             * @constant
             */
            type: "one_time";
            /**
             * Amount Type
             * @constant
             */
            amount_type: "free";
        };
        ProductPriceRecurring: components["schemas"]["ProductPriceRecurringFixed"] | components["schemas"]["ProductPriceRecurringCustom"] | components["schemas"]["ProductPriceRecurringFree"];
        /**
         * ProductPriceRecurringCustom
         * @description A pay-what-you-want recurring price for a product, i.e. a subscription.
         */
        ProductPriceRecurringCustom: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the price.
             */
            id: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            amount_type: "custom";
            /**
             * Is Archived
             * @description Whether the price is archived and no longer available.
             */
            is_archived: boolean;
            /**
             * Product Id
             * Format: uuid4
             * @description The ID of the product owning the price.
             */
            product_id: string;
            /**
             * Price Currency
             * @description The currency.
             */
            price_currency: string;
            /**
             * Minimum Amount
             * @description The minimum amount the customer can pay.
             */
            minimum_amount: number | null;
            /**
             * Maximum Amount
             * @description The maximum amount the customer can pay.
             */
            maximum_amount: number | null;
            /**
             * Preset Amount
             * @description The initial amount shown to the customer.
             */
            preset_amount: number | null;
            /**
             * Type
             * @description The type of the price.
             * @constant
             */
            type: "recurring";
            /** @description The recurring interval of the price. */
            recurring_interval: components["schemas"]["SubscriptionRecurringInterval"];
        };
        /**
         * ProductPriceRecurringFixed
         * @description A recurring price for a product, i.e. a subscription.
         */
        ProductPriceRecurringFixed: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the price.
             */
            id: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            amount_type: "fixed";
            /**
             * Is Archived
             * @description Whether the price is archived and no longer available.
             */
            is_archived: boolean;
            /**
             * Product Id
             * Format: uuid4
             * @description The ID of the product owning the price.
             */
            product_id: string;
            /**
             * Price Currency
             * @description The currency.
             */
            price_currency: string;
            /**
             * Price Amount
             * @description The price in cents.
             */
            price_amount: number;
            /**
             * Type
             * @description The type of the price.
             * @constant
             */
            type: "recurring";
            /** @description The recurring interval of the price. */
            recurring_interval: components["schemas"]["SubscriptionRecurringInterval"];
        };
        /**
         * ProductPriceRecurringFixedCreate
         * @description Schema to create a recurring product price, i.e. a subscription.
         */
        ProductPriceRecurringFixedCreate: {
            /**
             * Type
             * @constant
             */
            type: "recurring";
            /**
             * Amount Type
             * @constant
             */
            amount_type: "fixed";
            /**
             * Price Amount
             * @description The price in cents.
             */
            price_amount: number;
            /**
             * Price Currency
             * @description The currency. Currently, only `usd` is supported.
             * @default usd
             */
            price_currency: string;
            /** @description The recurring interval of the price. */
            recurring_interval: components["schemas"]["SubscriptionRecurringInterval"];
        };
        /**
         * ProductPriceRecurringFree
         * @description A free recurring price for a product, i.e. a subscription.
         */
        ProductPriceRecurringFree: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the price.
             */
            id: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            amount_type: "free";
            /**
             * Is Archived
             * @description Whether the price is archived and no longer available.
             */
            is_archived: boolean;
            /**
             * Product Id
             * Format: uuid4
             * @description The ID of the product owning the price.
             */
            product_id: string;
            /**
             * Type
             * @description The type of the price.
             * @constant
             */
            type: "recurring";
            /** @description The recurring interval of the price. */
            recurring_interval: components["schemas"]["SubscriptionRecurringInterval"];
        };
        /**
         * ProductPriceRecurringFreeCreate
         * @description Schema to create a free recurring product price, i.e. a subscription.
         */
        ProductPriceRecurringFreeCreate: {
            /**
             * Type
             * @constant
             */
            type: "recurring";
            /**
             * Amount Type
             * @constant
             */
            amount_type: "free";
            /** @description The recurring interval of the price. */
            recurring_interval: components["schemas"]["SubscriptionRecurringInterval"];
        };
        /**
         * ProductPriceType
         * @enum {string}
         */
        ProductPriceType: "one_time" | "recurring";
        /**
         * ProductRecurringCreate
         * @description Schema to create a recurring product, i.e. a subscription.
         */
        ProductRecurringCreate: {
            /**
             * Metadata
             * @description Key-value object allowing you to store additional information.
             *
             *     The key must be a string with a maximum length of **40 characters**.
             *     The value must be either:
             *
             *     * A string with a maximum length of **500 characters**
             *     * An integer
             *     * A boolean
             *
             *     You can store up to **50 key-value pairs**.
             */
            metadata?: {
                [key: string]: string | number | boolean;
            };
            /**
             * Name
             * @description The name of the product.
             */
            name: string;
            /**
             * Description
             * @description The description of the product.
             */
            description?: string | null;
            /**
             * Prices
             * @description List of available prices for this product.
             */
            prices: components["schemas"]["ProductPriceRecurringFixedCreate"][] | components["schemas"]["ProductPriceRecurringFreeCreate"][];
            /**
             * Medias
             * @description List of file IDs. Each one must be on the same organization as the product, of type `product_media` and correctly uploaded.
             */
            medias?: string[] | null;
            /**
             * Attached Custom Fields
             * @description List of custom fields to attach.
             */
            attached_custom_fields?: components["schemas"]["AttachedCustomFieldCreate"][];
            /**
             * Organization Id
             * @description The ID of the organization owning the product. **Required unless you use an organization token.**
             */
            organization_id?: string | null;
        };
        /**
         * ProductSortProperty
         * @enum {string}
         */
        ProductSortProperty: "created_at" | "-created_at" | "name" | "-name" | "price_type" | "-price_type" | "price_amount_type" | "-price_amount_type" | "price_amount" | "-price_amount";
        /**
         * ProductStorefront
         * @description Schema of a public product.
         */
        ProductStorefront: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the product.
             */
            id: string;
            /**
             * Name
             * @description The name of the product.
             */
            name: string;
            /**
             * Description
             * @description The description of the product.
             */
            description: string | null;
            /**
             * Is Recurring
             * @description Whether the product is a subscription tier.
             */
            is_recurring: boolean;
            /**
             * Is Archived
             * @description Whether the product is archived and no longer available.
             */
            is_archived: boolean;
            /**
             * Organization Id
             * Format: uuid4
             * @description The ID of the organization owning the product.
             */
            organization_id: string;
            /**
             * Prices
             * @description List of available prices for this product.
             */
            prices: components["schemas"]["ProductPrice"][];
            /**
             * BenefitPublic
             * @description The benefits granted by the product.
             */
            benefits: components["schemas"]["BenefitBase"][];
            /**
             * Medias
             * @description The medias associated to the product.
             */
            medias: components["schemas"]["ProductMediaFileRead"][];
        };
        /**
         * ProductUpdate
         * @description Schema to update a product.
         */
        ProductUpdate: {
            /** Metadata */
            metadata?: {
                [key: string]: string | number | boolean;
            } | null;
            /** Name */
            name?: string | null;
            /**
             * Description
             * @description The description of the product.
             */
            description?: string | null;
            /**
             * Is Archived
             * @description Whether the product is archived. If `true`, the product won't be available for purchase anymore. Existing customers will still have access to their benefits, and subscriptions will continue normally.
             */
            is_archived?: boolean | null;
            /**
             * Prices
             * @description List of available prices for this product. If you want to keep existing prices, include them in the list as an `ExistingProductPrice` object.
             */
            prices?: (components["schemas"]["ExistingProductPrice"] | components["schemas"]["ProductPriceRecurringFixedCreate"] | components["schemas"]["ProductPriceRecurringFreeCreate"] | components["schemas"]["ProductPriceOneTimeFixedCreate"] | components["schemas"]["ProductPriceOneTimeCustomCreate"] | components["schemas"]["ProductPriceOneTimeFreeCreate"])[] | null;
            /**
             * Medias
             * @description List of file IDs. Each one must be on the same organization as the product, of type `product_media` and correctly uploaded.
             */
            medias?: string[] | null;
            /** Attached Custom Fields */
            attached_custom_fields?: components["schemas"]["AttachedCustomFieldCreate"][] | null;
        };
        /** PropertyAggregation */
        PropertyAggregation: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            func: "avg" | "max" | "min" | "sum";
            /** Property */
            property: string;
        };
        /** Reactions */
        Reactions: {
            /** Total Count */
            total_count: number;
            /** Plus One */
            plus_one: number;
            /** Minus One */
            minus_one: number;
            /** Laugh */
            laugh: number;
            /** Hooray */
            hooray: number;
            /** Confused */
            confused: number;
            /** Heart */
            heart: number;
            /** Rocket */
            rocket: number;
            /** Eyes */
            eyes: number;
        };
        /** Refund */
        Refund: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /** Metadata */
            metadata: {
                [key: string]: string | number | boolean;
            };
            status: components["schemas"]["RefundStatus"];
            reason: components["schemas"]["RefundReason"];
            /** Amount */
            amount: number;
            /** Tax Amount */
            tax_amount: number;
            /** Currency */
            currency: string;
            /**
             * Organization Id
             * Format: uuid4
             */
            organization_id: string;
            /**
             * Order Id
             * Format: uuid4
             */
            order_id: string;
            /** Subscription Id */
            subscription_id: string | null;
            /**
             * Customer Id
             * Format: uuid4
             */
            customer_id: string;
            /** Revoke Benefits */
            revoke_benefits: boolean;
        };
        /** RefundAmountTooHigh */
        RefundAmountTooHigh: {
            /**
             * Error
             * @constant
             */
            error: "RefundAmountTooHigh";
            /** Detail */
            detail: string;
        };
        /** RefundCreate */
        RefundCreate: {
            /**
             * Metadata
             * @description Key-value object allowing you to store additional information.
             *
             *     The key must be a string with a maximum length of **40 characters**.
             *     The value must be either:
             *
             *     * A string with a maximum length of **500 characters**
             *     * An integer
             *     * A boolean
             *
             *     You can store up to **50 key-value pairs**.
             */
            metadata?: {
                [key: string]: string | number | boolean;
            };
            /**
             * Order Id
             * Format: uuid4
             */
            order_id: string;
            reason: components["schemas"]["RefundReason"];
            /** Amount */
            amount: number;
            /**
             * Comment
             * @description An internal comment about the refund.
             */
            comment?: string | null;
            /**
             * Revoke Benefits
             * @description Should this refund trigger the associated customer benefits to be revoked?
             *
             *     **Note:**
             *     Only allowed in case the `order` is a one-time purchase.
             *     Subscriptions automatically revoke customer benefits once the
             *     subscription itself is revoked, i.e fully canceled.
             * @default false
             */
            revoke_benefits: boolean;
        };
        /**
         * RefundReason
         * @enum {string}
         */
        RefundReason: "duplicate" | "fraudulent" | "customer_request" | "service_disruption" | "satisfaction_guarantee" | "other";
        /**
         * RefundSortProperty
         * @enum {string}
         */
        RefundSortProperty: "created_at" | "-created_at" | "amount" | "-amount";
        /**
         * RefundStatus
         * @enum {string}
         */
        RefundStatus: "pending" | "succeeded" | "failed" | "canceled";
        /** RefundedAlready */
        RefundedAlready: {
            /**
             * Error
             * @constant
             */
            error: "RefundedAlready";
            /** Detail */
            detail: string;
        };
        /** Repository */
        Repository: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            platform: components["schemas"]["Platforms"];
            /** Is Private */
            is_private: boolean;
            /** Name */
            name: string;
            /** Description */
            description: string | null;
            /** Stars */
            stars: number | null;
            /** License */
            license: string | null;
            /** Homepage */
            homepage: string | null;
            /** @description Settings for the repository profile */
            profile_settings: components["schemas"]["RepositoryProfileSettings"] | null;
            organization: components["schemas"]["ExternalOrganization"];
            internal_organization: components["schemas"]["Organization"] | null;
        };
        /** RepositoryBadgeSettingsRead */
        RepositoryBadgeSettingsRead: {
            /**
             * Id
             * Format: uuid4
             */
            id: string;
            /** Avatar Url */
            avatar_url: string | null;
            /** Name */
            name: string;
            /** Synced Issues */
            synced_issues: number;
            /** Open Issues */
            open_issues: number;
            /** Auto Embedded Issues */
            auto_embedded_issues: number;
            /** Label Embedded Issues */
            label_embedded_issues: number;
            /** Badge Auto Embed */
            badge_auto_embed: boolean;
            /** Badge Label */
            badge_label: string;
            /** Is Private */
            is_private: boolean;
            /** Is Sync Completed */
            is_sync_completed: boolean;
        };
        /** RepositoryBadgeSettingsUpdate */
        RepositoryBadgeSettingsUpdate: {
            /**
             * Id
             * Format: uuid4
             */
            id: string;
            /** Badge Auto Embed */
            badge_auto_embed: boolean;
            /** Retroactive */
            retroactive: boolean;
        };
        /** RepositoryProfileSettings */
        RepositoryProfileSettings: {
            /**
             * Description
             * @description A description of the repository
             */
            description?: string | null;
            /**
             * Cover Image Url
             * @description A URL to a cover image
             */
            cover_image_url?: string | null;
            /**
             * Featured Organizations
             * @description A list of featured organizations
             */
            featured_organizations?: string[] | null;
            /**
             * Highlighted Subscription Tiers
             * @description A list of highlighted subscription tiers
             */
            highlighted_subscription_tiers?: string[] | null;
            /**
             * Links
             * @description A list of links related to the repository
             */
            links?: string[] | null;
        };
        /** RepositoryProfileSettingsUpdate */
        RepositoryProfileSettingsUpdate: {
            /** Set Description */
            set_description?: boolean | null;
            /** Description */
            description?: string | null;
            /** Set Cover Image Url */
            set_cover_image_url?: boolean | null;
            /** Cover Image Url */
            cover_image_url?: string | null;
            /** Featured Organizations */
            featured_organizations?: string[] | null;
            /** Highlighted Subscription Tiers */
            highlighted_subscription_tiers?: string[] | null;
            /** Links */
            links?: string[] | null;
        };
        /**
         * RepositorySortProperty
         * @enum {string}
         */
        RepositorySortProperty: "created_at" | "-created_at" | "name" | "-name" | "stars" | "-stars";
        /** RepositoryUpdate */
        RepositoryUpdate: {
            profile_settings?: components["schemas"]["RepositoryProfileSettingsUpdate"] | null;
        };
        /** ResourceNotFound */
        ResourceNotFound: {
            /**
             * Error
             * @constant
             */
            error: "ResourceNotFound";
            /** Detail */
            detail: string;
        };
        /** RevokeTokenResponse */
        RevokeTokenResponse: Record<string, never>;
        /** Reward */
        Reward: {
            /** @description The pledge that the reward was split from */
            pledge: components["schemas"]["Pledge"];
            /** @description The user that received the reward (if any) */
            user?: components["schemas"]["User"] | null;
            /** @description The organization that received the reward (if any) */
            organization?: components["schemas"]["Organization"] | null;
            amount: components["schemas"]["CurrencyAmount"];
            state: components["schemas"]["RewardState"];
            /**
             * Paid At
             * @description If and when the reward was paid out.
             */
            paid_at?: string | null;
        };
        /** RewardPaidNotification */
        RewardPaidNotification: {
            /**
             * Id
             * Format: uuid4
             */
            id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "RewardPaidNotification";
            payload: components["schemas"]["RewardPaidNotificationPayload"];
        };
        /** RewardPaidNotificationPayload */
        RewardPaidNotificationPayload: {
            /** Paid Out Amount */
            paid_out_amount: string;
            /** Issue Url */
            issue_url: string;
            /** Issue Title */
            issue_title: string;
            /** Issue Org Name */
            issue_org_name: string;
            /** Issue Repo Name */
            issue_repo_name: string;
            /** Issue Number */
            issue_number: number;
            /**
             * Issue Id
             * Format: uuid
             */
            issue_id: string;
            /**
             * Pledge Id
             * Format: uuid
             */
            pledge_id: string;
        };
        /**
         * RewardState
         * @enum {string}
         */
        RewardState: "pending" | "paid";
        /** RewardsSummary */
        RewardsSummary: {
            /** Receivers */
            receivers: components["schemas"]["RewardsSummaryReceiver"][];
        };
        /** RewardsSummaryReceiver */
        RewardsSummaryReceiver: {
            /** Name */
            name: string;
            /** Avatar Url */
            avatar_url: string | null;
        };
        /** S3DownloadURL */
        S3DownloadURL: {
            /** Url */
            url: string;
            /**
             * Headers
             * @default {}
             */
            headers: {
                [key: string]: string;
            };
            /**
             * Expires At
             * Format: date-time
             */
            expires_at: string;
        };
        /** S3FileCreateMultipart */
        S3FileCreateMultipart: {
            /** Parts */
            parts: components["schemas"]["S3FileCreatePart"][];
        };
        /** S3FileCreatePart */
        S3FileCreatePart: {
            /** Number */
            number: number;
            /** Chunk Start */
            chunk_start: number;
            /** Chunk End */
            chunk_end: number;
            /** Checksum Sha256 Base64 */
            checksum_sha256_base64?: string | null;
        };
        /** S3FileUploadCompletedPart */
        S3FileUploadCompletedPart: {
            /** Number */
            number: number;
            /** Checksum Etag */
            checksum_etag: string;
            /** Checksum Sha256 Base64 */
            checksum_sha256_base64: string | null;
        };
        /** S3FileUploadMultipart */
        S3FileUploadMultipart: {
            /** Id */
            id: string;
            /** Path */
            path: string;
            /** Parts */
            parts: components["schemas"]["S3FileUploadPart"][];
        };
        /** S3FileUploadPart */
        S3FileUploadPart: {
            /** Number */
            number: number;
            /** Chunk Start */
            chunk_start: number;
            /** Chunk End */
            chunk_end: number;
            /** Checksum Sha256 Base64 */
            checksum_sha256_base64?: string | null;
            /** Url */
            url: string;
            /**
             * Expires At
             * Format: date-time
             */
            expires_at: string;
            /**
             * Headers
             * @default {}
             */
            headers: {
                [key: string]: string;
            };
        };
        /**
         * Scope
         * @enum {string}
         */
        Scope: "openid" | "profile" | "email" | "user:read" | "admin" | "web_default" | "organizations:read" | "organizations:write" | "custom_fields:read" | "custom_fields:write" | "discounts:read" | "discounts:write" | "checkout_links:read" | "checkout_links:write" | "checkouts:read" | "checkouts:write" | "products:read" | "products:write" | "benefits:read" | "benefits:write" | "events:read" | "events:write" | "meters:read" | "meters:write" | "files:read" | "files:write" | "subscriptions:read" | "subscriptions:write" | "customers:read" | "customers:write" | "customer_sessions:write" | "orders:read" | "refunds:read" | "refunds:write" | "metrics:read" | "webhooks:read" | "webhooks:write" | "external_organizations:read" | "license_keys:read" | "license_keys:write" | "repositories:read" | "repositories:write" | "issues:read" | "issues:write" | "customer_portal:read" | "customer_portal:write";
        /**
         * State
         * @enum {string}
         */
        State: "open" | "closed";
        /**
         * Status
         * @enum {string}
         */
        Status: "created" | "onboarding_started" | "under_review" | "active";
        /**
         * Storefront
         * @description Schema of a public storefront.
         */
        Storefront: {
            organization: components["schemas"]["Organization"];
            /** Products */
            products: components["schemas"]["ProductStorefront"][];
            donation_product: components["schemas"]["ProductStorefront"] | null;
            customers: components["schemas"]["StorefrontCustomers"];
        };
        /** StorefrontCustomer */
        StorefrontCustomer: {
            /** Name */
            name: string;
        };
        /** StorefrontCustomers */
        StorefrontCustomers: {
            /** Total */
            total: number;
            /** Customers */
            customers: components["schemas"]["StorefrontCustomer"][];
        };
        /**
         * SubType
         * @enum {string}
         */
        SubType: "user" | "organization";
        /** Subscription */
        Subscription: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /** Amount */
            amount: number | null;
            /** Currency */
            currency: string | null;
            recurring_interval: components["schemas"]["SubscriptionRecurringInterval"];
            status: components["schemas"]["SubscriptionStatus"];
            /**
             * Current Period Start
             * Format: date-time
             */
            current_period_start: string;
            /** Current Period End */
            current_period_end: string | null;
            /** Cancel At Period End */
            cancel_at_period_end: boolean;
            /** Canceled At */
            canceled_at: string | null;
            /** Started At */
            started_at: string | null;
            /** Ends At */
            ends_at: string | null;
            /** Ended At */
            ended_at: string | null;
            /**
             * Customer Id
             * Format: uuid4
             */
            customer_id: string;
            /**
             * Product Id
             * Format: uuid4
             */
            product_id: string;
            /**
             * Price Id
             * Format: uuid4
             */
            price_id: string;
            /** Discount Id */
            discount_id: string | null;
            /** Checkout Id */
            checkout_id: string | null;
            customer_cancellation_reason: components["schemas"]["CustomerCancellationReason"] | null;
            /** Customer Cancellation Comment */
            customer_cancellation_comment: string | null;
            /** Metadata */
            metadata: {
                [key: string]: string | number | boolean;
            };
            /**
             * Custom Field Data
             * @description Key-value object storing custom field values.
             */
            custom_field_data?: {
                [key: string]: string | number | boolean | null;
            };
            customer: components["schemas"]["SubscriptionCustomer"];
            /**
             * User Id
             * Format: uuid4
             * @deprecated
             */
            user_id: string;
            /** @deprecated */
            user: components["schemas"]["SubscriptionUser"];
            product: components["schemas"]["Product"];
            price: components["schemas"]["ProductPriceRecurring"];
            /** Discount */
            discount: (components["schemas"]["DiscountFixedOnceForeverDurationBase"] | components["schemas"]["DiscountFixedRepeatDurationBase"] | components["schemas"]["DiscountPercentageOnceForeverDurationBase"] | components["schemas"]["DiscountPercentageRepeatDurationBase"]) | null;
        };
        /** SubscriptionCancel */
        SubscriptionCancel: {
            /**
             * Cancel At Period End
             * @description Cancel an active subscription once the current period ends.
             *
             *     Or uncancel a subscription currently set to be revoked at period end.
             */
            cancel_at_period_end?: boolean | null;
            /**
             * Revoke
             * @description Cancel and revoke an active subscription immediately
             */
            revoke?: true | null;
            /** @description Customer reason for cancellation.
             *
             *     Helpful to monitor reasons behind churn for future improvements.
             *
             *     Only set this in case your own service is requesting the reason from the
             *     customer. Or you know based on direct conversations, i.e support, with
             *     the customer.
             *
             *     * `too_expensive`: Too expensive for the customer.
             *     * `missing_features`: Customer is missing certain features.
             *     * `switched_service`: Customer switched to another service.
             *     * `unused`: Customer is not using it enough.
             *     * `customer_service`: Customer is not satisfied with the customer service.
             *     * `low_quality`: Customer is unhappy with the quality.
             *     * `too_complex`: Customer considers the service too complicated.
             *     * `other`: Other reason(s). */
            customer_cancellation_reason?: components["schemas"]["CustomerCancellationReason"] | null;
            /**
             * Customer Cancellation Comment
             * @description Customer feedback and why they decided to cancel.
             *
             *     **IMPORTANT:**
             *     Do not use this to store internal notes! It's intended to be input
             *     from the customer and is therefore also available in their Polar
             *     purchases library.
             *
             *     Only set this in case your own service is requesting the reason from the
             *     customer. Or you copy a message directly from a customer
             *     conversation, i.e support.
             */
            customer_cancellation_comment?: string | null;
        };
        /** SubscriptionCustomer */
        SubscriptionCustomer: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /** Metadata */
            metadata: {
                [key: string]: string | number | boolean;
            };
            /** Email */
            email: string;
            /** Email Verified */
            email_verified: boolean;
            /** Name */
            name: string | null;
            billing_address: components["schemas"]["Address"] | null;
            /** Tax Id */
            tax_id: [
                string,
                components["schemas"]["TaxIDFormat"]
            ] | null;
            /**
             * Organization Id
             * Format: uuid4
             */
            organization_id: string;
            /** Avatar Url */
            readonly avatar_url: string;
        };
        /**
         * SubscriptionProrationBehavior
         * @enum {string}
         */
        SubscriptionProrationBehavior: "invoice" | "prorate";
        /**
         * SubscriptionRecurringInterval
         * @enum {string}
         */
        SubscriptionRecurringInterval: "month" | "year";
        /**
         * SubscriptionSortProperty
         * @enum {string}
         */
        SubscriptionSortProperty: "customer" | "-customer" | "status" | "-status" | "started_at" | "-started_at" | "current_period_end" | "-current_period_end" | "amount" | "-amount" | "product" | "-product" | "discount" | "-discount";
        /**
         * SubscriptionStatus
         * @enum {string}
         */
        SubscriptionStatus: "incomplete" | "incomplete_expired" | "trialing" | "active" | "past_due" | "canceled" | "unpaid";
        SubscriptionUpdate: components["schemas"]["SubscriptionUpdatePrice"] | components["schemas"]["SubscriptionCancel"];
        /** SubscriptionUpdatePrice */
        SubscriptionUpdatePrice: {
            /**
             * Product Price Id
             * Format: uuid4
             * @description Update subscription to another price.
             */
            product_price_id: string;
            /** @description Determine how to handle the proration billing. If not provided, will use the default organization setting. */
            proration_behavior?: components["schemas"]["SubscriptionProrationBehavior"] | null;
        };
        /** SubscriptionUser */
        SubscriptionUser: {
            /**
             * Id
             * Format: uuid4
             */
            id: string;
            /** Email */
            email: string;
            /** Public Name */
            public_name: string;
            /** Avatar Url */
            avatar_url?: string | null;
            /** Github Username */
            github_username?: string | null;
        };
        /** SummaryPledge */
        SummaryPledge: {
            /** @description Type of pledge */
            type: components["schemas"]["PledgeType"];
            pledger: components["schemas"]["Pledger"] | null;
        };
        /**
         * TaxIDFormat
         * @description List of supported tax ID formats.
         *
         *     Ref: https://docs.stripe.com/billing/customer/tax-ids#supported-tax-id
         * @enum {string}
         */
        TaxIDFormat: "ad_nrt" | "ae_trn" | "ar_cuit" | "au_abn" | "au_arn" | "bg_uic" | "bh_vat" | "bo_tin" | "br_cnpj" | "br_cpf" | "ca_bn" | "ca_gst_hst" | "ca_pst_bc" | "ca_pst_mb" | "ca_pst_sk" | "ca_qst" | "ch_uid" | "ch_vat" | "cl_tin" | "cn_tin" | "co_nit" | "cr_tin" | "de_stn" | "do_rcn" | "ec_ruc" | "eg_tin" | "es_cif" | "eu_oss_vat" | "eu_vat" | "gb_vat" | "ge_vat" | "hk_br" | "hr_oib" | "hu_tin" | "id_npwp" | "il_vat" | "in_gst" | "is_vat" | "jp_cn" | "jp_rn" | "jp_trn" | "ke_pin" | "kr_brn" | "kz_bin" | "li_uid" | "mx_rfc" | "my_frp" | "my_itn" | "my_sst" | "ng_tin" | "no_vat" | "no_voec" | "nz_gst" | "om_vat" | "pe_ruc" | "ph_tin" | "ro_tin" | "rs_pib" | "ru_inn" | "ru_kpp" | "sa_vat" | "sg_gst" | "sg_uen" | "si_tin" | "sv_nit" | "th_vat" | "tr_tin" | "tw_vat" | "ua_vat" | "us_ein" | "uy_ruc" | "ve_rif" | "vn_tin" | "za_vat";
        /** TeamAdminMemberPledgedNotification */
        TeamAdminMemberPledgedNotification: {
            /**
             * Id
             * Format: uuid4
             */
            id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "TeamAdminMemberPledgedNotification";
            payload: components["schemas"]["TeamAdminMemberPledgedNotificationPayload"];
        };
        /** TeamAdminMemberPledgedNotificationPayload */
        TeamAdminMemberPledgedNotificationPayload: {
            /** Team Member Name */
            team_member_name: string;
            /** Team Name */
            team_name: string;
            /** Pledge Amount */
            pledge_amount: string;
            /** Issue Url */
            issue_url: string;
            /** Issue Title */
            issue_title: string;
            /** Issue Number */
            issue_number: number;
            /** Issue Org Name */
            issue_org_name: string;
            /** Issue Repo Name */
            issue_repo_name: string;
            /**
             * Pledge Id
             * Format: uuid
             */
            pledge_id: string;
        };
        /**
         * TimeInterval
         * @enum {string}
         */
        TimeInterval: "year" | "month" | "week" | "day" | "hour";
        /** TokenResponse */
        TokenResponse: {
            /** Access Token */
            access_token: string;
            /**
             * Token Type
             * @constant
             */
            token_type: "Bearer";
            /** Expires In */
            expires_in: number;
            /** Refresh Token */
            refresh_token: string | null;
            /** Scope */
            scope: string;
            /** Id Token */
            id_token: string;
        };
        /** Transaction */
        Transaction: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            type: components["schemas"]["TransactionType"];
            processor: components["schemas"]["Processor"] | null;
            /** Currency */
            currency: string;
            /** Amount */
            amount: number;
            /** Account Currency */
            account_currency: string;
            /** Account Amount */
            account_amount: number;
            platform_fee_type: components["schemas"]["PlatformFeeType"] | null;
            /** Pledge Id */
            pledge_id: string | null;
            /** Issue Reward Id */
            issue_reward_id: string | null;
            /** Order Id */
            order_id: string | null;
            /** Payout Transaction Id */
            payout_transaction_id: string | null;
            /** Incurred By Transaction Id */
            incurred_by_transaction_id: string | null;
            pledge: components["schemas"]["TransactionPledge"] | null;
            issue_reward: components["schemas"]["TransactionIssueReward"] | null;
            order: components["schemas"]["TransactionOrder"] | null;
            /** Account Incurred Transactions */
            account_incurred_transactions: components["schemas"]["TransactionEmbedded"][];
            /** Incurred Amount */
            incurred_amount: number;
            /** Gross Amount */
            gross_amount: number;
            /** Net Amount */
            net_amount: number;
        };
        /** TransactionDetails */
        TransactionDetails: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            type: components["schemas"]["TransactionType"];
            processor: components["schemas"]["Processor"] | null;
            /** Currency */
            currency: string;
            /** Amount */
            amount: number;
            /** Account Currency */
            account_currency: string;
            /** Account Amount */
            account_amount: number;
            platform_fee_type: components["schemas"]["PlatformFeeType"] | null;
            /** Pledge Id */
            pledge_id: string | null;
            /** Issue Reward Id */
            issue_reward_id: string | null;
            /** Order Id */
            order_id: string | null;
            /** Payout Transaction Id */
            payout_transaction_id: string | null;
            /** Incurred By Transaction Id */
            incurred_by_transaction_id: string | null;
            pledge: components["schemas"]["TransactionPledge"] | null;
            issue_reward: components["schemas"]["TransactionIssueReward"] | null;
            order: components["schemas"]["TransactionOrder"] | null;
            /** Account Incurred Transactions */
            account_incurred_transactions: components["schemas"]["TransactionEmbedded"][];
            /** Incurred Amount */
            incurred_amount: number;
            /** Gross Amount */
            gross_amount: number;
            /** Net Amount */
            net_amount: number;
            /** Paid Transactions */
            paid_transactions: components["schemas"]["Transaction"][];
        };
        /** TransactionEmbedded */
        TransactionEmbedded: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            type: components["schemas"]["TransactionType"];
            processor: components["schemas"]["Processor"] | null;
            /** Currency */
            currency: string;
            /** Amount */
            amount: number;
            /** Account Currency */
            account_currency: string;
            /** Account Amount */
            account_amount: number;
            platform_fee_type: components["schemas"]["PlatformFeeType"] | null;
            /** Pledge Id */
            pledge_id: string | null;
            /** Issue Reward Id */
            issue_reward_id: string | null;
            /** Order Id */
            order_id: string | null;
            /** Payout Transaction Id */
            payout_transaction_id: string | null;
            /** Incurred By Transaction Id */
            incurred_by_transaction_id: string | null;
        };
        /** TransactionExternalOrganization */
        TransactionExternalOrganization: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            platform: components["schemas"]["Platforms"];
            /** Name */
            name: string;
            /** Avatar Url */
            avatar_url: string;
            /** Is Personal */
            is_personal: boolean;
        };
        /** TransactionIssue */
        TransactionIssue: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            platform: components["schemas"]["Platforms"];
            /**
             * Organization Id
             * Format: uuid4
             */
            organization_id: string;
            /**
             * Repository Id
             * Format: uuid4
             */
            repository_id: string;
            /** Number */
            number: number;
            /** Title */
            title: string;
            organization: components["schemas"]["TransactionExternalOrganization"];
            repository: components["schemas"]["TransactionRepository"];
        };
        /** TransactionIssueReward */
        TransactionIssueReward: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /**
             * Issue Id
             * Format: uuid4
             */
            issue_id: string;
            /** Share Thousands */
            share_thousands: number;
        };
        /** TransactionOrder */
        TransactionOrder: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            product: components["schemas"]["TransactionProduct"];
            product_price: components["schemas"]["ProductPrice"];
            /** Subscription Id */
            subscription_id: string | null;
        };
        /** TransactionOrganization */
        TransactionOrganization: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /** Name */
            name: string;
            /** Slug */
            slug: string;
            /** Avatar Url */
            avatar_url: string | null;
        };
        /** TransactionPledge */
        TransactionPledge: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            state: components["schemas"]["PledgeState"];
            issue: components["schemas"]["TransactionIssue"];
        };
        /** TransactionProduct */
        TransactionProduct: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            /** Name */
            name: string;
            /** Organization Id */
            organization_id: string | null;
            organization: components["schemas"]["TransactionOrganization"] | null;
        };
        /** TransactionRepository */
        TransactionRepository: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The ID of the object.
             */
            id: string;
            platform: components["schemas"]["Platforms"];
            /**
             * Organization Id
             * Format: uuid4
             */
            organization_id: string;
            /** Name */
            name: string;
        };
        /**
         * TransactionSortProperty
         * @enum {string}
         */
        TransactionSortProperty: "created_at" | "-created_at" | "amount" | "-amount";
        /**
         * TransactionType
         * @description Type of transactions.
         * @enum {string}
         */
        TransactionType: "payment" | "processor_fee" | "refund" | "dispute" | "dispute_reversal" | "balance" | "payout";
        /** TransactionsBalance */
        TransactionsBalance: {
            /** Currency */
            currency: string;
            /** Amount */
            amount: number;
            /** Account Currency */
            account_currency: string;
            /** Account Amount */
            account_amount: number;
        };
        /** TransactionsSummary */
        TransactionsSummary: {
            balance: components["schemas"]["TransactionsBalance"];
            payout: components["schemas"]["TransactionsBalance"];
        };
        /** Unauthorized */
        Unauthorized: {
            /**
             * Error
             * @constant
             */
            error: "Unauthorized";
            /** Detail */
            detail: string;
        };
        /** UpdateIssue */
        UpdateIssue: {
            funding_goal?: components["schemas"]["CurrencyAmount"] | null;
            /** Upfront Split To Contributors */
            upfront_split_to_contributors?: number | null;
            /** Set Upfront Split To Contributors */
            set_upfront_split_to_contributors?: boolean | null;
        };
        /** User */
        User: {
            /** Public Name */
            public_name: string;
            /** Avatar Url */
            avatar_url: string | null;
        };
        /** UserBase */
        UserBase: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Avatar Url */
            avatar_url: string | null;
            /** Account Id */
            account_id: string | null;
        };
        /** UserInfoOrganization */
        UserInfoOrganization: {
            /** Sub */
            sub: string;
            /** Name */
            name?: string | null;
        };
        /** UserInfoUser */
        UserInfoUser: {
            /** Sub */
            sub: string;
            /** Name */
            name?: string | null;
            /** Email */
            email?: string | null;
            /** Email Verified */
            email_verified?: boolean | null;
        };
        /** UserRead */
        UserRead: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Avatar Url */
            avatar_url: string | null;
            /** Account Id */
            account_id: string | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Accepted Terms Of Service */
            accepted_terms_of_service: boolean;
            /** Oauth Accounts */
            oauth_accounts: components["schemas"]["OAuthAccountRead"][];
        };
        /** UserScopes */
        UserScopes: {
            /** Scopes */
            scopes: components["schemas"]["Scope"][];
        };
        /** UserSetAccount */
        UserSetAccount: {
            /**
             * Account Id
             * Format: uuid4
             */
            account_id: string;
        };
        /** UserSignupAttribution */
        UserSignupAttribution: {
            /** Intent */
            intent?: ("creator" | "pledge" | "purchase" | "subscription" | "newsletter_subscription") | null;
            /** Order */
            order?: string | null;
            /** Subscription */
            subscription?: string | null;
            /** Pledge */
            pledge?: string | null;
            /** From Storefront */
            from_storefront?: string | null;
            /** Path */
            path?: string | null;
            /** Host */
            host?: string | null;
            /** Utm Source */
            utm_source?: string | null;
            /** Utm Medium */
            utm_medium?: string | null;
            /** Utm Campaign */
            utm_campaign?: string | null;
        };
        /** UserStripePortalSession */
        UserStripePortalSession: {
            /** Url */
            url: string;
        };
        /** ValidatedLicenseKey */
        ValidatedLicenseKey: {
            /**
             * Id
             * Format: uuid4
             */
            id: string;
            /**
             * Organization Id
             * Format: uuid4
             */
            organization_id: string;
            /**
             * User Id
             * Format: uuid4
             * @deprecated
             */
            user_id: string;
            /**
             * Customer Id
             * Format: uuid4
             */
            customer_id: string;
            /** @deprecated */
            user: components["schemas"]["LicenseKeyUser"];
            customer: components["schemas"]["LicenseKeyCustomer"];
            /**
             * Benefit Id
             * Format: uuid4
             * @description The benefit ID.
             */
            benefit_id: string;
            /** Key */
            key: string;
            /** Display Key */
            display_key: string;
            status: components["schemas"]["LicenseKeyStatus"];
            /** Limit Activations */
            limit_activations: number | null;
            /** Usage */
            usage: number;
            /** Limit Usage */
            limit_usage: number | null;
            /** Validations */
            validations: number;
            /** Last Validated At */
            last_validated_at: string | null;
            /** Expires At */
            expires_at: string | null;
            activation?: components["schemas"]["LicenseKeyActivationBase"] | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /**
         * WebhookBenefitCreatedPayload
         * @description Sent when a new benefit is created.
         *
         *     **Discord & Slack support:** Basic
         */
        WebhookBenefitCreatedPayload: {
            /**
             * Type
             * @constant
             */
            type: "benefit.created";
            /** Benefit */
            data: components["schemas"]["Benefit"];
        };
        /**
         * WebhookBenefitGrantCreatedPayload
         * @description Sent when a new benefit grant is created.
         *
         *     **Discord & Slack support:** Basic
         */
        WebhookBenefitGrantCreatedPayload: {
            /**
             * Type
             * @constant
             */
            type: "benefit_grant.created";
            data: components["schemas"]["BenefitGrantWebhook"];
        };
        /**
         * WebhookBenefitGrantRevokedPayload
         * @description Sent when a new benefit grant is revoked.
         *
         *     **Discord & Slack support:** Basic
         */
        WebhookBenefitGrantRevokedPayload: {
            /**
             * Type
             * @constant
             */
            type: "benefit_grant.revoked";
            data: components["schemas"]["BenefitGrantWebhook"];
        };
        /**
         * WebhookBenefitGrantUpdatedPayload
         * @description Sent when a new benefit grant is updated.
         *
         *     **Discord & Slack support:** Basic
         */
        WebhookBenefitGrantUpdatedPayload: {
            /**
             * Type
             * @constant
             */
            type: "benefit_grant.updated";
            data: components["schemas"]["BenefitGrantWebhook"];
        };
        /**
         * WebhookBenefitUpdatedPayload
         * @description Sent when a benefit is updated.
         *
         *     **Discord & Slack support:** Basic
         */
        WebhookBenefitUpdatedPayload: {
            /**
             * Type
             * @constant
             */
            type: "benefit.updated";
            /** Benefit */
            data: components["schemas"]["Benefit"];
        };
        /**
         * WebhookCheckoutCreatedPayload
         * @description Sent when a new checkout is created.
         *
         *     **Discord & Slack support:** Basic
         */
        WebhookCheckoutCreatedPayload: {
            /**
             * Type
             * @constant
             */
            type: "checkout.created";
            data: components["schemas"]["Checkout"];
        };
        /**
         * WebhookCheckoutUpdatedPayload
         * @description Sent when a checkout is updated.
         *
         *     **Discord & Slack support:** Basic
         */
        WebhookCheckoutUpdatedPayload: {
            /**
             * Type
             * @constant
             */
            type: "checkout.updated";
            data: components["schemas"]["Checkout"];
        };
        /**
         * WebhookDelivery
         * @description A webhook delivery for a webhook event.
         */
        WebhookDelivery: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The webhook delivery ID.
             */
            id: string;
            /**
             * Http Code
             * @description The HTTP code returned by the URL. `null` if the endpoint was unreachable.
             */
            http_code?: number | null;
            /**
             * Succeeded
             * @description Whether the delivery was successful.
             */
            succeeded: boolean;
            /** @description The webhook event sent by this delivery. */
            webhook_event: components["schemas"]["WebhookEvent"];
        };
        /**
         * WebhookEndpoint
         * @description A webhook endpoint.
         */
        WebhookEndpoint: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The webhook endpoint ID.
             */
            id: string;
            /**
             * Url
             * Format: uri
             * @description The URL where the webhook events will be sent.
             */
            url: string;
            /** @description The format of the webhook payload. */
            format: components["schemas"]["WebhookFormat"];
            /**
             * Organization Id
             * Format: uuid4
             * @description The organization ID associated with the webhook endpoint.
             */
            organization_id: string;
            /**
             * Events
             * @description The events that will trigger the webhook.
             */
            events: components["schemas"]["WebhookEventType"][];
        };
        /**
         * WebhookEndpointCreate
         * @description Schema to create a webhook endpoint.
         */
        WebhookEndpointCreate: {
            /**
             * Url
             * Format: uri
             * @description The URL where the webhook events will be sent.
             */
            url: string;
            /** @description The format of the webhook payload. */
            format: components["schemas"]["WebhookFormat"];
            /**
             * Secret
             * @description The secret used to sign the webhook events.
             */
            secret: string;
            /**
             * Events
             * @description The events that will trigger the webhook.
             */
            events: components["schemas"]["WebhookEventType"][];
            /**
             * Organization Id
             * @description The organization ID associated with the webhook endpoint. **Required unless you use an organization token.**
             */
            organization_id?: string | null;
        };
        /**
         * WebhookEndpointUpdate
         * @description Schema to update a webhook endpoint.
         */
        WebhookEndpointUpdate: {
            /** Url */
            url?: string | null;
            format?: components["schemas"]["WebhookFormat"] | null;
            /** Secret */
            secret?: string | null;
            /** Events */
            events?: components["schemas"]["WebhookEventType"][] | null;
        };
        /**
         * WebhookEvent
         * @description A webhook event.
         *
         *     An event represent something that happened in the system
         *     that should be sent to the webhook endpoint.
         *
         *     It can be delivered multiple times until it's marked as succeeded,
         *     each one creating a new delivery.
         */
        WebhookEvent: {
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp of the object.
             */
            created_at: string;
            /**
             * Modified At
             * @description Last modification timestamp of the object.
             */
            modified_at: string | null;
            /**
             * Id
             * Format: uuid4
             * @description The webhook event ID.
             */
            id: string;
            /**
             * Last Http Code
             * @description Last HTTP code returned by the URL. `null` if no delviery has been attempted or if the endpoint was unreachable.
             */
            last_http_code?: number | null;
            /**
             * Succeeded
             * @description Whether this event was successfully delivered. `null` if no delivery has been attempted.
             */
            succeeded?: boolean | null;
            /**
             * Payload
             * @description The payload of the webhook event.
             */
            payload: string;
        };
        /**
         * WebhookEventType
         * @enum {string}
         */
        WebhookEventType: "checkout.created" | "checkout.updated" | "order.created" | "order.refunded" | "subscription.created" | "subscription.updated" | "subscription.active" | "subscription.canceled" | "subscription.uncanceled" | "subscription.revoked" | "refund.created" | "refund.updated" | "product.created" | "product.updated" | "benefit.created" | "benefit.updated" | "benefit_grant.created" | "benefit_grant.updated" | "benefit_grant.revoked" | "organization.updated" | "pledge.created" | "pledge.updated";
        /**
         * WebhookFormat
         * @enum {string}
         */
        WebhookFormat: "raw" | "discord" | "slack";
        /**
         * WebhookOrderCreatedPayload
         * @description Sent when a new order is created.
         *
         *     **Discord & Slack support:** Full
         */
        WebhookOrderCreatedPayload: {
            /**
             * Type
             * @constant
             */
            type: "order.created";
            data: components["schemas"]["Order"];
        };
        /**
         * WebhookOrderRefundedPayload
         * @description Sent when an order is fully or partially refunded.
         *
         *     **Discord & Slack support:** Full
         */
        WebhookOrderRefundedPayload: {
            /**
             * Type
             * @constant
             */
            type: "order.refunded";
            data: components["schemas"]["Order"];
        };
        /**
         * WebhookOrganizationUpdatedPayload
         * @description Sent when a organization is updated.
         *
         *     **Discord & Slack support:** Basic
         */
        WebhookOrganizationUpdatedPayload: {
            /**
             * Type
             * @constant
             */
            type: "organization.updated";
            data: components["schemas"]["Organization"];
        };
        /**
         * WebhookPledgeCreatedPayload
         * @description Sent when a new pledge is created. Note that this does mean that the pledge has been paid yet.
         *
         *     **Discord & Slack support:** Full
         */
        WebhookPledgeCreatedPayload: {
            /**
             * Type
             * @constant
             */
            type: "pledge.created";
            data: components["schemas"]["Pledge"];
        };
        /**
         * WebhookPledgeUpdatedPayload
         * @description Sent when a pledge is updated.
         *
         *     **Discord & Slack support:** Basic
         */
        WebhookPledgeUpdatedPayload: {
            /**
             * Type
             * @constant
             */
            type: "pledge.updated";
            data: components["schemas"]["Pledge"];
        };
        /**
         * WebhookProductCreatedPayload
         * @description Sent when a new product is created.
         *
         *     **Discord & Slack support:** Basic
         */
        WebhookProductCreatedPayload: {
            /**
             * Type
             * @constant
             */
            type: "product.created";
            data: components["schemas"]["Product"];
        };
        /**
         * WebhookProductUpdatedPayload
         * @description Sent when a product is updated.
         *
         *     **Discord & Slack support:** Basic
         */
        WebhookProductUpdatedPayload: {
            /**
             * Type
             * @constant
             */
            type: "product.updated";
            data: components["schemas"]["Product"];
        };
        /**
         * WebhookRefundCreatedPayload
         * @description Sent when a refund is created regardless of status.
         *
         *     **Discord & Slack support:** Full
         */
        WebhookRefundCreatedPayload: {
            /**
             * Type
             * @constant
             */
            type: "refund.created";
            data: components["schemas"]["Refund"];
        };
        /**
         * WebhookRefundUpdatedPayload
         * @description Sent when a refund is updated.
         *
         *     **Discord & Slack support:** Full
         */
        WebhookRefundUpdatedPayload: {
            /**
             * Type
             * @constant
             */
            type: "refund.updated";
            data: components["schemas"]["Refund"];
        };
        /** WebhookResponse */
        WebhookResponse: {
            /** Success */
            success: boolean;
            /** Message */
            message?: string | null;
            /** Job Id */
            job_id?: string | null;
        };
        /**
         * WebhookSubscriptionActivePayload
         * @description Sent when a subscription becomes active,
         *     whether because it's a new paid subscription or because payment was recovered.
         *
         *     **Discord & Slack support:** Full
         */
        WebhookSubscriptionActivePayload: {
            /**
             * Type
             * @constant
             */
            type: "subscription.active";
            data: components["schemas"]["Subscription"];
        };
        /**
         * WebhookSubscriptionCanceledPayload
         * @description Sent when a subscription is canceled.
         *     Customers might still have access until the end of the current period.
         *
         *     **Discord & Slack support:** Full
         */
        WebhookSubscriptionCanceledPayload: {
            /**
             * Type
             * @constant
             */
            type: "subscription.canceled";
            data: components["schemas"]["Subscription"];
        };
        /**
         * WebhookSubscriptionCreatedPayload
         * @description Sent when a new subscription is created.
         *
         *     **Discord & Slack support:** Full
         */
        WebhookSubscriptionCreatedPayload: {
            /**
             * Type
             * @constant
             */
            type: "subscription.created";
            data: components["schemas"]["Subscription"];
        };
        /**
         * WebhookSubscriptionRevokedPayload
         * @description Sent when a subscription is revoked, the user looses access immediately.
         *     Happens when the subscription is canceled, or payment is past due.
         *
         *     **Discord & Slack support:** Full
         */
        WebhookSubscriptionRevokedPayload: {
            /**
             * Type
             * @constant
             */
            type: "subscription.revoked";
            data: components["schemas"]["Subscription"];
        };
        /**
         * WebhookSubscriptionUncanceledPayload
         * @description Sent when a subscription is uncanceled.
         *
         *     **Discord & Slack support:** Full
         */
        WebhookSubscriptionUncanceledPayload: {
            /**
             * Type
             * @constant
             */
            type: "subscription.uncanceled";
            data: components["schemas"]["Subscription"];
        };
        /**
         * WebhookSubscriptionUpdatedPayload
         * @description Sent when a subscription is updated. This event fires for all changes to the subscription, including renewals.
         *
         *     If you want more specific events, you can listen to `subscription.active`, `subscription.canceled`, and `subscription.revoked`.
         *
         *     To listen specifically for renewals, you can listen to `order.created` events and check the `billing_reason` field.
         *
         *     **Discord & Slack support:** On cancellation and revocation. Renewals are skipped.
         */
        WebhookSubscriptionUpdatedPayload: {
            /**
             * Type
             * @constant
             */
            type: "subscription.updated";
            data: components["schemas"]["Subscription"];
        };
        /** Body_magic_link:magic_link.authenticate */
        authenticate: {
            /** Token */
            token: string;
        };
        /** MetadataQuery */
        MetadataQuery: {
            [key: string]: string | number | boolean | string[] | number[] | boolean[];
        } | null;
        /** AuthorizationCodeTokenRequest */
        AuthorizationCodeTokenRequest: {
            /**
             * Grant Type
             * @constant
             */
            grant_type: "authorization_code";
            /** Client Id */
            client_id: string;
            /** Client Secret */
            client_secret: string;
            /** Code */
            code: string;
            /**
             * Redirect Uri
             * Format: uri
             */
            redirect_uri: string;
        };
        /** RefreshTokenRequest */
        RefreshTokenRequest: {
            /**
             * Grant Type
             * @constant
             */
            grant_type: "refresh_token";
            /** Client Id */
            client_id: string;
            /** Client Secret */
            client_secret: string;
            /** Refresh Token */
            refresh_token: string;
        };
        /** RevokeTokenRequest */
        RevokeTokenRequest: {
            /** Token */
            token: string;
            /**
             * Token Type Hint
             * @default null
             */
            token_type_hint: ("access_token" | "refresh_token") | null;
            /** Client Id */
            client_id: string;
            /** Client Secret */
            client_secret: string;
        };
        /** IntrospectTokenRequest */
        IntrospectTokenRequest: {
            /** Token */
            token: string;
            /**
             * Token Type Hint
             * @default null
             */
            token_type_hint: ("access_token" | "refresh_token") | null;
            /** Client Id */
            client_id: string;
            /** Client Secret */
            client_secret: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "users:get_authenticated": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRead"];
                };
            };
        };
    };
    "users:scopes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserScopes"];
                };
            };
        };
    };
    "users:set_account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserSetAccount"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "users:create_stripe_customer_portal": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserStripePortalSession"];
                };
            };
        };
    };
    "integrations_github:integrations.github.authorize": {
        parameters: {
            query?: {
                payment_intent_id?: string | null;
                return_to?: string | null;
                attribution?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "integrations_github:integrations.github.callback": {
        parameters: {
            query?: {
                code?: string | null;
                code_verifier?: string | null;
                state?: string | null;
                error?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "integrations_github:lookup_user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LookupUserRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GithubUser"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "integrations_github:redirect_to_organization_installation": {
        parameters: {
            query?: {
                return_to?: string | null;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "integrations_github:check_organization_permissions": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrganizationCheckPermissionsInput"];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "integrations_github:get_organization_billing_plan": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationBillingPlan"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "integrations_github:install": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InstallationCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExternalOrganization"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "integrations_github:webhook": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebhookResponse"];
                };
            };
        };
    };
    "integrations_github_repository_benefit:integrations.github_repository_benefit.user_authorize": {
        parameters: {
            query?: {
                return_to?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "integrations_github_repository_benefit:integrations.github_repository_benefit.user_callback": {
        parameters: {
            query?: {
                code?: string | null;
                code_verifier?: string | null;
                state?: string | null;
                error?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "integrations_github_repository_benefit:integrations.github_repository_benefit.user_repositories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GitHubInvitesBenefitRepositories"];
                };
            };
        };
    };
    "integrations_github_repository_benefit:integrations.github_repository_benefit.installation_install": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    "integrations_github_repository_benefit:integrations.github_repository_benefit.installation_callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    "integrations_discord:integrations.discord.bot_authorize": {
        parameters: {
            query?: {
                return_to?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "integrations_discord:integrations.discord.bot_callback": {
        parameters: {
            query: {
                state: string;
                code?: string | null;
                code_verifier?: string | null;
                error?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "integrations_discord:discord_guild_lookup": {
        parameters: {
            query: {
                guild_token: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DiscordGuild"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "backoffice:pledges": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BackofficePledge"][];
                };
            };
        };
    };
    "backoffice:rewards": {
        parameters: {
            query?: {
                issue_id?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResource_BackofficeReward_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "backoffice:rewards_pending": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResource_BackofficeReward_"];
                };
            };
        };
    };
    "backoffice:issue": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Issue"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "backoffice:pledge_reward_transfer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PledgeRewardTransfer"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BackofficeReward"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "backoffice:pledge_create_invoice": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                pledge_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BackofficePledge"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "backoffice:pledge_mark_disputed": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                pledge_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BackofficePledge"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "backoffice:manage_badge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BackofficeBadge"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BackofficeBadgeResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "backoffice:update_badge_contents": {
        parameters: {
            query: {
                org_slug: string;
                repo_slug: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "dashboard:get_personal_dashboard": {
        parameters: {
            query?: {
                q?: string | null;
                sort?: components["schemas"]["IssueSortBy"] | null;
                only_pledged?: boolean;
                only_badged?: boolean;
                show_closed?: boolean;
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IssueListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "dashboard:get_dashboard": {
        parameters: {
            query?: {
                /** @description Filter by repository name. */
                repository_name?: string | null;
                q?: string | null;
                sort?: components["schemas"]["IssueSortBy"] | null;
                only_pledged?: boolean;
                only_badged?: boolean;
                show_closed?: boolean;
                page?: number;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IssueListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "dashboard:dummy_do_not_use": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PledgesTypeSummaries"];
                };
            };
        };
    };
    "funding:search": {
        parameters: {
            query: {
                organization_id: string;
                /** @description Filter by repository name. */
                repository_name?: string | null;
                query?: string | null;
                badged?: boolean | null;
                closed?: boolean | null;
                /** @description Sorting criterion. Several criteria can be used simultaneously and will be applied in order. */
                sorting?: components["schemas"]["ListFundingSortBy"][];
                /** @description Page number, defaults to 1. */
                page?: number;
                /** @description Size of a page, defaults to 10. Maximum is 100. */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResource_IssueFunding_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "funding:lookup": {
        parameters: {
            query: {
                issue_id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IssueFunding"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "magic_link:magic_link.request": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MagicLinkRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "magic_link:magic_link.authenticate": {
        parameters: {
            query?: {
                return_to?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["authenticate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "notifications:get": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotificationsList"];
                };
            };
        };
    };
    "notifications:mark_read": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotificationsMarkRead"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "external_organizations:list": {
        parameters: {
            query?: {
                /** @description Filter by platform. */
                platform?: components["schemas"]["Platforms"] | components["schemas"]["Platforms"][] | null;
                /** @description Filter by name. */
                name?: string | string[] | null;
                /** @description Filter by organization ID. */
                organization_id?: string | string[] | null;
                /** @description Page number, defaults to 1. */
                page?: number;
                /** @description Size of a page, defaults to 10. Maximum is 100. */
                limit?: number;
                /** @description Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order. */
                sorting?: components["schemas"]["ExternalOrganizationSortProperty"][] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResource_ExternalOrganization_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "repositories:list": {
        parameters: {
            query?: {
                /** @description Filter by platform. */
                platform?: components["schemas"]["Platforms"] | components["schemas"]["Platforms"][] | null;
                /** @description Filter by name. */
                name?: string | string[] | null;
                /** @description Filter by external organization name. */
                external_organization_name?: string | string[] | null;
                /** @description Filter by private status. */
                is_private?: boolean | null;
                /** @description Filter by organization ID. */
                organization_id?: string | string[] | null;
                /** @description Page number, defaults to 1. */
                page?: number;
                /** @description Size of a page, defaults to 10. Maximum is 100. */
                limit?: number;
                /** @description Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order. */
                sorting?: components["schemas"]["RepositorySortProperty"][] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResource_Repository_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "repositories:get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Repository"];
                };
            };
            /** @description Repository not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "repositories:update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RepositoryUpdate"];
            };
        };
        responses: {
            /** @description Repository updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Repository"];
                };
            };
            /** @description You don't have the permission to update this repository. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotPermitted"];
                };
            };
            /** @description Repository not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "rewards:search": {
        parameters: {
            query?: {
                /** @description Search rewards for pledges in this organization. */
                pledges_to_organization?: string | null;
                /** @description Search rewards to user. */
                rewards_to_user?: string | null;
                /** @description Search rewards to organization. */
                rewards_to_org?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResource_Reward_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "rewards:summary": {
        parameters: {
            query: {
                issue_id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RewardsSummary"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "personal_access_token:list_personal_access_tokens": {
        parameters: {
            query?: {
                /** @description Page number, defaults to 1. */
                page?: number;
                /** @description Size of a page, defaults to 10. Maximum is 100. */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResource_PersonalAccessToken_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "personal_access_token:delete_personal_access_token": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "payment_methods:list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResource_PaymentMethod_"];
                };
            };
        };
    };
    "payment_methods:detach": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentMethod"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "accounts:search": {
        parameters: {
            query?: {
                /** @description Page number, defaults to 1. */
                page?: number;
                /** @description Size of a page, defaults to 10. Maximum is 100. */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResource_Account_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "accounts:get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Account"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "accounts:onboarding_link": {
        parameters: {
            query: {
                return_path: string;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountLink"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "accounts:dashboard_link": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountLink"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "accounts:create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AccountCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Account"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "issues:list": {
        parameters: {
            query?: {
                /** @description Filter by platform. */
                platform?: components["schemas"]["Platforms"] | components["schemas"]["Platforms"][] | null;
                /** @description Filter by external organization name. */
                external_organization_name?: string | string[] | null;
                /** @description Filter by repository name. */
                repository_name?: string | string[] | null;
                /** @description Filter by issue number. */
                number?: number | number[] | null;
                /** @description Filter by organization ID. */
                organization_id?: string | string[] | null;
                /** @description Filter by badged status. */
                is_badged?: boolean | null;
                /** @description Page number, defaults to 1. */
                page?: number;
                /** @description Size of a page, defaults to 10. Maximum is 100. */
                limit?: number;
                /** @description Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order. */
                sorting?: components["schemas"]["IssueSortProperty"][] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResource_Issue_"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "issues:lookup": {
        parameters: {
            query?: {
                /** @description URL to issue on external source */
                external_url?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Issue"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "issues:get_body": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "issues:for_you": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResource_Issue_"];
                };
            };
        };
    };
    "issues:get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Issue"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "issues:update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateIssue"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Issue"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "issues:confirm": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConfirmIssue"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Issue"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "issues:add_polar_badge": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Issue"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "issues:remove_polar_badge": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Issue"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "issues:add_issue_comment": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostIssueComment"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Issue"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "issues:badge_with_message": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IssueUpdateBadgeMessage"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Issue"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "pledges:search": {
        parameters: {
            query?: {
                /** @description Search pledges to this organization */
                organization_id?: string | null;
                /** @description Search pledges in the repository with this name. Can only be used if organization_name is set. */
                repository_name?: string | null;
                /** @description Search pledges to this issue */
                issue_id?: string | null;
                /** @description Search pledges made by this organization. */
                by_organization_id?: string | null;
                /** @description Search pledges made by this user. */
                by_user_id?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResource_Pledge_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "pledges:summary": {
        parameters: {
            query: {
                issue_id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PledgePledgesSummary"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "pledges:spending": {
        parameters: {
            query: {
                /** @description Spending in this organization. Required. */
                organization_id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PledgeSpending"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "pledges:get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Pledge"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "pledges:create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePledgeFromPaymentIntent"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Pledge"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "pledges:create_pay_on_completion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePledgePayLater"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Pledge"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "pledges:create_invoice": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Pledge"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "pledges:create_payment_intent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PledgeStripePaymentIntentCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PledgeStripePaymentIntentMutationResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "pledges:update_payment_intent": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PledgeStripePaymentIntentUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PledgeStripePaymentIntentMutationResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "pledges:dispute_pledge": {
        parameters: {
            query: {
                reason: string;
            };
            header?: never;
            path: {
                pledge_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Pledge"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "organizations:list": {
        parameters: {
            query?: {
                /** @description Filter by slug. */
                slug?: string | null;
                /** @description Page number, defaults to 1. */
                page?: number;
                /** @description Size of a page, defaults to 10. Maximum is 100. */
                limit?: number;
                /** @description Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order. */
                sorting?: components["schemas"]["OrganizationSortProperty"][] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResource_Organization_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "organizations:create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrganizationCreate"];
            };
        };
        responses: {
            /** @description Organization created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Organization"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "organizations:get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Organization"];
                };
            };
            /** @description Organization not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "organizations:update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrganizationUpdate"];
            };
        };
        responses: {
            /** @description Organization updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Organization"];
                };
            };
            /** @description You don't have the permission to update this organization. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotPermitted"];
                };
            };
            /** @description Organization not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "organizations:get_account": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Account"];
                };
            };
            /** @description You don't have the permission to update this organization. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotPermitted"];
                };
            };
            /** @description Organization not found or account not set. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "organizations:set_account": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrganizationSetAccount"];
            };
        };
        responses: {
            /** @description Organization account set. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Organization"];
                };
            };
            /** @description You don't have the permission to update this organization. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotPermitted"];
                };
            };
            /** @description Organization not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "organizations:members": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string | null;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResource_OrganizationMember_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "organizations:create_stripe_customer_portal": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationStripePortalSession"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "organizations:get_badge_settings": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationBadgeSettingsRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "organizations:update_badge_settings": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrganizationBadgeSettingsUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Organization"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "subscriptions:list": {
        parameters: {
            query?: {
                /** @description Filter by organization ID. */
                organization_id?: string | string[] | null;
                /** @description Filter by product ID. */
                product_id?: string | string[] | null;
                /** @description Filter by customer ID. */
                customer_id?: string | string[] | null;
                /** @description Filter by discount ID. */
                discount_id?: string | string[] | null;
                /** @description Filter by active or inactive subscription. */
                active?: boolean | null;
                /** @description Page number, defaults to 1. */
                page?: number;
                /** @description Size of a page, defaults to 10. Maximum is 100. */
                limit?: number;
                /** @description Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order. */
                sorting?: components["schemas"]["SubscriptionSortProperty"][] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResource_Subscription_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "subscriptions:export": {
        parameters: {
            query?: {
                /** @description Filter by organization ID. */
                organization_id?: string | string[] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "subscriptions:get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The subscription ID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Subscription"];
                };
            };
            /** @description Subscription not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "subscriptions:revoke": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The subscription ID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Subscription revoked. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Subscription"];
                };
            };
            /** @description This subscription is already revoked. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AlreadyCanceledSubscription"];
                };
            };
            /** @description Subscription not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "subscriptions:update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The subscription ID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SubscriptionUpdate"];
            };
        };
        responses: {
            /** @description Subscription updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Subscription"];
                };
            };
            /** @description Subscription is already canceled or will be at the end of the period. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AlreadyCanceledSubscription"];
                };
            };
            /** @description Subscription not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "transactions:search_transactions": {
        parameters: {
            query?: {
                type?: components["schemas"]["TransactionType"] | null;
                account_id?: string | null;
                payment_customer_id?: string | null;
                payment_organization_id?: string | null;
                payment_user_id?: string | null;
                exclude_platform_fees?: boolean;
                /** @description Page number, defaults to 1. */
                page?: number;
                /** @description Size of a page, defaults to 10. Maximum is 100. */
                limit?: number;
                /** @description Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order. */
                sorting?: components["schemas"]["TransactionSortProperty"][] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResource_Transaction_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "transactions:lookup_transaction": {
        parameters: {
            query: {
                transaction_id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TransactionDetails"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "transactions:get_summary": {
        parameters: {
            query: {
                account_id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TransactionsSummary"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "transactions:get_payout_estimate": {
        parameters: {
            query: {
                account_id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PayoutEstimate"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "transactions:create_payout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PayoutCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Transaction"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "transactions:get_payout_csv": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "advertisements:list": {
        parameters: {
            query: {
                benefit_id: string;
                /** @description Page number, defaults to 1. */
                page?: number;
                /** @description Size of a page, defaults to 10. Maximum is 100. */
                limit?: number;
                /** @description Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order. */
                sorting?: components["schemas"]["AdvertisementSortProperty"][] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdvertisementCampaignListResource"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "advertisements:get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The advertisement campaign ID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdvertisementCampaign"];
                };
            };
            /** @description Advertisement campaign not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "advertisements:track_view": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The advertisement campaign ID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The view was successfully tracked. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Advertisement campaign not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "auth:logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    "oauth2:clients:list": {
        parameters: {
            query?: {
                /** @description Page number, defaults to 1. */
                page?: number;
                /** @description Size of a page, defaults to 10. Maximum is 100. */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResource_OAuth2Client_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "oauth2:clients:oauth2:create_client": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OAuth2ClientConfiguration"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "oauth2:clients:oauth2:get_client": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                client_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "oauth2:clients:oauth2:update_client": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                client_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OAuth2ClientConfigurationUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "oauth2:clients:oauth2:delete_client": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                client_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "oauth2:authorize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthorizeResponseUser"] | components["schemas"]["AuthorizeResponseOrganization"];
                };
            };
        };
    };
    "oauth2:consent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["Body_oauth2_consent"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "oauth2:request_token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["AuthorizationCodeTokenRequest"] | components["schemas"]["RefreshTokenRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenResponse"];
                };
            };
        };
    };
    "oauth2:revoke_token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["RevokeTokenRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RevokeTokenResponse"];
                };
            };
        };
    };
    "oauth2:introspect_token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["IntrospectTokenRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IntrospectTokenResponse"];
                };
            };
        };
    };
    "oauth2:userinfo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserInfoUser"] | components["schemas"]["UserInfoOrganization"];
                };
            };
        };
    };
    "benefits:list": {
        parameters: {
            query?: {
                /** @description Filter by organization ID. */
                organization_id?: string | string[] | null;
                /** @description Filter by benefit type. */
                type?: components["schemas"]["BenefitType"] | components["schemas"]["BenefitType"][] | null;
                /** @description Page number, defaults to 1. */
                page?: number;
                /** @description Size of a page, defaults to 10. Maximum is 100. */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResource_Benefit_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "benefits:create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BenefitCreate"];
            };
        };
        responses: {
            /** @description Benefit created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Benefit"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "benefits:get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Benefit"];
                };
            };
            /** @description Benefit not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "benefits:delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Benefit deleted. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You don't have the permission to update this benefit or it's not deletable. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotPermitted"];
                };
            };
            /** @description Benefit not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "benefits:update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BenefitAdsUpdate"] | components["schemas"]["BenefitCustomUpdate"] | components["schemas"]["BenefitDiscordUpdate"] | components["schemas"]["BenefitGitHubRepositoryUpdate"] | components["schemas"]["BenefitDownloadablesUpdate"] | components["schemas"]["BenefitLicenseKeysUpdate"];
            };
        };
        responses: {
            /** @description Benefit updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Benefit"];
                };
            };
            /** @description You don't have the permission to update this benefit. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotPermitted"];
                };
            };
            /** @description Benefit not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "benefits:grants": {
        parameters: {
            query?: {
                /** @description Filter by granted status. If `true`, only granted benefits will be returned. If `false`, only revoked benefits will be returned.  */
                is_granted?: boolean | null;
                /** @description Filter by customer. */
                customer_id?: string | string[] | null;
                /** @description Page number, defaults to 1. */
                page?: number;
                /** @description Size of a page, defaults to 10. Maximum is 100. */
                limit?: number;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResource_BenefitGrant_"];
                };
            };
            /** @description Benefit not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "webhooks:list_webhook_endpoints": {
        parameters: {
            query?: {
                /** @description Filter by organization ID. */
                organization_id?: string | null;
                /** @description Page number, defaults to 1. */
                page?: number;
                /** @description Size of a page, defaults to 10. Maximum is 100. */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResource_WebhookEndpoint_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "webhooks:create_webhook_endpoint": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WebhookEndpointCreate"];
            };
        };
        responses: {
            /** @description Webhook endpoint created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebhookEndpoint"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "webhooks:get_webhook_endpoint": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The webhook endpoint ID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebhookEndpoint"];
                };
            };
            /** @description Webhook endpoint not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "webhooks:delete_webhook_endpoint": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The webhook endpoint ID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Webhook endpoint deleted. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You don't have the permission to delete this webhook endpoint. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotPermitted"];
                };
            };
            /** @description Webhook endpoint not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "webhooks:update_webhook_endpoint": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The webhook endpoint ID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WebhookEndpointUpdate"];
            };
        };
        responses: {
            /** @description Webhook endpoint updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebhookEndpoint"];
                };
            };
            /** @description You don't have the permission to update this webhook endpoint. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotPermitted"];
                };
            };
            /** @description Webhook endpoint not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "webhooks:list_webhook_deliveries": {
        parameters: {
            query?: {
                /** @description Filter by webhook endpoint ID. */
                endpoint_id?: string | null;
                /** @description Page number, defaults to 1. */
                page?: number;
                /** @description Size of a page, defaults to 10. Maximum is 100. */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResource_WebhookDelivery_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "webhooks:redeliver_webhook_event": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The webhook event ID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Webhook event re-delivery scheduled. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Webhook event not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "products:list": {
        parameters: {
            query?: {
                /** @description Filter by product ID. */
                id?: string | string[] | null;
                /** @description Filter by organization ID. */
                organization_id?: string | string[] | null;
                /** @description Filter by product name. */
                query?: string | null;
                /** @description Filter on archived products. */
                is_archived?: boolean | null;
                /** @description Filter on recurring products. If `true`, only subscriptions tiers are returned. If `false`, only one-time purchase products are returned.  */
                is_recurring?: boolean | null;
                /** @description Filter products granting specific benefit. */
                benefit_id?: string | string[] | null;
                /** @description Page number, defaults to 1. */
                page?: number;
                /** @description Size of a page, defaults to 10. Maximum is 100. */
                limit?: number;
                /** @description Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order. */
                sorting?: components["schemas"]["ProductSortProperty"][] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResource_Product_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "products:create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductCreate"];
            };
        };
        responses: {
            /** @description Product created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Product"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "products:get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Product"];
                };
            };
            /** @description Product not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "products:update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductUpdate"];
            };
        };
        responses: {
            /** @description Product updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Product"];
                };
            };
            /** @description You don't have the permission to update this product. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotPermitted"];
                };
            };
            /** @description Product not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "products:update_benefits": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductBenefitsUpdate"];
            };
        };
        responses: {
            /** @description Product benefits updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Product"];
                };
            };
            /** @description You don't have the permission to update this product. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotPermitted"];
                };
            };
            /** @description Product not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "orders:list": {
        parameters: {
            query?: {
                /** @description Filter by organization ID. */
                organization_id?: string | string[] | null;
                /** @description Filter by product ID. */
                product_id?: string | string[] | null;
                /** @description Filter by product price type. `recurring` will return orders corresponding to subscriptions creations or renewals. `one_time` will return orders corresponding to one-time purchases. */
                product_price_type?: components["schemas"]["ProductPriceType"] | components["schemas"]["ProductPriceType"][] | null;
                /** @description Filter by discount ID. */
                discount_id?: string | string[] | null;
                /** @description Filter by customer ID. */
                customer_id?: string | string[] | null;
                /** @description Filter by checkout ID. */
                checkout_id?: string | string[] | null;
                /** @description Page number, defaults to 1. */
                page?: number;
                /** @description Size of a page, defaults to 10. Maximum is 100. */
                limit?: number;
                /** @description Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order. */
                sorting?: components["schemas"]["OrderSortProperty"][] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResource_Order_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "orders:get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The order ID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
            /** @description Order not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "orders:invoice": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The order ID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrderInvoice"];
                };
            };
            /** @description Order not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "refunds:list": {
        parameters: {
            query?: {
                /** @description Filter by refund ID. */
                id?: string | string[] | null;
                /** @description Filter by organization ID. */
                organization_id?: string | string[] | null;
                /** @description Filter by order ID. */
                order_id?: string | string[] | null;
                /** @description Filter by subscription ID. */
                subscription_id?: string | string[] | null;
                /** @description Filter by customer ID. */
                customer_id?: string | string[] | null;
                /** @description Filter by `succeeded`. */
                succeeded?: boolean | null;
                /** @description Page number, defaults to 1. */
                page?: number;
                /** @description Size of a page, defaults to 10. Maximum is 100. */
                limit?: number;
                /** @description Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order. */
                sorting?: components["schemas"]["RefundSortProperty"][] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResource_Refund_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "refunds:create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RefundCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Refund"];
                };
            };
            /** @description Refund created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Refund amount exceeds remaining order balance. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RefundAmountTooHigh"];
                };
            };
            /** @description Order is already fully refunded. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RefundedAlready"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "checkouts:list": {
        parameters: {
            query?: {
                /** @description Filter by organization ID. */
                organization_id?: string | string[] | null;
                /** @description Filter by product ID. */
                product_id?: string | string[] | null;
                /** @description Page number, defaults to 1. */
                page?: number;
                /** @description Size of a page, defaults to 10. Maximum is 100. */
                limit?: number;
                /** @description Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order. */
                sorting?: components["schemas"]["CheckoutSortProperty"][] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResource_Checkout_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "checkouts:create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CheckoutCreate"];
            };
        };
        responses: {
            /** @description Checkout session created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Checkout"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "checkouts:get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The checkout session ID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Checkout"];
                };
            };
            /** @description Checkout session not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "checkouts:update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The checkout session ID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CheckoutUpdate"];
            };
        };
        responses: {
            /** @description Checkout session updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Checkout"];
                };
            };
            /** @description The checkout is expired or the customer already has an active subscription. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CheckoutForbiddenError"];
                };
            };
            /** @description Checkout session not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "checkouts:client_get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The checkout session client secret. */
                client_secret: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CheckoutPublic"];
                };
            };
            /** @description Checkout session not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "checkouts:client_update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The checkout session client secret. */
                client_secret: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CheckoutUpdatePublic"];
            };
        };
        responses: {
            /** @description Checkout session updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CheckoutPublic"];
                };
            };
            /** @description The checkout is expired or the customer already has an active subscription. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CheckoutForbiddenError"];
                };
            };
            /** @description Checkout session not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "checkouts:client_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CheckoutCreatePublic"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CheckoutPublic"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "checkouts:client_confirm": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The checkout session client secret. */
                client_secret: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CheckoutConfirmStripe"];
            };
        };
        responses: {
            /** @description Checkout session confirmed. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CheckoutPublicConfirmed"];
                };
            };
            /** @description The payment failed. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentError"];
                };
            };
            /** @description The checkout is expired or the customer already has an active subscription. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CheckoutForbiddenError"];
                };
            };
            /** @description Checkout session not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "files:list": {
        parameters: {
            query?: {
                organization_id?: string | null;
                /** @description List of file IDs to get.  */
                ids?: string[] | null;
                /** @description Page number, defaults to 1. */
                page?: number;
                /** @description Size of a page, defaults to 10. Maximum is 100. */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResource_FileRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "files:create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FileCreate"];
            };
        };
        responses: {
            /** @description File created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileUpload"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "files:uploaded": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The file ID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FileUploadCompleted"];
            };
        };
        responses: {
            /** @description File upload completed. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DownloadableFileRead"] | components["schemas"]["ProductMediaFileRead"] | components["schemas"]["OrganizationAvatarFileRead"];
                };
            };
            /** @description You don't have the permission to update this file. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotPermitted"];
                };
            };
            /** @description File not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "files:delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description File deleted. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You don't have the permission to delete this file. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotPermitted"];
                };
            };
            /** @description File not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "files:update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The file ID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FilePatch"];
            };
        };
        responses: {
            /** @description File updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DownloadableFileRead"] | components["schemas"]["ProductMediaFileRead"] | components["schemas"]["OrganizationAvatarFileRead"];
                };
            };
            /** @description You don't have the permission to update this file. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotPermitted"];
                };
            };
            /** @description File not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "metrics:get": {
        parameters: {
            query: {
                /** @description Start date. */
                start_date: string;
                /** @description End date. */
                end_date: string;
                /** @description Interval between two timestamps. */
                interval: components["schemas"]["TimeInterval"];
                /** @description Filter by organization ID. */
                organization_id?: string | string[] | null;
                /** @description Filter by product ID. */
                product_id?: string | string[] | null;
                /** @description Filter by product price type. `recurring` will filter data corresponding to subscriptions creations or renewals. `one_time` will filter data corresponding to one-time purchases. */
                product_price_type?: components["schemas"]["ProductPriceType"] | components["schemas"]["ProductPriceType"][] | null;
                /** @description Filter by customer ID. */
                customer_id?: string | string[] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MetricsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "metrics:limits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MetricsLimits"];
                };
            };
        };
    };
    "integrations_google:integrations.google.authorize": {
        parameters: {
            query?: {
                return_to?: string | null;
                attribution?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "integrations_google:integrations.google.callback": {
        parameters: {
            query?: {
                code?: string | null;
                code_verifier?: string | null;
                state?: string | null;
                error?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "license_keys:list": {
        parameters: {
            query?: {
                /** @description Filter by organization ID. */
                organization_id?: string | string[] | null;
                /** @description Filter by benefit ID. */
                benefit_id?: string | string[] | null;
                /** @description Page number, defaults to 1. */
                page?: number;
                /** @description Size of a page, defaults to 10. Maximum is 100. */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResource_LicenseKeyRead_"];
                };
            };
            /** @description Not authorized to manage license key. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description License key not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "license_keys:get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LicenseKeyWithActivations"];
                };
            };
            /** @description Not authorized to manage license key. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description License key not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "license_keys:update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LicenseKeyUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LicenseKeyRead"];
                };
            };
            /** @description Not authorized to manage license key. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description License key not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "license_keys:get_activation": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                activation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LicenseKeyActivationRead"];
                };
            };
            /** @description Not authorized to manage license key. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description License key not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "checkout-links:list": {
        parameters: {
            query?: {
                /** @description Filter by organization ID. */
                organization_id?: string | string[] | null;
                /** @description Filter by product ID. */
                product_id?: string | string[] | null;
                /** @description Page number, defaults to 1. */
                page?: number;
                /** @description Size of a page, defaults to 10. Maximum is 100. */
                limit?: number;
                /** @description Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order. */
                sorting?: components["schemas"]["CheckoutLinkSortProperty"][] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResource_CheckoutLink_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "checkout-links:create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CheckoutLinkCreate"];
            };
        };
        responses: {
            /** @description Checkout link created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CheckoutLink"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "checkout-links:get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The checkout link ID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CheckoutLink"];
                };
            };
            /** @description Checkout link not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "checkout-links:delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The checkout link ID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Checkout link deleted. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Checkout link not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "checkout-links:update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The checkout link ID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CheckoutLinkUpdate"];
            };
        };
        responses: {
            /** @description Checkout link updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CheckoutLink"];
                };
            };
            /** @description Checkout link not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "storefronts:get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Storefront"];
                };
            };
            /** @description Organization not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "custom-fields:list": {
        parameters: {
            query?: {
                /** @description Filter by organization ID. */
                organization_id?: string | string[] | null;
                /** @description Filter by custom field name or slug. */
                query?: string | null;
                /** @description Filter by custom field type. */
                type?: components["schemas"]["CustomFieldType"] | components["schemas"]["CustomFieldType"][] | null;
                /** @description Page number, defaults to 1. */
                page?: number;
                /** @description Size of a page, defaults to 10. Maximum is 100. */
                limit?: number;
                /** @description Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order. */
                sorting?: components["schemas"]["CustomFieldSortProperty"][] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResource_CustomField_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "custom-fields:create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CustomFieldCreate"];
            };
        };
        responses: {
            /** @description Custom field created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomField"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "custom-fields:get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The custom field ID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomField"];
                };
            };
            /** @description Custom field not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "custom-fields:delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The custom field ID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Custom field deleted. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Custom field not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "custom-fields:update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The custom field ID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CustomFieldUpdate"];
            };
        };
        responses: {
            /** @description Custom field updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomField"];
                };
            };
            /** @description Custom field not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "embeds:get_product": {
        parameters: {
            query?: {
                price_id?: string | null;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductEmbed"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "discounts:list": {
        parameters: {
            query?: {
                /** @description Filter by organization ID. */
                organization_id?: string | string[] | null;
                /** @description Filter by name. */
                query?: string | null;
                /** @description Page number, defaults to 1. */
                page?: number;
                /** @description Size of a page, defaults to 10. Maximum is 100. */
                limit?: number;
                /** @description Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order. */
                sorting?: components["schemas"]["DiscountSortProperty"][] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResource_Discount_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "discounts:create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DiscountCreate"];
            };
        };
        responses: {
            /** @description Discount created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Discount"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "discounts:get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The discount ID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Discount"];
                };
            };
            /** @description Discount not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "discounts:delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The discount ID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Discount deleted. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Discount not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "discounts:update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The discount ID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DiscountUpdate"];
            };
        };
        responses: {
            /** @description Discount updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Discount"];
                };
            };
            /** @description Discount not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "customers:list": {
        parameters: {
            query?: {
                /** @description Filter by organization ID. */
                organization_id?: string | string[] | null;
                /** @description Filter by exact email. */
                email?: string | null;
                /** @description Filter by name or email. */
                query?: string | null;
                /** @description Page number, defaults to 1. */
                page?: number;
                /** @description Size of a page, defaults to 10. Maximum is 100. */
                limit?: number;
                /** @description Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order. */
                sorting?: components["schemas"]["CustomerSortProperty"][] | null;
                /** @description Filter by metadata key-value pairs. It uses the `deepObject` style, e.g. `?metadata[key]=value`. */
                metadata?: components["schemas"]["MetadataQuery"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResource_Customer_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "customers:create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CustomerCreate"];
            };
        };
        responses: {
            /** @description Customer created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Customer"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "customers:get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The customer ID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Customer"];
                };
            };
            /** @description Customer not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "customers:delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The customer ID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Customer deleted. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Customer not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "customers:update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The customer ID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CustomerUpdate"];
            };
        };
        responses: {
            /** @description Customer updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Customer"];
                };
            };
            /** @description Customer not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "customer_portal:benefit-grants:list": {
        parameters: {
            query?: {
                /** @description Filter by benefit type. */
                type?: components["schemas"]["BenefitType"] | components["schemas"]["BenefitType"][] | null;
                /** @description Filter by benefit ID. */
                benefit_id?: string | string[] | null;
                /** @description Filter by organization ID. */
                organization_id?: string | string[] | null;
                /** @description Filter by checkout ID. */
                checkout_id?: string | string[] | null;
                /** @description Filter by order ID. */
                order_id?: string | string[] | null;
                /** @description Filter by subscription ID. */
                subscription_id?: string | string[] | null;
                /** @description Page number, defaults to 1. */
                page?: number;
                /** @description Size of a page, defaults to 10. Maximum is 100. */
                limit?: number;
                /** @description Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order. */
                sorting?: components["schemas"]["CustomerBenefitGrantSortProperty"][] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResource_CustomerBenefitGrant_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "customer_portal:benefit-grants:get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The benefit grant ID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerBenefitGrant"];
                };
            };
            /** @description Benefit grant not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "customer_portal:benefit-grants:update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The benefit grant ID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CustomerBenefitGrantUpdate"];
            };
        };
        responses: {
            /** @description Benefit grant updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerBenefitGrant"];
                };
            };
            /** @description The benefit grant is revoked and cannot be updated. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotPermitted"];
                };
            };
            /** @description Benefit grant not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "customer_portal:customers:get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The customer ID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerPortalCustomer"];
                };
            };
            /** @description Customer not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "customer_portal:customer-session:customer_portal.customer_session.request": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CustomerSessionCodeRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "customer_portal:customer-session:customer_portal.customer_session.authenticate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CustomerSessionCodeAuthenticateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerSessionCodeAuthenticateResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "customer_portal:downloadables:list": {
        parameters: {
            query?: {
                /** @description Filter by organization ID. */
                organization_id?: string | string[] | null;
                /** @description Filter by benefit ID. */
                benefit_id?: string | string[] | null;
                /** @description Page number, defaults to 1. */
                page?: number;
                /** @description Size of a page, defaults to 10. Maximum is 100. */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResource_DownloadableRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "customer_portal:downloadables:customer_portal.downloadables.get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Redirected to download */
            302: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid signature */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Downloadable not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Expired signature */
            410: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "customer_portal:license_keys:list": {
        parameters: {
            query?: {
                /** @description Filter by organization ID. */
                organization_id?: string | string[] | null;
                /** @description Filter by a specific benefit */
                benefit_id?: string | null;
                /** @description Page number, defaults to 1. */
                page?: number;
                /** @description Size of a page, defaults to 10. Maximum is 100. */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResource_LicenseKeyRead_"];
                };
            };
            /** @description Not authorized to manage license key. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unauthorized"];
                };
            };
            /** @description License key not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "customer_portal:license_keys:get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LicenseKeyWithActivations"];
                };
            };
            /** @description License key not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "customer_portal:license_keys:validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LicenseKeyValidate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidatedLicenseKey"];
                };
            };
            /** @description License key not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "customer_portal:license_keys:activate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LicenseKeyActivate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LicenseKeyActivationRead"];
                };
            };
            /** @description License key activation not required or permitted (limit reached). */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotPermitted"];
                };
            };
            /** @description License key not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "customer_portal:license_keys:deactivate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LicenseKeyDeactivate"];
            };
        };
        responses: {
            /** @description License key activation deactivated. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description License key not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "customer_portal:oauth-accounts:customer_portal.oauth_accounts.authorize": {
        parameters: {
            query: {
                platform: components["schemas"]["CustomerOAuthPlatform"];
                customer_id: string;
                return_to?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthorizeResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "customer_portal:oauth-accounts:customer_portal.oauth_accounts.callback": {
        parameters: {
            query: {
                state: string;
                code?: string | null;
                error?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "customer_portal:orders:list": {
        parameters: {
            query?: {
                /** @description Filter by organization ID. */
                organization_id?: string | string[] | null;
                /** @description Filter by product ID. */
                product_id?: string | string[] | null;
                /** @description Filter by product price type. `recurring` will return orders corresponding to subscriptions creations or renewals. `one_time` will return orders corresponding to one-time purchases. */
                product_price_type?: components["schemas"]["ProductPriceType"] | components["schemas"]["ProductPriceType"][] | null;
                /** @description Filter by subscription ID. */
                subscription_id?: string | string[] | null;
                /** @description Search by product or organization name. */
                query?: string | null;
                /** @description Page number, defaults to 1. */
                page?: number;
                /** @description Size of a page, defaults to 10. Maximum is 100. */
                limit?: number;
                /** @description Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order. */
                sorting?: components["schemas"]["CustomerOrderSortProperty"][] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResource_CustomerOrder_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "customer_portal:orders:get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The order ID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerOrder"];
                };
            };
            /** @description Order not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "customer_portal:orders:invoice": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The order ID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerOrderInvoice"];
                };
            };
            /** @description Order not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "customer_portal:organizations:get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The organization slug. */
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerOrganization"];
                };
            };
            /** @description Organization not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "customer_portal:subscriptions:list": {
        parameters: {
            query?: {
                /** @description Filter by organization ID. */
                organization_id?: string | string[] | null;
                /** @description Filter by product ID. */
                product_id?: string | string[] | null;
                /** @description Filter by active or cancelled subscription. */
                active?: boolean | null;
                /** @description Search by product or organization name. */
                query?: string | null;
                /** @description Page number, defaults to 1. */
                page?: number;
                /** @description Size of a page, defaults to 10. Maximum is 100. */
                limit?: number;
                /** @description Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order. */
                sorting?: components["schemas"]["CustomerSubscriptionSortProperty"][] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResource_CustomerSubscription_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "customer_portal:subscriptions:get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The subscription ID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerSubscription"];
                };
            };
            /** @description Customer subscription was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "customer_portal:subscriptions:cancel": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The subscription ID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Customer subscription is canceled. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerSubscription"];
                };
            };
            /** @description Customer subscription is already canceled or will be at the end of the period. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AlreadyCanceledSubscription"];
                };
            };
            /** @description Customer subscription was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "customer_portal:subscriptions:update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The subscription ID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CustomerSubscriptionUpdate"];
            };
        };
        responses: {
            /** @description Customer subscription updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerSubscription"];
                };
            };
            /** @description Customer subscription is already canceled or will be at the end of the period. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AlreadyCanceledSubscription"];
                };
            };
            /** @description Customer subscription was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "email-update:request_email_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "email-update:verify_email_update": {
        parameters: {
            query?: {
                return_to?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["Body_email-update_verify_email_update"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "customer-sessions:create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CustomerSessionCreate"];
            };
        };
        responses: {
            /** @description Customer session created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerSession"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "events:list": {
        parameters: {
            query?: {
                /** @description Filter events after this timestamp. */
                start_timestamp?: string | null;
                /** @description Filter events before this timestamp. */
                end_timestamp?: string | null;
                /** @description Filter by organization ID. */
                organization_id?: string | string[] | null;
                /** @description Filter by customer ID. */
                customer_id?: string | string[] | null;
                /** @description Filter by external customer ID. */
                external_customer_id?: string | string[] | null;
                /** @description Filter by event source. */
                source?: components["schemas"]["EventSource"] | components["schemas"]["EventSource"][] | null;
                /** @description Page number, defaults to 1. */
                page?: number;
                /** @description Size of a page, defaults to 10. Maximum is 100. */
                limit?: number;
                /** @description Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order. */
                sorting?: components["schemas"]["EventSortProperty"][] | null;
                /** @description Filter by metadata key-value pairs. It uses the `deepObject` style, e.g. `?metadata[key]=value`. */
                metadata?: components["schemas"]["MetadataQuery"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResource_Event_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "events:get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The event ID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Event"];
                };
            };
            /** @description Event not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "events:ingest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EventsIngest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventsIngestResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "meters:list": {
        parameters: {
            query?: {
                /** @description Filter by organization ID. */
                organization_id?: string | string[] | null;
                /** @description Filter by name. */
                query?: string | null;
                /** @description Page number, defaults to 1. */
                page?: number;
                /** @description Size of a page, defaults to 10. Maximum is 100. */
                limit?: number;
                /** @description Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order. */
                sorting?: components["schemas"]["MeterSortProperty"][] | null;
                /** @description Filter by metadata key-value pairs. It uses the `deepObject` style, e.g. `?metadata[key]=value`. */
                metadata?: components["schemas"]["MetadataQuery"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResource_Meter_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "meters:create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MeterCreate"];
            };
        };
        responses: {
            /** @description Meter created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Meter"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "meters:get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The meter ID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Meter"];
                };
            };
            /** @description Meter not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "meters:update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The meter ID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MeterUpdate"];
            };
        };
        responses: {
            /** @description Meter updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Meter"];
                };
            };
            /** @description Meter not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "meters:events": {
        parameters: {
            query?: {
                /** @description Page number, defaults to 1. */
                page?: number;
                /** @description Size of a page, defaults to 10. Maximum is 100. */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description The meter ID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResource_Event_"];
                };
            };
            /** @description Meter not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "meters:quantities": {
        parameters: {
            query: {
                /** @description Start timestamp. */
                start_timestamp: string;
                /** @description End timestamp. */
                end_timestamp: string;
                /** @description Interval between two timestamps. */
                interval: components["schemas"]["TimeInterval"];
                /** @description Filter by customer ID. */
                customer_id?: string | string[] | null;
                /** @description Filter by external customer ID. */
                exernal_customer_id?: string | string[] | null;
            };
            header?: never;
            path: {
                /** @description The meter ID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MeterQuantities"];
                };
            };
            /** @description Meter not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFound"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "organization_access_token:list": {
        parameters: {
            query?: {
                /** @description Page number, defaults to 1. */
                page?: number;
                /** @description Size of a page, defaults to 10. Maximum is 100. */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResource_OrganizationAccessToken_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "organization_access_token:create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrganizationAccessTokenCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationAccessTokenCreateResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "organization_access_token:delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "organization_access_token:update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrganizationAccessTokenUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationAccessToken"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _endpointcheckout_created_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WebhookCheckoutCreatedPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _endpointcheckout_updated_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WebhookCheckoutUpdatedPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _endpointorder_created_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WebhookOrderCreatedPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _endpointorder_refunded_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WebhookOrderRefundedPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _endpointsubscription_created_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WebhookSubscriptionCreatedPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _endpointsubscription_updated_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WebhookSubscriptionUpdatedPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _endpointsubscription_active_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WebhookSubscriptionActivePayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _endpointsubscription_canceled_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WebhookSubscriptionCanceledPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _endpointsubscription_uncanceled_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WebhookSubscriptionUncanceledPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _endpointsubscription_revoked_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WebhookSubscriptionRevokedPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _endpointrefund_created_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WebhookRefundCreatedPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _endpointrefund_updated_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WebhookRefundUpdatedPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _endpointproduct_created_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WebhookProductCreatedPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _endpointproduct_updated_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WebhookProductUpdatedPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _endpointpledge_created_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WebhookPledgeCreatedPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _endpointpledge_updated_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WebhookPledgeUpdatedPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _endpointorganization_updated_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WebhookOrganizationUpdatedPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _endpointbenefit_created_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WebhookBenefitCreatedPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _endpointbenefit_updated_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WebhookBenefitUpdatedPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _endpointbenefit_grant_created_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WebhookBenefitGrantCreatedPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _endpointbenefit_grant_updated_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WebhookBenefitGrantUpdatedPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _endpointbenefit_grant_revoked_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WebhookBenefitGrantRevokedPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
type ReadonlyArray<T> = [
    Exclude<T, undefined>
] extends [
    any[]
] ? Readonly<Exclude<T, undefined>> : Readonly<Exclude<T, undefined>[]>;
export const accountTypeValues: ReadonlyArray<components["schemas"]["AccountType"]> = ["stripe", "open_collective"];
export const advertisementSortPropertyValues: ReadonlyArray<components["schemas"]["AdvertisementSortProperty"]> = ["created_at", "-created_at", "granted_at", "-granted_at", "views", "-views", "clicks", "-clicks"];
export const appPermissionsTypeActionsValues: ReadonlyArray<components["schemas"]["AppPermissionsType"]["actions"]> = ["read", "write"];
export const appPermissionsTypeAdministrationValues: ReadonlyArray<components["schemas"]["AppPermissionsType"]["administration"]> = ["read", "write"];
export const appPermissionsTypeChecksValues: ReadonlyArray<components["schemas"]["AppPermissionsType"]["checks"]> = ["read", "write"];
export const appPermissionsTypeCodespacesValues: ReadonlyArray<components["schemas"]["AppPermissionsType"]["codespaces"]> = ["read", "write"];
export const appPermissionsTypeContentsValues: ReadonlyArray<components["schemas"]["AppPermissionsType"]["contents"]> = ["read", "write"];
export const appPermissionsTypeDependabot_secretsValues: ReadonlyArray<components["schemas"]["AppPermissionsType"]["dependabot_secrets"]> = ["read", "write"];
export const appPermissionsTypeDeploymentsValues: ReadonlyArray<components["schemas"]["AppPermissionsType"]["deployments"]> = ["read", "write"];
export const appPermissionsTypeEnvironmentsValues: ReadonlyArray<components["schemas"]["AppPermissionsType"]["environments"]> = ["read", "write"];
export const appPermissionsTypeIssuesValues: ReadonlyArray<components["schemas"]["AppPermissionsType"]["issues"]> = ["read", "write"];
export const appPermissionsTypeMetadataValues: ReadonlyArray<components["schemas"]["AppPermissionsType"]["metadata"]> = ["read", "write"];
export const appPermissionsTypePackagesValues: ReadonlyArray<components["schemas"]["AppPermissionsType"]["packages"]> = ["read", "write"];
export const appPermissionsTypePagesValues: ReadonlyArray<components["schemas"]["AppPermissionsType"]["pages"]> = ["read", "write"];
export const appPermissionsTypePull_requestsValues: ReadonlyArray<components["schemas"]["AppPermissionsType"]["pull_requests"]> = ["read", "write"];
export const appPermissionsTypeRepository_custom_propertiesValues: ReadonlyArray<components["schemas"]["AppPermissionsType"]["repository_custom_properties"]> = ["read", "write"];
export const appPermissionsTypeRepository_hooksValues: ReadonlyArray<components["schemas"]["AppPermissionsType"]["repository_hooks"]> = ["read", "write"];
export const appPermissionsTypeRepository_projectsValues: ReadonlyArray<components["schemas"]["AppPermissionsType"]["repository_projects"]> = ["read", "write", "admin"];
export const appPermissionsTypeSecret_scanning_alertsValues: ReadonlyArray<components["schemas"]["AppPermissionsType"]["secret_scanning_alerts"]> = ["read", "write"];
export const appPermissionsTypeSecretsValues: ReadonlyArray<components["schemas"]["AppPermissionsType"]["secrets"]> = ["read", "write"];
export const appPermissionsTypeSecurity_eventsValues: ReadonlyArray<components["schemas"]["AppPermissionsType"]["security_events"]> = ["read", "write"];
export const appPermissionsTypeSingle_fileValues: ReadonlyArray<components["schemas"]["AppPermissionsType"]["single_file"]> = ["read", "write"];
export const appPermissionsTypeStatusesValues: ReadonlyArray<components["schemas"]["AppPermissionsType"]["statuses"]> = ["read", "write"];
export const appPermissionsTypeVulnerability_alertsValues: ReadonlyArray<components["schemas"]["AppPermissionsType"]["vulnerability_alerts"]> = ["read", "write"];
export const appPermissionsTypeMembersValues: ReadonlyArray<components["schemas"]["AppPermissionsType"]["members"]> = ["read", "write"];
export const appPermissionsTypeOrganization_administrationValues: ReadonlyArray<components["schemas"]["AppPermissionsType"]["organization_administration"]> = ["read", "write"];
export const appPermissionsTypeOrganization_custom_rolesValues: ReadonlyArray<components["schemas"]["AppPermissionsType"]["organization_custom_roles"]> = ["read", "write"];
export const appPermissionsTypeOrganization_custom_org_rolesValues: ReadonlyArray<components["schemas"]["AppPermissionsType"]["organization_custom_org_roles"]> = ["read", "write"];
export const appPermissionsTypeOrganization_custom_propertiesValues: ReadonlyArray<components["schemas"]["AppPermissionsType"]["organization_custom_properties"]> = ["read", "write", "admin"];
export const appPermissionsTypeOrganization_announcement_bannersValues: ReadonlyArray<components["schemas"]["AppPermissionsType"]["organization_announcement_banners"]> = ["read", "write"];
export const appPermissionsTypeOrganization_hooksValues: ReadonlyArray<components["schemas"]["AppPermissionsType"]["organization_hooks"]> = ["read", "write"];
export const appPermissionsTypeOrganization_personal_access_tokensValues: ReadonlyArray<components["schemas"]["AppPermissionsType"]["organization_personal_access_tokens"]> = ["read", "write"];
export const appPermissionsTypeOrganization_personal_access_token_requestsValues: ReadonlyArray<components["schemas"]["AppPermissionsType"]["organization_personal_access_token_requests"]> = ["read", "write"];
export const appPermissionsTypeOrganization_projectsValues: ReadonlyArray<components["schemas"]["AppPermissionsType"]["organization_projects"]> = ["read", "write", "admin"];
export const appPermissionsTypeOrganization_packagesValues: ReadonlyArray<components["schemas"]["AppPermissionsType"]["organization_packages"]> = ["read", "write"];
export const appPermissionsTypeOrganization_secretsValues: ReadonlyArray<components["schemas"]["AppPermissionsType"]["organization_secrets"]> = ["read", "write"];
export const appPermissionsTypeOrganization_self_hosted_runnersValues: ReadonlyArray<components["schemas"]["AppPermissionsType"]["organization_self_hosted_runners"]> = ["read", "write"];
export const appPermissionsTypeOrganization_user_blockingValues: ReadonlyArray<components["schemas"]["AppPermissionsType"]["organization_user_blocking"]> = ["read", "write"];
export const appPermissionsTypeTeam_discussionsValues: ReadonlyArray<components["schemas"]["AppPermissionsType"]["team_discussions"]> = ["read", "write"];
export const appPermissionsTypeEmail_addressesValues: ReadonlyArray<components["schemas"]["AppPermissionsType"]["email_addresses"]> = ["read", "write"];
export const appPermissionsTypeFollowersValues: ReadonlyArray<components["schemas"]["AppPermissionsType"]["followers"]> = ["read", "write"];
export const appPermissionsTypeGit_ssh_keysValues: ReadonlyArray<components["schemas"]["AppPermissionsType"]["git_ssh_keys"]> = ["read", "write"];
export const appPermissionsTypeGpg_keysValues: ReadonlyArray<components["schemas"]["AppPermissionsType"]["gpg_keys"]> = ["read", "write"];
export const appPermissionsTypeInteraction_limitsValues: ReadonlyArray<components["schemas"]["AppPermissionsType"]["interaction_limits"]> = ["read", "write"];
export const appPermissionsTypeStarringValues: ReadonlyArray<components["schemas"]["AppPermissionsType"]["starring"]> = ["read", "write"];
export const authorizeResponseOrganizationSub_typeValues: ReadonlyArray<components["schemas"]["AuthorizeResponseOrganization"]["sub_type"]> = ["organization"];
export const authorizeResponseUserSub_typeValues: ReadonlyArray<components["schemas"]["AuthorizeResponseUser"]["sub_type"]> = ["user"];
export const availableScopeValues: ReadonlyArray<components["schemas"]["AvailableScope"]> = ["openid", "profile", "email", "user:read", "organizations:read", "organizations:write", "custom_fields:read", "custom_fields:write", "discounts:read", "discounts:write", "checkout_links:read", "checkout_links:write", "checkouts:read", "checkouts:write", "products:read", "products:write", "benefits:read", "benefits:write", "events:read", "events:write", "meters:read", "meters:write", "files:read", "files:write", "subscriptions:read", "subscriptions:write", "customers:read", "customers:write", "customer_sessions:write", "orders:read", "refunds:read", "refunds:write", "metrics:read", "webhooks:read", "webhooks:write", "external_organizations:read", "license_keys:read", "license_keys:write", "repositories:read", "repositories:write", "issues:read", "issues:write", "customer_portal:read", "customer_portal:write"];
export const backofficeBadgeActionValues: ReadonlyArray<components["schemas"]["BackofficeBadge"]["action"]> = ["embed", "remove"];
export const backofficeBadgeResponseActionValues: ReadonlyArray<components["schemas"]["BackofficeBadgeResponse"]["action"]> = ["embed", "remove"];
export const benefitAdsCreateTypeValues: ReadonlyArray<components["schemas"]["BenefitAdsCreate"]["type"]> = ["ads"];
export const benefitCustomCreateTypeValues: ReadonlyArray<components["schemas"]["BenefitCustomCreate"]["type"]> = ["custom"];
export const benefitDiscordCreateTypeValues: ReadonlyArray<components["schemas"]["BenefitDiscordCreate"]["type"]> = ["discord"];
export const benefitDownloadablesCreateTypeValues: ReadonlyArray<components["schemas"]["BenefitDownloadablesCreate"]["type"]> = ["downloadables"];
export const benefitGitHubRepositoryCreateTypeValues: ReadonlyArray<components["schemas"]["BenefitGitHubRepositoryCreate"]["type"]> = ["github_repository"];
export const benefitGitHubRepositoryCreatePropertiesPermissionValues: ReadonlyArray<components["schemas"]["BenefitGitHubRepositoryCreateProperties"]["permission"]> = ["pull", "triage", "push", "maintain", "admin"];
export const benefitGitHubRepositoryPropertiesPermissionValues: ReadonlyArray<components["schemas"]["BenefitGitHubRepositoryProperties"]["permission"]> = ["pull", "triage", "push", "maintain", "admin"];
export const benefitGrantGitHubRepositoryPropertiesPermissionValues: ReadonlyArray<components["schemas"]["BenefitGrantGitHubRepositoryProperties"]["permission"]> = ["pull", "triage", "push", "maintain", "admin"];
export const benefitLicenseKeyExpirationPropertiesTimeframeValues: ReadonlyArray<components["schemas"]["BenefitLicenseKeyExpirationProperties"]["timeframe"]> = ["year", "month", "day"];
export const benefitLicenseKeysCreateTypeValues: ReadonlyArray<components["schemas"]["BenefitLicenseKeysCreate"]["type"]> = ["license_keys"];
export const benefitTypeValues: ReadonlyArray<components["schemas"]["BenefitType"]> = ["custom", "ads", "discord", "github_repository", "downloadables", "license_keys"];
export const body_oauth2_consentActionValues: ReadonlyArray<components["schemas"]["Body_oauth2_consent"]["action"]> = ["allow", "deny"];
export const checkoutLinkSortPropertyValues: ReadonlyArray<components["schemas"]["CheckoutLinkSortProperty"]> = ["created_at", "-created_at"];
export const checkoutSortPropertyValues: ReadonlyArray<components["schemas"]["CheckoutSortProperty"]> = ["created_at", "-created_at", "expires_at", "-expires_at"];
export const checkoutStatusValues: ReadonlyArray<components["schemas"]["CheckoutStatus"]> = ["open", "expired", "confirmed", "succeeded", "failed"];
export const countAggregationFuncValues: ReadonlyArray<components["schemas"]["CountAggregation"]["func"]> = ["count"];
export const customFieldCheckboxTypeValues: ReadonlyArray<components["schemas"]["CustomFieldCheckbox"]["type"]> = ["checkbox"];
export const customFieldCreateCheckboxTypeValues: ReadonlyArray<components["schemas"]["CustomFieldCreateCheckbox"]["type"]> = ["checkbox"];
export const customFieldCreateDateTypeValues: ReadonlyArray<components["schemas"]["CustomFieldCreateDate"]["type"]> = ["date"];
export const customFieldCreateNumberTypeValues: ReadonlyArray<components["schemas"]["CustomFieldCreateNumber"]["type"]> = ["number"];
export const customFieldCreateSelectTypeValues: ReadonlyArray<components["schemas"]["CustomFieldCreateSelect"]["type"]> = ["select"];
export const customFieldCreateTextTypeValues: ReadonlyArray<components["schemas"]["CustomFieldCreateText"]["type"]> = ["text"];
export const customFieldDateTypeValues: ReadonlyArray<components["schemas"]["CustomFieldDate"]["type"]> = ["date"];
export const customFieldNumberTypeValues: ReadonlyArray<components["schemas"]["CustomFieldNumber"]["type"]> = ["number"];
export const customFieldSelectTypeValues: ReadonlyArray<components["schemas"]["CustomFieldSelect"]["type"]> = ["select"];
export const customFieldSortPropertyValues: ReadonlyArray<components["schemas"]["CustomFieldSortProperty"]> = ["created_at", "-created_at", "slug", "-slug", "name", "-name", "type", "-type"];
export const customFieldTextTypeValues: ReadonlyArray<components["schemas"]["CustomFieldText"]["type"]> = ["text"];
export const customFieldTypeValues: ReadonlyArray<components["schemas"]["CustomFieldType"]> = ["text", "number", "date", "checkbox", "select"];
export const customFieldUpdateCheckboxTypeValues: ReadonlyArray<components["schemas"]["CustomFieldUpdateCheckbox"]["type"]> = ["checkbox"];
export const customFieldUpdateDateTypeValues: ReadonlyArray<components["schemas"]["CustomFieldUpdateDate"]["type"]> = ["date"];
export const customFieldUpdateNumberTypeValues: ReadonlyArray<components["schemas"]["CustomFieldUpdateNumber"]["type"]> = ["number"];
export const customFieldUpdateSelectTypeValues: ReadonlyArray<components["schemas"]["CustomFieldUpdateSelect"]["type"]> = ["select"];
export const customFieldUpdateTextTypeValues: ReadonlyArray<components["schemas"]["CustomFieldUpdateText"]["type"]> = ["text"];
export const customerBenefitGrantAdsUpdateBenefit_typeValues: ReadonlyArray<components["schemas"]["CustomerBenefitGrantAdsUpdate"]["benefit_type"]> = ["ads"];
export const customerBenefitGrantCustomUpdateBenefit_typeValues: ReadonlyArray<components["schemas"]["CustomerBenefitGrantCustomUpdate"]["benefit_type"]> = ["custom"];
export const customerBenefitGrantDiscordUpdateBenefit_typeValues: ReadonlyArray<components["schemas"]["CustomerBenefitGrantDiscordUpdate"]["benefit_type"]> = ["discord"];
export const customerBenefitGrantDownloadablesUpdateBenefit_typeValues: ReadonlyArray<components["schemas"]["CustomerBenefitGrantDownloadablesUpdate"]["benefit_type"]> = ["downloadables"];
export const customerBenefitGrantGitHubRepositoryUpdateBenefit_typeValues: ReadonlyArray<components["schemas"]["CustomerBenefitGrantGitHubRepositoryUpdate"]["benefit_type"]> = ["github_repository"];
export const customerBenefitGrantLicenseKeysUpdateBenefit_typeValues: ReadonlyArray<components["schemas"]["CustomerBenefitGrantLicenseKeysUpdate"]["benefit_type"]> = ["license_keys"];
export const customerBenefitGrantSortPropertyValues: ReadonlyArray<components["schemas"]["CustomerBenefitGrantSortProperty"]> = ["granted_at", "-granted_at", "type", "-type", "organization", "-organization"];
export const customerCancellationReasonValues: ReadonlyArray<components["schemas"]["CustomerCancellationReason"]> = ["customer_service", "low_quality", "missing_features", "switched_service", "too_complex", "too_expensive", "unused", "other"];
export const customerOAuthPlatformValues: ReadonlyArray<components["schemas"]["CustomerOAuthPlatform"]> = ["github", "discord"];
export const customerOrderSortPropertyValues: ReadonlyArray<components["schemas"]["CustomerOrderSortProperty"]> = ["created_at", "-created_at", "amount", "-amount", "organization", "-organization", "product", "-product", "subscription", "-subscription"];
export const customerSortPropertyValues: ReadonlyArray<components["schemas"]["CustomerSortProperty"]> = ["created_at", "-created_at", "email", "-email", "name", "-name"];
export const customerSubscriptionSortPropertyValues: ReadonlyArray<components["schemas"]["CustomerSubscriptionSortProperty"]> = ["started_at", "-started_at", "amount", "-amount", "status", "-status", "organization", "-organization", "product", "-product"];
export const discountDurationValues: ReadonlyArray<components["schemas"]["DiscountDuration"]> = ["once", "forever", "repeating"];
export const discountSortPropertyValues: ReadonlyArray<components["schemas"]["DiscountSortProperty"]> = ["created_at", "-created_at", "name", "-name", "code", "-code", "redemptions_count", "-redemptions_count"];
export const discountTypeValues: ReadonlyArray<components["schemas"]["DiscountType"]> = ["fixed", "percentage"];
export const downloadableFileCreateServiceValues: ReadonlyArray<components["schemas"]["DownloadableFileCreate"]["service"]> = ["downloadable"];
export const downloadableFileReadServiceValues: ReadonlyArray<components["schemas"]["DownloadableFileRead"]["service"]> = ["downloadable"];
export const eventSortPropertyValues: ReadonlyArray<components["schemas"]["EventSortProperty"]> = ["timestamp", "-timestamp"];
export const eventSourceValues: ReadonlyArray<components["schemas"]["EventSource"]> = ["system", "user"];
export const externalOrganizationSortPropertyValues: ReadonlyArray<components["schemas"]["ExternalOrganizationSortProperty"]> = ["created_at", "-created_at", "name", "-name"];
export const fileServiceTypesValues: ReadonlyArray<components["schemas"]["FileServiceTypes"]> = ["downloadable", "product_media", "organization_avatar"];
export const filterConjunctionValues: ReadonlyArray<components["schemas"]["FilterConjunction"]> = ["and", "or"];
export const filterOperatorValues: ReadonlyArray<components["schemas"]["FilterOperator"]> = ["eq", "ne", "gt", "gte", "lt", "lte", "like", "not_like"];
export const introspectTokenResponseToken_typeValues: ReadonlyArray<components["schemas"]["IntrospectTokenResponse"]["token_type"]> = ["access_token", "refresh_token"];
export const issueSortByValues: ReadonlyArray<components["schemas"]["IssueSortBy"]> = ["newest", "recently_updated", "least_recently_updated", "pledged_amount_desc", "relevance", "dependencies_default", "issues_default", "most_engagement", "most_positive_reactions", "funding_goal_desc_and_most_positive_reactions", "most_recently_funded"];
export const issueSortPropertyValues: ReadonlyArray<components["schemas"]["IssueSortProperty"]> = ["created_at", "-created_at", "modified_at", "-modified_at", "engagement", "-engagement", "positive_reactions", "-positive_reactions", "funding_goal", "-funding_goal"];
export const licenseKeyStatusValues: ReadonlyArray<components["schemas"]["LicenseKeyStatus"]> = ["granted", "revoked", "disabled"];
export const listFundingSortByValues: ReadonlyArray<components["schemas"]["ListFundingSortBy"]> = ["oldest", "newest", "most_funded", "most_recently_funded", "most_engagement"];
export const maintainerAccountReviewedNotificationTypeValues: ReadonlyArray<components["schemas"]["MaintainerAccountReviewedNotification"]["type"]> = ["MaintainerAccountReviewedNotification"];
export const maintainerAccountUnderReviewNotificationTypeValues: ReadonlyArray<components["schemas"]["MaintainerAccountUnderReviewNotification"]["type"]> = ["MaintainerAccountUnderReviewNotification"];
export const maintainerCreateAccountNotificationTypeValues: ReadonlyArray<components["schemas"]["MaintainerCreateAccountNotification"]["type"]> = ["MaintainerCreateAccountNotification"];
export const maintainerNewPaidSubscriptionNotificationTypeValues: ReadonlyArray<components["schemas"]["MaintainerNewPaidSubscriptionNotification"]["type"]> = ["MaintainerNewPaidSubscriptionNotification"];
export const maintainerNewProductSaleNotificationTypeValues: ReadonlyArray<components["schemas"]["MaintainerNewProductSaleNotification"]["type"]> = ["MaintainerNewProductSaleNotification"];
export const maintainerPledgeConfirmationPendingNotificationTypeValues: ReadonlyArray<components["schemas"]["MaintainerPledgeConfirmationPendingNotification"]["type"]> = ["MaintainerPledgeConfirmationPendingNotification"];
export const maintainerPledgeCreatedNotificationTypeValues: ReadonlyArray<components["schemas"]["MaintainerPledgeCreatedNotification"]["type"]> = ["MaintainerPledgeCreatedNotification"];
export const maintainerPledgePaidNotificationTypeValues: ReadonlyArray<components["schemas"]["MaintainerPledgePaidNotification"]["type"]> = ["MaintainerPledgePaidNotification"];
export const maintainerPledgePendingNotificationTypeValues: ReadonlyArray<components["schemas"]["MaintainerPledgePendingNotification"]["type"]> = ["MaintainerPledgePendingNotification"];
export const maintainerPledgedIssueConfirmationPendingNotificationTypeValues: ReadonlyArray<components["schemas"]["MaintainerPledgedIssueConfirmationPendingNotification"]["type"]> = ["MaintainerPledgedIssueConfirmationPendingNotification"];
export const maintainerPledgedIssuePendingNotificationTypeValues: ReadonlyArray<components["schemas"]["MaintainerPledgedIssuePendingNotification"]["type"]> = ["MaintainerPledgedIssuePendingNotification"];
export const meterSortPropertyValues: ReadonlyArray<components["schemas"]["MeterSortProperty"]> = ["created_at", "-created_at", "name", "-name"];
export const metricTypeValues: ReadonlyArray<components["schemas"]["MetricType"]> = ["scalar", "currency"];
export const oAuth2ClientToken_endpoint_auth_methodValues: ReadonlyArray<components["schemas"]["OAuth2Client"]["token_endpoint_auth_method"]> = ["client_secret_basic", "client_secret_post", "none"];
export const oAuth2ClientGrant_typesValues: ReadonlyArray<components["schemas"]["OAuth2Client"]["grant_types"]> = ["authorization_code", "refresh_token"];
export const oAuth2ClientConfigurationToken_endpoint_auth_methodValues: ReadonlyArray<components["schemas"]["OAuth2ClientConfiguration"]["token_endpoint_auth_method"]> = ["client_secret_basic", "client_secret_post", "none"];
export const oAuth2ClientConfigurationGrant_typesValues: ReadonlyArray<components["schemas"]["OAuth2ClientConfiguration"]["grant_types"]> = ["authorization_code", "refresh_token"];
export const oAuth2ClientConfigurationUpdateToken_endpoint_auth_methodValues: ReadonlyArray<components["schemas"]["OAuth2ClientConfigurationUpdate"]["token_endpoint_auth_method"]> = ["client_secret_basic", "client_secret_post", "none"];
export const oAuth2ClientConfigurationUpdateGrant_typesValues: ReadonlyArray<components["schemas"]["OAuth2ClientConfigurationUpdate"]["grant_types"]> = ["authorization_code", "refresh_token"];
export const oAuthPlatformValues: ReadonlyArray<components["schemas"]["OAuthPlatform"]> = ["github", "github_repository_benefit", "google"];
export const orderBillingReasonValues: ReadonlyArray<components["schemas"]["OrderBillingReason"]> = ["purchase", "subscription_create", "subscription_cycle", "subscription_update"];
export const orderSortPropertyValues: ReadonlyArray<components["schemas"]["OrderSortProperty"]> = ["created_at", "-created_at", "amount", "-amount", "customer", "-customer", "product", "-product", "discount", "-discount", "subscription", "-subscription"];
export const organizationAvatarFileCreateServiceValues: ReadonlyArray<components["schemas"]["OrganizationAvatarFileCreate"]["service"]> = ["organization_avatar"];
export const organizationAvatarFileReadServiceValues: ReadonlyArray<components["schemas"]["OrganizationAvatarFileRead"]["service"]> = ["organization_avatar"];
export const organizationSortPropertyValues: ReadonlyArray<components["schemas"]["OrganizationSortProperty"]> = ["created_at", "-created_at", "name", "-name"];
export const paymentProcessorValues: ReadonlyArray<components["schemas"]["PaymentProcessor"]> = ["stripe"];
export const platformFeeTypeValues: ReadonlyArray<components["schemas"]["PlatformFeeType"]> = ["payment", "international_payment", "subscription", "invoice", "cross_border_transfer", "payout", "account", "dispute", "platform"];
export const platformsValues: ReadonlyArray<components["schemas"]["Platforms"]> = ["github"];
export const pledgeStateValues: ReadonlyArray<components["schemas"]["PledgeState"]> = ["initiated", "created", "pending", "refunded", "disputed", "charge_disputed", "cancelled"];
export const pledgeTypeValues: ReadonlyArray<components["schemas"]["PledgeType"]> = ["pay_upfront", "pay_on_completion", "pay_directly"];
export const pledgerPledgePendingNotificationTypeValues: ReadonlyArray<components["schemas"]["PledgerPledgePendingNotification"]["type"]> = ["PledgerPledgePendingNotification"];
export const processorValues: ReadonlyArray<components["schemas"]["Processor"]> = ["stripe", "open_collective"];
export const productMediaFileCreateServiceValues: ReadonlyArray<components["schemas"]["ProductMediaFileCreate"]["service"]> = ["product_media"];
export const productMediaFileReadServiceValues: ReadonlyArray<components["schemas"]["ProductMediaFileRead"]["service"]> = ["product_media"];
export const productPriceOneTimeCustomAmount_typeValues: ReadonlyArray<components["schemas"]["ProductPriceOneTimeCustom"]["amount_type"]> = ["custom"];
export const productPriceOneTimeFixedAmount_typeValues: ReadonlyArray<components["schemas"]["ProductPriceOneTimeFixed"]["amount_type"]> = ["fixed"];
export const productPriceOneTimeFreeAmount_typeValues: ReadonlyArray<components["schemas"]["ProductPriceOneTimeFree"]["amount_type"]> = ["free"];
export const productPriceRecurringCustomAmount_typeValues: ReadonlyArray<components["schemas"]["ProductPriceRecurringCustom"]["amount_type"]> = ["custom"];
export const productPriceRecurringFixedAmount_typeValues: ReadonlyArray<components["schemas"]["ProductPriceRecurringFixed"]["amount_type"]> = ["fixed"];
export const productPriceRecurringFreeAmount_typeValues: ReadonlyArray<components["schemas"]["ProductPriceRecurringFree"]["amount_type"]> = ["free"];
export const productPriceTypeValues: ReadonlyArray<components["schemas"]["ProductPriceType"]> = ["one_time", "recurring"];
export const productSortPropertyValues: ReadonlyArray<components["schemas"]["ProductSortProperty"]> = ["created_at", "-created_at", "name", "-name", "price_type", "-price_type", "price_amount_type", "-price_amount_type", "price_amount", "-price_amount"];
export const propertyAggregationFuncValues: ReadonlyArray<components["schemas"]["PropertyAggregation"]["func"]> = ["avg", "max", "min", "sum"];
export const refundReasonValues: ReadonlyArray<components["schemas"]["RefundReason"]> = ["duplicate", "fraudulent", "customer_request", "service_disruption", "satisfaction_guarantee", "other"];
export const refundSortPropertyValues: ReadonlyArray<components["schemas"]["RefundSortProperty"]> = ["created_at", "-created_at", "amount", "-amount"];
export const refundStatusValues: ReadonlyArray<components["schemas"]["RefundStatus"]> = ["pending", "succeeded", "failed", "canceled"];
export const repositorySortPropertyValues: ReadonlyArray<components["schemas"]["RepositorySortProperty"]> = ["created_at", "-created_at", "name", "-name", "stars", "-stars"];
export const rewardPaidNotificationTypeValues: ReadonlyArray<components["schemas"]["RewardPaidNotification"]["type"]> = ["RewardPaidNotification"];
export const rewardStateValues: ReadonlyArray<components["schemas"]["RewardState"]> = ["pending", "paid"];
export const scopeValues: ReadonlyArray<components["schemas"]["Scope"]> = ["openid", "profile", "email", "user:read", "admin", "web_default", "organizations:read", "organizations:write", "custom_fields:read", "custom_fields:write", "discounts:read", "discounts:write", "checkout_links:read", "checkout_links:write", "checkouts:read", "checkouts:write", "products:read", "products:write", "benefits:read", "benefits:write", "events:read", "events:write", "meters:read", "meters:write", "files:read", "files:write", "subscriptions:read", "subscriptions:write", "customers:read", "customers:write", "customer_sessions:write", "orders:read", "refunds:read", "refunds:write", "metrics:read", "webhooks:read", "webhooks:write", "external_organizations:read", "license_keys:read", "license_keys:write", "repositories:read", "repositories:write", "issues:read", "issues:write", "customer_portal:read", "customer_portal:write"];
export const stateValues: ReadonlyArray<components["schemas"]["State"]> = ["open", "closed"];
export const statusValues: ReadonlyArray<components["schemas"]["Status"]> = ["created", "onboarding_started", "under_review", "active"];
export const subTypeValues: ReadonlyArray<components["schemas"]["SubType"]> = ["user", "organization"];
export const subscriptionProrationBehaviorValues: ReadonlyArray<components["schemas"]["SubscriptionProrationBehavior"]> = ["invoice", "prorate"];
export const subscriptionRecurringIntervalValues: ReadonlyArray<components["schemas"]["SubscriptionRecurringInterval"]> = ["month", "year"];
export const subscriptionSortPropertyValues: ReadonlyArray<components["schemas"]["SubscriptionSortProperty"]> = ["customer", "-customer", "status", "-status", "started_at", "-started_at", "current_period_end", "-current_period_end", "amount", "-amount", "product", "-product", "discount", "-discount"];
export const subscriptionStatusValues: ReadonlyArray<components["schemas"]["SubscriptionStatus"]> = ["incomplete", "incomplete_expired", "trialing", "active", "past_due", "canceled", "unpaid"];
export const taxIDFormatValues: ReadonlyArray<components["schemas"]["TaxIDFormat"]> = ["ad_nrt", "ae_trn", "ar_cuit", "au_abn", "au_arn", "bg_uic", "bh_vat", "bo_tin", "br_cnpj", "br_cpf", "ca_bn", "ca_gst_hst", "ca_pst_bc", "ca_pst_mb", "ca_pst_sk", "ca_qst", "ch_uid", "ch_vat", "cl_tin", "cn_tin", "co_nit", "cr_tin", "de_stn", "do_rcn", "ec_ruc", "eg_tin", "es_cif", "eu_oss_vat", "eu_vat", "gb_vat", "ge_vat", "hk_br", "hr_oib", "hu_tin", "id_npwp", "il_vat", "in_gst", "is_vat", "jp_cn", "jp_rn", "jp_trn", "ke_pin", "kr_brn", "kz_bin", "li_uid", "mx_rfc", "my_frp", "my_itn", "my_sst", "ng_tin", "no_vat", "no_voec", "nz_gst", "om_vat", "pe_ruc", "ph_tin", "ro_tin", "rs_pib", "ru_inn", "ru_kpp", "sa_vat", "sg_gst", "sg_uen", "si_tin", "sv_nit", "th_vat", "tr_tin", "tw_vat", "ua_vat", "us_ein", "uy_ruc", "ve_rif", "vn_tin", "za_vat"];
export const teamAdminMemberPledgedNotificationTypeValues: ReadonlyArray<components["schemas"]["TeamAdminMemberPledgedNotification"]["type"]> = ["TeamAdminMemberPledgedNotification"];
export const timeIntervalValues: ReadonlyArray<components["schemas"]["TimeInterval"]> = ["year", "month", "week", "day", "hour"];
export const transactionSortPropertyValues: ReadonlyArray<components["schemas"]["TransactionSortProperty"]> = ["created_at", "-created_at", "amount", "-amount"];
export const transactionTypeValues: ReadonlyArray<components["schemas"]["TransactionType"]> = ["payment", "processor_fee", "refund", "dispute", "dispute_reversal", "balance", "payout"];
export const userSignupAttributionIntentValues: ReadonlyArray<components["schemas"]["UserSignupAttribution"]["intent"]> = ["creator", "pledge", "purchase", "subscription", "newsletter_subscription"];
export const webhookEventTypeValues: ReadonlyArray<components["schemas"]["WebhookEventType"]> = ["checkout.created", "checkout.updated", "order.created", "order.refunded", "subscription.created", "subscription.updated", "subscription.active", "subscription.canceled", "subscription.uncanceled", "subscription.revoked", "refund.created", "refund.updated", "product.created", "product.updated", "benefit.created", "benefit.updated", "benefit_grant.created", "benefit_grant.updated", "benefit_grant.revoked", "organization.updated", "pledge.created", "pledge.updated"];
export const webhookFormatValues: ReadonlyArray<components["schemas"]["WebhookFormat"]> = ["raw", "discord", "slack"];
export const revokeTokenRequestToken_type_hintValues: ReadonlyArray<components["schemas"]["RevokeTokenRequest"]["token_type_hint"]> = ["access_token", "refresh_token"];
export const introspectTokenRequestToken_type_hintValues: ReadonlyArray<components["schemas"]["IntrospectTokenRequest"]["token_type_hint"]> = ["access_token", "refresh_token"];
