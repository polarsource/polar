/* tslint:disable */
/* eslint-disable */
/**
 * Polar API
 *  Welcome to the **Polar API** for [polar.sh](https://polar.sh).  The Public API is currently a [work in progress](https://github.com/polarsource/polar/issues/834) and is in active development. ðŸš€  #### Authentication  Use a [Personal Access Token](https://polar.sh/settings) and send it in the `Authorization` header on the format `Bearer [YOUR_TOKEN]`.  #### Feedback  If you have any feedback or comments, reach out in the [Polar API-issue](https://github.com/polarsource/polar/issues/834), or reach out on the Polar Discord server.  We\'d love to see what you\'ve built with the API and to get your thoughts on how we can make the API better!  #### Connecting  The Polar API is online at `https://api.polar.sh`. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ConfirmIssue,
  HTTPValidationError,
  Issue,
  IssueSortBy,
  IssueUpdateBadgeMessage,
  ListResourceIssue,
  Platforms,
  PostIssueComment,
  UpdateIssue,
} from '../models/index';
import {
    ConfirmIssueFromJSON,
    ConfirmIssueToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    IssueFromJSON,
    IssueToJSON,
    IssueSortByFromJSON,
    IssueSortByToJSON,
    IssueUpdateBadgeMessageFromJSON,
    IssueUpdateBadgeMessageToJSON,
    ListResourceIssueFromJSON,
    ListResourceIssueToJSON,
    PlatformsFromJSON,
    PlatformsToJSON,
    PostIssueCommentFromJSON,
    PostIssueCommentToJSON,
    UpdateIssueFromJSON,
    UpdateIssueToJSON,
} from '../models/index';

export interface IssuesApiAddIssueCommentRequest {
    id: string;
    postIssueComment: PostIssueComment;
}

export interface IssuesApiAddPolarBadgeRequest {
    id: string;
}

export interface IssuesApiBadgeWithMessageRequest {
    id: string;
    issueUpdateBadgeMessage: IssueUpdateBadgeMessage;
}

export interface IssuesApiConfirmRequest {
    id: string;
    confirmIssue: ConfirmIssue;
}

export interface IssuesApiGetRequest {
    id: string;
}

export interface IssuesApiGetBodyRequest {
    id: string;
}

export interface IssuesApiLookupRequest {
    externalUrl?: string;
}

export interface IssuesApiRemovePolarBadgeRequest {
    id: string;
}

export interface IssuesApiSearchRequest {
    platform: Platforms;
    organizationName: string;
    repositoryName?: string;
    sort?: IssueSortBy;
    havePledge?: boolean;
    haveBadge?: boolean;
    githubMilestoneNumber?: number;
}

export interface IssuesApiUpdateRequest {
    id: string;
    updateIssue: UpdateIssue;
}

/**
 * 
 */
export class IssuesApi extends runtime.BaseAPI {

    /**
     * Add Issue Comment
     */
    async addIssueCommentRaw(requestParameters: IssuesApiAddIssueCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Issue>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling addIssueComment.');
        }

        if (requestParameters.postIssueComment === null || requestParameters.postIssueComment === undefined) {
            throw new runtime.RequiredError('postIssueComment','Required parameter requestParameters.postIssueComment was null or undefined when calling addIssueComment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/issues/{id}/comment`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostIssueCommentToJSON(requestParameters.postIssueComment),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssueFromJSON(jsonValue));
    }

    /**
     * Add Issue Comment
     */
    async addIssueComment(requestParameters: IssuesApiAddIssueCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Issue> {
        const response = await this.addIssueCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add Polar Badge
     */
    async addPolarBadgeRaw(requestParameters: IssuesApiAddPolarBadgeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Issue>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling addPolarBadge.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/issues/{id}/add_badge`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssueFromJSON(jsonValue));
    }

    /**
     * Add Polar Badge
     */
    async addPolarBadge(requestParameters: IssuesApiAddPolarBadgeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Issue> {
        const response = await this.addPolarBadgeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Badge With Message
     */
    async badgeWithMessageRaw(requestParameters: IssuesApiBadgeWithMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Issue>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling badgeWithMessage.');
        }

        if (requestParameters.issueUpdateBadgeMessage === null || requestParameters.issueUpdateBadgeMessage === undefined) {
            throw new runtime.RequiredError('issueUpdateBadgeMessage','Required parameter requestParameters.issueUpdateBadgeMessage was null or undefined when calling badgeWithMessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/issues/{id}/badge_with_message`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IssueUpdateBadgeMessageToJSON(requestParameters.issueUpdateBadgeMessage),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssueFromJSON(jsonValue));
    }

    /**
     * Badge With Message
     */
    async badgeWithMessage(requestParameters: IssuesApiBadgeWithMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Issue> {
        const response = await this.badgeWithMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Mark an issue as confirmed solved, and configure issue reward splits. Enables payouts of pledges. Can only be done once per issue. Requires authentication.
     * Mark an issue as confirmed solved. (Public API)
     */
    async confirmRaw(requestParameters: IssuesApiConfirmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Issue>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling confirm.');
        }

        if (requestParameters.confirmIssue === null || requestParameters.confirmIssue === undefined) {
            throw new runtime.RequiredError('confirmIssue','Required parameter requestParameters.confirmIssue was null or undefined when calling confirm.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/issues/{id}/confirm_solved`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConfirmIssueToJSON(requestParameters.confirmIssue),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssueFromJSON(jsonValue));
    }

    /**
     * Mark an issue as confirmed solved, and configure issue reward splits. Enables payouts of pledges. Can only be done once per issue. Requires authentication.
     * Mark an issue as confirmed solved. (Public API)
     */
    async confirm(requestParameters: IssuesApiConfirmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Issue> {
        const response = await this.confirmRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * For You
     */
    async forYouRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResourceIssue>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/issues/for_you`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListResourceIssueFromJSON(jsonValue));
    }

    /**
     * For You
     */
    async forYou(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResourceIssue> {
        const response = await this.forYouRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get issue
     * Get issue (Public API)
     */
    async getRaw(requestParameters: IssuesApiGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Issue>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling get.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/issues/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssueFromJSON(jsonValue));
    }

    /**
     * Get issue
     * Get issue (Public API)
     */
    async get(requestParameters: IssuesApiGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Issue> {
        const response = await this.getRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Body
     */
    async getBodyRaw(requestParameters: IssuesApiGetBodyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBody.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/issues/{id}/body`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get Body
     */
    async getBody(requestParameters: IssuesApiGetBodyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getBodyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lookup
     */
    async lookupRaw(requestParameters: IssuesApiLookupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Issue>> {
        const queryParameters: any = {};

        if (requestParameters.externalUrl !== undefined) {
            queryParameters['external_url'] = requestParameters.externalUrl;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/issues/lookup`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssueFromJSON(jsonValue));
    }

    /**
     * Lookup
     */
    async lookup(requestParameters: IssuesApiLookupRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Issue> {
        const response = await this.lookupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove Polar Badge
     */
    async removePolarBadgeRaw(requestParameters: IssuesApiRemovePolarBadgeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Issue>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removePolarBadge.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/issues/{id}/remove_badge`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssueFromJSON(jsonValue));
    }

    /**
     * Remove Polar Badge
     */
    async removePolarBadge(requestParameters: IssuesApiRemovePolarBadgeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Issue> {
        const response = await this.removePolarBadgeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search issues.
     * Search issues (Public API)
     */
    async searchRaw(requestParameters: IssuesApiSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResourceIssue>> {
        if (requestParameters.platform === null || requestParameters.platform === undefined) {
            throw new runtime.RequiredError('platform','Required parameter requestParameters.platform was null or undefined when calling search.');
        }

        if (requestParameters.organizationName === null || requestParameters.organizationName === undefined) {
            throw new runtime.RequiredError('organizationName','Required parameter requestParameters.organizationName was null or undefined when calling search.');
        }

        const queryParameters: any = {};

        if (requestParameters.platform !== undefined) {
            queryParameters['platform'] = requestParameters.platform;
        }

        if (requestParameters.organizationName !== undefined) {
            queryParameters['organization_name'] = requestParameters.organizationName;
        }

        if (requestParameters.repositoryName !== undefined) {
            queryParameters['repository_name'] = requestParameters.repositoryName;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.havePledge !== undefined) {
            queryParameters['have_pledge'] = requestParameters.havePledge;
        }

        if (requestParameters.haveBadge !== undefined) {
            queryParameters['have_badge'] = requestParameters.haveBadge;
        }

        if (requestParameters.githubMilestoneNumber !== undefined) {
            queryParameters['github_milestone_number'] = requestParameters.githubMilestoneNumber;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/issues/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListResourceIssueFromJSON(jsonValue));
    }

    /**
     * Search issues.
     * Search issues (Public API)
     */
    async search(requestParameters: IssuesApiSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResourceIssue> {
        const response = await this.searchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update issue. Requires authentication.
     * Update issue. (Public API)
     */
    async updateRaw(requestParameters: IssuesApiUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Issue>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling update.');
        }

        if (requestParameters.updateIssue === null || requestParameters.updateIssue === undefined) {
            throw new runtime.RequiredError('updateIssue','Required parameter requestParameters.updateIssue was null or undefined when calling update.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/issues/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateIssueToJSON(requestParameters.updateIssue),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssueFromJSON(jsonValue));
    }

    /**
     * Update issue. Requires authentication.
     * Update issue. (Public API)
     */
    async update(requestParameters: IssuesApiUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Issue> {
        const response = await this.updateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
