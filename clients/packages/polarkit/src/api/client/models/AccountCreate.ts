/* tslint:disable */
/* eslint-disable */
/**
 * Polar API
 *  Welcome to the **Polar API** for [polar.sh](https://polar.sh).  The Public API is currently a [work in progress](https://github.com/polarsource/polar/issues/834) and is in active development. ðŸš€  #### Authentication  Use a [Personal Access Token](https://polar.sh/settings) and send it in the `Authorization` header on the format `Bearer [YOUR_TOKEN]`.  #### Feedback  If you have any feedback or comments, reach out in the [Polar API-issue](https://github.com/polarsource/polar/issues/834), or reach out on the Polar Discord server.  We\'d love to see what you\'ve built with the API and to get your thoughts on how we can make the API better!  #### Connecting  The Polar API is online at `https://api.polar.sh`. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AccountType } from './AccountType';
import {
    AccountTypeFromJSON,
    AccountTypeFromJSONTyped,
    AccountTypeToJSON,
} from './AccountType';

/**
 * 
 * @export
 * @interface AccountCreate
 */
export interface AccountCreate {
    /**
     * 
     * @type {string}
     * @memberof AccountCreate
     */
    user_id?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountCreate
     */
    organization_id?: string;
    /**
     * 
     * @type {AccountType}
     * @memberof AccountCreate
     */
    account_type: AccountType;
    /**
     * 
     * @type {string}
     * @memberof AccountCreate
     */
    open_collective_slug?: string;
    /**
     * Two letter uppercase country code
     * @type {string}
     * @memberof AccountCreate
     */
    country: string;
}

/**
 * Check if a given object implements the AccountCreate interface.
 */
export function instanceOfAccountCreate(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "account_type" in value;
    isInstance = isInstance && "country" in value;

    return isInstance;
}

export function AccountCreateFromJSON(json: any): AccountCreate {
    return AccountCreateFromJSONTyped(json, false);
}

export function AccountCreateFromJSONTyped(json: any, ignoreDiscriminator: boolean): AccountCreate {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'user_id': !exists(json, 'user_id') ? undefined : json['user_id'],
        'organization_id': !exists(json, 'organization_id') ? undefined : json['organization_id'],
        'account_type': AccountTypeFromJSON(json['account_type']),
        'open_collective_slug': !exists(json, 'open_collective_slug') ? undefined : json['open_collective_slug'],
        'country': json['country'],
    };
}

export function AccountCreateToJSON(value?: AccountCreate | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'user_id': value.user_id,
        'organization_id': value.organization_id,
        'account_type': AccountTypeToJSON(value.account_type),
        'open_collective_slug': value.open_collective_slug,
        'country': value.country,
    };
}

