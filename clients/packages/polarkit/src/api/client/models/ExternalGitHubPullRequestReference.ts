/* tslint:disable */
/* eslint-disable */
/**
 * Polar API
 *  Welcome to the **Polar API** for [polar.sh](https://polar.sh).  The Public API is currently a [work in progress](https://github.com/polarsource/polar/issues/834) and is in active development. ðŸš€  #### Authentication  Use a [Personal Access Token](https://polar.sh/settings) and send it in the `Authorization` header on the format `Bearer [YOUR_TOKEN]`.  #### Feedback  If you have any feedback or comments, reach out in the [Polar API-issue](https://github.com/polarsource/polar/issues/834), or reach out on the Polar Discord server.  We\'d love to see what you\'ve built with the API and to get your thoughts on how we can make the API better!  #### Connecting  The Polar API is online at `https://api.polar.sh`. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ExternalGitHubPullRequestReference
 */
export interface ExternalGitHubPullRequestReference {
    /**
     * 
     * @type {string}
     * @memberof ExternalGitHubPullRequestReference
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof ExternalGitHubPullRequestReference
     */
    author_login: string;
    /**
     * 
     * @type {string}
     * @memberof ExternalGitHubPullRequestReference
     */
    author_avatar: string;
    /**
     * 
     * @type {number}
     * @memberof ExternalGitHubPullRequestReference
     */
    number: number;
    /**
     * 
     * @type {string}
     * @memberof ExternalGitHubPullRequestReference
     */
    organization_name: string;
    /**
     * 
     * @type {string}
     * @memberof ExternalGitHubPullRequestReference
     */
    repository_name: string;
    /**
     * 
     * @type {string}
     * @memberof ExternalGitHubPullRequestReference
     */
    state: string;
}

/**
 * Check if a given object implements the ExternalGitHubPullRequestReference interface.
 */
export function instanceOfExternalGitHubPullRequestReference(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "author_login" in value;
    isInstance = isInstance && "author_avatar" in value;
    isInstance = isInstance && "number" in value;
    isInstance = isInstance && "organization_name" in value;
    isInstance = isInstance && "repository_name" in value;
    isInstance = isInstance && "state" in value;

    return isInstance;
}

export function ExternalGitHubPullRequestReferenceFromJSON(json: any): ExternalGitHubPullRequestReference {
    return ExternalGitHubPullRequestReferenceFromJSONTyped(json, false);
}

export function ExternalGitHubPullRequestReferenceFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExternalGitHubPullRequestReference {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'title': json['title'],
        'author_login': json['author_login'],
        'author_avatar': json['author_avatar'],
        'number': json['number'],
        'organization_name': json['organization_name'],
        'repository_name': json['repository_name'],
        'state': json['state'],
    };
}

export function ExternalGitHubPullRequestReferenceToJSON(value?: ExternalGitHubPullRequestReference | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'title': value.title,
        'author_login': value.author_login,
        'author_avatar': value.author_avatar,
        'number': value.number,
        'organization_name': value.organization_name,
        'repository_name': value.repository_name,
        'state': value.state,
    };
}

