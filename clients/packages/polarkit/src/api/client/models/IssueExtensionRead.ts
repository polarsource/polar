/* tslint:disable */
/* eslint-disable */
/**
 * Polar API
 *  Welcome to the **Polar API** for [polar.sh](https://polar.sh).  The Public API is currently a [work in progress](https://github.com/polarsource/polar/issues/834) and is in active development. ðŸš€  #### Authentication  Use a [Personal Access Token](https://polar.sh/settings) and send it in the `Authorization` header on the format `Bearer [YOUR_TOKEN]`.  #### Feedback  If you have any feedback or comments, reach out in the [Polar API-issue](https://github.com/polarsource/polar/issues/834), or reach out on the Polar Discord server.  We\'d love to see what you\'ve built with the API and to get your thoughts on how we can make the API better!  #### Connecting  The Polar API is online at `https://api.polar.sh`. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Issue } from './Issue';
import {
    IssueFromJSON,
    IssueFromJSONTyped,
    IssueToJSON,
} from './Issue';
import type { IssueReferenceRead } from './IssueReferenceRead';
import {
    IssueReferenceReadFromJSON,
    IssueReferenceReadFromJSONTyped,
    IssueReferenceReadToJSON,
} from './IssueReferenceRead';
import type { Pledge } from './Pledge';
import {
    PledgeFromJSON,
    PledgeFromJSONTyped,
    PledgeToJSON,
} from './Pledge';

/**
 * 
 * @export
 * @interface IssueExtensionRead
 */
export interface IssueExtensionRead {
    /**
     * 
     * @type {number}
     * @memberof IssueExtensionRead
     */
    number: number;
    /**
     * 
     * @type {Array<Pledge>}
     * @memberof IssueExtensionRead
     */
    pledges: Array<Pledge>;
    /**
     * 
     * @type {Array<IssueReferenceRead>}
     * @memberof IssueExtensionRead
     */
    references: Array<IssueReferenceRead>;
    /**
     * 
     * @type {Issue}
     * @memberof IssueExtensionRead
     */
    issue: Issue;
}

/**
 * Check if a given object implements the IssueExtensionRead interface.
 */
export function instanceOfIssueExtensionRead(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "number" in value;
    isInstance = isInstance && "pledges" in value;
    isInstance = isInstance && "references" in value;
    isInstance = isInstance && "issue" in value;

    return isInstance;
}

export function IssueExtensionReadFromJSON(json: any): IssueExtensionRead {
    return IssueExtensionReadFromJSONTyped(json, false);
}

export function IssueExtensionReadFromJSONTyped(json: any, ignoreDiscriminator: boolean): IssueExtensionRead {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'number': json['number'],
        'pledges': ((json['pledges'] as Array<any>).map(PledgeFromJSON)),
        'references': ((json['references'] as Array<any>).map(IssueReferenceReadFromJSON)),
        'issue': IssueFromJSON(json['issue']),
    };
}

export function IssueExtensionReadToJSON(value?: IssueExtensionRead | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'number': value.number,
        'pledges': ((value.pledges as Array<any>).map(PledgeToJSON)),
        'references': ((value.references as Array<any>).map(IssueReferenceReadToJSON)),
        'issue': IssueToJSON(value.issue),
    };
}

