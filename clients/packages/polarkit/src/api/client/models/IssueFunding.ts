/* tslint:disable */
/* eslint-disable */
/**
 * Polar API
 *  Welcome to the **Polar API** for [polar.sh](https://polar.sh).  The Public API is currently a [work in progress](https://github.com/polarsource/polar/issues/834) and is in active development. ðŸš€  #### Authentication  Use a [Personal Access Token](https://polar.sh/settings) and send it in the `Authorization` header on the format `Bearer [YOUR_TOKEN]`.  #### Feedback  If you have any feedback or comments, reach out in the [Polar API-issue](https://github.com/polarsource/polar/issues/834), or reach out on the Polar Discord server.  We\'d love to see what you\'ve built with the API and to get your thoughts on how we can make the API better!  #### Connecting  The Polar API is online at `https://api.polar.sh`. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CurrencyAmount } from './CurrencyAmount';
import {
    CurrencyAmountFromJSON,
    CurrencyAmountFromJSONTyped,
    CurrencyAmountToJSON,
} from './CurrencyAmount';
import type { Issue } from './Issue';
import {
    IssueFromJSON,
    IssueFromJSONTyped,
    IssueToJSON,
} from './Issue';
import type { PledgesTypeSummaries } from './PledgesTypeSummaries';
import {
    PledgesTypeSummariesFromJSON,
    PledgesTypeSummariesFromJSONTyped,
    PledgesTypeSummariesToJSON,
} from './PledgesTypeSummaries';

/**
 * 
 * @export
 * @interface IssueFunding
 */
export interface IssueFunding {
    /**
     * 
     * @type {Issue}
     * @memberof IssueFunding
     */
    issue: Issue;
    /**
     * 
     * @type {CurrencyAmount}
     * @memberof IssueFunding
     */
    funding_goal?: CurrencyAmount;
    /**
     * 
     * @type {CurrencyAmount}
     * @memberof IssueFunding
     */
    total: CurrencyAmount;
    /**
     * 
     * @type {PledgesTypeSummaries}
     * @memberof IssueFunding
     */
    pledges_summaries: PledgesTypeSummaries;
}

/**
 * Check if a given object implements the IssueFunding interface.
 */
export function instanceOfIssueFunding(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "issue" in value;
    isInstance = isInstance && "total" in value;
    isInstance = isInstance && "pledges_summaries" in value;

    return isInstance;
}

export function IssueFundingFromJSON(json: any): IssueFunding {
    return IssueFundingFromJSONTyped(json, false);
}

export function IssueFundingFromJSONTyped(json: any, ignoreDiscriminator: boolean): IssueFunding {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'issue': IssueFromJSON(json['issue']),
        'funding_goal': !exists(json, 'funding_goal') ? undefined : CurrencyAmountFromJSON(json['funding_goal']),
        'total': CurrencyAmountFromJSON(json['total']),
        'pledges_summaries': PledgesTypeSummariesFromJSON(json['pledges_summaries']),
    };
}

export function IssueFundingToJSON(value?: IssueFunding | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'issue': IssueToJSON(value.issue),
        'funding_goal': CurrencyAmountToJSON(value.funding_goal),
        'total': CurrencyAmountToJSON(value.total),
        'pledges_summaries': PledgesTypeSummariesToJSON(value.pledges_summaries),
    };
}

