/* tslint:disable */
/* eslint-disable */
/**
 * Polar API
 *  Welcome to the **Polar API** for [polar.sh](https://polar.sh).  The Public API is currently a [work in progress](https://github.com/polarsource/polar/issues/834) and is in active development. ðŸš€  #### Authentication  Use a [Personal Access Token](https://polar.sh/settings) and send it in the `Authorization` header on the format `Bearer [YOUR_TOKEN]`.  #### Feedback  If you have any feedback or comments, reach out in the [Polar API-issue](https://github.com/polarsource/polar/issues/834), or reach out on the Polar Discord server.  We\'d love to see what you\'ve built with the API and to get your thoughts on how we can make the API better!  #### Connecting  The Polar API is online at `https://api.polar.sh`. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { NotificationType } from './NotificationType';
import {
    NotificationTypeFromJSON,
    NotificationTypeFromJSONTyped,
    NotificationTypeToJSON,
} from './NotificationType';
import type { Payload1 } from './Payload1';
import {
    Payload1FromJSON,
    Payload1FromJSONTyped,
    Payload1ToJSON,
} from './Payload1';

/**
 * 
 * @export
 * @interface NotificationRead
 */
export interface NotificationRead {
    /**
     * 
     * @type {string}
     * @memberof NotificationRead
     */
    id: string;
    /**
     * 
     * @type {NotificationType}
     * @memberof NotificationRead
     */
    type: NotificationType;
    /**
     * 
     * @type {Date}
     * @memberof NotificationRead
     */
    created_at: Date;
    /**
     * 
     * @type {Payload1}
     * @memberof NotificationRead
     */
    payload: Payload1;
}

/**
 * Check if a given object implements the NotificationRead interface.
 */
export function instanceOfNotificationRead(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "created_at" in value;
    isInstance = isInstance && "payload" in value;

    return isInstance;
}

export function NotificationReadFromJSON(json: any): NotificationRead {
    return NotificationReadFromJSONTyped(json, false);
}

export function NotificationReadFromJSONTyped(json: any, ignoreDiscriminator: boolean): NotificationRead {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'type': NotificationTypeFromJSON(json['type']),
        'created_at': (new Date(json['created_at'])),
        'payload': Payload1FromJSON(json['payload']),
    };
}

export function NotificationReadToJSON(value?: NotificationRead | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'type': NotificationTypeToJSON(value.type),
        'created_at': (value.created_at.toISOString()),
        'payload': Payload1ToJSON(value.payload),
    };
}

