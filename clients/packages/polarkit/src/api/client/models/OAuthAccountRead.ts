/* tslint:disable */
/* eslint-disable */
/**
 * Polar API
 *  Welcome to the **Polar API** for [polar.sh](https://polar.sh).  The Public API is currently a [work in progress](https://github.com/polarsource/polar/issues/834) and is in active development. ðŸš€  #### Authentication  Use a [Personal Access Token](https://polar.sh/settings) and send it in the `Authorization` header on the format `Bearer [YOUR_TOKEN]`.  #### Feedback  If you have any feedback or comments, reach out in the [Polar API-issue](https://github.com/polarsource/polar/issues/834), or reach out on the Polar Discord server.  We\'d love to see what you\'ve built with the API and to get your thoughts on how we can make the API better!  #### Connecting  The Polar API is online at `https://api.polar.sh`. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Platforms } from './Platforms';
import {
    PlatformsFromJSON,
    PlatformsFromJSONTyped,
    PlatformsToJSON,
} from './Platforms';

/**
 * 
 * @export
 * @interface OAuthAccountRead
 */
export interface OAuthAccountRead {
    /**
     * 
     * @type {Date}
     * @memberof OAuthAccountRead
     */
    created_at: Date;
    /**
     * 
     * @type {Date}
     * @memberof OAuthAccountRead
     */
    modified_at?: Date;
    /**
     * 
     * @type {Platforms}
     * @memberof OAuthAccountRead
     */
    platform: Platforms;
    /**
     * 
     * @type {string}
     * @memberof OAuthAccountRead
     */
    account_id: string;
    /**
     * 
     * @type {string}
     * @memberof OAuthAccountRead
     */
    account_email: string;
}

/**
 * Check if a given object implements the OAuthAccountRead interface.
 */
export function instanceOfOAuthAccountRead(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "created_at" in value;
    isInstance = isInstance && "platform" in value;
    isInstance = isInstance && "account_id" in value;
    isInstance = isInstance && "account_email" in value;

    return isInstance;
}

export function OAuthAccountReadFromJSON(json: any): OAuthAccountRead {
    return OAuthAccountReadFromJSONTyped(json, false);
}

export function OAuthAccountReadFromJSONTyped(json: any, ignoreDiscriminator: boolean): OAuthAccountRead {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'created_at': (new Date(json['created_at'])),
        'modified_at': !exists(json, 'modified_at') ? undefined : (new Date(json['modified_at'])),
        'platform': PlatformsFromJSON(json['platform']),
        'account_id': json['account_id'],
        'account_email': json['account_email'],
    };
}

export function OAuthAccountReadToJSON(value?: OAuthAccountRead | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'created_at': (value.created_at.toISOString()),
        'modified_at': value.modified_at === undefined ? undefined : (value.modified_at.toISOString()),
        'platform': PlatformsToJSON(value.platform),
        'account_id': value.account_id,
        'account_email': value.account_email,
    };
}

