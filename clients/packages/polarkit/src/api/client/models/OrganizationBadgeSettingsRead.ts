/* tslint:disable */
/* eslint-disable */
/**
 * Polar API
 *  Welcome to the **Polar API** for [polar.sh](https://polar.sh).  The Public API is currently a [work in progress](https://github.com/polarsource/polar/issues/834) and is in active development. ðŸš€  #### Authentication  Use a [Personal Access Token](https://polar.sh/settings) and send it in the `Authorization` header on the format `Bearer [YOUR_TOKEN]`.  #### Feedback  If you have any feedback or comments, reach out in the [Polar API-issue](https://github.com/polarsource/polar/issues/834), or reach out on the Polar Discord server.  We\'d love to see what you\'ve built with the API and to get your thoughts on how we can make the API better!  #### Connecting  The Polar API is online at `https://api.polar.sh`. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RepositoryBadgeSettingsRead } from './RepositoryBadgeSettingsRead';
import {
    RepositoryBadgeSettingsReadFromJSON,
    RepositoryBadgeSettingsReadFromJSONTyped,
    RepositoryBadgeSettingsReadToJSON,
} from './RepositoryBadgeSettingsRead';

/**
 * 
 * @export
 * @interface OrganizationBadgeSettingsRead
 */
export interface OrganizationBadgeSettingsRead {
    /**
     * 
     * @type {boolean}
     * @memberof OrganizationBadgeSettingsRead
     */
    show_amount: boolean;
    /**
     * 
     * @type {number}
     * @memberof OrganizationBadgeSettingsRead
     */
    minimum_amount: number;
    /**
     * 
     * @type {string}
     * @memberof OrganizationBadgeSettingsRead
     */
    message?: string;
    /**
     * 
     * @type {Array<RepositoryBadgeSettingsRead>}
     * @memberof OrganizationBadgeSettingsRead
     */
    repositories: Array<RepositoryBadgeSettingsRead>;
}

/**
 * Check if a given object implements the OrganizationBadgeSettingsRead interface.
 */
export function instanceOfOrganizationBadgeSettingsRead(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "show_amount" in value;
    isInstance = isInstance && "minimum_amount" in value;
    isInstance = isInstance && "repositories" in value;

    return isInstance;
}

export function OrganizationBadgeSettingsReadFromJSON(json: any): OrganizationBadgeSettingsRead {
    return OrganizationBadgeSettingsReadFromJSONTyped(json, false);
}

export function OrganizationBadgeSettingsReadFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrganizationBadgeSettingsRead {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'show_amount': json['show_amount'],
        'minimum_amount': json['minimum_amount'],
        'message': !exists(json, 'message') ? undefined : json['message'],
        'repositories': ((json['repositories'] as Array<any>).map(RepositoryBadgeSettingsReadFromJSON)),
    };
}

export function OrganizationBadgeSettingsReadToJSON(value?: OrganizationBadgeSettingsRead | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'show_amount': value.show_amount,
        'minimum_amount': value.minimum_amount,
        'message': value.message,
        'repositories': ((value.repositories as Array<any>).map(RepositoryBadgeSettingsReadToJSON)),
    };
}

