/* tslint:disable */
/* eslint-disable */
/**
 * Polar API
 *  Welcome to the **Polar API** for [polar.sh](https://polar.sh).  The Public API is currently a [work in progress](https://github.com/polarsource/polar/issues/834) and is in active development. ðŸš€  #### Authentication  Use a [Personal Access Token](https://polar.sh/settings) and send it in the `Authorization` header on the format `Bearer [YOUR_TOKEN]`.  #### Feedback  If you have any feedback or comments, reach out in the [Polar API-issue](https://github.com/polarsource/polar/issues/834), or reach out on the Polar Discord server.  We\'d love to see what you\'ve built with the API and to get your thoughts on how we can make the API better!  #### Connecting  The Polar API is online at `https://api.polar.sh`. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MaintainerPledgeConfirmationPendingNotification } from './MaintainerPledgeConfirmationPendingNotification';
import {
    MaintainerPledgeConfirmationPendingNotificationFromJSON,
    MaintainerPledgeConfirmationPendingNotificationFromJSONTyped,
    MaintainerPledgeConfirmationPendingNotificationToJSON,
} from './MaintainerPledgeConfirmationPendingNotification';
import type { MaintainerPledgeCreatedNotification } from './MaintainerPledgeCreatedNotification';
import {
    MaintainerPledgeCreatedNotificationFromJSON,
    MaintainerPledgeCreatedNotificationFromJSONTyped,
    MaintainerPledgeCreatedNotificationToJSON,
} from './MaintainerPledgeCreatedNotification';
import type { MaintainerPledgePaidNotification } from './MaintainerPledgePaidNotification';
import {
    MaintainerPledgePaidNotificationFromJSON,
    MaintainerPledgePaidNotificationFromJSONTyped,
    MaintainerPledgePaidNotificationToJSON,
} from './MaintainerPledgePaidNotification';
import type { MaintainerPledgePendingNotification } from './MaintainerPledgePendingNotification';
import {
    MaintainerPledgePendingNotificationFromJSON,
    MaintainerPledgePendingNotificationFromJSONTyped,
    MaintainerPledgePendingNotificationToJSON,
} from './MaintainerPledgePendingNotification';
import type { MaintainerPledgedIssueConfirmationPendingNotification } from './MaintainerPledgedIssueConfirmationPendingNotification';
import {
    MaintainerPledgedIssueConfirmationPendingNotificationFromJSON,
    MaintainerPledgedIssueConfirmationPendingNotificationFromJSONTyped,
    MaintainerPledgedIssueConfirmationPendingNotificationToJSON,
} from './MaintainerPledgedIssueConfirmationPendingNotification';
import type { MaintainerPledgedIssuePendingNotification } from './MaintainerPledgedIssuePendingNotification';
import {
    MaintainerPledgedIssuePendingNotificationFromJSON,
    MaintainerPledgedIssuePendingNotificationFromJSONTyped,
    MaintainerPledgedIssuePendingNotificationToJSON,
} from './MaintainerPledgedIssuePendingNotification';
import type { PledgeType } from './PledgeType';
import {
    PledgeTypeFromJSON,
    PledgeTypeFromJSONTyped,
    PledgeTypeToJSON,
} from './PledgeType';
import type { PledgerPledgePendingNotification } from './PledgerPledgePendingNotification';
import {
    PledgerPledgePendingNotificationFromJSON,
    PledgerPledgePendingNotificationFromJSONTyped,
    PledgerPledgePendingNotificationToJSON,
} from './PledgerPledgePendingNotification';
import type { RewardPaidNotification } from './RewardPaidNotification';
import {
    RewardPaidNotificationFromJSON,
    RewardPaidNotificationFromJSONTyped,
    RewardPaidNotificationToJSON,
} from './RewardPaidNotification';

/**
 * 
 * @export
 * @interface Payload1
 */
export interface Payload1 {
    /**
     * 
     * @type {string}
     * @memberof Payload1
     */
    paid_out_amount: string;
    /**
     * 
     * @type {string}
     * @memberof Payload1
     */
    issue_url: string;
    /**
     * 
     * @type {string}
     * @memberof Payload1
     */
    issue_title: string;
    /**
     * 
     * @type {string}
     * @memberof Payload1
     */
    issue_org_name: string;
    /**
     * 
     * @type {string}
     * @memberof Payload1
     */
    issue_repo_name: string;
    /**
     * 
     * @type {number}
     * @memberof Payload1
     */
    issue_number: number;
    /**
     * 
     * @type {string}
     * @memberof Payload1
     */
    pledge_id: string;
    /**
     * 
     * @type {string}
     * @memberof Payload1
     */
    pledger_name: string;
    /**
     * 
     * @type {string}
     * @memberof Payload1
     */
    pledge_amount: string;
    /**
     * 
     * @type {boolean}
     * @memberof Payload1
     */
    maintainer_has_stripe_account: boolean;
    /**
     * 
     * @type {string}
     * @memberof Payload1
     */
    pledge_date: string;
    /**
     * 
     * @type {PledgeType}
     * @memberof Payload1
     */
    pledge_type?: PledgeType;
    /**
     * 
     * @type {string}
     * @memberof Payload1
     */
    issue_id: string;
    /**
     * 
     * @type {string}
     * @memberof Payload1
     */
    pledge_amount_sum: string;
    /**
     * 
     * @type {boolean}
     * @memberof Payload1
     */
    maintainer_has_account: boolean;
}

/**
 * Check if a given object implements the Payload1 interface.
 */
export function instanceOfPayload1(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "paid_out_amount" in value;
    isInstance = isInstance && "issue_url" in value;
    isInstance = isInstance && "issue_title" in value;
    isInstance = isInstance && "issue_org_name" in value;
    isInstance = isInstance && "issue_repo_name" in value;
    isInstance = isInstance && "issue_number" in value;
    isInstance = isInstance && "pledge_id" in value;
    isInstance = isInstance && "pledger_name" in value;
    isInstance = isInstance && "pledge_amount" in value;
    isInstance = isInstance && "maintainer_has_stripe_account" in value;
    isInstance = isInstance && "pledge_date" in value;
    isInstance = isInstance && "issue_id" in value;
    isInstance = isInstance && "pledge_amount_sum" in value;
    isInstance = isInstance && "maintainer_has_account" in value;

    return isInstance;
}

export function Payload1FromJSON(json: any): Payload1 {
    return Payload1FromJSONTyped(json, false);
}

export function Payload1FromJSONTyped(json: any, ignoreDiscriminator: boolean): Payload1 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'paid_out_amount': json['paid_out_amount'],
        'issue_url': json['issue_url'],
        'issue_title': json['issue_title'],
        'issue_org_name': json['issue_org_name'],
        'issue_repo_name': json['issue_repo_name'],
        'issue_number': json['issue_number'],
        'pledge_id': json['pledge_id'],
        'pledger_name': json['pledger_name'],
        'pledge_amount': json['pledge_amount'],
        'maintainer_has_stripe_account': json['maintainer_has_stripe_account'],
        'pledge_date': json['pledge_date'],
        'pledge_type': !exists(json, 'pledge_type') ? undefined : PledgeTypeFromJSON(json['pledge_type']),
        'issue_id': json['issue_id'],
        'pledge_amount_sum': json['pledge_amount_sum'],
        'maintainer_has_account': json['maintainer_has_account'],
    };
}

export function Payload1ToJSON(value?: Payload1 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'paid_out_amount': value.paid_out_amount,
        'issue_url': value.issue_url,
        'issue_title': value.issue_title,
        'issue_org_name': value.issue_org_name,
        'issue_repo_name': value.issue_repo_name,
        'issue_number': value.issue_number,
        'pledge_id': value.pledge_id,
        'pledger_name': value.pledger_name,
        'pledge_amount': value.pledge_amount,
        'maintainer_has_stripe_account': value.maintainer_has_stripe_account,
        'pledge_date': value.pledge_date,
        'pledge_type': PledgeTypeToJSON(value.pledge_type),
        'issue_id': value.issue_id,
        'pledge_amount_sum': value.pledge_amount_sum,
        'maintainer_has_account': value.maintainer_has_account,
    };
}

