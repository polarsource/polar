/* tslint:disable */
/* eslint-disable */
/**
 * Polar API
 *  Welcome to the **Polar API** for [polar.sh](https://polar.sh).  The Public API is currently a [work in progress](https://github.com/polarsource/polar/issues/834) and is in active development. ðŸš€  #### Authentication  Use a [Personal Access Token](https://polar.sh/settings) and send it in the `Authorization` header on the format `Bearer [YOUR_TOKEN]`.  #### Feedback  If you have any feedback or comments, reach out in the [Polar API-issue](https://github.com/polarsource/polar/issues/834), or reach out on the Polar Discord server.  We\'d love to see what you\'ve built with the API and to get your thoughts on how we can make the API better!  #### Connecting  The Polar API is online at `https://api.polar.sh`. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Reactions
 */
export interface Reactions {
    /**
     * 
     * @type {number}
     * @memberof Reactions
     */
    total_count: number;
    /**
     * 
     * @type {number}
     * @memberof Reactions
     */
    plus_one: number;
    /**
     * 
     * @type {number}
     * @memberof Reactions
     */
    minus_one: number;
    /**
     * 
     * @type {number}
     * @memberof Reactions
     */
    laugh: number;
    /**
     * 
     * @type {number}
     * @memberof Reactions
     */
    hooray: number;
    /**
     * 
     * @type {number}
     * @memberof Reactions
     */
    confused: number;
    /**
     * 
     * @type {number}
     * @memberof Reactions
     */
    heart: number;
    /**
     * 
     * @type {number}
     * @memberof Reactions
     */
    rocket: number;
    /**
     * 
     * @type {number}
     * @memberof Reactions
     */
    eyes: number;
}

/**
 * Check if a given object implements the Reactions interface.
 */
export function instanceOfReactions(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "total_count" in value;
    isInstance = isInstance && "plus_one" in value;
    isInstance = isInstance && "minus_one" in value;
    isInstance = isInstance && "laugh" in value;
    isInstance = isInstance && "hooray" in value;
    isInstance = isInstance && "confused" in value;
    isInstance = isInstance && "heart" in value;
    isInstance = isInstance && "rocket" in value;
    isInstance = isInstance && "eyes" in value;

    return isInstance;
}

export function ReactionsFromJSON(json: any): Reactions {
    return ReactionsFromJSONTyped(json, false);
}

export function ReactionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): Reactions {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'total_count': json['total_count'],
        'plus_one': json['plus_one'],
        'minus_one': json['minus_one'],
        'laugh': json['laugh'],
        'hooray': json['hooray'],
        'confused': json['confused'],
        'heart': json['heart'],
        'rocket': json['rocket'],
        'eyes': json['eyes'],
    };
}

export function ReactionsToJSON(value?: Reactions | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'total_count': value.total_count,
        'plus_one': value.plus_one,
        'minus_one': value.minus_one,
        'laugh': value.laugh,
        'hooray': value.hooray,
        'confused': value.confused,
        'heart': value.heart,
        'rocket': value.rocket,
        'eyes': value.eyes,
    };
}

