/* tslint:disable */
/* eslint-disable */
/**
 * Polar API
 *  Welcome to the **Polar API** for [polar.sh](https://polar.sh).  The Public API is currently a [work in progress](https://github.com/polarsource/polar/issues/834) and is in active development. ðŸš€  #### Authentication  Use a [Personal Access Token](https://polar.sh/settings) and send it in the `Authorization` header on the format `Bearer [YOUR_TOKEN]`.  #### Feedback  If you have any feedback or comments, reach out in the [Polar API-issue](https://github.com/polarsource/polar/issues/834), or reach out on the Polar Discord server.  We\'d love to see what you\'ve built with the API and to get your thoughts on how we can make the API better!  #### Connecting  The Polar API is online at `https://api.polar.sh`. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RepositoryBadgeSettingsRead
 */
export interface RepositoryBadgeSettingsRead {
    /**
     * 
     * @type {string}
     * @memberof RepositoryBadgeSettingsRead
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof RepositoryBadgeSettingsRead
     */
    avatar_url?: string;
    /**
     * 
     * @type {string}
     * @memberof RepositoryBadgeSettingsRead
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof RepositoryBadgeSettingsRead
     */
    synced_issues: number;
    /**
     * 
     * @type {number}
     * @memberof RepositoryBadgeSettingsRead
     */
    open_issues: number;
    /**
     * 
     * @type {number}
     * @memberof RepositoryBadgeSettingsRead
     */
    auto_embedded_issues: number;
    /**
     * 
     * @type {number}
     * @memberof RepositoryBadgeSettingsRead
     */
    label_embedded_issues: number;
    /**
     * 
     * @type {number}
     * @memberof RepositoryBadgeSettingsRead
     */
    pull_requests: number;
    /**
     * 
     * @type {boolean}
     * @memberof RepositoryBadgeSettingsRead
     */
    badge_auto_embed: boolean;
    /**
     * 
     * @type {string}
     * @memberof RepositoryBadgeSettingsRead
     */
    badge_label: string;
    /**
     * 
     * @type {boolean}
     * @memberof RepositoryBadgeSettingsRead
     */
    is_private: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RepositoryBadgeSettingsRead
     */
    is_sync_completed: boolean;
}

/**
 * Check if a given object implements the RepositoryBadgeSettingsRead interface.
 */
export function instanceOfRepositoryBadgeSettingsRead(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "synced_issues" in value;
    isInstance = isInstance && "open_issues" in value;
    isInstance = isInstance && "auto_embedded_issues" in value;
    isInstance = isInstance && "label_embedded_issues" in value;
    isInstance = isInstance && "pull_requests" in value;
    isInstance = isInstance && "badge_auto_embed" in value;
    isInstance = isInstance && "badge_label" in value;
    isInstance = isInstance && "is_private" in value;
    isInstance = isInstance && "is_sync_completed" in value;

    return isInstance;
}

export function RepositoryBadgeSettingsReadFromJSON(json: any): RepositoryBadgeSettingsRead {
    return RepositoryBadgeSettingsReadFromJSONTyped(json, false);
}

export function RepositoryBadgeSettingsReadFromJSONTyped(json: any, ignoreDiscriminator: boolean): RepositoryBadgeSettingsRead {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'avatar_url': !exists(json, 'avatar_url') ? undefined : json['avatar_url'],
        'name': json['name'],
        'synced_issues': json['synced_issues'],
        'open_issues': json['open_issues'],
        'auto_embedded_issues': json['auto_embedded_issues'],
        'label_embedded_issues': json['label_embedded_issues'],
        'pull_requests': json['pull_requests'],
        'badge_auto_embed': json['badge_auto_embed'],
        'badge_label': json['badge_label'],
        'is_private': json['is_private'],
        'is_sync_completed': json['is_sync_completed'],
    };
}

export function RepositoryBadgeSettingsReadToJSON(value?: RepositoryBadgeSettingsRead | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'avatar_url': value.avatar_url,
        'name': value.name,
        'synced_issues': value.synced_issues,
        'open_issues': value.open_issues,
        'auto_embedded_issues': value.auto_embedded_issues,
        'label_embedded_issues': value.label_embedded_issues,
        'pull_requests': value.pull_requests,
        'badge_auto_embed': value.badge_auto_embed,
        'badge_label': value.badge_label,
        'is_private': value.is_private,
        'is_sync_completed': value.is_sync_completed,
    };
}

