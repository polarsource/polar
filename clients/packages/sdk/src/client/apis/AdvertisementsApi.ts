/* tslint:disable */
/* eslint-disable */
/**
 * Polar API
 * Read the docs at https://docs.polar.sh/api
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AdvertisementCampaign,
  AdvertisementCampaignListResource,
  AdvertisementSortProperty,
  HTTPValidationError,
  ResourceNotFound,
} from '../models/index';

export interface AdvertisementsApiGetRequest {
    id: string;
}

export interface AdvertisementsApiListRequest {
    benefitId: string;
    page?: number;
    limit?: number;
    sorting?: Array<AdvertisementSortProperty> | null;
}

export interface AdvertisementsApiTrackViewRequest {
    id: string;
}

/**
 * 
 */
export class AdvertisementsApi extends runtime.BaseAPI {

    /**
     * Get an advertisement campaign by ID.
     * Get Campaign
     */
    async getRaw(requestParameters: AdvertisementsApiGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdvertisementCampaign>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling get().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/advertisements/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get an advertisement campaign by ID.
     * Get Campaign
     */
    async get(requestParameters: AdvertisementsApiGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdvertisementCampaign> {
        const response = await this.getRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List active advertisement campaigns for a benefit.
     * List Campaigns
     */
    async listRaw(requestParameters: AdvertisementsApiListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdvertisementCampaignListResource>> {
        if (requestParameters['benefitId'] == null) {
            throw new runtime.RequiredError(
                'benefitId',
                'Required parameter "benefitId" was null or undefined when calling list().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['benefitId'] != null) {
            queryParameters['benefit_id'] = requestParameters['benefitId'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sorting'] != null) {
            queryParameters['sorting'] = requestParameters['sorting'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/advertisements/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * List active advertisement campaigns for a benefit.
     * List Campaigns
     */
    async list(requestParameters: AdvertisementsApiListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdvertisementCampaignListResource> {
        const response = await this.listRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Track a view on an advertisement campaign.
     * Track View
     */
    async trackViewRaw(requestParameters: AdvertisementsApiTrackViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling trackView().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/advertisements/{id}/view`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Track a view on an advertisement campaign.
     * Track View
     */
    async trackView(requestParameters: AdvertisementsApiTrackViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.trackViewRaw(requestParameters, initOverrides);
    }

}
