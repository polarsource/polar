/* tslint:disable */
/* eslint-disable */
/**
 * Polar API
 *  Welcome to the **Polar API** for [polar.sh](https://polar.sh).  The Public API is currently a [work in progress](https://github.com/polarsource/polar/issues/834) and is in active development. ðŸš€  #### Authentication  Use a [Personal Access Token](https://polar.sh/settings) and send it in the `Authorization` header on the format `Bearer [YOUR_TOKEN]`.  #### Feedback  If you have any feedback or comments, reach out in the [Polar API-issue](https://github.com/polarsource/polar/issues/834), or reach out on the Polar Discord server.  We\'d love to see what you\'ve built with the API and to get your thoughts on how we can make the API better!  #### Connecting  The Polar API is online at `https://api.polar.sh`. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AdvertisementCampaign,
  AdvertisementCampaignPublic,
  CreateAdvertisementCampaign,
  EditAdvertisementCampaign,
  HTTPValidationError,
  ListResourceAdvertisementCampaign,
  ListResourceAdvertisementDisplay,
} from '../models/index';

export interface AdvertisementsApiCreateCampaignRequest {
    createAdvertisementCampaign: CreateAdvertisementCampaign;
}

export interface AdvertisementsApiDeleteCampaignRequest {
    id: string;
}

export interface AdvertisementsApiEditCampaignRequest {
    id: string;
    editAdvertisementCampaign: EditAdvertisementCampaign;
}

export interface AdvertisementsApiGetCampaignRequest {
    id: string;
}

export interface AdvertisementsApiSearchCampaignsRequest {
    subscriptionId?: string;
    benefitId?: string;
}

export interface AdvertisementsApiSearchDisplayRequest {
    benefitId: string;
}

export interface AdvertisementsApiTrackViewRequest {
    id: string;
}

/**
 * 
 */
export class AdvertisementsApi extends runtime.BaseAPI {

    /**
     * Create Campaign
     */
    async createCampaignRaw(requestParameters: AdvertisementsApiCreateCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdvertisementCampaign>> {
        if (requestParameters['createAdvertisementCampaign'] == null) {
            throw new runtime.RequiredError(
                'createAdvertisementCampaign',
                'Required parameter "createAdvertisementCampaign" was null or undefined when calling createCampaign().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/advertisements/campaigns`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['createAdvertisementCampaign'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create Campaign
     */
    async createCampaign(requestParameters: AdvertisementsApiCreateCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdvertisementCampaign> {
        const response = await this.createCampaignRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Campaign
     */
    async deleteCampaignRaw(requestParameters: AdvertisementsApiDeleteCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdvertisementCampaign>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteCampaign().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/advertisements/campaigns/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Delete Campaign
     */
    async deleteCampaign(requestParameters: AdvertisementsApiDeleteCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdvertisementCampaign> {
        const response = await this.deleteCampaignRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit Campaign
     */
    async editCampaignRaw(requestParameters: AdvertisementsApiEditCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdvertisementCampaign>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling editCampaign().'
            );
        }

        if (requestParameters['editAdvertisementCampaign'] == null) {
            throw new runtime.RequiredError(
                'editAdvertisementCampaign',
                'Required parameter "editAdvertisementCampaign" was null or undefined when calling editCampaign().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/advertisements/campaigns/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['editAdvertisementCampaign'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Edit Campaign
     */
    async editCampaign(requestParameters: AdvertisementsApiEditCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdvertisementCampaign> {
        const response = await this.editCampaignRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Campaign
     */
    async getCampaignRaw(requestParameters: AdvertisementsApiGetCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdvertisementCampaign>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getCampaign().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/advertisements/campaigns/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Campaign
     */
    async getCampaign(requestParameters: AdvertisementsApiGetCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdvertisementCampaign> {
        const response = await this.getCampaignRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search Campaigns
     */
    async searchCampaignsRaw(requestParameters: AdvertisementsApiSearchCampaignsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResourceAdvertisementCampaign>> {
        const queryParameters: any = {};

        if (requestParameters['subscriptionId'] != null) {
            queryParameters['subscription_id'] = requestParameters['subscriptionId'];
        }

        if (requestParameters['benefitId'] != null) {
            queryParameters['benefit_id'] = requestParameters['benefitId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/advertisements/campaigns/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Search Campaigns
     */
    async searchCampaigns(requestParameters: AdvertisementsApiSearchCampaignsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResourceAdvertisementCampaign> {
        const response = await this.searchCampaignsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search Display
     */
    async searchDisplayRaw(requestParameters: AdvertisementsApiSearchDisplayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResourceAdvertisementDisplay>> {
        if (requestParameters['benefitId'] == null) {
            throw new runtime.RequiredError(
                'benefitId',
                'Required parameter "benefitId" was null or undefined when calling searchDisplay().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['benefitId'] != null) {
            queryParameters['benefit_id'] = requestParameters['benefitId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/advertisements/display/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Search Display
     */
    async searchDisplay(requestParameters: AdvertisementsApiSearchDisplayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResourceAdvertisementDisplay> {
        const response = await this.searchDisplayRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Track View
     */
    async trackViewRaw(requestParameters: AdvertisementsApiTrackViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdvertisementCampaignPublic>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling trackView().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/advertisements/campaigns/{id}/track_view`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Track View
     */
    async trackView(requestParameters: AdvertisementsApiTrackViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdvertisementCampaignPublic> {
        const response = await this.trackViewRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
