/* tslint:disable */
/* eslint-disable */
/**
 * Polar API
 *  Welcome to the **Polar API** for [polar.sh](https://polar.sh).  This specification contains both the definitions of the Polar HTTP API and the Webhook API.  #### Authentication  Use a [Personal Access Token](https://polar.sh/settings) and send it in the `Authorization` header on the format `Bearer [YOUR_TOKEN]`.  #### Feedback  If you have any feedback or comments, reach out in the [Polar API-issue](https://github.com/polarsource/polar/issues/834), or reach out on the Polar Discord server.  We\'d love to see what you\'ve built with the API and to get your thoughts on how we can make the API better!  #### Connecting  The Polar API is online at `https://api.polar.sh`. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AdvertisementCampaign,
  AdvertisementCampaignListResource,
  HTTPValidationError,
  ResourceNotFound,
} from '../models/index';

export interface AdvertisementsApiGetAdvertisementCampaignRequest {
    id: string;
}

export interface AdvertisementsApiListAdvertisementCampaignsRequest {
    benefitId: string;
    page?: number;
    limit?: number;
    sorting?: Array<string>;
}

export interface AdvertisementsApiTrackAdvertisementCampaignViewRequest {
    id: string;
}

/**
 * 
 */
export class AdvertisementsApi extends runtime.BaseAPI {

    /**
     * Get an advertisement campaign by ID.
     * Get Advertisement Campaign
     */
    async getAdvertisementCampaignRaw(requestParameters: AdvertisementsApiGetAdvertisementCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdvertisementCampaign>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getAdvertisementCampaign().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/advertisements/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get an advertisement campaign by ID.
     * Get Advertisement Campaign
     */
    async getAdvertisementCampaign(requestParameters: AdvertisementsApiGetAdvertisementCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdvertisementCampaign> {
        const response = await this.getAdvertisementCampaignRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List active advertisement campaigns for a benefit.
     * List Advertisement Campaigns
     */
    async listAdvertisementCampaignsRaw(requestParameters: AdvertisementsApiListAdvertisementCampaignsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdvertisementCampaignListResource>> {
        if (requestParameters['benefitId'] == null) {
            throw new runtime.RequiredError(
                'benefitId',
                'Required parameter "benefitId" was null or undefined when calling listAdvertisementCampaigns().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['benefitId'] != null) {
            queryParameters['benefit_id'] = requestParameters['benefitId'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sorting'] != null) {
            queryParameters['sorting'] = requestParameters['sorting'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/advertisements/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * List active advertisement campaigns for a benefit.
     * List Advertisement Campaigns
     */
    async listAdvertisementCampaigns(requestParameters: AdvertisementsApiListAdvertisementCampaignsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdvertisementCampaignListResource> {
        const response = await this.listAdvertisementCampaignsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Track a view on an advertisement campaign.
     * Track Advertisement Campaign View
     */
    async trackAdvertisementCampaignViewRaw(requestParameters: AdvertisementsApiTrackAdvertisementCampaignViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling trackAdvertisementCampaignView().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/advertisements/{id}/view`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Track a view on an advertisement campaign.
     * Track Advertisement Campaign View
     */
    async trackAdvertisementCampaignView(requestParameters: AdvertisementsApiTrackAdvertisementCampaignViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.trackAdvertisementCampaignViewRaw(requestParameters, initOverrides);
    }

}
