/* tslint:disable */
/* eslint-disable */
/**
 * Polar API
 *  Welcome to the **Polar API** for [polar.sh](https://polar.sh).  The Public API is currently a [work in progress](https://github.com/polarsource/polar/issues/834) and is in active development. ðŸš€  #### Authentication  Use a [Personal Access Token](https://polar.sh/settings) and send it in the `Authorization` header on the format `Bearer [YOUR_TOKEN]`.  #### Feedback  If you have any feedback or comments, reach out in the [Polar API-issue](https://github.com/polarsource/polar/issues/834), or reach out on the Polar Discord server.  We\'d love to see what you\'ve built with the API and to get your thoughts on how we can make the API better!  #### Connecting  The Polar API is online at `https://api.polar.sh`. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AdvertisementCampaign,
  CreateAdvertisementCampaign,
  HTTPValidationError,
  ListResourceAdvertisementCampaign,
} from '../models/index';

export interface AdvertisementsApiCreateCampaignRequest {
    createAdvertisementCampaign: CreateAdvertisementCampaign;
}

export interface AdvertisementsApiSearchCampaignsRequest {
    subscriptionId?: string;
}

/**
 * 
 */
export class AdvertisementsApi extends runtime.BaseAPI {

    /**
     * Create Campaign
     */
    async createCampaignRaw(requestParameters: AdvertisementsApiCreateCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdvertisementCampaign>> {
        if (requestParameters.createAdvertisementCampaign === null || requestParameters.createAdvertisementCampaign === undefined) {
            throw new runtime.RequiredError('createAdvertisementCampaign','Required parameter requestParameters.createAdvertisementCampaign was null or undefined when calling createCampaign.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/advertisements/campaigns`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.createAdvertisementCampaign,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create Campaign
     */
    async createCampaign(requestParameters: AdvertisementsApiCreateCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdvertisementCampaign> {
        const response = await this.createCampaignRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search Campaigns
     */
    async searchCampaignsRaw(requestParameters: AdvertisementsApiSearchCampaignsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResourceAdvertisementCampaign>> {
        const queryParameters: any = {};

        if (requestParameters.subscriptionId !== undefined) {
            queryParameters['subscription_id'] = requestParameters.subscriptionId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/advertisements/campaigns/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Search Campaigns
     */
    async searchCampaigns(requestParameters: AdvertisementsApiSearchCampaignsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResourceAdvertisementCampaign> {
        const response = await this.searchCampaignsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
