/* tslint:disable */
/* eslint-disable */
/**
 * Polar API
 * Read the docs at https://docs.polar.sh/api
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CustomerSessionCodeAuthenticateRequest,
  CustomerSessionCodeAuthenticateResponse,
  CustomerSessionCodeRequest,
  HTTPValidationError,
} from '../models/index';

export interface CustomerPortalCustomerSessionApiCustomerPortalCustomerSessionAuthenticateRequest {
    body: CustomerSessionCodeAuthenticateRequest;
}

export interface CustomerPortalCustomerSessionApiCustomerPortalCustomerSessionRequestRequest {
    body: CustomerSessionCodeRequest;
}

/**
 * 
 */
export class CustomerPortalCustomerSessionApi extends runtime.BaseAPI {

    /**
     * Customer Portal.Customer Session.Authenticate
     */
    async customerPortalCustomerSessionAuthenticateRaw(requestParameters: CustomerPortalCustomerSessionApiCustomerPortalCustomerSessionAuthenticateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerSessionCodeAuthenticateResponse>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling customerPortalCustomerSessionAuthenticate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/customer-portal/customer-session/authenticate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Customer Portal.Customer Session.Authenticate
     */
    async customerPortalCustomerSessionAuthenticate(requestParameters: CustomerPortalCustomerSessionApiCustomerPortalCustomerSessionAuthenticateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerSessionCodeAuthenticateResponse> {
        const response = await this.customerPortalCustomerSessionAuthenticateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Customer Portal.Customer Session.Request
     */
    async customerPortalCustomerSessionRequestRaw(requestParameters: CustomerPortalCustomerSessionApiCustomerPortalCustomerSessionRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling customerPortalCustomerSessionRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/customer-portal/customer-session/request`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'],
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Customer Portal.Customer Session.Request
     */
    async customerPortalCustomerSessionRequest(requestParameters: CustomerPortalCustomerSessionApiCustomerPortalCustomerSessionRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.customerPortalCustomerSessionRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
