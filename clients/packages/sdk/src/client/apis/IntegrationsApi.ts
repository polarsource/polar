/* tslint:disable */
/* eslint-disable */
/**
 * Polar API
 *  Welcome to the **Polar API** for [polar.sh](https://polar.sh).  The Public API is currently a [work in progress](https://github.com/polarsource/polar/issues/834) and is in active development. ðŸš€  #### Authentication  Use a [Personal Access Token](https://polar.sh/settings) and send it in the `Authorization` header on the format `Bearer [YOUR_TOKEN]`.  #### Feedback  If you have any feedback or comments, reach out in the [Polar API-issue](https://github.com/polarsource/polar/issues/834), or reach out on the Polar Discord server.  We\'d love to see what you\'ve built with the API and to get your thoughts on how we can make the API better!  #### Connecting  The Polar API is online at `https://api.polar.sh`. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DiscordGuild,
  GitHubInvitesBenefitRepositories,
  GithubUser,
  HTTPValidationError,
  InstallationCreate,
  LookupUserRequest,
  Organization,
  OrganizationBillingPlan,
  OrganizationCheckPermissionsInput,
  SynchronizeMembersResponse,
  UserSignupType,
  WebhookResponse,
} from '../models/index';

export interface IntegrationsApiCheckOrganizationPermissionsRequest {
    id: string;
    organizationCheckPermissionsInput: OrganizationCheckPermissionsInput;
}

export interface IntegrationsApiDiscordGuildLookupRequest {
    guildToken: string;
}

export interface IntegrationsApiGetOrganizationBillingPlanRequest {
    id: string;
}

export interface IntegrationsApiInstallRequest {
    installationCreate: InstallationCreate;
}

export interface IntegrationsApiIntegrationsDiscordBotAuthorizeRequest {
    returnTo?: string;
}

export interface IntegrationsApiIntegrationsDiscordBotCallbackRequest {
    code?: string;
    codeVerifier?: string;
    state?: string;
    error?: string;
}

export interface IntegrationsApiIntegrationsDiscordUserAuthorizeRequest {
    returnTo?: string;
}

export interface IntegrationsApiIntegrationsDiscordUserCallbackRequest {
    code?: string;
    codeVerifier?: string;
    state?: string;
    error?: string;
}

export interface IntegrationsApiIntegrationsGithubAuthorizeRequest {
    paymentIntentId?: string;
    userSignupType?: UserSignupType;
    returnTo?: string;
}

export interface IntegrationsApiIntegrationsGithubCallbackRequest {
    code?: string;
    codeVerifier?: string;
    state?: string;
    error?: string;
}

export interface IntegrationsApiIntegrationsGithubRepositoryBenefitUserAuthorizeRequest {
    returnTo?: string;
}

export interface IntegrationsApiIntegrationsGithubRepositoryBenefitUserCallbackRequest {
    code?: string;
    codeVerifier?: string;
    state?: string;
    error?: string;
}

export interface IntegrationsApiLookupUserOperationRequest {
    lookupUserRequest: LookupUserRequest;
}

export interface IntegrationsApiRedirectToOrganizationInstallationRequest {
    id: string;
    returnTo?: string;
}

export interface IntegrationsApiStripeConnectRefreshRequest {
    returnPath?: string;
}

export interface IntegrationsApiSynchronizeMembersRequest {
    organizationId: string;
}

/**
 * 
 */
export class IntegrationsApi extends runtime.BaseAPI {

    /**
     * Check Organization Permissions
     */
    async checkOrganizationPermissionsRaw(requestParameters: IntegrationsApiCheckOrganizationPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling checkOrganizationPermissions.');
        }

        if (requestParameters.organizationCheckPermissionsInput === null || requestParameters.organizationCheckPermissionsInput === undefined) {
            throw new runtime.RequiredError('organizationCheckPermissionsInput','Required parameter requestParameters.organizationCheckPermissionsInput was null or undefined when calling checkOrganizationPermissions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/integrations/github/organizations/{id}/check_permissions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.organizationCheckPermissionsInput,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Check Organization Permissions
     */
    async checkOrganizationPermissions(requestParameters: IntegrationsApiCheckOrganizationPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.checkOrganizationPermissionsRaw(requestParameters, initOverrides);
    }

    /**
     * Discord Guild Lookup
     */
    async discordGuildLookupRaw(requestParameters: IntegrationsApiDiscordGuildLookupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DiscordGuild>> {
        if (requestParameters.guildToken === null || requestParameters.guildToken === undefined) {
            throw new runtime.RequiredError('guildToken','Required parameter requestParameters.guildToken was null or undefined when calling discordGuildLookup.');
        }

        const queryParameters: any = {};

        if (requestParameters.guildToken !== undefined) {
            queryParameters['guild_token'] = requestParameters.guildToken;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/integrations/discord/guild/lookup`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Discord Guild Lookup
     */
    async discordGuildLookup(requestParameters: IntegrationsApiDiscordGuildLookupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DiscordGuild> {
        const response = await this.discordGuildLookupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Organization Billing Plan
     */
    async getOrganizationBillingPlanRaw(requestParameters: IntegrationsApiGetOrganizationBillingPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganizationBillingPlan>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOrganizationBillingPlan.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/integrations/github/organizations/{id}/billing`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Organization Billing Plan
     */
    async getOrganizationBillingPlan(requestParameters: IntegrationsApiGetOrganizationBillingPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganizationBillingPlan> {
        const response = await this.getOrganizationBillingPlanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Install
     */
    async installRaw(requestParameters: IntegrationsApiInstallRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Organization>> {
        if (requestParameters.installationCreate === null || requestParameters.installationCreate === undefined) {
            throw new runtime.RequiredError('installationCreate','Required parameter requestParameters.installationCreate was null or undefined when calling install.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/integrations/github/installations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.installationCreate,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Install
     */
    async install(requestParameters: IntegrationsApiInstallRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Organization> {
        const response = await this.installRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Integrations.Discord.Bot Authorize
     */
    async integrationsDiscordBotAuthorizeRaw(requestParameters: IntegrationsApiIntegrationsDiscordBotAuthorizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters.returnTo !== undefined) {
            queryParameters['return_to'] = requestParameters.returnTo;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/integrations/discord/bot/authorize`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Integrations.Discord.Bot Authorize
     */
    async integrationsDiscordBotAuthorize(requestParameters: IntegrationsApiIntegrationsDiscordBotAuthorizeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.integrationsDiscordBotAuthorizeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Integrations.Discord.Bot Callback
     */
    async integrationsDiscordBotCallbackRaw(requestParameters: IntegrationsApiIntegrationsDiscordBotCallbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.codeVerifier !== undefined) {
            queryParameters['code_verifier'] = requestParameters.codeVerifier;
        }

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        if (requestParameters.error !== undefined) {
            queryParameters['error'] = requestParameters.error;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/integrations/discord/bot/callback`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Integrations.Discord.Bot Callback
     */
    async integrationsDiscordBotCallback(requestParameters: IntegrationsApiIntegrationsDiscordBotCallbackRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.integrationsDiscordBotCallbackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Integrations.Discord.User Authorize
     */
    async integrationsDiscordUserAuthorizeRaw(requestParameters: IntegrationsApiIntegrationsDiscordUserAuthorizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters.returnTo !== undefined) {
            queryParameters['return_to'] = requestParameters.returnTo;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/integrations/discord/user/authorize`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Integrations.Discord.User Authorize
     */
    async integrationsDiscordUserAuthorize(requestParameters: IntegrationsApiIntegrationsDiscordUserAuthorizeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.integrationsDiscordUserAuthorizeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Integrations.Discord.User Callback
     */
    async integrationsDiscordUserCallbackRaw(requestParameters: IntegrationsApiIntegrationsDiscordUserCallbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.codeVerifier !== undefined) {
            queryParameters['code_verifier'] = requestParameters.codeVerifier;
        }

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        if (requestParameters.error !== undefined) {
            queryParameters['error'] = requestParameters.error;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/integrations/discord/user/callback`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Integrations.Discord.User Callback
     */
    async integrationsDiscordUserCallback(requestParameters: IntegrationsApiIntegrationsDiscordUserCallbackRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.integrationsDiscordUserCallbackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Integrations.Github.Authorize
     */
    async integrationsGithubAuthorizeRaw(requestParameters: IntegrationsApiIntegrationsGithubAuthorizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters.paymentIntentId !== undefined) {
            queryParameters['payment_intent_id'] = requestParameters.paymentIntentId;
        }

        if (requestParameters.userSignupType !== undefined) {
            queryParameters['user_signup_type'] = requestParameters.userSignupType;
        }

        if (requestParameters.returnTo !== undefined) {
            queryParameters['return_to'] = requestParameters.returnTo;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/integrations/github/authorize`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Integrations.Github.Authorize
     */
    async integrationsGithubAuthorize(requestParameters: IntegrationsApiIntegrationsGithubAuthorizeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.integrationsGithubAuthorizeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Integrations.Github.Callback
     */
    async integrationsGithubCallbackRaw(requestParameters: IntegrationsApiIntegrationsGithubCallbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.codeVerifier !== undefined) {
            queryParameters['code_verifier'] = requestParameters.codeVerifier;
        }

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        if (requestParameters.error !== undefined) {
            queryParameters['error'] = requestParameters.error;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/integrations/github/callback`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Integrations.Github.Callback
     */
    async integrationsGithubCallback(requestParameters: IntegrationsApiIntegrationsGithubCallbackRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.integrationsGithubCallbackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Integrations.Github Repository Benefit.Installation Callback
     */
    async integrationsGithubRepositoryBenefitInstallationCallbackRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/integrations/github_repository_benefit/installation/callback`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Integrations.Github Repository Benefit.Installation Callback
     */
    async integrationsGithubRepositoryBenefitInstallationCallback(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.integrationsGithubRepositoryBenefitInstallationCallbackRaw(initOverrides);
        return await response.value();
    }

    /**
     * Integrations.Github Repository Benefit.Installation Install
     */
    async integrationsGithubRepositoryBenefitInstallationInstallRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/integrations/github_repository_benefit/installation/install`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Integrations.Github Repository Benefit.Installation Install
     */
    async integrationsGithubRepositoryBenefitInstallationInstall(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.integrationsGithubRepositoryBenefitInstallationInstallRaw(initOverrides);
        return await response.value();
    }

    /**
     * Integrations.Github Repository Benefit.User Authorize
     */
    async integrationsGithubRepositoryBenefitUserAuthorizeRaw(requestParameters: IntegrationsApiIntegrationsGithubRepositoryBenefitUserAuthorizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters.returnTo !== undefined) {
            queryParameters['return_to'] = requestParameters.returnTo;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/integrations/github_repository_benefit/user/authorize`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Integrations.Github Repository Benefit.User Authorize
     */
    async integrationsGithubRepositoryBenefitUserAuthorize(requestParameters: IntegrationsApiIntegrationsGithubRepositoryBenefitUserAuthorizeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.integrationsGithubRepositoryBenefitUserAuthorizeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Integrations.Github Repository Benefit.User Callback
     */
    async integrationsGithubRepositoryBenefitUserCallbackRaw(requestParameters: IntegrationsApiIntegrationsGithubRepositoryBenefitUserCallbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.codeVerifier !== undefined) {
            queryParameters['code_verifier'] = requestParameters.codeVerifier;
        }

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        if (requestParameters.error !== undefined) {
            queryParameters['error'] = requestParameters.error;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/integrations/github_repository_benefit/user/callback`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Integrations.Github Repository Benefit.User Callback
     */
    async integrationsGithubRepositoryBenefitUserCallback(requestParameters: IntegrationsApiIntegrationsGithubRepositoryBenefitUserCallbackRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.integrationsGithubRepositoryBenefitUserCallbackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists available repositories for this user
     * Integrations.Github Repository Benefit.User Repositories
     */
    async integrationsGithubRepositoryBenefitUserRepositoriesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GitHubInvitesBenefitRepositories>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/integrations/github_repository_benefit/user/repositories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Lists available repositories for this user
     * Integrations.Github Repository Benefit.User Repositories
     */
    async integrationsGithubRepositoryBenefitUserRepositories(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GitHubInvitesBenefitRepositories> {
        const response = await this.integrationsGithubRepositoryBenefitUserRepositoriesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Lookup User
     */
    async lookupUserRaw(requestParameters: IntegrationsApiLookupUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GithubUser>> {
        if (requestParameters.lookupUserRequest === null || requestParameters.lookupUserRequest === undefined) {
            throw new runtime.RequiredError('lookupUserRequest','Required parameter requestParameters.lookupUserRequest was null or undefined when calling lookupUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/integrations/github/lookup_user`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.lookupUserRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Lookup User
     */
    async lookupUser(requestParameters: IntegrationsApiLookupUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GithubUser> {
        const response = await this.lookupUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Redirect To Organization Installation
     */
    async redirectToOrganizationInstallationRaw(requestParameters: IntegrationsApiRedirectToOrganizationInstallationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling redirectToOrganizationInstallation.');
        }

        const queryParameters: any = {};

        if (requestParameters.returnTo !== undefined) {
            queryParameters['return_to'] = requestParameters.returnTo;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/integrations/github/organizations/{id}/installation`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Redirect To Organization Installation
     */
    async redirectToOrganizationInstallation(requestParameters: IntegrationsApiRedirectToOrganizationInstallationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.redirectToOrganizationInstallationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Stripe Connect Refresh
     */
    async stripeConnectRefreshRaw(requestParameters: IntegrationsApiStripeConnectRefreshRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters.returnPath !== undefined) {
            queryParameters['return_path'] = requestParameters.returnPath;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/integrations/stripe/refresh`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Stripe Connect Refresh
     */
    async stripeConnectRefresh(requestParameters: IntegrationsApiStripeConnectRefreshRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.stripeConnectRefreshRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Synchronize Members
     */
    async synchronizeMembersRaw(requestParameters: IntegrationsApiSynchronizeMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SynchronizeMembersResponse>> {
        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling synchronizeMembers.');
        }

        const queryParameters: any = {};

        if (requestParameters.organizationId !== undefined) {
            queryParameters['organization_id'] = requestParameters.organizationId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/integrations/github/synchronize_members`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Synchronize Members
     */
    async synchronizeMembers(requestParameters: IntegrationsApiSynchronizeMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SynchronizeMembersResponse> {
        const response = await this.synchronizeMembersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Webhook
     */
    async webhookRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebhookResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/integrations/github/webhook`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Webhook
     */
    async webhook(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebhookResponse> {
        const response = await this.webhookRaw(initOverrides);
        return await response.value();
    }

    /**
     * Webhook Connect
     */
    async webhookConnectRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/integrations/stripe/webhook-connect`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Webhook Connect
     */
    async webhookConnect(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.webhookConnectRaw(initOverrides);
        return await response.value();
    }

    /**
     * Webhook
     */
    async webhook_1Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/integrations/stripe/webhook`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Webhook
     */
    async webhook_1(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.webhook_1Raw(initOverrides);
        return await response.value();
    }

}
