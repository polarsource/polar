/* tslint:disable */
/* eslint-disable */
/**
 * Polar API
 *  Welcome to the **Polar API** for [polar.sh](https://polar.sh).  This specification contains both the definitions of the Polar HTTP API and the Webhook API.  #### Authentication  Use a [Personal Access Token](https://polar.sh/settings) and send it in the `Authorization` header on the format `Bearer [YOUR_TOKEN]`.  #### Feedback  If you have any feedback or comments, reach out in the [Polar API-issue](https://github.com/polarsource/polar/issues/834), or reach out on the Polar Discord server.  We\'d love to see what you\'ve built with the API and to get your thoughts on how we can make the API better!  #### Connecting  The Polar API is online at `https://api.polar.sh`. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  OAuth2ClientConfiguration,
  OAuth2ClientConfigurationUpdate,
  ResponseOauth2Oauth2Authorize,
} from '../models/index';

export interface Oauth2ApiOauth2ConfigureDeleteRequest {
    clientId: string;
}

export interface Oauth2ApiOauth2ConfigureGetRequest {
    clientId: string;
}

export interface Oauth2ApiOauth2ConfigurePutRequest {
    clientId: string;
    oAuth2ClientConfigurationUpdate: OAuth2ClientConfigurationUpdate;
}

export interface Oauth2ApiOauth2ConsentRequest {
    action: Oauth2ConsentActionEnum;
}

export interface Oauth2ApiOauth2RegisterRequest {
    oAuth2ClientConfiguration: OAuth2ClientConfiguration;
}

/**
 * 
 */
export class Oauth2Api extends runtime.BaseAPI {

    /**
     * Oauth2.Authorize
     */
    async oauth2AuthorizeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseOauth2Oauth2Authorize>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/oauth2/authorize`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Oauth2.Authorize
     */
    async oauth2Authorize(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseOauth2Oauth2Authorize> {
        const response = await this.oauth2AuthorizeRaw(initOverrides);
        return await response.value();
    }

    /**
     * Oauth2.Configure Delete
     */
    async oauth2ConfigureDeleteRaw(requestParameters: Oauth2ApiOauth2ConfigureDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['clientId'] == null) {
            throw new runtime.RequiredError(
                'clientId',
                'Required parameter "clientId" was null or undefined when calling oauth2ConfigureDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/oauth2/register/{client_id}`.replace(`{${"client_id"}}`, encodeURIComponent(String(requestParameters['clientId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Oauth2.Configure Delete
     */
    async oauth2ConfigureDelete(requestParameters: Oauth2ApiOauth2ConfigureDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.oauth2ConfigureDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Oauth2.Configure Get
     */
    async oauth2ConfigureGetRaw(requestParameters: Oauth2ApiOauth2ConfigureGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['clientId'] == null) {
            throw new runtime.RequiredError(
                'clientId',
                'Required parameter "clientId" was null or undefined when calling oauth2ConfigureGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/oauth2/register/{client_id}`.replace(`{${"client_id"}}`, encodeURIComponent(String(requestParameters['clientId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Oauth2.Configure Get
     */
    async oauth2ConfigureGet(requestParameters: Oauth2ApiOauth2ConfigureGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.oauth2ConfigureGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Oauth2.Configure Put
     */
    async oauth2ConfigurePutRaw(requestParameters: Oauth2ApiOauth2ConfigurePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['clientId'] == null) {
            throw new runtime.RequiredError(
                'clientId',
                'Required parameter "clientId" was null or undefined when calling oauth2ConfigurePut().'
            );
        }

        if (requestParameters['oAuth2ClientConfigurationUpdate'] == null) {
            throw new runtime.RequiredError(
                'oAuth2ClientConfigurationUpdate',
                'Required parameter "oAuth2ClientConfigurationUpdate" was null or undefined when calling oauth2ConfigurePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/oauth2/register/{client_id}`.replace(`{${"client_id"}}`, encodeURIComponent(String(requestParameters['clientId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['oAuth2ClientConfigurationUpdate'],
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Oauth2.Configure Put
     */
    async oauth2ConfigurePut(requestParameters: Oauth2ApiOauth2ConfigurePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.oauth2ConfigurePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Oauth2.Consent
     */
    async oauth2ConsentRaw(requestParameters: Oauth2ApiOauth2ConsentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['action'] == null) {
            throw new runtime.RequiredError(
                'action',
                'Required parameter "action" was null or undefined when calling oauth2Consent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['action'] != null) {
            formParams.append('action', requestParameters['action'] as any);
        }

        const response = await this.request({
            path: `/api/v1/oauth2/consent`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Oauth2.Consent
     */
    async oauth2Consent(requestParameters: Oauth2ApiOauth2ConsentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.oauth2ConsentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Oauth2.Introspect
     */
    async oauth2IntrospectRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/oauth2/introspect`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Oauth2.Introspect
     */
    async oauth2Introspect(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.oauth2IntrospectRaw(initOverrides);
        return await response.value();
    }

    /**
     * Oauth2.Register
     */
    async oauth2RegisterRaw(requestParameters: Oauth2ApiOauth2RegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['oAuth2ClientConfiguration'] == null) {
            throw new runtime.RequiredError(
                'oAuth2ClientConfiguration',
                'Required parameter "oAuth2ClientConfiguration" was null or undefined when calling oauth2Register().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/oauth2/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['oAuth2ClientConfiguration'],
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Oauth2.Register
     */
    async oauth2Register(requestParameters: Oauth2ApiOauth2RegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.oauth2RegisterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Oauth2.Revoke
     */
    async oauth2RevokeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/oauth2/revoke`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Oauth2.Revoke
     */
    async oauth2Revoke(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.oauth2RevokeRaw(initOverrides);
        return await response.value();
    }

    /**
     * Oauth2.Token
     */
    async oauth2TokenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/oauth2/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Oauth2.Token
     */
    async oauth2Token(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.oauth2TokenRaw(initOverrides);
        return await response.value();
    }

    /**
     * Oauth2.Userinfo
     */
    async oauth2UserinfoRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/oauth2/userinfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Oauth2.Userinfo
     */
    async oauth2Userinfo(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.oauth2UserinfoRaw(initOverrides);
        return await response.value();
    }

    /**
     * Oauth2.Userinfo
     */
    async oauth2Userinfo_1Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/oauth2/userinfo`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Oauth2.Userinfo
     */
    async oauth2Userinfo_1(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.oauth2Userinfo_1Raw(initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const Oauth2ConsentActionEnum = {
    ALLOW: 'allow',
    DENY: 'deny'
} as const;
export type Oauth2ConsentActionEnum = typeof Oauth2ConsentActionEnum[keyof typeof Oauth2ConsentActionEnum];
