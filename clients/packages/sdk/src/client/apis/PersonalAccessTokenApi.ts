/* tslint:disable */
/* eslint-disable */
/**
 * Polar API
 * Read the docs at https://docs.polar.sh/api
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  ListResourcePersonalAccessToken,
  PersonalAccessTokenCreate,
  PersonalAccessTokenCreateResponse,
} from '../models/index';

export interface PersonalAccessTokenApiCreatePersonalAccessTokenRequest {
    body: PersonalAccessTokenCreate;
}

export interface PersonalAccessTokenApiDeletePersonalAccessTokenRequest {
    id: string;
}

export interface PersonalAccessTokenApiListPersonalAccessTokensRequest {
    page?: number;
    limit?: number;
}

/**
 * 
 */
export class PersonalAccessTokenApi extends runtime.BaseAPI {

    /**
     * Create Personal Access Token
     */
    async createPersonalAccessTokenRaw(requestParameters: PersonalAccessTokenApiCreatePersonalAccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PersonalAccessTokenCreateResponse>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling createPersonalAccessToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/personal_access_tokens/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create Personal Access Token
     */
    async createPersonalAccessToken(requestParameters: PersonalAccessTokenApiCreatePersonalAccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PersonalAccessTokenCreateResponse> {
        const response = await this.createPersonalAccessTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Personal Access Token
     */
    async deletePersonalAccessTokenRaw(requestParameters: PersonalAccessTokenApiDeletePersonalAccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deletePersonalAccessToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/personal_access_tokens/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Personal Access Token
     */
    async deletePersonalAccessToken(requestParameters: PersonalAccessTokenApiDeletePersonalAccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePersonalAccessTokenRaw(requestParameters, initOverrides);
    }

    /**
     * List personal access tokens.
     * List Personal Access Tokens
     */
    async listPersonalAccessTokensRaw(requestParameters: PersonalAccessTokenApiListPersonalAccessTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResourcePersonalAccessToken>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/personal_access_tokens/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * List personal access tokens.
     * List Personal Access Tokens
     */
    async listPersonalAccessTokens(requestParameters: PersonalAccessTokenApiListPersonalAccessTokensRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResourcePersonalAccessToken> {
        const response = await this.listPersonalAccessTokensRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
