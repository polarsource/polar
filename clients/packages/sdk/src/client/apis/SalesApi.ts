/* tslint:disable */
/* eslint-disable */
/**
 * Polar API
 *  Welcome to the **Polar API** for [polar.sh](https://polar.sh).  This specification contains both the definitions of the Polar HTTP API and the Webhook API.  #### Authentication  Use a [Personal Access Token](https://polar.sh/settings) and send it in the `Authorization` header on the format `Bearer [YOUR_TOKEN]`.  #### Feedback  If you have any feedback or comments, reach out in the [Polar API-issue](https://github.com/polarsource/polar/issues/834), or reach out on the Polar Discord server.  We\'d love to see what you\'ve built with the API and to get your thoughts on how we can make the API better!  #### Connecting  The Polar API is online at `https://api.polar.sh`. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  ListResourceSale,
  ResourceNotFound,
  Sale,
  SaleInvoice,
  SalesStatistics,
} from '../models/index';

export interface SalesApiGetSaleRequest {
    id: string;
}

export interface SalesApiGetSaleInvoiceRequest {
    id: string;
}

export interface SalesApiGetSalesStatisticsRequest {
    organizationId?: string;
    productId?: string;
}

export interface SalesApiListSalesRequest {
    organizationId?: string;
    page?: number;
    limit?: number;
}

/**
 * 
 */
export class SalesApi extends runtime.BaseAPI {

    /**
     * Get a sale by ID.
     * Get Sale
     */
    async getSaleRaw(requestParameters: SalesApiGetSaleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Sale>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getSale().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/sales/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get a sale by ID.
     * Get Sale
     */
    async getSale(requestParameters: SalesApiGetSaleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Sale> {
        const response = await this.getSaleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a sale\'s invoice data.
     * Get Sale Invoice
     */
    async getSaleInvoiceRaw(requestParameters: SalesApiGetSaleInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SaleInvoice>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getSaleInvoice().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/sales/{id}/invoice`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get a sale\'s invoice data.
     * Get Sale Invoice
     */
    async getSaleInvoice(requestParameters: SalesApiGetSaleInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SaleInvoice> {
        const response = await this.getSaleInvoiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get monthly data about your sales and earnings.
     * Get Sales Statistics
     */
    async getSalesStatisticsRaw(requestParameters: SalesApiGetSalesStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SalesStatistics>> {
        const queryParameters: any = {};

        if (requestParameters['organizationId'] != null) {
            queryParameters['organization_id'] = requestParameters['organizationId'];
        }

        if (requestParameters['productId'] != null) {
            queryParameters['product_id'] = requestParameters['productId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/sales/statistics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get monthly data about your sales and earnings.
     * Get Sales Statistics
     */
    async getSalesStatistics(requestParameters: SalesApiGetSalesStatisticsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SalesStatistics> {
        const response = await this.getSalesStatisticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List sales.
     * List Sales
     */
    async listSalesRaw(requestParameters: SalesApiListSalesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResourceSale>> {
        const queryParameters: any = {};

        if (requestParameters['organizationId'] != null) {
            queryParameters['organization_id'] = requestParameters['organizationId'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/sales/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * List sales.
     * List Sales
     */
    async listSales(requestParameters: SalesApiListSalesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResourceSale> {
        const response = await this.listSalesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
