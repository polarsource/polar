/* tslint:disable */
/* eslint-disable */
/**
 * Polar API
 *  Welcome to the **Polar API** for [polar.sh](https://polar.sh).  This specification contains both the definitions of the Polar HTTP API and the Webhook API.  #### Authentication  Use a [Personal Access Token](https://polar.sh/settings) and send it in the `Authorization` header on the format `Bearer [YOUR_TOKEN]`.  #### Feedback  If you have any feedback or comments, reach out in the [Polar API-issue](https://github.com/polarsource/polar/issues/834), or reach out on the Polar Discord server.  We\'d love to see what you\'ve built with the API and to get your thoughts on how we can make the API better!  #### Connecting  The Polar API is online at `https://api.polar.sh`. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FreeSubscriptionCreate,
  HTTPValidationError,
  ListResourceSubscription,
  ListResourceSubscriptionSubscriber,
  ListResourceSubscriptionSummary,
  ListResourceSubscriptionTier,
  Platforms,
  SubscribeSession,
  SubscribeSessionCreate,
  Subscription,
  SubscriptionCreateEmail,
  SubscriptionTier,
  SubscriptionTierBenefitsUpdate,
  SubscriptionTierCreate,
  SubscriptionTierType,
  SubscriptionTierUpdate,
  SubscriptionUpgrade,
  SubscriptionsImported,
  SubscriptionsStatistics,
} from '../models/index';

export interface SubscriptionsApiArchiveSubscriptionTierRequest {
    id: string;
}

export interface SubscriptionsApiCancelSubscriptionRequest {
    id: string;
}

export interface SubscriptionsApiCreateEmailSubscriptionRequest {
    subscriptionCreateEmail: SubscriptionCreateEmail;
    organizationName?: string;
    platform?: Platforms;
}

export interface SubscriptionsApiCreateFreeSubscriptionRequest {
    freeSubscriptionCreate: FreeSubscriptionCreate;
}

export interface SubscriptionsApiCreateSubscribeSessionRequest {
    subscribeSessionCreate: SubscribeSessionCreate;
}

export interface SubscriptionsApiCreateSubscriptionTierRequest {
    subscriptionTierCreate: SubscriptionTierCreate;
}

export interface SubscriptionsApiGetSubscribeSessionRequest {
    id: string;
}

export interface SubscriptionsApiGetSubscriptionsStatisticsRequest {
    startDate: string;
    endDate: string;
    types?: Array<SubscriptionTierType>;
    subscriptionTierId?: string;
    organizationName?: string;
    platform?: Platforms;
}

export interface SubscriptionsApiLookupSubscriptionTierRequest {
    subscriptionTierId: string;
}

export interface SubscriptionsApiSearchSubscribedSubscriptionsRequest {
    type?: SubscriptionTierType;
    subscriptionTierId?: string;
    subscriberUserId?: string;
    subscriberOrganizationId?: string;
    page?: number;
    limit?: number;
    sorting?: Array<string>;
    organizationName?: string;
    platform?: Platforms;
}

export interface SubscriptionsApiSearchSubscriptionTiersRequest {
    includeArchived?: boolean;
    type?: SubscriptionTierType;
    page?: number;
    limit?: number;
    organizationName?: string;
    platform?: Platforms;
}

export interface SubscriptionsApiSearchSubscriptionsRequest {
    type?: SubscriptionTierType;
    subscriptionTierId?: string;
    subscriberUserId?: string;
    subscriberOrganizationId?: string;
    active?: boolean;
    page?: number;
    limit?: number;
    sorting?: Array<string>;
    organizationName?: string;
    platform?: Platforms;
}

export interface SubscriptionsApiSearchSubscriptionsSummaryRequest {
    page?: number;
    limit?: number;
    organizationName?: string;
    platform?: Platforms;
}

export interface SubscriptionsApiSubscriptionsExportRequest {
    organizationName?: string;
    platform?: Platforms;
}

export interface SubscriptionsApiSubscriptionsImportRequest {
    file: Blob;
    organizationName?: string;
    platform?: Platforms;
}

export interface SubscriptionsApiUpdateSubscriptionTierRequest {
    id: string;
    subscriptionTierUpdate: SubscriptionTierUpdate;
}

export interface SubscriptionsApiUpdateSubscriptionTierBenefitsRequest {
    id: string;
    subscriptionTierBenefitsUpdate: SubscriptionTierBenefitsUpdate;
}

export interface SubscriptionsApiUpgradeSubscriptionRequest {
    id: string;
    subscriptionUpgrade: SubscriptionUpgrade;
}

/**
 * 
 */
export class SubscriptionsApi extends runtime.BaseAPI {

    /**
     * Archive Subscription Tier
     */
    async archiveSubscriptionTierRaw(requestParameters: SubscriptionsApiArchiveSubscriptionTierRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionTier>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling archiveSubscriptionTier().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/subscriptions/tiers/{id}/archive`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Archive Subscription Tier
     */
    async archiveSubscriptionTier(requestParameters: SubscriptionsApiArchiveSubscriptionTierRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionTier> {
        const response = await this.archiveSubscriptionTierRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Cancel Subscription
     */
    async cancelSubscriptionRaw(requestParameters: SubscriptionsApiCancelSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Subscription>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling cancelSubscription().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/subscriptions/subscriptions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Cancel Subscription
     */
    async cancelSubscription(requestParameters: SubscriptionsApiCancelSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Subscription> {
        const response = await this.cancelSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Email Subscription
     */
    async createEmailSubscriptionRaw(requestParameters: SubscriptionsApiCreateEmailSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Subscription>> {
        if (requestParameters['subscriptionCreateEmail'] == null) {
            throw new runtime.RequiredError(
                'subscriptionCreateEmail',
                'Required parameter "subscriptionCreateEmail" was null or undefined when calling createEmailSubscription().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['organizationName'] != null) {
            queryParameters['organization_name'] = requestParameters['organizationName'];
        }

        if (requestParameters['platform'] != null) {
            queryParameters['platform'] = requestParameters['platform'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/subscriptions/subscriptions/email`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['subscriptionCreateEmail'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create Email Subscription
     */
    async createEmailSubscription(requestParameters: SubscriptionsApiCreateEmailSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Subscription> {
        const response = await this.createEmailSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Free Subscription
     */
    async createFreeSubscriptionRaw(requestParameters: SubscriptionsApiCreateFreeSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Subscription>> {
        if (requestParameters['freeSubscriptionCreate'] == null) {
            throw new runtime.RequiredError(
                'freeSubscriptionCreate',
                'Required parameter "freeSubscriptionCreate" was null or undefined when calling createFreeSubscription().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/subscriptions/subscriptions/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['freeSubscriptionCreate'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create Free Subscription
     */
    async createFreeSubscription(requestParameters: SubscriptionsApiCreateFreeSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Subscription> {
        const response = await this.createFreeSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Subscribe Session
     */
    async createSubscribeSessionRaw(requestParameters: SubscriptionsApiCreateSubscribeSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscribeSession>> {
        if (requestParameters['subscribeSessionCreate'] == null) {
            throw new runtime.RequiredError(
                'subscribeSessionCreate',
                'Required parameter "subscribeSessionCreate" was null or undefined when calling createSubscribeSession().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/subscriptions/subscribe-sessions/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['subscribeSessionCreate'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create Subscribe Session
     */
    async createSubscribeSession(requestParameters: SubscriptionsApiCreateSubscribeSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscribeSession> {
        const response = await this.createSubscribeSessionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Subscription Tier
     */
    async createSubscriptionTierRaw(requestParameters: SubscriptionsApiCreateSubscriptionTierRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionTier>> {
        if (requestParameters['subscriptionTierCreate'] == null) {
            throw new runtime.RequiredError(
                'subscriptionTierCreate',
                'Required parameter "subscriptionTierCreate" was null or undefined when calling createSubscriptionTier().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/subscriptions/tiers/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['subscriptionTierCreate'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create Subscription Tier
     */
    async createSubscriptionTier(requestParameters: SubscriptionsApiCreateSubscriptionTierRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionTier> {
        const response = await this.createSubscriptionTierRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Subscribe Session
     */
    async getSubscribeSessionRaw(requestParameters: SubscriptionsApiGetSubscribeSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscribeSession>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getSubscribeSession().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/subscriptions/subscribe-sessions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Subscribe Session
     */
    async getSubscribeSession(requestParameters: SubscriptionsApiGetSubscribeSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscribeSession> {
        const response = await this.getSubscribeSessionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Subscriptions Statistics
     */
    async getSubscriptionsStatisticsRaw(requestParameters: SubscriptionsApiGetSubscriptionsStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionsStatistics>> {
        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling getSubscriptionsStatistics().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling getSubscriptionsStatistics().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = requestParameters['endDate'];
        }

        if (requestParameters['types'] != null) {
            queryParameters['types'] = requestParameters['types'];
        }

        if (requestParameters['subscriptionTierId'] != null) {
            queryParameters['subscription_tier_id'] = requestParameters['subscriptionTierId'];
        }

        if (requestParameters['organizationName'] != null) {
            queryParameters['organization_name'] = requestParameters['organizationName'];
        }

        if (requestParameters['platform'] != null) {
            queryParameters['platform'] = requestParameters['platform'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/subscriptions/subscriptions/statistics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Subscriptions Statistics
     */
    async getSubscriptionsStatistics(requestParameters: SubscriptionsApiGetSubscriptionsStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionsStatistics> {
        const response = await this.getSubscriptionsStatisticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lookup Subscription Tier
     */
    async lookupSubscriptionTierRaw(requestParameters: SubscriptionsApiLookupSubscriptionTierRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionTier>> {
        if (requestParameters['subscriptionTierId'] == null) {
            throw new runtime.RequiredError(
                'subscriptionTierId',
                'Required parameter "subscriptionTierId" was null or undefined when calling lookupSubscriptionTier().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['subscriptionTierId'] != null) {
            queryParameters['subscription_tier_id'] = requestParameters['subscriptionTierId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/subscriptions/tiers/lookup`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Lookup Subscription Tier
     */
    async lookupSubscriptionTier(requestParameters: SubscriptionsApiLookupSubscriptionTierRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionTier> {
        const response = await this.lookupSubscriptionTierRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search Subscribed Subscriptions
     */
    async searchSubscribedSubscriptionsRaw(requestParameters: SubscriptionsApiSearchSubscribedSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResourceSubscriptionSubscriber>> {
        const queryParameters: any = {};

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['subscriptionTierId'] != null) {
            queryParameters['subscription_tier_id'] = requestParameters['subscriptionTierId'];
        }

        if (requestParameters['subscriberUserId'] != null) {
            queryParameters['subscriber_user_id'] = requestParameters['subscriberUserId'];
        }

        if (requestParameters['subscriberOrganizationId'] != null) {
            queryParameters['subscriber_organization_id'] = requestParameters['subscriberOrganizationId'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sorting'] != null) {
            queryParameters['sorting'] = requestParameters['sorting'];
        }

        if (requestParameters['organizationName'] != null) {
            queryParameters['organization_name'] = requestParameters['organizationName'];
        }

        if (requestParameters['platform'] != null) {
            queryParameters['platform'] = requestParameters['platform'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/subscriptions/subscriptions/subscribed`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Search Subscribed Subscriptions
     */
    async searchSubscribedSubscriptions(requestParameters: SubscriptionsApiSearchSubscribedSubscriptionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResourceSubscriptionSubscriber> {
        const response = await this.searchSubscribedSubscriptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search Subscription Tiers
     */
    async searchSubscriptionTiersRaw(requestParameters: SubscriptionsApiSearchSubscriptionTiersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResourceSubscriptionTier>> {
        const queryParameters: any = {};

        if (requestParameters['includeArchived'] != null) {
            queryParameters['include_archived'] = requestParameters['includeArchived'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['organizationName'] != null) {
            queryParameters['organization_name'] = requestParameters['organizationName'];
        }

        if (requestParameters['platform'] != null) {
            queryParameters['platform'] = requestParameters['platform'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/subscriptions/tiers/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Search Subscription Tiers
     */
    async searchSubscriptionTiers(requestParameters: SubscriptionsApiSearchSubscriptionTiersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResourceSubscriptionTier> {
        const response = await this.searchSubscriptionTiersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search Subscriptions
     */
    async searchSubscriptionsRaw(requestParameters: SubscriptionsApiSearchSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResourceSubscription>> {
        const queryParameters: any = {};

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['subscriptionTierId'] != null) {
            queryParameters['subscription_tier_id'] = requestParameters['subscriptionTierId'];
        }

        if (requestParameters['subscriberUserId'] != null) {
            queryParameters['subscriber_user_id'] = requestParameters['subscriberUserId'];
        }

        if (requestParameters['subscriberOrganizationId'] != null) {
            queryParameters['subscriber_organization_id'] = requestParameters['subscriberOrganizationId'];
        }

        if (requestParameters['active'] != null) {
            queryParameters['active'] = requestParameters['active'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sorting'] != null) {
            queryParameters['sorting'] = requestParameters['sorting'];
        }

        if (requestParameters['organizationName'] != null) {
            queryParameters['organization_name'] = requestParameters['organizationName'];
        }

        if (requestParameters['platform'] != null) {
            queryParameters['platform'] = requestParameters['platform'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/subscriptions/subscriptions/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Search Subscriptions
     */
    async searchSubscriptions(requestParameters: SubscriptionsApiSearchSubscriptionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResourceSubscription> {
        const response = await this.searchSubscriptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search Subscriptions Summary
     */
    async searchSubscriptionsSummaryRaw(requestParameters: SubscriptionsApiSearchSubscriptionsSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResourceSubscriptionSummary>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['organizationName'] != null) {
            queryParameters['organization_name'] = requestParameters['organizationName'];
        }

        if (requestParameters['platform'] != null) {
            queryParameters['platform'] = requestParameters['platform'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/subscriptions/subscriptions/summary`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Search Subscriptions Summary
     */
    async searchSubscriptionsSummary(requestParameters: SubscriptionsApiSearchSubscriptionsSummaryRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResourceSubscriptionSummary> {
        const response = await this.searchSubscriptionsSummaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Subscriptions Export
     */
    async subscriptionsExportRaw(requestParameters: SubscriptionsApiSubscriptionsExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters['organizationName'] != null) {
            queryParameters['organization_name'] = requestParameters['organizationName'];
        }

        if (requestParameters['platform'] != null) {
            queryParameters['platform'] = requestParameters['platform'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/subscriptions/subscriptions/export`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Subscriptions Export
     */
    async subscriptionsExport(requestParameters: SubscriptionsApiSubscriptionsExportRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.subscriptionsExportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Subscriptions Import
     */
    async subscriptionsImportRaw(requestParameters: SubscriptionsApiSubscriptionsImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionsImported>> {
        if (requestParameters['file'] == null) {
            throw new runtime.RequiredError(
                'file',
                'Required parameter "file" was null or undefined when calling subscriptionsImport().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['organizationName'] != null) {
            queryParameters['organization_name'] = requestParameters['organizationName'];
        }

        if (requestParameters['platform'] != null) {
            queryParameters['platform'] = requestParameters['platform'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/api/v1/subscriptions/subscriptions/import`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Subscriptions Import
     */
    async subscriptionsImport(requestParameters: SubscriptionsApiSubscriptionsImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionsImported> {
        const response = await this.subscriptionsImportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Subscription Tier
     */
    async updateSubscriptionTierRaw(requestParameters: SubscriptionsApiUpdateSubscriptionTierRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionTier>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateSubscriptionTier().'
            );
        }

        if (requestParameters['subscriptionTierUpdate'] == null) {
            throw new runtime.RequiredError(
                'subscriptionTierUpdate',
                'Required parameter "subscriptionTierUpdate" was null or undefined when calling updateSubscriptionTier().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/subscriptions/tiers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['subscriptionTierUpdate'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update Subscription Tier
     */
    async updateSubscriptionTier(requestParameters: SubscriptionsApiUpdateSubscriptionTierRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionTier> {
        const response = await this.updateSubscriptionTierRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Subscription Tier Benefits
     */
    async updateSubscriptionTierBenefitsRaw(requestParameters: SubscriptionsApiUpdateSubscriptionTierBenefitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionTier>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateSubscriptionTierBenefits().'
            );
        }

        if (requestParameters['subscriptionTierBenefitsUpdate'] == null) {
            throw new runtime.RequiredError(
                'subscriptionTierBenefitsUpdate',
                'Required parameter "subscriptionTierBenefitsUpdate" was null or undefined when calling updateSubscriptionTierBenefits().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/subscriptions/tiers/{id}/benefits`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['subscriptionTierBenefitsUpdate'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update Subscription Tier Benefits
     */
    async updateSubscriptionTierBenefits(requestParameters: SubscriptionsApiUpdateSubscriptionTierBenefitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionTier> {
        const response = await this.updateSubscriptionTierBenefitsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upgrade Subscription
     */
    async upgradeSubscriptionRaw(requestParameters: SubscriptionsApiUpgradeSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Subscription>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling upgradeSubscription().'
            );
        }

        if (requestParameters['subscriptionUpgrade'] == null) {
            throw new runtime.RequiredError(
                'subscriptionUpgrade',
                'Required parameter "subscriptionUpgrade" was null or undefined when calling upgradeSubscription().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/subscriptions/subscriptions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['subscriptionUpgrade'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Upgrade Subscription
     */
    async upgradeSubscription(requestParameters: SubscriptionsApiUpgradeSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Subscription> {
        const response = await this.upgradeSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
