/* tslint:disable */
/* eslint-disable */
/**
 * Polar API
 *  Welcome to the **Polar API** for [polar.sh](https://polar.sh).  The Public API is currently a [work in progress](https://github.com/polarsource/polar/issues/834) and is in active development. ðŸš€  #### Authentication  Use a [Personal Access Token](https://polar.sh/settings) and send it in the `Authorization` header on the format `Bearer [YOUR_TOKEN]`.  #### Feedback  If you have any feedback or comments, reach out in the [Polar API-issue](https://github.com/polarsource/polar/issues/834), or reach out on the Polar Discord server.  We\'d love to see what you\'ve built with the API and to get your thoughts on how we can make the API better!  #### Connecting  The Polar API is online at `https://api.polar.sh`. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  Platforms,
  TrackPageView,
  TrackPageViewResponse,
  TrafficStatistics,
} from '../models/index';

export interface TrafficApiStatisticsRequest {
    startDate: string;
    endDate: string;
    interval: StatisticsIntervalEnum;
    articleId?: string;
    groupByArticle?: boolean;
    organizationName?: string;
    platform?: Platforms;
}

export interface TrafficApiTrackPageViewRequest {
    trackPageView: TrackPageView;
}

/**
 * 
 */
export class TrafficApi extends runtime.BaseAPI {

    /**
     * Statistics
     */
    async statisticsRaw(requestParameters: TrafficApiStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrafficStatistics>> {
        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling statistics.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling statistics.');
        }

        if (requestParameters.interval === null || requestParameters.interval === undefined) {
            throw new runtime.RequiredError('interval','Required parameter requestParameters.interval was null or undefined when calling statistics.');
        }

        const queryParameters: any = {};

        if (requestParameters.articleId !== undefined) {
            queryParameters['article_id'] = requestParameters.articleId;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['start_date'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['end_date'] = requestParameters.endDate;
        }

        if (requestParameters.interval !== undefined) {
            queryParameters['interval'] = requestParameters.interval;
        }

        if (requestParameters.groupByArticle !== undefined) {
            queryParameters['group_by_article'] = requestParameters.groupByArticle;
        }

        if (requestParameters.organizationName !== undefined) {
            queryParameters['organization_name'] = requestParameters.organizationName;
        }

        if (requestParameters.platform !== undefined) {
            queryParameters['platform'] = requestParameters.platform;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/traffic/statistics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Statistics
     */
    async statistics(requestParameters: TrafficApiStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrafficStatistics> {
        const response = await this.statisticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Track Page View
     */
    async trackPageViewRaw(requestParameters: TrafficApiTrackPageViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrackPageViewResponse>> {
        if (requestParameters.trackPageView === null || requestParameters.trackPageView === undefined) {
            throw new runtime.RequiredError('trackPageView','Required parameter requestParameters.trackPageView was null or undefined when calling trackPageView.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/traffic/track_page_view`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.trackPageView,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Track Page View
     */
    async trackPageView(requestParameters: TrafficApiTrackPageViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrackPageViewResponse> {
        const response = await this.trackPageViewRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const StatisticsIntervalEnum = {
    MONTH: 'month',
    WEEK: 'week',
    DAY: 'day'
} as const;
export type StatisticsIntervalEnum = typeof StatisticsIntervalEnum[keyof typeof StatisticsIntervalEnum];
