/* tslint:disable */
/* eslint-disable */
/**
 * Polar API
 *  Welcome to the **Polar API** for [polar.sh](https://polar.sh).  This specification contains both the definitions of the Polar HTTP API and the Webhook API.  #### Authentication  Use a [Personal Access Token](https://polar.sh/settings) and send it in the `Authorization` header on the format `Bearer [YOUR_TOKEN]`.  #### Feedback  If you have any feedback or comments, reach out in the [Polar API-issue](https://github.com/polarsource/polar/issues/834), or reach out on the Polar Discord server.  We\'d love to see what you\'ve built with the API and to get your thoughts on how we can make the API better!  #### Connecting  The Polar API is online at `https://api.polar.sh`. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  ListResourceTrafficReferrer,
  Platforms,
  TrackPageView,
  TrackPageViewResponse,
  TrafficStatistics,
} from '../models/index';

export interface TrafficApiReferrersRequest {
    startDate: string;
    endDate: string;
    organizationName: string;
    platform: Platforms;
    page?: number;
    limit?: number;
}

export interface TrafficApiStatisticsRequest {
    startDate: string;
    endDate: string;
    trafficInterval: StatisticsTrafficIntervalEnum;
    articleId?: string;
    groupByArticle?: boolean;
    organizationName?: string;
    platform?: Platforms;
}

export interface TrafficApiTrackPageViewRequest {
    trackPageView: TrackPageView;
}

/**
 * 
 */
export class TrafficApi extends runtime.BaseAPI {

    /**
     * Referrers
     */
    async referrersRaw(requestParameters: TrafficApiReferrersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResourceTrafficReferrer>> {
        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling referrers().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling referrers().'
            );
        }

        if (requestParameters['organizationName'] == null) {
            throw new runtime.RequiredError(
                'organizationName',
                'Required parameter "organizationName" was null or undefined when calling referrers().'
            );
        }

        if (requestParameters['platform'] == null) {
            throw new runtime.RequiredError(
                'platform',
                'Required parameter "platform" was null or undefined when calling referrers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = requestParameters['endDate'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['organizationName'] != null) {
            queryParameters['organization_name'] = requestParameters['organizationName'];
        }

        if (requestParameters['platform'] != null) {
            queryParameters['platform'] = requestParameters['platform'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/traffic/referrers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Referrers
     */
    async referrers(requestParameters: TrafficApiReferrersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResourceTrafficReferrer> {
        const response = await this.referrersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Statistics
     */
    async statisticsRaw(requestParameters: TrafficApiStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrafficStatistics>> {
        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling statistics().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling statistics().'
            );
        }

        if (requestParameters['trafficInterval'] == null) {
            throw new runtime.RequiredError(
                'trafficInterval',
                'Required parameter "trafficInterval" was null or undefined when calling statistics().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['articleId'] != null) {
            queryParameters['article_id'] = requestParameters['articleId'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = requestParameters['endDate'];
        }

        if (requestParameters['trafficInterval'] != null) {
            queryParameters['trafficInterval'] = requestParameters['trafficInterval'];
        }

        if (requestParameters['groupByArticle'] != null) {
            queryParameters['group_by_article'] = requestParameters['groupByArticle'];
        }

        if (requestParameters['organizationName'] != null) {
            queryParameters['organization_name'] = requestParameters['organizationName'];
        }

        if (requestParameters['platform'] != null) {
            queryParameters['platform'] = requestParameters['platform'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/traffic/statistics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Statistics
     */
    async statistics(requestParameters: TrafficApiStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrafficStatistics> {
        const response = await this.statisticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Track Page View
     */
    async trackPageViewRaw(requestParameters: TrafficApiTrackPageViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrackPageViewResponse>> {
        if (requestParameters['trackPageView'] == null) {
            throw new runtime.RequiredError(
                'trackPageView',
                'Required parameter "trackPageView" was null or undefined when calling trackPageView().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/traffic/track_page_view`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['trackPageView'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Track Page View
     */
    async trackPageView(requestParameters: TrafficApiTrackPageViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrackPageViewResponse> {
        const response = await this.trackPageViewRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const StatisticsTrafficIntervalEnum = {
    MONTH: 'month',
    WEEK: 'week',
    DAY: 'day'
} as const;
export type StatisticsTrafficIntervalEnum = typeof StatisticsTrafficIntervalEnum[keyof typeof StatisticsTrafficIntervalEnum];
