/* tslint:disable */
/* eslint-disable */
/**
 * Polar API
 *  Welcome to the **Polar API** for [polar.sh](https://polar.sh).  The Public API is currently a [work in progress](https://github.com/polarsource/polar/issues/834) and is in active development. ðŸš€  #### Authentication  Use a [Personal Access Token](https://polar.sh/settings) and send it in the `Authorization` header on the format `Bearer [YOUR_TOKEN]`.  #### Feedback  If you have any feedback or comments, reach out in the [Polar API-issue](https://github.com/polarsource/polar/issues/834), or reach out on the Polar Discord server.  We\'d love to see what you\'ve built with the API and to get your thoughts on how we can make the API better!  #### Connecting  The Polar API is online at `https://api.polar.sh`. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  ListResourceTransaction,
  PayoutCreate,
  PayoutEstimate,
  Transaction,
  TransactionDetails,
  TransactionType,
  TransactionsSummary,
} from '../models/index';

export interface TransactionsApiCreatePayoutRequest {
    payoutCreate: PayoutCreate;
}

export interface TransactionsApiGetPayoutCsvRequest {
    id: string;
}

export interface TransactionsApiGetPayoutEstimateRequest {
    accountId: string;
}

export interface TransactionsApiGetSummaryRequest {
    accountId: string;
}

export interface TransactionsApiLookupTransactionRequest {
    transactionId: string;
}

export interface TransactionsApiSearchTransactionsRequest {
    type?: TransactionType;
    accountId?: string;
    paymentUserId?: string;
    paymentOrganizationId?: string;
    excludePlatformFees?: boolean;
    page?: number;
    limit?: number;
    sorting?: Array<string>;
}

/**
 * 
 */
export class TransactionsApi extends runtime.BaseAPI {

    /**
     * Create Payout
     */
    async createPayoutRaw(requestParameters: TransactionsApiCreatePayoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Transaction>> {
        if (requestParameters['payoutCreate'] == null) {
            throw new runtime.RequiredError(
                'payoutCreate',
                'Required parameter "payoutCreate" was null or undefined when calling createPayout().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/transactions/payouts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['payoutCreate'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create Payout
     */
    async createPayout(requestParameters: TransactionsApiCreatePayoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Transaction> {
        const response = await this.createPayoutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Payout Csv
     */
    async getPayoutCsvRaw(requestParameters: TransactionsApiGetPayoutCsvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getPayoutCsv().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/transactions/payouts/{id}/csv`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get Payout Csv
     */
    async getPayoutCsv(requestParameters: TransactionsApiGetPayoutCsvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getPayoutCsvRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Payout Estimate
     */
    async getPayoutEstimateRaw(requestParameters: TransactionsApiGetPayoutEstimateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PayoutEstimate>> {
        if (requestParameters['accountId'] == null) {
            throw new runtime.RequiredError(
                'accountId',
                'Required parameter "accountId" was null or undefined when calling getPayoutEstimate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['accountId'] != null) {
            queryParameters['account_id'] = requestParameters['accountId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/transactions/payouts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Payout Estimate
     */
    async getPayoutEstimate(requestParameters: TransactionsApiGetPayoutEstimateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PayoutEstimate> {
        const response = await this.getPayoutEstimateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Summary
     */
    async getSummaryRaw(requestParameters: TransactionsApiGetSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionsSummary>> {
        if (requestParameters['accountId'] == null) {
            throw new runtime.RequiredError(
                'accountId',
                'Required parameter "accountId" was null or undefined when calling getSummary().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['accountId'] != null) {
            queryParameters['account_id'] = requestParameters['accountId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/transactions/summary`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Summary
     */
    async getSummary(requestParameters: TransactionsApiGetSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionsSummary> {
        const response = await this.getSummaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lookup Transaction
     */
    async lookupTransactionRaw(requestParameters: TransactionsApiLookupTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionDetails>> {
        if (requestParameters['transactionId'] == null) {
            throw new runtime.RequiredError(
                'transactionId',
                'Required parameter "transactionId" was null or undefined when calling lookupTransaction().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['transactionId'] != null) {
            queryParameters['transaction_id'] = requestParameters['transactionId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/transactions/lookup`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Lookup Transaction
     */
    async lookupTransaction(requestParameters: TransactionsApiLookupTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionDetails> {
        const response = await this.lookupTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search Transactions
     */
    async searchTransactionsRaw(requestParameters: TransactionsApiSearchTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResourceTransaction>> {
        const queryParameters: any = {};

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['accountId'] != null) {
            queryParameters['account_id'] = requestParameters['accountId'];
        }

        if (requestParameters['paymentUserId'] != null) {
            queryParameters['payment_user_id'] = requestParameters['paymentUserId'];
        }

        if (requestParameters['paymentOrganizationId'] != null) {
            queryParameters['payment_organization_id'] = requestParameters['paymentOrganizationId'];
        }

        if (requestParameters['excludePlatformFees'] != null) {
            queryParameters['exclude_platform_fees'] = requestParameters['excludePlatformFees'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sorting'] != null) {
            queryParameters['sorting'] = requestParameters['sorting'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/transactions/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Search Transactions
     */
    async searchTransactions(requestParameters: TransactionsApiSearchTransactionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResourceTransaction> {
        const response = await this.searchTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
