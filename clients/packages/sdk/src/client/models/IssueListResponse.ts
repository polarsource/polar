/* tslint:disable */
/* eslint-disable */
/**
 * Polar API
 *  Welcome to the **Polar API** for [polar.sh](https://polar.sh).  The Public API is currently a [work in progress](https://github.com/polarsource/polar/issues/834) and is in active development. ðŸš€  #### Authentication  Use a [Personal Access Token](https://polar.sh/settings) and send it in the `Authorization` header on the format `Bearer [YOUR_TOKEN]`.  #### Feedback  If you have any feedback or comments, reach out in the [Polar API-issue](https://github.com/polarsource/polar/issues/834), or reach out on the Polar Discord server.  We\'d love to see what you\'ve built with the API and to get your thoughts on how we can make the API better!  #### Connecting  The Polar API is online at `https://api.polar.sh`. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EntryAny } from './EntryAny';
import {
    EntryAnyFromJSON,
    EntryAnyFromJSONTyped,
    EntryAnyToJSON,
} from './EntryAny';
import type { EntryIssue } from './EntryIssue';
import {
    EntryIssueFromJSON,
    EntryIssueFromJSONTyped,
    EntryIssueToJSON,
} from './EntryIssue';
import type { PaginationResponse } from './PaginationResponse';
import {
    PaginationResponseFromJSON,
    PaginationResponseFromJSONTyped,
    PaginationResponseToJSON,
} from './PaginationResponse';

/**
 * 
 * @export
 * @interface IssueListResponse
 */
export interface IssueListResponse {
    /**
     * 
     * @type {Array<EntryIssue>}
     * @memberof IssueListResponse
     */
    data: Array<EntryIssue>;
    /**
     * 
     * @type {Array<EntryAny>}
     * @memberof IssueListResponse
     */
    included?: Array<EntryAny>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof IssueListResponse
     */
    pagination: PaginationResponse;
}

/**
 * Check if a given object implements the IssueListResponse interface.
 */
export function instanceOfIssueListResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "data" in value;
    isInstance = isInstance && "pagination" in value;

    return isInstance;
}

export function IssueListResponseFromJSON(json: any): IssueListResponse {
    return IssueListResponseFromJSONTyped(json, false);
}

export function IssueListResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): IssueListResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'data': ((json['data'] as Array<any>).map(EntryIssueFromJSON)),
        'included': !exists(json, 'included') ? undefined : ((json['included'] as Array<any>).map(EntryAnyFromJSON)),
        'pagination': PaginationResponseFromJSON(json['pagination']),
    };
}

export function IssueListResponseToJSON(value?: IssueListResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'data': ((value.data as Array<any>).map(EntryIssueToJSON)),
        'included': value.included === undefined ? undefined : ((value.included as Array<any>).map(EntryAnyToJSON)),
        'pagination': PaginationResponseToJSON(value.pagination),
    };
}

