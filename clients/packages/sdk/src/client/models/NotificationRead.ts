/* tslint:disable */
/* eslint-disable */
/**
 * Polar API
 *  Welcome to the **Polar API** for [polar.sh](https://polar.sh).  The Public API is currently a [work in progress](https://github.com/polarsource/polar/issues/834) and is in active development. ðŸš€  #### Authentication  Use a [Personal Access Token](https://polar.sh/settings) and send it in the `Authorization` header on the format `Bearer [YOUR_TOKEN]`.  #### Feedback  If you have any feedback or comments, reach out in the [Polar API-issue](https://github.com/polarsource/polar/issues/834), or reach out on the Polar Discord server.  We\'d love to see what you\'ve built with the API and to get your thoughts on how we can make the API better!  #### Connecting  The Polar API is online at `https://api.polar.sh`. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MaintainerPledgeConfirmationPendingNotification } from './MaintainerPledgeConfirmationPendingNotification';
import {
    MaintainerPledgeConfirmationPendingNotificationFromJSON,
    MaintainerPledgeConfirmationPendingNotificationFromJSONTyped,
    MaintainerPledgeConfirmationPendingNotificationToJSON,
} from './MaintainerPledgeConfirmationPendingNotification';
import type { MaintainerPledgeCreatedNotification } from './MaintainerPledgeCreatedNotification';
import {
    MaintainerPledgeCreatedNotificationFromJSON,
    MaintainerPledgeCreatedNotificationFromJSONTyped,
    MaintainerPledgeCreatedNotificationToJSON,
} from './MaintainerPledgeCreatedNotification';
import type { MaintainerPledgePaidNotification } from './MaintainerPledgePaidNotification';
import {
    MaintainerPledgePaidNotificationFromJSON,
    MaintainerPledgePaidNotificationFromJSONTyped,
    MaintainerPledgePaidNotificationToJSON,
} from './MaintainerPledgePaidNotification';
import type { MaintainerPledgePendingNotification } from './MaintainerPledgePendingNotification';
import {
    MaintainerPledgePendingNotificationFromJSON,
    MaintainerPledgePendingNotificationFromJSONTyped,
    MaintainerPledgePendingNotificationToJSON,
} from './MaintainerPledgePendingNotification';
import type { MaintainerPledgedIssueConfirmationPendingNotification } from './MaintainerPledgedIssueConfirmationPendingNotification';
import {
    MaintainerPledgedIssueConfirmationPendingNotificationFromJSON,
    MaintainerPledgedIssueConfirmationPendingNotificationFromJSONTyped,
    MaintainerPledgedIssueConfirmationPendingNotificationToJSON,
} from './MaintainerPledgedIssueConfirmationPendingNotification';
import type { MaintainerPledgedIssuePendingNotification } from './MaintainerPledgedIssuePendingNotification';
import {
    MaintainerPledgedIssuePendingNotificationFromJSON,
    MaintainerPledgedIssuePendingNotificationFromJSONTyped,
    MaintainerPledgedIssuePendingNotificationToJSON,
} from './MaintainerPledgedIssuePendingNotification';
import type { NotificationType } from './NotificationType';
import {
    NotificationTypeFromJSON,
    NotificationTypeFromJSONTyped,
    NotificationTypeToJSON,
} from './NotificationType';
import type { Payload1 } from './Payload1';
import {
    Payload1FromJSON,
    Payload1FromJSONTyped,
    Payload1ToJSON,
} from './Payload1';
import type { PledgerPledgePendingNotification } from './PledgerPledgePendingNotification';
import {
    PledgerPledgePendingNotificationFromJSON,
    PledgerPledgePendingNotificationFromJSONTyped,
    PledgerPledgePendingNotificationToJSON,
} from './PledgerPledgePendingNotification';
import type { RewardPaidNotification } from './RewardPaidNotification';
import {
    RewardPaidNotificationFromJSON,
    RewardPaidNotificationFromJSONTyped,
    RewardPaidNotificationToJSON,
} from './RewardPaidNotification';

/**
 * 
 * @export
 * @interface NotificationRead
 */
export interface NotificationRead {
    /**
     * 
     * @type {string}
     * @memberof NotificationRead
     */
    id: string;
    /**
     * 
     * @type {NotificationType}
     * @memberof NotificationRead
     */
    type: NotificationType;
    /**
     * 
     * @type {Date}
     * @memberof NotificationRead
     */
    created_at: Date;
    /**
     * 
     * @type {Payload1}
     * @memberof NotificationRead
     * @deprecated
     */
    payload: Payload1;
    /**
     * 
     * @type {MaintainerPledgePaidNotification}
     * @memberof NotificationRead
     */
    maintainer_pledge_paid?: MaintainerPledgePaidNotification;
    /**
     * 
     * @type {MaintainerPledgeConfirmationPendingNotification}
     * @memberof NotificationRead
     */
    maintainer_pledge_confirmation_pending?: MaintainerPledgeConfirmationPendingNotification;
    /**
     * 
     * @type {MaintainerPledgePendingNotification}
     * @memberof NotificationRead
     */
    maintainer_pledge_pending?: MaintainerPledgePendingNotification;
    /**
     * 
     * @type {MaintainerPledgeCreatedNotification}
     * @memberof NotificationRead
     */
    maintainer_pledge_created?: MaintainerPledgeCreatedNotification;
    /**
     * 
     * @type {PledgerPledgePendingNotification}
     * @memberof NotificationRead
     */
    pledger_pledge_pending?: PledgerPledgePendingNotification;
    /**
     * 
     * @type {RewardPaidNotification}
     * @memberof NotificationRead
     */
    reward_paid?: RewardPaidNotification;
    /**
     * 
     * @type {MaintainerPledgedIssueConfirmationPendingNotification}
     * @memberof NotificationRead
     */
    maintainer_pledged_issue_confirmation_pending?: MaintainerPledgedIssueConfirmationPendingNotification;
    /**
     * 
     * @type {MaintainerPledgedIssuePendingNotification}
     * @memberof NotificationRead
     */
    maintainer_pledged_issue_pending?: MaintainerPledgedIssuePendingNotification;
}

/**
 * Check if a given object implements the NotificationRead interface.
 */
export function instanceOfNotificationRead(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "created_at" in value;
    isInstance = isInstance && "payload" in value;

    return isInstance;
}

export function NotificationReadFromJSON(json: any): NotificationRead {
    return NotificationReadFromJSONTyped(json, false);
}

export function NotificationReadFromJSONTyped(json: any, ignoreDiscriminator: boolean): NotificationRead {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'type': NotificationTypeFromJSON(json['type']),
        'created_at': (new Date(json['created_at'])),
        'payload': Payload1FromJSON(json['payload']),
        'maintainer_pledge_paid': !exists(json, 'maintainerPledgePaid') ? undefined : MaintainerPledgePaidNotificationFromJSON(json['maintainerPledgePaid']),
        'maintainer_pledge_confirmation_pending': !exists(json, 'maintainerPledgeConfirmationPending') ? undefined : MaintainerPledgeConfirmationPendingNotificationFromJSON(json['maintainerPledgeConfirmationPending']),
        'maintainer_pledge_pending': !exists(json, 'maintainerPledgePending') ? undefined : MaintainerPledgePendingNotificationFromJSON(json['maintainerPledgePending']),
        'maintainer_pledge_created': !exists(json, 'maintainerPledgeCreated') ? undefined : MaintainerPledgeCreatedNotificationFromJSON(json['maintainerPledgeCreated']),
        'pledger_pledge_pending': !exists(json, 'pledgerPledgePending') ? undefined : PledgerPledgePendingNotificationFromJSON(json['pledgerPledgePending']),
        'reward_paid': !exists(json, 'rewardPaid') ? undefined : RewardPaidNotificationFromJSON(json['rewardPaid']),
        'maintainer_pledged_issue_confirmation_pending': !exists(json, 'maintainerPledgedIssueConfirmationPending') ? undefined : MaintainerPledgedIssueConfirmationPendingNotificationFromJSON(json['maintainerPledgedIssueConfirmationPending']),
        'maintainer_pledged_issue_pending': !exists(json, 'maintainerPledgedIssuePending') ? undefined : MaintainerPledgedIssuePendingNotificationFromJSON(json['maintainerPledgedIssuePending']),
    };
}

export function NotificationReadToJSON(value?: NotificationRead | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'type': NotificationTypeToJSON(value.type),
        'created_at': (value.created_at.toISOString()),
        'payload': Payload1ToJSON(value.payload),
        'maintainerPledgePaid': MaintainerPledgePaidNotificationToJSON(value.maintainer_pledge_paid),
        'maintainerPledgeConfirmationPending': MaintainerPledgeConfirmationPendingNotificationToJSON(value.maintainer_pledge_confirmation_pending),
        'maintainerPledgePending': MaintainerPledgePendingNotificationToJSON(value.maintainer_pledge_pending),
        'maintainerPledgeCreated': MaintainerPledgeCreatedNotificationToJSON(value.maintainer_pledge_created),
        'pledgerPledgePending': PledgerPledgePendingNotificationToJSON(value.pledger_pledge_pending),
        'rewardPaid': RewardPaidNotificationToJSON(value.reward_paid),
        'maintainerPledgedIssueConfirmationPending': MaintainerPledgedIssueConfirmationPendingNotificationToJSON(value.maintainer_pledged_issue_confirmation_pending),
        'maintainerPledgedIssuePending': MaintainerPledgedIssuePendingNotificationToJSON(value.maintainer_pledged_issue_pending),
    };
}

