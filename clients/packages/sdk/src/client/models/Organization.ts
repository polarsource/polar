/* tslint:disable */
/* eslint-disable */
/**
 * Polar API
 *  Welcome to the **Polar API** for [polar.sh](https://polar.sh).  The Public API is currently a [work in progress](https://github.com/polarsource/polar/issues/834) and is in active development. ðŸš€  #### Authentication  Use a [Personal Access Token](https://polar.sh/settings) and send it in the `Authorization` header on the format `Bearer [YOUR_TOKEN]`.  #### Feedback  If you have any feedback or comments, reach out in the [Polar API-issue](https://github.com/polarsource/polar/issues/834), or reach out on the Polar Discord server.  We\'d love to see what you\'ve built with the API and to get your thoughts on how we can make the API better!  #### Connecting  The Polar API is online at `https://api.polar.sh`. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Platforms } from './Platforms';
import {
    PlatformsFromJSON,
    PlatformsFromJSONTyped,
    PlatformsToJSON,
} from './Platforms';

/**
 * 
 * @export
 * @interface Organization
 */
export interface Organization {
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    id: string;
    /**
     * 
     * @type {Platforms}
     * @memberof Organization
     */
    platform: Platforms;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    avatar_url: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    bio?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    pretty_name?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    company?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    blog?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    location?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    twitter_username?: string;
    /**
     * 
     * @type {number}
     * @memberof Organization
     */
    pledge_minimum_amount: number;
    /**
     * 
     * @type {boolean}
     * @memberof Organization
     */
    pledge_badge_show_amount: boolean;
}

/**
 * Check if a given object implements the Organization interface.
 */
export function instanceOfOrganization(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "platform" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "avatar_url" in value;
    isInstance = isInstance && "pledge_minimum_amount" in value;
    isInstance = isInstance && "pledge_badge_show_amount" in value;

    return isInstance;
}

export function OrganizationFromJSON(json: any): Organization {
    return OrganizationFromJSONTyped(json, false);
}

export function OrganizationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Organization {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'platform': PlatformsFromJSON(json['platform']),
        'name': json['name'],
        'avatar_url': json['avatar_url'],
        'bio': !exists(json, 'bio') ? undefined : json['bio'],
        'pretty_name': !exists(json, 'pretty_name') ? undefined : json['pretty_name'],
        'company': !exists(json, 'company') ? undefined : json['company'],
        'blog': !exists(json, 'blog') ? undefined : json['blog'],
        'location': !exists(json, 'location') ? undefined : json['location'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'twitter_username': !exists(json, 'twitter_username') ? undefined : json['twitter_username'],
        'pledge_minimum_amount': json['pledge_minimum_amount'],
        'pledge_badge_show_amount': json['pledge_badge_show_amount'],
    };
}

export function OrganizationToJSON(value?: Organization | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'platform': PlatformsToJSON(value.platform),
        'name': value.name,
        'avatar_url': value.avatar_url,
        'bio': value.bio,
        'pretty_name': value.pretty_name,
        'company': value.company,
        'blog': value.blog,
        'location': value.location,
        'email': value.email,
        'twitter_username': value.twitter_username,
        'pledge_minimum_amount': value.pledge_minimum_amount,
        'pledge_badge_show_amount': value.pledge_badge_show_amount,
    };
}

