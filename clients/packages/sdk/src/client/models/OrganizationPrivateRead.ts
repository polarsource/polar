/* tslint:disable */
/* eslint-disable */
/**
 * Polar API
 *  Welcome to the **Polar API** for [polar.sh](https://polar.sh).  The Public API is currently a [work in progress](https://github.com/polarsource/polar/issues/834) and is in active development. ðŸš€  #### Authentication  Use a [Personal Access Token](https://polar.sh/settings) and send it in the `Authorization` header on the format `Bearer [YOUR_TOKEN]`.  #### Feedback  If you have any feedback or comments, reach out in the [Polar API-issue](https://github.com/polarsource/polar/issues/834), or reach out on the Polar Discord server.  We\'d love to see what you\'ve built with the API and to get your thoughts on how we can make the API better!  #### Connecting  The Polar API is online at `https://api.polar.sh`. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Platforms } from './Platforms';
import {
    PlatformsFromJSON,
    PlatformsFromJSONTyped,
    PlatformsToJSON,
} from './Platforms';
import type { RepositoryLegacyRead } from './RepositoryLegacyRead';
import {
    RepositoryLegacyReadFromJSON,
    RepositoryLegacyReadFromJSONTyped,
    RepositoryLegacyReadToJSON,
} from './RepositoryLegacyRead';

/**
 * 
 * @export
 * @interface OrganizationPrivateRead
 */
export interface OrganizationPrivateRead {
    /**
     * 
     * @type {boolean}
     * @memberof OrganizationPrivateRead
     */
    pledge_badge_show_amount?: boolean;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPrivateRead
     */
    billing_email?: string;
    /**
     * 
     * @type {Platforms}
     * @memberof OrganizationPrivateRead
     */
    platform: Platforms;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPrivateRead
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPrivateRead
     */
    avatar_url: string;
    /**
     * 
     * @type {number}
     * @memberof OrganizationPrivateRead
     */
    external_id: number;
    /**
     * 
     * @type {boolean}
     * @memberof OrganizationPrivateRead
     */
    is_personal: boolean;
    /**
     * 
     * @type {number}
     * @memberof OrganizationPrivateRead
     */
    installation_id?: number;
    /**
     * 
     * @type {Date}
     * @memberof OrganizationPrivateRead
     */
    installation_created_at?: Date;
    /**
     * 
     * @type {Date}
     * @memberof OrganizationPrivateRead
     */
    installation_updated_at?: Date;
    /**
     * 
     * @type {Date}
     * @memberof OrganizationPrivateRead
     */
    installation_suspended_at?: Date;
    /**
     * 
     * @type {Date}
     * @memberof OrganizationPrivateRead
     */
    onboarded_at?: Date;
    /**
     * 
     * @type {number}
     * @memberof OrganizationPrivateRead
     */
    pledge_minimum_amount: number;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPrivateRead
     */
    default_badge_custom_content?: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPrivateRead
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof OrganizationPrivateRead
     */
    created_at: Date;
    /**
     * 
     * @type {Date}
     * @memberof OrganizationPrivateRead
     */
    modified_at?: Date;
    /**
     * 
     * @type {Array<RepositoryLegacyRead>}
     * @memberof OrganizationPrivateRead
     */
    repositories?: Array<RepositoryLegacyRead>;
}

/**
 * Check if a given object implements the OrganizationPrivateRead interface.
 */
export function instanceOfOrganizationPrivateRead(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "platform" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "avatar_url" in value;
    isInstance = isInstance && "external_id" in value;
    isInstance = isInstance && "is_personal" in value;
    isInstance = isInstance && "pledge_minimum_amount" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "created_at" in value;

    return isInstance;
}

export function OrganizationPrivateReadFromJSON(json: any): OrganizationPrivateRead {
    return OrganizationPrivateReadFromJSONTyped(json, false);
}

export function OrganizationPrivateReadFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrganizationPrivateRead {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'pledge_badge_show_amount': !exists(json, 'pledge_badge_show_amount') ? undefined : json['pledge_badge_show_amount'],
        'billing_email': !exists(json, 'billing_email') ? undefined : json['billing_email'],
        'platform': PlatformsFromJSON(json['platform']),
        'name': json['name'],
        'avatar_url': json['avatar_url'],
        'external_id': json['external_id'],
        'is_personal': json['is_personal'],
        'installation_id': !exists(json, 'installation_id') ? undefined : json['installation_id'],
        'installation_created_at': !exists(json, 'installation_created_at') ? undefined : (new Date(json['installation_created_at'])),
        'installation_updated_at': !exists(json, 'installation_updated_at') ? undefined : (new Date(json['installation_updated_at'])),
        'installation_suspended_at': !exists(json, 'installation_suspended_at') ? undefined : (new Date(json['installation_suspended_at'])),
        'onboarded_at': !exists(json, 'onboarded_at') ? undefined : (new Date(json['onboarded_at'])),
        'pledge_minimum_amount': json['pledge_minimum_amount'],
        'default_badge_custom_content': !exists(json, 'default_badge_custom_content') ? undefined : json['default_badge_custom_content'],
        'id': json['id'],
        'created_at': (new Date(json['created_at'])),
        'modified_at': !exists(json, 'modified_at') ? undefined : (new Date(json['modified_at'])),
        'repositories': !exists(json, 'repositories') ? undefined : ((json['repositories'] as Array<any>).map(RepositoryLegacyReadFromJSON)),
    };
}

export function OrganizationPrivateReadToJSON(value?: OrganizationPrivateRead | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'pledge_badge_show_amount': value.pledge_badge_show_amount,
        'billing_email': value.billing_email,
        'platform': PlatformsToJSON(value.platform),
        'name': value.name,
        'avatar_url': value.avatar_url,
        'external_id': value.external_id,
        'is_personal': value.is_personal,
        'installation_id': value.installation_id,
        'installation_created_at': value.installation_created_at === undefined ? undefined : (value.installation_created_at.toISOString()),
        'installation_updated_at': value.installation_updated_at === undefined ? undefined : (value.installation_updated_at.toISOString()),
        'installation_suspended_at': value.installation_suspended_at === undefined ? undefined : (value.installation_suspended_at.toISOString()),
        'onboarded_at': value.onboarded_at === undefined ? undefined : (value.onboarded_at.toISOString()),
        'pledge_minimum_amount': value.pledge_minimum_amount,
        'default_badge_custom_content': value.default_badge_custom_content,
        'id': value.id,
        'created_at': (value.created_at.toISOString()),
        'modified_at': value.modified_at === undefined ? undefined : (value.modified_at.toISOString()),
        'repositories': value.repositories === undefined ? undefined : ((value.repositories as Array<any>).map(RepositoryLegacyReadToJSON)),
    };
}

