/* tslint:disable */
/* eslint-disable */
/**
 * Polar API
 *  Welcome to the **Polar API** for [polar.sh](https://polar.sh).  The Public API is currently a [work in progress](https://github.com/polarsource/polar/issues/834) and is in active development. ðŸš€  #### Authentication  Use a [Personal Access Token](https://polar.sh/settings) and send it in the `Authorization` header on the format `Bearer [YOUR_TOKEN]`.  #### Feedback  If you have any feedback or comments, reach out in the [Polar API-issue](https://github.com/polarsource/polar/issues/834), or reach out on the Polar Discord server.  We\'d love to see what you\'ve built with the API and to get your thoughts on how we can make the API better!  #### Connecting  The Polar API is online at `https://api.polar.sh`. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CurrencyAmount } from './CurrencyAmount';
import {
    CurrencyAmountFromJSON,
    CurrencyAmountFromJSONTyped,
    CurrencyAmountToJSON,
} from './CurrencyAmount';
import type { Issue } from './Issue';
import {
    IssueFromJSON,
    IssueFromJSONTyped,
    IssueToJSON,
} from './Issue';
import type { PledgeState } from './PledgeState';
import {
    PledgeStateFromJSON,
    PledgeStateFromJSONTyped,
    PledgeStateToJSON,
} from './PledgeState';
import type { PledgeType } from './PledgeType';
import {
    PledgeTypeFromJSON,
    PledgeTypeFromJSONTyped,
    PledgeTypeToJSON,
} from './PledgeType';
import type { Pledger } from './Pledger';
import {
    PledgerFromJSON,
    PledgerFromJSONTyped,
    PledgerToJSON,
} from './Pledger';

/**
 * 
 * @export
 * @interface Pledge
 */
export interface Pledge {
    /**
     * Pledge ID
     * @type {string}
     * @memberof Pledge
     */
    id: string;
    /**
     * When the pledge was created
     * @type {Date}
     * @memberof Pledge
     */
    created_at: Date;
    /**
     * 
     * @type {CurrencyAmount}
     * @memberof Pledge
     */
    amount: CurrencyAmount;
    /**
     * 
     * @type {PledgeState}
     * @memberof Pledge
     */
    state: PledgeState;
    /**
     * 
     * @type {PledgeType}
     * @memberof Pledge
     */
    type: PledgeType;
    /**
     * If and when the pledge was refunded to the pledger
     * @type {Date}
     * @memberof Pledge
     */
    refunded_at?: Date;
    /**
     * When the payout is scheduled to be made to the maintainers behind the issue. Disputes must be made before this date.
     * @type {Date}
     * @memberof Pledge
     */
    scheduled_payout_at?: Date;
    /**
     * 
     * @type {Issue}
     * @memberof Pledge
     */
    issue: Issue;
    /**
     * 
     * @type {Pledger}
     * @memberof Pledge
     */
    pledger?: Pledger;
    /**
     * URL of invoice for this pledge
     * @type {string}
     * @memberof Pledge
     */
    hosted_invoice_url?: string;
    /**
     * If the currently authenticated subject can perform admin actions on behalf of the maker of the peldge
     * @type {boolean}
     * @memberof Pledge
     */
    authed_can_admin_sender?: boolean;
    /**
     * If the currently authenticated subject can perform admin actions on behalf of the receiver of the peldge
     * @type {boolean}
     * @memberof Pledge
     */
    authed_can_admin_received?: boolean;
}

/**
 * Check if a given object implements the Pledge interface.
 */
export function instanceOfPledge(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "created_at" in value;
    isInstance = isInstance && "amount" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "issue" in value;

    return isInstance;
}

export function PledgeFromJSON(json: any): Pledge {
    return PledgeFromJSONTyped(json, false);
}

export function PledgeFromJSONTyped(json: any, ignoreDiscriminator: boolean): Pledge {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'created_at': (new Date(json['created_at'])),
        'amount': CurrencyAmountFromJSON(json['amount']),
        'state': PledgeStateFromJSON(json['state']),
        'type': PledgeTypeFromJSON(json['type']),
        'refunded_at': !exists(json, 'refunded_at') ? undefined : (new Date(json['refunded_at'])),
        'scheduled_payout_at': !exists(json, 'scheduled_payout_at') ? undefined : (new Date(json['scheduled_payout_at'])),
        'issue': IssueFromJSON(json['issue']),
        'pledger': !exists(json, 'pledger') ? undefined : PledgerFromJSON(json['pledger']),
        'hosted_invoice_url': !exists(json, 'hosted_invoice_url') ? undefined : json['hosted_invoice_url'],
        'authed_can_admin_sender': !exists(json, 'authed_can_admin_sender') ? undefined : json['authed_can_admin_sender'],
        'authed_can_admin_received': !exists(json, 'authed_can_admin_received') ? undefined : json['authed_can_admin_received'],
    };
}

export function PledgeToJSON(value?: Pledge | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'created_at': (value.created_at.toISOString()),
        'amount': CurrencyAmountToJSON(value.amount),
        'state': PledgeStateToJSON(value.state),
        'type': PledgeTypeToJSON(value.type),
        'refunded_at': value.refunded_at === undefined ? undefined : (value.refunded_at.toISOString()),
        'scheduled_payout_at': value.scheduled_payout_at === undefined ? undefined : (value.scheduled_payout_at.toISOString()),
        'issue': IssueToJSON(value.issue),
        'pledger': PledgerToJSON(value.pledger),
        'hosted_invoice_url': value.hosted_invoice_url,
        'authed_can_admin_sender': value.authed_can_admin_sender,
        'authed_can_admin_received': value.authed_can_admin_received,
    };
}

