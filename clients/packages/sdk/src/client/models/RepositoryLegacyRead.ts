/* tslint:disable */
/* eslint-disable */
/**
 * Polar API
 *  Welcome to the **Polar API** for [polar.sh](https://polar.sh).  The Public API is currently a [work in progress](https://github.com/polarsource/polar/issues/834) and is in active development. ðŸš€  #### Authentication  Use a [Personal Access Token](https://polar.sh/settings) and send it in the `Authorization` header on the format `Bearer [YOUR_TOKEN]`.  #### Feedback  If you have any feedback or comments, reach out in the [Polar API-issue](https://github.com/polarsource/polar/issues/834), or reach out on the Polar Discord server.  We\'d love to see what you\'ve built with the API and to get your thoughts on how we can make the API better!  #### Connecting  The Polar API is online at `https://api.polar.sh`. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Platforms } from './Platforms';
import {
    PlatformsFromJSON,
    PlatformsFromJSONTyped,
    PlatformsToJSON,
} from './Platforms';
import type { Visibility } from './Visibility';
import {
    VisibilityFromJSON,
    VisibilityFromJSONTyped,
    VisibilityToJSON,
} from './Visibility';

/**
 * 
 * @export
 * @interface RepositoryLegacyRead
 */
export interface RepositoryLegacyRead {
    /**
     * 
     * @type {string}
     * @memberof RepositoryLegacyRead
     */
    id: string;
    /**
     * 
     * @type {Platforms}
     * @memberof RepositoryLegacyRead
     */
    platform: Platforms;
    /**
     * 
     * @type {Visibility}
     * @memberof RepositoryLegacyRead
     */
    visibility: Visibility;
    /**
     * 
     * @type {string}
     * @memberof RepositoryLegacyRead
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof RepositoryLegacyRead
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof RepositoryLegacyRead
     */
    stars?: number;
    /**
     * 
     * @type {string}
     * @memberof RepositoryLegacyRead
     */
    license?: string;
    /**
     * 
     * @type {string}
     * @memberof RepositoryLegacyRead
     */
    homepage?: string;
}

/**
 * Check if a given object implements the RepositoryLegacyRead interface.
 */
export function instanceOfRepositoryLegacyRead(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "platform" in value;
    isInstance = isInstance && "visibility" in value;
    isInstance = isInstance && "name" in value;

    return isInstance;
}

export function RepositoryLegacyReadFromJSON(json: any): RepositoryLegacyRead {
    return RepositoryLegacyReadFromJSONTyped(json, false);
}

export function RepositoryLegacyReadFromJSONTyped(json: any, ignoreDiscriminator: boolean): RepositoryLegacyRead {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'platform': PlatformsFromJSON(json['platform']),
        'visibility': VisibilityFromJSON(json['visibility']),
        'name': json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'stars': !exists(json, 'stars') ? undefined : json['stars'],
        'license': !exists(json, 'license') ? undefined : json['license'],
        'homepage': !exists(json, 'homepage') ? undefined : json['homepage'],
    };
}

export function RepositoryLegacyReadToJSON(value?: RepositoryLegacyRead | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'platform': PlatformsToJSON(value.platform),
        'visibility': VisibilityToJSON(value.visibility),
        'name': value.name,
        'description': value.description,
        'stars': value.stars,
        'license': value.license,
        'homepage': value.homepage,
    };
}

