{
  "openapi": "3.1.0",
  "info": {
    "title": "Polar API",
    "summary": "Polar HTTP and Webhooks API",
    "description": "Read the docs at https://docs.polar.sh/api-reference",
    "version": "0.1.0"
  },
  "servers": [
    {
      "url": "https://api.polar.sh",
      "description": "Production environment",
      "x-speakeasy-server-id": "production"
    },
    {
      "url": "https://sandbox-api.polar.sh",
      "description": "Sandbox environment",
      "x-speakeasy-server-id": "sandbox"
    }
  ],
  "paths": {
    "/v1/organizations/": {
      "get": {
        "tags": [
          "organizations",
          "documented",
          "featured"
        ],
        "summary": "List Organizations",
        "description": "List organizations.\n\n**Scopes**: `organizations:read` `organizations:write`",
        "operationId": "organizations:list",
        "parameters": [
          {
            "name": "slug",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by slug.",
              "title": "Slug"
            },
            "description": "Filter by slug."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "created_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_Organization_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "organizations",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.organizations.list(page=1, limit=10)\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.organizations.list({});\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$responses = $sdk->organizations->list(\n    page: 1,\n    limit: 10\n\n);\n\n\nforeach ($responses as $response) {\n    if ($response->statusCode === 200) {\n        // handle response\n    }\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Organizations.List(ctx, nil, polargo.Int64(1), polargo.Int64(10), nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceOrganization != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          }
        ]
      },
      "post": {
        "tags": [
          "organizations",
          "documented",
          "featured"
        ],
        "summary": "Create Organization",
        "description": "Create an organization.\n\n**Scopes**: `organizations:write`",
        "operationId": "organizations:create",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Organization created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "organizations",
        "x-speakeasy-name-override": "create",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.organizations.create(request={\n        \"name\": \"<value>\",\n        \"slug\": \"<value>\",\n    })\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.organizations.create({\n    name: \"<value>\",\n    slug: \"<value>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$request = new Components\\OrganizationCreate(\n    name: '<value>',\n    slug: '<value>',\n);\n\n$response = $sdk->organizations->create(\n    request: $request\n);\n\nif ($response->organization !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Organizations.Create(ctx, components.OrganizationCreate{\n        Name: \"<value>\",\n        Slug: \"<value>\",\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Organization != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/organizations/{id}": {
      "get": {
        "tags": [
          "organizations",
          "documented",
          "featured"
        ],
        "summary": "Get Organization",
        "description": "Get an organization by ID.\n\n**Scopes**: `organizations:read` `organizations:write`",
        "operationId": "organizations:get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "examples": [
                "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
              ],
              "description": "The organization ID.",
              "x-polar-selector-widget": {
                "resourceRoot": "/v1/organizations",
                "resourceName": "Organization",
                "displayProperty": "name"
              },
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "organizations",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.organizations.get(id=\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\")\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.organizations.get({\n    id: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->organizations->get(\n    id: '1dbfc517-0bbf-4301-9ba8-555ca42b9737'\n);\n\nif ($response->organization !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Organizations.Get(ctx, \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Organization != nil {\n        // handle response\n    }\n}"
          }
        ]
      },
      "patch": {
        "tags": [
          "organizations",
          "documented",
          "featured"
        ],
        "summary": "Update Organization",
        "description": "Update an organization.\n\n**Scopes**: `organizations:write`",
        "operationId": "organizations:update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "examples": [
                "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
              ],
              "description": "The organization ID.",
              "x-polar-selector-widget": {
                "resourceRoot": "/v1/organizations",
                "resourceName": "Organization",
                "displayProperty": "name"
              },
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organization updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "403": {
            "description": "You don't have the permission to update this organization.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotPermitted"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "organizations",
        "x-speakeasy-name-override": "update",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.organizations.update(id=\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\", organization_update={})\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.organizations.update({\n    id: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    organizationUpdate: {},\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$organizationUpdate = new Components\\OrganizationUpdate();\n\n$response = $sdk->organizations->update(\n    id: '1dbfc517-0bbf-4301-9ba8-555ca42b9737',\n    organizationUpdate: $organizationUpdate\n\n);\n\nif ($response->organization !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Organizations.Update(ctx, \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\", components.OrganizationUpdate{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Organization != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/subscriptions/": {
      "get": {
        "tags": [
          "subscriptions",
          "documented",
          "mcp"
        ],
        "summary": "List Subscriptions",
        "description": "List subscriptions.\n\n**Scopes**: `subscriptions:read` `subscriptions:write`",
        "operationId": "subscriptions:list",
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "examples": [
                    "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                  ],
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "examples": [
                      "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                    ],
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "product_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The product ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/products",
                    "resourceName": "Product",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The product ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/products",
                      "resourceName": "Product",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "ProductID Filter",
              "description": "Filter by product ID."
            },
            "description": "Filter by product ID."
          },
          {
            "name": "customer_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The customer ID."
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The customer ID."
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "CustomerID Filter",
              "description": "Filter by customer ID."
            },
            "description": "Filter by customer ID."
          },
          {
            "name": "discount_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The product ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/products",
                    "resourceName": "Product",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The product ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/products",
                      "resourceName": "Product",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "DiscountID Filter",
              "description": "Filter by discount ID."
            },
            "description": "Filter by discount ID."
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by active or inactive subscription.",
              "title": "Active"
            },
            "description": "Filter by active or inactive subscription."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubscriptionSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "-started_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          },
          {
            "name": "metadata",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "schema": {
              "$ref": "#/components/schemas/MetadataQuery"
            },
            "description": "Filter by metadata key-value pairs. It uses the `deepObject` style, e.g. `?metadata[key]=value`."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_Subscription_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-mcp": {
          "disabled": false,
          "scopes": [
            "read",
            "subscriptions"
          ]
        },
        "x-speakeasy-group": "subscriptions",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.subscriptions.list(organization_id=\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\", page=1, limit=10)\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.subscriptions.list({\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Operations;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\SubscriptionsListRequest(\n    organizationId: '1dbfc517-0bbf-4301-9ba8-555ca42b9737',\n);\n\n$responses = $sdk->subscriptions->list(\n    request: $request\n);\n\n\nforeach ($responses as $response) {\n    if ($response->statusCode === 200) {\n        // handle response\n    }\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Subscriptions.List(ctx, operations.SubscriptionsListRequest{\n        OrganizationID: polargo.Pointer(operations.CreateOrganizationIDFilterStr(\n            \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n        )),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceSubscription != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          }
        ]
      }
    },
    "/v1/subscriptions/export": {
      "get": {
        "tags": [
          "subscriptions",
          "documented",
          "mcp"
        ],
        "summary": "Export Subscriptions",
        "description": "Export subscriptions as a CSV file.\n\n**Scopes**: `subscriptions:read` `subscriptions:write`",
        "operationId": "subscriptions:export",
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "examples": [
                    "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                  ],
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "examples": [
                      "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                    ],
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by organization ID.",
              "title": "Organization Id"
            },
            "description": "Filter by organization ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": false,
          "scopes": [
            "read",
            "subscriptions"
          ]
        },
        "x-speakeasy-group": "subscriptions",
        "x-speakeasy-name-override": "export",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.subscriptions.export(organization_id=\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\")\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.subscriptions.export({\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->subscriptions->export(\n    organizationId: '1dbfc517-0bbf-4301-9ba8-555ca42b9737'\n);\n\nif ($response->any !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Subscriptions.Export(ctx, polargo.Pointer(operations.CreateOrganizationIDStr(\n        \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    )))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Any != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/subscriptions/{id}": {
      "get": {
        "tags": [
          "subscriptions",
          "documented",
          "mcp"
        ],
        "summary": "Get Subscription",
        "description": "Get a subscription by ID.\n\n**Scopes**: `subscriptions:write`",
        "operationId": "subscriptions:get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The subscription ID.",
              "title": "Id"
            },
            "description": "The subscription ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "404": {
            "description": "Subscription not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": false,
          "scopes": [
            "read",
            "subscriptions"
          ]
        },
        "x-speakeasy-group": "subscriptions",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.subscriptions.get(id=\"<value>\")\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.subscriptions.get({\n    id: \"<value>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->subscriptions->get(\n    id: '<value>'\n);\n\nif ($response->subscription !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Subscriptions.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Subscription != nil {\n        // handle response\n    }\n}"
          }
        ]
      },
      "patch": {
        "tags": [
          "subscriptions",
          "documented",
          "mcp"
        ],
        "summary": "Update Subscription",
        "description": "Update a subscription.\n\n**Scopes**: `subscriptions:write`",
        "operationId": "subscriptions:update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The subscription ID.",
              "title": "Id"
            },
            "description": "The subscription ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscription updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "403": {
            "description": "Subscription is already canceled or will be at the end of the period.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlreadyCanceledSubscription"
                }
              }
            }
          },
          "404": {
            "description": "Subscription not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": false,
          "scopes": [
            "write",
            "subscriptions"
          ]
        },
        "x-speakeasy-group": "subscriptions",
        "x-speakeasy-name-override": "update",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.subscriptions.update(id=\"<value>\", subscription_update={\n        \"discount_id\": \"<value>\",\n    })\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.subscriptions.update({\n    id: \"<value>\",\n    subscriptionUpdate: {\n      discountId: \"<value>\",\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->subscriptions->update(\n    id: '<value>',\n    subscriptionUpdate: new Components\\SubscriptionUpdateDiscount(\n        discountId: '<value>',\n    )\n\n);\n\nif ($response->subscription !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Subscriptions.Update(ctx, \"<value>\", components.CreateSubscriptionUpdateSubscriptionUpdateDiscount(\n        components.SubscriptionUpdateDiscount{\n            DiscountID: polargo.String(\"<value>\"),\n        },\n    ))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Subscription != nil {\n        // handle response\n    }\n}"
          }
        ]
      },
      "delete": {
        "tags": [
          "subscriptions",
          "documented",
          "mcp"
        ],
        "summary": "Revoke Subscription",
        "description": "Revoke a subscription, i.e cancel immediately.\n\n**Scopes**: `subscriptions:write`",
        "operationId": "subscriptions:revoke",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The subscription ID.",
              "title": "Id"
            },
            "description": "The subscription ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription revoked.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "403": {
            "description": "This subscription is already revoked.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlreadyCanceledSubscription"
                }
              }
            }
          },
          "404": {
            "description": "Subscription not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": false,
          "scopes": [
            "write",
            "subscriptions"
          ]
        },
        "x-speakeasy-group": "subscriptions",
        "x-speakeasy-name-override": "revoke",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.subscriptions.revoke(id=\"<value>\")\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.subscriptions.revoke({\n    id: \"<value>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->subscriptions->revoke(\n    id: '<value>'\n);\n\nif ($response->subscription !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Subscriptions.Revoke(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Subscription != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/oauth2/": {
      "get": {
        "tags": [
          "oauth2",
          "clients",
          "documented"
        ],
        "summary": "List Clients",
        "description": "List OAuth2 clients.",
        "operationId": "oauth2:clients:list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_OAuth2Client_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "oauth2.clients",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.oauth2.clients.list(page=1, limit=10)\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.oauth2.clients.list({});\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$responses = $sdk->oauth2->clients->list(\n    page: 1,\n    limit: 10\n\n);\n\n\nforeach ($responses as $response) {\n    if ($response->statusCode === 200) {\n        // handle response\n    }\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Oauth2.Clients.List(ctx, polargo.Int64(1), polargo.Int64(10))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceOAuth2Client != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          }
        ]
      }
    },
    "/v1/oauth2/register": {
      "post": {
        "tags": [
          "oauth2",
          "clients",
          "documented"
        ],
        "summary": "Create Client",
        "description": "Create an OAuth2 client.",
        "operationId": "oauth2:clients:oauth2:create_client",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OAuth2ClientConfiguration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "oauth2.clients",
        "x-speakeasy-name-override": "create",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.oauth2.clients.create(request={\n        \"redirect_uris\": [\n            \"https://impolite-hippodrome.com/\",\n            \"https://acidic-tomography.net/\",\n        ],\n        \"client_name\": \"<value>\",\n    })\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.oauth2.clients.create({\n    redirectUris: [\n      \"https://impolite-hippodrome.com/\",\n      \"https://acidic-tomography.net/\",\n    ],\n    clientName: \"<value>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$request = new Components\\OAuth2ClientConfiguration(\n    redirectUris: [\n        'https://impolite-hippodrome.com/',\n        'https://acidic-tomography.net/',\n    ],\n    clientName: '<value>',\n);\n\n$response = $sdk->oauth2->clients->create(\n    request: $request\n);\n\nif ($response->any !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Oauth2.Clients.Create(ctx, components.OAuth2ClientConfiguration{\n        RedirectUris: []string{\n            \"https://impolite-hippodrome.com/\",\n            \"https://acidic-tomography.net/\",\n        },\n        ClientName: \"<value>\",\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Any != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/oauth2/register/{client_id}": {
      "get": {
        "tags": [
          "oauth2",
          "clients",
          "documented"
        ],
        "summary": "Get Client",
        "description": "Get an OAuth2 client by Client ID.",
        "operationId": "oauth2:clients:oauth2:get_client",
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Client Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Anonymous",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "oauth2.clients",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.oauth2.clients.get(client_id=\"<id>\")\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.oauth2.clients.get({\n    clientId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->oauth2->clients->get(\n    clientId: '<id>'\n);\n\nif ($response->any !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Oauth2.Clients.Get(ctx, \"<id>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Any != nil {\n        // handle response\n    }\n}"
          }
        ]
      },
      "put": {
        "tags": [
          "oauth2",
          "clients",
          "documented"
        ],
        "summary": "Update Client",
        "description": "Update an OAuth2 client.",
        "operationId": "oauth2:clients:oauth2:update_client",
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Client Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OAuth2ClientConfigurationUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Anonymous",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "oauth2.clients",
        "x-speakeasy-name-override": "update",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.oauth2.clients.update(client_id=\"<id>\", o_auth2_client_configuration_update={\n        \"redirect_uris\": [\n            \"https://classic-cantaloupe.org\",\n            \"https://corrupt-status.biz/\",\n        ],\n        \"client_name\": \"<value>\",\n        \"client_id\": \"<id>\",\n    })\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.oauth2.clients.update({\n    clientId: \"<id>\",\n    oAuth2ClientConfigurationUpdate: {\n      redirectUris: [\n        \"https://classic-cantaloupe.org\",\n        \"https://corrupt-status.biz/\",\n      ],\n      clientName: \"<value>\",\n      clientId: \"<id>\",\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$oAuth2ClientConfigurationUpdate = new Components\\OAuth2ClientConfigurationUpdate(\n    redirectUris: [\n        'https://classic-cantaloupe.org',\n        'https://corrupt-status.biz/',\n    ],\n    clientName: '<value>',\n    clientId: '<id>',\n);\n\n$response = $sdk->oauth2->clients->update(\n    clientId: '<id>',\n    oAuth2ClientConfigurationUpdate: $oAuth2ClientConfigurationUpdate\n\n);\n\nif ($response->any !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Oauth2.Clients.Update(ctx, \"<id>\", components.OAuth2ClientConfigurationUpdate{\n        RedirectUris: []string{\n            \"https://classic-cantaloupe.org\",\n            \"https://corrupt-status.biz/\",\n        },\n        ClientName: \"<value>\",\n        ClientID: \"<id>\",\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Any != nil {\n        // handle response\n    }\n}"
          }
        ]
      },
      "delete": {
        "tags": [
          "oauth2",
          "clients",
          "documented"
        ],
        "summary": "Delete Client",
        "description": "Delete an OAuth2 client.",
        "operationId": "oauth2:clients:oauth2:delete_client",
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Client Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Anonymous",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "oauth2.clients",
        "x-speakeasy-name-override": "delete",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.oauth2.clients.delete(client_id=\"<id>\")\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.oauth2.clients.delete({\n    clientId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->oauth2->clients->delete(\n    clientId: '<id>'\n);\n\nif ($response->any !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Oauth2.Clients.Delete(ctx, \"<id>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Any != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/oauth2/authorize": {
      "get": {
        "tags": [
          "oauth2",
          "documented"
        ],
        "summary": "Authorize",
        "operationId": "oauth2:authorize",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AuthorizeResponseUser"
                    },
                    {
                      "$ref": "#/components/schemas/AuthorizeResponseOrganization"
                    }
                  ],
                  "title": "Response Oauth2:Authorize",
                  "discriminator": {
                    "propertyName": "sub_type",
                    "mapping": {
                      "user": "#/components/schemas/AuthorizeResponseUser",
                      "organization": "#/components/schemas/AuthorizeResponseOrganization"
                    }
                  }
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Anonymous",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "oauth2",
        "x-speakeasy-name-override": "authorize",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.oauth2.authorize()\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.oauth2.authorize();\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->oauth2->authorize(\n\n);\n\nif ($response->responseOauth2Authorize !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Oauth2.Authorize(ctx)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ResponseOauth2Authorize != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/oauth2/token": {
      "post": {
        "tags": [
          "oauth2",
          "featured",
          "documented"
        ],
        "summary": "Request Token",
        "description": "Request an access token using a valid grant.",
        "operationId": "oauth2:request_token",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AuthorizationCodeTokenRequest"
                  },
                  {
                    "$ref": "#/components/schemas/RefreshTokenRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          }
        },
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "oauth2",
        "x-speakeasy-name-override": "token",
        "security": [
          {}
        ],
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar() as polar:\n\n    res = polar.oauth2.token(request={\n        \"grant_type\": \"authorization_code\",\n        \"client_id\": \"<id>\",\n        \"client_secret\": \"<value>\",\n        \"code\": \"<value>\",\n        \"redirect_uri\": \"https://memorable-season.name\",\n    })\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.oauth2.token({\n    clientId: \"<id>\",\n    clientSecret: \"<value>\",\n    code: \"<value>\",\n    redirectUri: \"https://memorable-season.name\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\n\n$sdk = Polar\\Polar::builder()->build();\n\n$request = new Components\\AuthorizationCodeTokenRequest(\n    clientId: '<id>',\n    clientSecret: '<value>',\n    code: '<value>',\n    redirectUri: 'https://memorable-season.name',\n);\n\n$response = $sdk->oauth2->token(\n    request: $request\n);\n\nif ($response->tokenResponse !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New()\n\n    res, err := s.Oauth2.Token(ctx, operations.CreateOauth2RequestTokenRequestBodyAuthorizationCodeTokenRequest(\n        components.AuthorizationCodeTokenRequest{\n            ClientID: \"<id>\",\n            ClientSecret: \"<value>\",\n            Code: \"<value>\",\n            RedirectURI: \"https://memorable-season.name\",\n        },\n    ))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.TokenResponse != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/oauth2/revoke": {
      "post": {
        "tags": [
          "oauth2",
          "featured",
          "documented"
        ],
        "summary": "Revoke Token",
        "description": "Revoke an access token or a refresh token.",
        "operationId": "oauth2:revoke_token",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/RevokeTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RevokeTokenResponse"
                }
              }
            }
          }
        },
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "oauth2",
        "x-speakeasy-name-override": "revoke",
        "security": [
          {}
        ],
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar() as polar:\n\n    res = polar.oauth2.revoke(request={\n        \"token\": \"<value>\",\n        \"client_id\": \"<id>\",\n        \"client_secret\": \"<value>\",\n    })\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.oauth2.revoke({\n    token: \"<value>\",\n    clientId: \"<id>\",\n    clientSecret: \"<value>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\n\n$sdk = Polar\\Polar::builder()->build();\n\n$request = new Components\\RevokeTokenRequest(\n    token: '<value>',\n    clientId: '<id>',\n    clientSecret: '<value>',\n);\n\n$response = $sdk->oauth2->revoke(\n    request: $request\n);\n\nif ($response->revokeTokenResponse !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New()\n\n    res, err := s.Oauth2.Revoke(ctx, components.RevokeTokenRequest{\n        Token: \"<value>\",\n        ClientID: \"<id>\",\n        ClientSecret: \"<value>\",\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.RevokeTokenResponse != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/oauth2/introspect": {
      "post": {
        "tags": [
          "oauth2",
          "featured",
          "documented"
        ],
        "summary": "Introspect Token",
        "description": "Get information about an access token.",
        "operationId": "oauth2:introspect_token",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/IntrospectTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntrospectTokenResponse"
                }
              }
            }
          }
        },
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "oauth2",
        "x-speakeasy-name-override": "introspect",
        "security": [
          {}
        ],
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar() as polar:\n\n    res = polar.oauth2.introspect(request={\n        \"token\": \"<value>\",\n        \"client_id\": \"<id>\",\n        \"client_secret\": \"<value>\",\n    })\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.oauth2.introspect({\n    token: \"<value>\",\n    clientId: \"<id>\",\n    clientSecret: \"<value>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\n\n$sdk = Polar\\Polar::builder()->build();\n\n$request = new Components\\IntrospectTokenRequest(\n    token: '<value>',\n    clientId: '<id>',\n    clientSecret: '<value>',\n);\n\n$response = $sdk->oauth2->introspect(\n    request: $request\n);\n\nif ($response->introspectTokenResponse !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New()\n\n    res, err := s.Oauth2.Introspect(ctx, components.IntrospectTokenRequest{\n        Token: \"<value>\",\n        ClientID: \"<id>\",\n        ClientSecret: \"<value>\",\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.IntrospectTokenResponse != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/oauth2/userinfo": {
      "get": {
        "tags": [
          "oauth2",
          "featured",
          "documented"
        ],
        "summary": "Get User Info",
        "description": "Get information about the authenticated user.",
        "operationId": "oauth2:userinfo",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/UserInfoUser"
                    },
                    {
                      "$ref": "#/components/schemas/UserInfoOrganization"
                    }
                  ],
                  "title": "Response Oauth2:Userinfo"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "userinfo",
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "oauth2",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.oauth2.userinfo()\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.oauth2.userinfo();\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->oauth2->userinfo(\n\n);\n\nif ($response->responseOauth2Userinfo !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Oauth2.Userinfo(ctx)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ResponseOauth2Userinfo != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/benefits/": {
      "get": {
        "tags": [
          "benefits",
          "documented"
        ],
        "summary": "List Benefits",
        "description": "List benefits.\n\n**Scopes**: `benefits:read` `benefits:write`",
        "operationId": "benefits:list",
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "examples": [
                    "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                  ],
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "examples": [
                      "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                    ],
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/BenefitType"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BenefitType"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "BenefitType Filter",
              "description": "Filter by benefit type."
            },
            "description": "Filter by benefit type.",
            "x-speakeasy-name-override": "type_filter"
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Query",
              "description": "Filter by description."
            },
            "description": "Filter by description."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BenefitSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "-created_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          },
          {
            "name": "metadata",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "schema": {
              "$ref": "#/components/schemas/MetadataQuery"
            },
            "description": "Filter by metadata key-value pairs. It uses the `deepObject` style, e.g. `?metadata[key]=value`."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_Benefit_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "benefits",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.benefits.list(organization_id=\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\", page=1, limit=10)\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.benefits.list({\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Operations;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\BenefitsListRequest(\n    organizationId: '1dbfc517-0bbf-4301-9ba8-555ca42b9737',\n);\n\n$responses = $sdk->benefits->list(\n    request: $request\n);\n\n\nforeach ($responses as $response) {\n    if ($response->statusCode === 200) {\n        // handle response\n    }\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Benefits.List(ctx, operations.BenefitsListRequest{\n        OrganizationID: polargo.Pointer(operations.CreateQueryParamOrganizationIDFilterStr(\n            \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n        )),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceBenefit != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          }
        ]
      },
      "post": {
        "tags": [
          "benefits",
          "documented"
        ],
        "summary": "Create Benefit",
        "description": "Create a benefit.\n\n**Scopes**: `benefits:write`",
        "operationId": "benefits:create",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BenefitCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Benefit created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Benefit",
                  "title": "Benefit"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "benefits",
        "x-speakeasy-name-override": "create",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.benefits.create(request={\n        \"type\": \"license_keys\",\n        \"description\": \"mature emergent at outside arrogantly gadzooks zealous equatorial notwithstanding\",\n        \"properties\": {},\n    })\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.benefits.create({\n    description: \"mature emergent at outside arrogantly gadzooks zealous equatorial notwithstanding\",\n    properties: {},\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$request = new Components\\BenefitLicenseKeysCreate(\n    description: 'mature emergent at outside arrogantly gadzooks zealous equatorial notwithstanding',\n    properties: new Components\\BenefitLicenseKeysCreateProperties(),\n);\n\n$response = $sdk->benefits->create(\n    request: $request\n);\n\nif ($response->benefit !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Benefits.Create(ctx, components.CreateBenefitCreateLicenseKeys(\n        components.BenefitLicenseKeysCreate{\n            Description: \"mature emergent at outside arrogantly gadzooks zealous equatorial notwithstanding\",\n            Properties: components.BenefitLicenseKeysCreateProperties{},\n        },\n    ))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Benefit != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/benefits/{id}": {
      "get": {
        "tags": [
          "benefits",
          "documented"
        ],
        "summary": "Get Benefit",
        "description": "Get a benefit by ID.\n\n**Scopes**: `benefits:read` `benefits:write`",
        "operationId": "benefits:get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The benefit ID.",
              "x-polar-selector-widget": {
                "resourceRoot": "/v1/benefits",
                "resourceName": "Benefit",
                "displayProperty": "description"
              },
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Benefit",
                  "title": "Benefit"
                }
              }
            }
          },
          "404": {
            "description": "Benefit not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "benefits",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.benefits.get(id=\"<value>\")\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.benefits.get({\n    id: \"<value>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->benefits->get(\n    id: '<value>'\n);\n\nif ($response->benefit !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Benefits.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Benefit != nil {\n        // handle response\n    }\n}"
          }
        ]
      },
      "patch": {
        "tags": [
          "benefits",
          "documented"
        ],
        "summary": "Update Benefit",
        "description": "Update a benefit.\n\n**Scopes**: `benefits:write`",
        "operationId": "benefits:update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The benefit ID.",
              "x-polar-selector-widget": {
                "resourceRoot": "/v1/benefits",
                "resourceName": "Benefit",
                "displayProperty": "description"
              },
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/BenefitCustomUpdate"
                  },
                  {
                    "$ref": "#/components/schemas/BenefitDiscordUpdate"
                  },
                  {
                    "$ref": "#/components/schemas/BenefitGitHubRepositoryUpdate"
                  },
                  {
                    "$ref": "#/components/schemas/BenefitDownloadablesUpdate"
                  },
                  {
                    "$ref": "#/components/schemas/BenefitLicenseKeysUpdate"
                  },
                  {
                    "$ref": "#/components/schemas/BenefitMeterCreditUpdate"
                  }
                ],
                "title": "Benefit Update"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Benefit updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Benefit",
                  "title": "Benefit"
                }
              }
            }
          },
          "404": {
            "description": "Benefit not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "benefits",
        "x-speakeasy-name-override": "update",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.benefits.update(id=\"<value>\", request_body={\n        \"type\": \"meter_credit\",\n    })\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.benefits.update({\n    id: \"<value>\",\n    requestBody: {},\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->benefits->update(\n    id: '<value>',\n    requestBody: new Components\\BenefitCustomUpdate()\n\n);\n\nif ($response->benefit !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Benefits.Update(ctx, \"<value>\", operations.CreateBenefitsUpdateBenefitUpdateBenefitCustomUpdate(\n        components.BenefitCustomUpdate{},\n    ))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Benefit != nil {\n        // handle response\n    }\n}"
          }
        ]
      },
      "delete": {
        "tags": [
          "benefits",
          "documented"
        ],
        "summary": "Delete Benefit",
        "description": "Delete a benefit.\n\n> [!WARNING]\n> Every grants associated with the benefit will be revoked.\n> Users will lose access to the benefit.\n\n**Scopes**: `benefits:write`",
        "operationId": "benefits:delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The benefit ID.",
              "x-polar-selector-widget": {
                "resourceRoot": "/v1/benefits",
                "resourceName": "Benefit",
                "displayProperty": "description"
              },
              "title": "Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Benefit deleted."
          },
          "403": {
            "description": "This benefit is not deletable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotPermitted"
                }
              }
            }
          },
          "404": {
            "description": "Benefit not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "benefits",
        "x-speakeasy-name-override": "delete",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    polar.benefits.delete(id=\"<value>\")\n\n    # Use the SDK ..."
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  await polar.benefits.delete({\n    id: \"<value>\",\n  });\n\n\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->benefits->delete(\n    id: '<value>'\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Benefits.Delete(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/benefits/{id}/grants": {
      "get": {
        "tags": [
          "benefits",
          "documented"
        ],
        "summary": "List Benefit Grants",
        "description": "List the individual grants for a benefit.\n\nIt's especially useful to check if a user has been granted a benefit.\n\n**Scopes**: `benefits:read` `benefits:write`",
        "operationId": "benefits:grants",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The benefit ID.",
              "x-polar-selector-widget": {
                "resourceRoot": "/v1/benefits",
                "resourceName": "Benefit",
                "displayProperty": "description"
              },
              "title": "Id"
            }
          },
          {
            "name": "is_granted",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by granted status. If `true`, only granted benefits will be returned. If `false`, only revoked benefits will be returned. ",
              "title": "Is Granted"
            },
            "description": "Filter by granted status. If `true`, only granted benefits will be returned. If `false`, only revoked benefits will be returned. "
          },
          {
            "name": "customer_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The customer ID."
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The customer ID."
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "CustomerID Filter",
              "description": "Filter by customer."
            },
            "description": "Filter by customer."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_BenefitGrant_"
                }
              }
            }
          },
          "404": {
            "description": "Benefit not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "benefits",
        "x-speakeasy-name-override": "grants",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.benefits.grants(id=\"<value>\", page=1, limit=10)\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.benefits.grants({\n    id: \"<value>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Operations;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\BenefitsGrantsRequest(\n    id: '<value>',\n);\n\n$responses = $sdk->benefits->grants(\n    request: $request\n);\n\n\nforeach ($responses as $response) {\n    if ($response->statusCode === 200) {\n        // handle response\n    }\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Benefits.Grants(ctx, operations.BenefitsGrantsRequest{\n        ID: \"<value>\",\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceBenefitGrant != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          }
        ]
      }
    },
    "/v1/webhooks/endpoints": {
      "get": {
        "tags": [
          "webhooks",
          "documented"
        ],
        "summary": "List Webhook Endpoints",
        "description": "List webhook endpoints.\n\n**Scopes**: `webhooks:read` `webhooks:write`",
        "operationId": "webhooks:list_webhook_endpoints",
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "examples": [
                    "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                  ],
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "examples": [
                      "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                    ],
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by organization ID.",
              "title": "Organization Id"
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_WebhookEndpoint_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "webhooks",
        "x-speakeasy-name-override": "list_webhook_endpoints",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.webhooks.list_webhook_endpoints(organization_id=\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\", page=1, limit=10)\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.webhooks.listWebhookEndpoints({\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$responses = $sdk->webhooks->listWebhookEndpoints(\n    organizationId: '1dbfc517-0bbf-4301-9ba8-555ca42b9737',\n    page: 1,\n    limit: 10\n\n);\n\n\nforeach ($responses as $response) {\n    if ($response->statusCode === 200) {\n        // handle response\n    }\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Webhooks.ListWebhookEndpoints(ctx, polargo.Pointer(operations.CreateQueryParamOrganizationIDStr(\n        \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    )), polargo.Int64(1), polargo.Int64(10))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceWebhookEndpoint != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          }
        ]
      },
      "post": {
        "tags": [
          "webhooks",
          "documented"
        ],
        "summary": "Create Webhook Endpoint",
        "description": "Create a webhook endpoint.\n\n**Scopes**: `webhooks:write`",
        "operationId": "webhooks:create_webhook_endpoint",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookEndpointCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Webhook endpoint created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookEndpoint"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "webhooks",
        "x-speakeasy-name-override": "create_webhook_endpoint",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "import polar_sdk\nfrom polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.webhooks.create_webhook_endpoint(request={\n        \"url\": \"https://webhook.site/cb791d80-f26e-4f8c-be88-6e56054192b0\",\n        \"format_\": polar_sdk.WebhookFormat.SLACK,\n        \"secret\": \"f_z6mfSpxkjogyw3FkA2aH2gYE5huxruNf34MpdWMcA\",\n        \"events\": [\n            polar_sdk.WebhookEventType.SUBSCRIPTION_UNCANCELED,\n        ],\n        \"organization_id\": \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    })\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.webhooks.createWebhookEndpoint({\n    url: \"https://webhook.site/cb791d80-f26e-4f8c-be88-6e56054192b0\",\n    format: \"slack\",\n    secret: \"f_z6mfSpxkjogyw3FkA2aH2gYE5huxruNf34MpdWMcA\",\n    events: [\n      \"subscription.uncanceled\",\n    ],\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$request = new Components\\WebhookEndpointCreate(\n    url: 'https://webhook.site/cb791d80-f26e-4f8c-be88-6e56054192b0',\n    format: Components\\WebhookFormat::Slack,\n    secret: 'f_z6mfSpxkjogyw3FkA2aH2gYE5huxruNf34MpdWMcA',\n    events: [\n        Components\\WebhookEventType::SubscriptionUncanceled,\n    ],\n    organizationId: '1dbfc517-0bbf-4301-9ba8-555ca42b9737',\n);\n\n$response = $sdk->webhooks->createWebhookEndpoint(\n    request: $request\n);\n\nif ($response->webhookEndpoint !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Webhooks.CreateWebhookEndpoint(ctx, components.WebhookEndpointCreate{\n        URL: \"https://webhook.site/cb791d80-f26e-4f8c-be88-6e56054192b0\",\n        Format: components.WebhookFormatSlack,\n        Secret: \"f_z6mfSpxkjogyw3FkA2aH2gYE5huxruNf34MpdWMcA\",\n        Events: []components.WebhookEventType{\n            components.WebhookEventTypeSubscriptionUncanceled,\n        },\n        OrganizationID: polargo.String(\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.WebhookEndpoint != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/webhooks/endpoints/{id}": {
      "get": {
        "tags": [
          "webhooks",
          "documented"
        ],
        "summary": "Get Webhook Endpoint",
        "description": "Get a webhook endpoint by ID.\n\n**Scopes**: `webhooks:read` `webhooks:write`",
        "operationId": "webhooks:get_webhook_endpoint",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The webhook endpoint ID.",
              "title": "Id"
            },
            "description": "The webhook endpoint ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookEndpoint"
                }
              }
            }
          },
          "404": {
            "description": "Webhook endpoint not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "webhooks",
        "x-speakeasy-name-override": "get_webhook_endpoint",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.webhooks.get_webhook_endpoint(id=\"<value>\")\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.webhooks.getWebhookEndpoint({\n    id: \"<value>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->webhooks->getWebhookEndpoint(\n    id: '<value>'\n);\n\nif ($response->webhookEndpoint !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Webhooks.GetWebhookEndpoint(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.WebhookEndpoint != nil {\n        // handle response\n    }\n}"
          }
        ]
      },
      "patch": {
        "tags": [
          "webhooks",
          "documented"
        ],
        "summary": "Update Webhook Endpoint",
        "description": "Update a webhook endpoint.\n\n**Scopes**: `webhooks:write`",
        "operationId": "webhooks:update_webhook_endpoint",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The webhook endpoint ID.",
              "title": "Id"
            },
            "description": "The webhook endpoint ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookEndpointUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook endpoint updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookEndpoint"
                }
              }
            }
          },
          "404": {
            "description": "Webhook endpoint not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "webhooks",
        "x-speakeasy-name-override": "update_webhook_endpoint",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.webhooks.update_webhook_endpoint(id=\"<value>\", webhook_endpoint_update={\n        \"url\": \"https://webhook.site/cb791d80-f26e-4f8c-be88-6e56054192b0\",\n        \"secret\": \"f_z6mfSpxkjogyw3FkA2aH2gYE5huxruNf34MpdWMcA\",\n    })\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.webhooks.updateWebhookEndpoint({\n    id: \"<value>\",\n    webhookEndpointUpdate: {\n      url: \"https://webhook.site/cb791d80-f26e-4f8c-be88-6e56054192b0\",\n      secret: \"f_z6mfSpxkjogyw3FkA2aH2gYE5huxruNf34MpdWMcA\",\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$webhookEndpointUpdate = new Components\\WebhookEndpointUpdate(\n    url: 'https://webhook.site/cb791d80-f26e-4f8c-be88-6e56054192b0',\n    secret: 'f_z6mfSpxkjogyw3FkA2aH2gYE5huxruNf34MpdWMcA',\n);\n\n$response = $sdk->webhooks->updateWebhookEndpoint(\n    id: '<value>',\n    webhookEndpointUpdate: $webhookEndpointUpdate\n\n);\n\nif ($response->webhookEndpoint !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Webhooks.UpdateWebhookEndpoint(ctx, \"<value>\", components.WebhookEndpointUpdate{\n        URL: polargo.String(\"https://webhook.site/cb791d80-f26e-4f8c-be88-6e56054192b0\"),\n        Secret: polargo.String(\"f_z6mfSpxkjogyw3FkA2aH2gYE5huxruNf34MpdWMcA\"),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.WebhookEndpoint != nil {\n        // handle response\n    }\n}"
          }
        ]
      },
      "delete": {
        "tags": [
          "webhooks",
          "documented"
        ],
        "summary": "Delete Webhook Endpoint",
        "description": "Delete a webhook endpoint.\n\n**Scopes**: `webhooks:write`",
        "operationId": "webhooks:delete_webhook_endpoint",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The webhook endpoint ID.",
              "title": "Id"
            },
            "description": "The webhook endpoint ID."
          }
        ],
        "responses": {
          "204": {
            "description": "Webhook endpoint deleted."
          },
          "404": {
            "description": "Webhook endpoint not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "webhooks",
        "x-speakeasy-name-override": "delete_webhook_endpoint",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    polar.webhooks.delete_webhook_endpoint(id=\"<value>\")\n\n    # Use the SDK ..."
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  await polar.webhooks.deleteWebhookEndpoint({\n    id: \"<value>\",\n  });\n\n\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->webhooks->deleteWebhookEndpoint(\n    id: '<value>'\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Webhooks.DeleteWebhookEndpoint(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/webhooks/deliveries": {
      "get": {
        "tags": [
          "webhooks",
          "documented"
        ],
        "summary": "List Webhook Deliveries",
        "description": "List webhook deliveries.\n\nDeliveries are all the attempts to deliver a webhook event to an endpoint.\n\n**Scopes**: `webhooks:read` `webhooks:write`",
        "operationId": "webhooks:list_webhook_deliveries",
        "parameters": [
          {
            "name": "endpoint_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by webhook endpoint ID.",
              "title": "Endpoint Id"
            },
            "description": "Filter by webhook endpoint ID."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_WebhookDelivery_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "webhooks",
        "x-speakeasy-name-override": "list_webhook_deliveries",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.webhooks.list_webhook_deliveries(page=1, limit=10)\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.webhooks.listWebhookDeliveries({});\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$responses = $sdk->webhooks->listWebhookDeliveries(\n    page: 1,\n    limit: 10\n\n);\n\n\nforeach ($responses as $response) {\n    if ($response->statusCode === 200) {\n        // handle response\n    }\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Webhooks.ListWebhookDeliveries(ctx, nil, polargo.Int64(1), polargo.Int64(10))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceWebhookDelivery != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          }
        ]
      }
    },
    "/v1/webhooks/events/{id}/redeliver": {
      "post": {
        "tags": [
          "webhooks",
          "documented"
        ],
        "summary": "Redeliver Webhook Event",
        "description": "Schedule the re-delivery of a webhook event.\n\n**Scopes**: `webhooks:write`",
        "operationId": "webhooks:redeliver_webhook_event",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The webhook event ID.",
              "title": "Id"
            },
            "description": "The webhook event ID."
          }
        ],
        "responses": {
          "202": {
            "description": "Webhook event re-delivery scheduled.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Webhook event not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "webhooks",
        "x-speakeasy-name-override": "redeliver_webhook_event",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.webhooks.redeliver_webhook_event(id=\"<value>\")\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.webhooks.redeliverWebhookEvent({\n    id: \"<value>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->webhooks->redeliverWebhookEvent(\n    id: '<value>'\n);\n\nif ($response->any !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Webhooks.RedeliverWebhookEvent(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Any != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/products/": {
      "get": {
        "tags": [
          "products",
          "documented",
          "featured",
          "mcp"
        ],
        "summary": "List Products",
        "description": "List products.\n\n**Scopes**: `products:read` `products:write`",
        "operationId": "products:list",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The product ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/products",
                    "resourceName": "Product",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The product ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/products",
                      "resourceName": "Product",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "ProductID Filter",
              "description": "Filter by product ID."
            },
            "description": "Filter by product ID."
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "examples": [
                    "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                  ],
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "examples": [
                      "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                    ],
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by product name.",
              "title": "Query"
            },
            "description": "Filter by product name."
          },
          {
            "name": "is_archived",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter on archived products.",
              "title": "Is Archived"
            },
            "description": "Filter on archived products."
          },
          {
            "name": "is_recurring",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter on recurring products. If `true`, only subscriptions tiers are returned. If `false`, only one-time purchase products are returned. ",
              "title": "Is Recurring"
            },
            "description": "Filter on recurring products. If `true`, only subscriptions tiers are returned. If `false`, only one-time purchase products are returned. "
          },
          {
            "name": "benefit_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The benefit ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/benefits",
                    "resourceName": "Benefit",
                    "displayProperty": "description"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The benefit ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/benefits",
                      "resourceName": "Benefit",
                      "displayProperty": "description"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "BenefitID Filter",
              "description": "Filter products granting specific benefit."
            },
            "description": "Filter products granting specific benefit."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "-created_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          },
          {
            "name": "metadata",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "schema": {
              "$ref": "#/components/schemas/MetadataQuery"
            },
            "description": "Filter by metadata key-value pairs. It uses the `deepObject` style, e.g. `?metadata[key]=value`."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_Product_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-mcp": {
          "disabled": false,
          "scopes": [
            "read",
            "products"
          ]
        },
        "x-speakeasy-group": "products",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.products.list(organization_id=None, page=1, limit=10)\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.products.list({\n    organizationId: null,\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Operations;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\ProductsListRequest(\n    organizationId: null,\n);\n\n$responses = $sdk->products->list(\n    request: $request\n);\n\n\nforeach ($responses as $response) {\n    if ($response->statusCode === 200) {\n        // handle response\n    }\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Products.List(ctx, operations.ProductsListRequest{\n        OrganizationID: nil,\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceProduct != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          }
        ]
      },
      "post": {
        "tags": [
          "products",
          "documented",
          "featured",
          "mcp"
        ],
        "summary": "Create Product",
        "description": "Create a product.\n\n**Scopes**: `products:write`",
        "operationId": "products:create",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": false,
          "scopes": [
            "write",
            "products"
          ]
        },
        "x-speakeasy-group": "products",
        "x-speakeasy-name-override": "create",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "import polar_sdk\nfrom polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.products.create(request={\n        \"name\": \"<value>\",\n        \"recurring_interval\": polar_sdk.SubscriptionRecurringInterval.YEAR,\n        \"prices\": [],\n        \"organization_id\": \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    })\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.products.create({\n    name: \"<value>\",\n    recurringInterval: \"year\",\n    prices: [],\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$request = new Components\\ProductCreate(\n    name: '<value>',\n    recurringInterval: Components\\SubscriptionRecurringInterval::Year,\n    prices: [],\n    organizationId: '1dbfc517-0bbf-4301-9ba8-555ca42b9737',\n);\n\n$response = $sdk->products->create(\n    request: $request\n);\n\nif ($response->product !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Products.Create(ctx, components.ProductCreate{\n        Name: \"<value>\",\n        RecurringInterval: components.SubscriptionRecurringIntervalYear.ToPointer(),\n        Prices: []components.ProductCreatePrices{},\n        OrganizationID: polargo.String(\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Product != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/products/{id}": {
      "get": {
        "tags": [
          "products",
          "documented",
          "featured",
          "mcp"
        ],
        "summary": "Get Product",
        "description": "Get a product by ID.\n\n**Scopes**: `products:read` `products:write`",
        "operationId": "products:get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The product ID.",
              "x-polar-selector-widget": {
                "resourceRoot": "/v1/products",
                "resourceName": "Product",
                "displayProperty": "name"
              },
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "404": {
            "description": "Product not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": false,
          "scopes": [
            "read",
            "products"
          ]
        },
        "x-speakeasy-group": "products",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.products.get(id=\"<value>\")\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.products.get({\n    id: \"<value>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->products->get(\n    id: '<value>'\n);\n\nif ($response->product !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Products.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Product != nil {\n        // handle response\n    }\n}"
          }
        ]
      },
      "patch": {
        "tags": [
          "products",
          "documented",
          "featured",
          "mcp"
        ],
        "summary": "Update Product",
        "description": "Update a product.\n\n**Scopes**: `products:write`",
        "operationId": "products:update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The product ID.",
              "x-polar-selector-widget": {
                "resourceRoot": "/v1/products",
                "resourceName": "Product",
                "displayProperty": "name"
              },
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "403": {
            "description": "You don't have the permission to update this product.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotPermitted"
                }
              }
            }
          },
          "404": {
            "description": "Product not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": false,
          "scopes": [
            "write",
            "products"
          ]
        },
        "x-speakeasy-group": "products",
        "x-speakeasy-name-override": "update",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.products.update(id=\"<value>\", product_update={})\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.products.update({\n    id: \"<value>\",\n    productUpdate: {},\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$productUpdate = new Components\\ProductUpdate();\n\n$response = $sdk->products->update(\n    id: '<value>',\n    productUpdate: $productUpdate\n\n);\n\nif ($response->product !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Products.Update(ctx, \"<value>\", components.ProductUpdate{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Product != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/products/{id}/benefits": {
      "post": {
        "tags": [
          "products",
          "documented",
          "featured",
          "mcp"
        ],
        "summary": "Update Product Benefits",
        "description": "Update benefits granted by a product.\n\n**Scopes**: `products:write`",
        "operationId": "products:update_benefits",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The product ID.",
              "x-polar-selector-widget": {
                "resourceRoot": "/v1/products",
                "resourceName": "Product",
                "displayProperty": "name"
              },
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductBenefitsUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product benefits updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "403": {
            "description": "You don't have the permission to update this product.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotPermitted"
                }
              }
            }
          },
          "404": {
            "description": "Product not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": false,
          "scopes": [
            "write",
            "products"
          ]
        },
        "x-speakeasy-group": "products",
        "x-speakeasy-name-override": "update_benefits",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.products.update_benefits(id=\"<value>\", product_benefits_update={\n        \"benefits\": [\n            \"<value 1>\",\n            \"<value 2>\",\n            \"<value 3>\",\n        ],\n    })\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.products.updateBenefits({\n    id: \"<value>\",\n    productBenefitsUpdate: {\n      benefits: [\n        \"<value 1>\",\n        \"<value 2>\",\n        \"<value 3>\",\n      ],\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$productBenefitsUpdate = new Components\\ProductBenefitsUpdate(\n    benefits: [\n        '<value 1>',\n        '<value 2>',\n        '<value 3>',\n    ],\n);\n\n$response = $sdk->products->updateBenefits(\n    id: '<value>',\n    productBenefitsUpdate: $productBenefitsUpdate\n\n);\n\nif ($response->product !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Products.UpdateBenefits(ctx, \"<value>\", components.ProductBenefitsUpdate{\n        Benefits: []string{\n            \"<value 1>\",\n            \"<value 2>\",\n            \"<value 3>\",\n        },\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Product != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/orders/": {
      "get": {
        "tags": [
          "orders",
          "documented",
          "mcp"
        ],
        "summary": "List Orders",
        "description": "List orders.\n\n**Scopes**: `orders:read`",
        "operationId": "orders:list",
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "examples": [
                    "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                  ],
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "examples": [
                      "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                    ],
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "product_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The product ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/products",
                    "resourceName": "Product",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The product ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/products",
                      "resourceName": "Product",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "ProductID Filter",
              "description": "Filter by product ID."
            },
            "description": "Filter by product ID."
          },
          {
            "name": "product_billing_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ProductBillingType"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductBillingType"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "ProductBillingType Filter",
              "description": "Filter by product billing type. `recurring` will filter data corresponding to subscriptions creations or renewals. `one_time` will filter data corresponding to one-time purchases."
            },
            "description": "Filter by product billing type. `recurring` will filter data corresponding to subscriptions creations or renewals. `one_time` will filter data corresponding to one-time purchases."
          },
          {
            "name": "discount_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "DiscountID Filter",
              "description": "Filter by discount ID."
            },
            "description": "Filter by discount ID."
          },
          {
            "name": "customer_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The customer ID."
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The customer ID."
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "CustomerID Filter",
              "description": "Filter by customer ID."
            },
            "description": "Filter by customer ID."
          },
          {
            "name": "checkout_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "CheckoutID Filter",
              "description": "Filter by checkout ID."
            },
            "description": "Filter by checkout ID."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "-created_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          },
          {
            "name": "metadata",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "schema": {
              "$ref": "#/components/schemas/MetadataQuery"
            },
            "description": "Filter by metadata key-value pairs. It uses the `deepObject` style, e.g. `?metadata[key]=value`."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_Order_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-mcp": {
          "disabled": false,
          "scopes": [
            "read",
            "orders"
          ]
        },
        "x-speakeasy-group": "orders",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.orders.list(organization_id=\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\", page=1, limit=10)\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.orders.list({\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Operations;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\OrdersListRequest(\n    organizationId: '1dbfc517-0bbf-4301-9ba8-555ca42b9737',\n);\n\n$responses = $sdk->orders->list(\n    request: $request\n);\n\n\nforeach ($responses as $response) {\n    if ($response->statusCode === 200) {\n        // handle response\n    }\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Orders.List(ctx, operations.OrdersListRequest{\n        OrganizationID: polargo.Pointer(operations.CreateOrdersListQueryParamOrganizationIDFilterStr(\n            \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n        )),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceOrder != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          }
        ]
      }
    },
    "/v1/orders/{id}": {
      "get": {
        "tags": [
          "orders",
          "documented",
          "mcp"
        ],
        "summary": "Get Order",
        "description": "Get an order by ID.\n\n**Scopes**: `orders:read`",
        "operationId": "orders:get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The order ID.",
              "title": "Id"
            },
            "description": "The order ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "404": {
            "description": "Order not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": false,
          "scopes": [
            "read",
            "orders"
          ]
        },
        "x-speakeasy-group": "orders",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.orders.get(id=\"<value>\")\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.orders.get({\n    id: \"<value>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->orders->get(\n    id: '<value>'\n);\n\nif ($response->order !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Orders.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Order != nil {\n        // handle response\n    }\n}"
          }
        ]
      },
      "patch": {
        "tags": [
          "orders",
          "documented",
          "mcp"
        ],
        "summary": "Update Order",
        "description": "Update an order.\n\n**Scopes**: `orders:write`",
        "operationId": "orders:update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The order ID.",
              "title": "Id"
            },
            "description": "The order ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "404": {
            "description": "Order not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": false,
          "scopes": [
            "write",
            "orders"
          ]
        },
        "x-speakeasy-group": "orders",
        "x-speakeasy-name-override": "update",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.orders.update(id=\"<value>\", order_update={\n        \"billing_name\": \"<value>\",\n        \"billing_address\": {\n            \"country\": \"US\",\n        },\n    })\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.orders.update({\n    id: \"<value>\",\n    orderUpdate: {\n      billingName: \"<value>\",\n      billingAddress: {\n        country: \"US\",\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$orderUpdate = new Components\\OrderUpdate(\n    billingName: '<value>',\n    billingAddress: new Components\\Address(\n        country: 'US',\n    ),\n);\n\n$response = $sdk->orders->update(\n    id: '<value>',\n    orderUpdate: $orderUpdate\n\n);\n\nif ($response->order !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Orders.Update(ctx, \"<value>\", components.OrderUpdate{\n        BillingName: polargo.String(\"<value>\"),\n        BillingAddress: &components.Address{\n            Country: \"US\",\n        },\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Order != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/orders/{id}/invoice": {
      "post": {
        "tags": [
          "orders",
          "documented",
          "mcp"
        ],
        "summary": "Generate Order Invoice",
        "description": "Trigger generation of an order's invoice.\n\n**Scopes**: `orders:read`",
        "operationId": "orders:generate_invoice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The order ID.",
              "title": "Id"
            },
            "description": "The order ID."
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "409": {
            "description": "Order already has an invoice.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceAlreadyExists"
                }
              }
            }
          },
          "422": {
            "description": "Order is not paid or is missing billing name or address.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/MissingInvoiceBillingDetails"
                    },
                    {
                      "$ref": "#/components/schemas/NotPaidOrder"
                    }
                  ],
                  "title": "Response 422 Orders:Generate Invoice"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": false,
          "scopes": [
            "write",
            "orders"
          ]
        },
        "x-speakeasy-group": "orders",
        "x-speakeasy-name-override": "generate_invoice",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.orders.generate_invoice(id=\"<value>\")\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.orders.generateInvoice({\n    id: \"<value>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->orders->generateInvoice(\n    id: '<value>'\n);\n\nif ($response->any !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Orders.GenerateInvoice(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Any != nil {\n        // handle response\n    }\n}"
          }
        ]
      },
      "get": {
        "tags": [
          "orders",
          "documented",
          "mcp"
        ],
        "summary": "Get Order Invoice",
        "description": "Get an order's invoice data.\n\n**Scopes**: `orders:read`",
        "operationId": "orders:invoice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The order ID.",
              "title": "Id"
            },
            "description": "The order ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderInvoice"
                }
              }
            }
          },
          "404": {
            "description": "Order not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": false,
          "scopes": [
            "read",
            "orders"
          ]
        },
        "x-speakeasy-group": "orders",
        "x-speakeasy-name-override": "invoice",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.orders.invoice(id=\"<value>\")\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.orders.invoice({\n    id: \"<value>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->orders->invoice(\n    id: '<value>'\n);\n\nif ($response->orderInvoice !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Orders.Invoice(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.OrderInvoice != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/refunds/": {
      "get": {
        "tags": [
          "refunds",
          "documented"
        ],
        "summary": "List Refunds",
        "description": "List products.\n\n**Scopes**: `refunds:read` `refunds:write`",
        "operationId": "refunds:list",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The refund ID."
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The refund ID."
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "RefundID Filter",
              "description": "Filter by refund ID."
            },
            "description": "Filter by refund ID."
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "examples": [
                    "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                  ],
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "examples": [
                      "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                    ],
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "order_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The order ID."
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The order ID."
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrderID Filter",
              "description": "Filter by order ID."
            },
            "description": "Filter by order ID."
          },
          {
            "name": "subscription_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The subscription ID."
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The subscription ID."
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "SubscriptionID Filter",
              "description": "Filter by subscription ID."
            },
            "description": "Filter by subscription ID."
          },
          {
            "name": "customer_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The customer ID."
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The customer ID."
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "CustomerID Filter",
              "description": "Filter by customer ID."
            },
            "description": "Filter by customer ID."
          },
          {
            "name": "succeeded",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "RefundStatus Filter",
              "description": "Filter by `succeeded`."
            },
            "description": "Filter by `succeeded`."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RefundSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "-created_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_Refund_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "refunds",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.refunds.list(organization_id=\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\", page=1, limit=10)\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.refunds.list({\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Operations;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\RefundsListRequest(\n    organizationId: '1dbfc517-0bbf-4301-9ba8-555ca42b9737',\n);\n\n$responses = $sdk->refunds->list(\n    request: $request\n);\n\n\nforeach ($responses as $response) {\n    if ($response->statusCode === 200) {\n        // handle response\n    }\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Refunds.List(ctx, operations.RefundsListRequest{\n        OrganizationID: polargo.Pointer(operations.CreateRefundsListQueryParamOrganizationIDFilterStr(\n            \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n        )),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceRefund != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          }
        ]
      },
      "post": {
        "tags": [
          "refunds",
          "documented"
        ],
        "summary": "Create Refund",
        "description": "Create a refund.\n\n**Scopes**: `refunds:write`",
        "operationId": "refunds:create",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Refund"
                }
              }
            }
          },
          "201": {
            "description": "Refund created."
          },
          "400": {
            "description": "Refund amount exceeds remaining order balance.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundAmountTooHigh"
                }
              }
            }
          },
          "403": {
            "description": "Order is already fully refunded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundedAlready"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "refunds",
        "x-speakeasy-name-override": "create",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "import polar_sdk\nfrom polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.refunds.create(request={\n        \"order_id\": \"<value>\",\n        \"reason\": polar_sdk.RefundReason.CUSTOMER_REQUEST,\n        \"amount\": 90,\n    })\n\n    assert res is not None\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.refunds.create({\n    orderId: \"<value>\",\n    reason: \"customer_request\",\n    amount: 90,\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$request = new Components\\RefundCreate(\n    orderId: '<value>',\n    reason: Components\\RefundReason::CustomerRequest,\n    amount: 90,\n);\n\n$response = $sdk->refunds->create(\n    request: $request\n);\n\nif ($response->refund !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Refunds.Create(ctx, components.RefundCreate{\n        OrderID: \"<value>\",\n        Reason: components.RefundReasonCustomerRequest,\n        Amount: 90,\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Refund != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/checkouts/": {
      "get": {
        "tags": [
          "checkouts",
          "documented",
          "featured"
        ],
        "summary": "List Checkout Sessions",
        "description": "List checkout sessions.\n\n**Scopes**: `checkouts:read` `checkouts:write`",
        "operationId": "checkouts:list",
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "examples": [
                    "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                  ],
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "examples": [
                      "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                    ],
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "product_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The product ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/products",
                    "resourceName": "Product",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The product ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/products",
                      "resourceName": "Product",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "ProductID Filter",
              "description": "Filter by product ID."
            },
            "description": "Filter by product ID."
          },
          {
            "name": "customer_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The customer ID."
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The customer ID."
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "CustomerID Filter",
              "description": "Filter by customer ID."
            },
            "description": "Filter by customer ID."
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/CheckoutStatus"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CheckoutStatus"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status Filter",
              "description": "Filter by checkout session status."
            },
            "description": "Filter by checkout session status."
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by customer email.",
              "title": "Query"
            },
            "description": "Filter by customer email."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CheckoutSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "-created_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_Checkout_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "checkouts",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.checkouts.list(organization_id=\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\", page=1, limit=10)\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.checkouts.list({\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Operations;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CheckoutsListRequest(\n    organizationId: '1dbfc517-0bbf-4301-9ba8-555ca42b9737',\n);\n\n$responses = $sdk->checkouts->list(\n    request: $request\n);\n\n\nforeach ($responses as $response) {\n    if ($response->statusCode === 200) {\n        // handle response\n    }\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Checkouts.List(ctx, operations.CheckoutsListRequest{\n        OrganizationID: polargo.Pointer(operations.CreateCheckoutsListQueryParamOrganizationIDFilterStr(\n            \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n        )),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceCheckout != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          }
        ]
      },
      "post": {
        "tags": [
          "checkouts",
          "documented",
          "featured"
        ],
        "summary": "Create Checkout Session",
        "description": "Create a checkout session.\n\n**Scopes**: `checkouts:write`",
        "operationId": "checkouts:create",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckoutCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Checkout session created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "checkouts",
        "x-speakeasy-name-override": "create",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.checkouts.create(request={\n        \"customer_billing_address\": {\n            \"country\": \"US\",\n        },\n        \"products\": [\n            \"<value 1>\",\n            \"<value 2>\",\n            \"<value 3>\",\n        ],\n    })\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.checkouts.create({\n    customerBillingAddress: {\n      country: \"US\",\n    },\n    products: [\n      \"<value 1>\",\n      \"<value 2>\",\n      \"<value 3>\",\n    ],\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$request = new Components\\CheckoutCreate(\n    customerBillingAddress: new Components\\Address(\n        country: 'US',\n    ),\n    products: [\n        '<value 1>',\n        '<value 2>',\n        '<value 3>',\n    ],\n);\n\n$response = $sdk->checkouts->create(\n    request: $request\n);\n\nif ($response->checkout !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Checkouts.Create(ctx, components.CheckoutCreate{\n        CustomerBillingAddress: &components.Address{\n            Country: \"US\",\n        },\n        Products: []string{\n            \"<value 1>\",\n            \"<value 2>\",\n            \"<value 3>\",\n        },\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Checkout != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/checkouts/{id}": {
      "get": {
        "tags": [
          "checkouts",
          "documented",
          "featured"
        ],
        "summary": "Get Checkout Session",
        "description": "Get a checkout session by ID.\n\n**Scopes**: `checkouts:read` `checkouts:write`",
        "operationId": "checkouts:get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The checkout session ID.",
              "title": "Id"
            },
            "description": "The checkout session ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          },
          "404": {
            "description": "Checkout session not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "checkouts",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.checkouts.get(id=\"<value>\")\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.checkouts.get({\n    id: \"<value>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->checkouts->get(\n    id: '<value>'\n);\n\nif ($response->checkout !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Checkouts.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Checkout != nil {\n        // handle response\n    }\n}"
          }
        ]
      },
      "patch": {
        "tags": [
          "checkouts",
          "documented",
          "featured"
        ],
        "summary": "Update Checkout Session",
        "description": "Update a checkout session.\n\n**Scopes**: `checkouts:write`",
        "operationId": "checkouts:update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The checkout session ID.",
              "title": "Id"
            },
            "description": "The checkout session ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckoutUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Checkout session updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          },
          "404": {
            "description": "Checkout session not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "403": {
            "description": "The checkout is expired or the customer already has an active subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutForbiddenError"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "checkouts",
        "x-speakeasy-name-override": "update",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.checkouts.update(id=\"<value>\", checkout_update={\n        \"customer_billing_address\": {\n            \"country\": \"US\",\n        },\n    })\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.checkouts.update({\n    id: \"<value>\",\n    checkoutUpdate: {\n      customerBillingAddress: {\n        country: \"US\",\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$checkoutUpdate = new Components\\CheckoutUpdate(\n    customerBillingAddress: new Components\\Address(\n        country: 'US',\n    ),\n);\n\n$response = $sdk->checkouts->update(\n    id: '<value>',\n    checkoutUpdate: $checkoutUpdate\n\n);\n\nif ($response->checkout !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Checkouts.Update(ctx, \"<value>\", components.CheckoutUpdate{\n        CustomerBillingAddress: &components.Address{\n            Country: \"US\",\n        },\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Checkout != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/checkouts/client/{client_secret}": {
      "get": {
        "tags": [
          "checkouts",
          "documented",
          "featured"
        ],
        "summary": "Get Checkout Session from Client",
        "description": "Get a checkout session by client secret.",
        "operationId": "checkouts:client_get",
        "parameters": [
          {
            "name": "client_secret",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The checkout session client secret.",
              "title": "Client Secret"
            },
            "description": "The checkout session client secret."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutPublic"
                }
              }
            }
          },
          "404": {
            "description": "Checkout session not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "410": {
            "description": "The checkout session is expired.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpiredCheckoutError"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "checkouts",
        "x-speakeasy-name-override": "client_get",
        "security": [
          {}
        ],
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar() as polar:\n\n    res = polar.checkouts.client_get(client_secret=\"<value>\")\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.checkouts.clientGet({\n    clientSecret: \"<value>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()->build();\n\n\n\n$response = $sdk->checkouts->clientGet(\n    clientSecret: '<value>'\n);\n\nif ($response->checkoutPublic !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New()\n\n    res, err := s.Checkouts.ClientGet(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CheckoutPublic != nil {\n        // handle response\n    }\n}"
          }
        ]
      },
      "patch": {
        "tags": [
          "checkouts",
          "documented",
          "featured"
        ],
        "summary": "Update Checkout Session from Client",
        "description": "Update a checkout session by client secret.",
        "operationId": "checkouts:client_update",
        "parameters": [
          {
            "name": "client_secret",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The checkout session client secret.",
              "title": "Client Secret"
            },
            "description": "The checkout session client secret."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckoutUpdatePublic"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Checkout session updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutPublic"
                }
              }
            }
          },
          "404": {
            "description": "Checkout session not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "403": {
            "description": "The checkout is expired or the customer already has an active subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutForbiddenError"
                }
              }
            }
          },
          "410": {
            "description": "The checkout session is expired.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpiredCheckoutError"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "checkouts",
        "x-speakeasy-name-override": "client_update",
        "security": [
          {}
        ],
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar() as polar:\n\n    res = polar.checkouts.client_update(client_secret=\"<value>\", checkout_update_public={\n        \"customer_billing_address\": None,\n    })\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.checkouts.clientUpdate({\n    clientSecret: \"<value>\",\n    checkoutUpdatePublic: {\n      customerBillingAddress: null,\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\n\n$sdk = Polar\\Polar::builder()->build();\n\n$checkoutUpdatePublic = new Components\\CheckoutUpdatePublic(\n    customerBillingAddress: null,\n);\n\n$response = $sdk->checkouts->clientUpdate(\n    clientSecret: '<value>',\n    checkoutUpdatePublic: $checkoutUpdatePublic\n\n);\n\nif ($response->checkoutPublic !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New()\n\n    res, err := s.Checkouts.ClientUpdate(ctx, \"<value>\", components.CheckoutUpdatePublic{\n        CustomerBillingAddress: nil,\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CheckoutPublic != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/checkouts/client/{client_secret}/confirm": {
      "post": {
        "tags": [
          "checkouts",
          "documented",
          "featured"
        ],
        "summary": "Confirm Checkout Session from Client",
        "description": "Confirm a checkout session by client secret.\n\nOrders and subscriptions will be processed.",
        "operationId": "checkouts:client_confirm",
        "parameters": [
          {
            "name": "client_secret",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The checkout session client secret.",
              "title": "Client Secret"
            },
            "description": "The checkout session client secret."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckoutConfirmStripe"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Checkout session confirmed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutPublicConfirmed"
                }
              }
            }
          },
          "400": {
            "description": "The payment failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentError"
                }
              }
            }
          },
          "404": {
            "description": "Checkout session not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "403": {
            "description": "The checkout is expired or the customer already has an active subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutForbiddenError"
                }
              }
            }
          },
          "410": {
            "description": "The checkout session is expired.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpiredCheckoutError"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Anonymous",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "checkouts",
        "x-speakeasy-name-override": "client_confirm",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.checkouts.client_confirm(client_secret=\"<value>\", checkout_confirm_stripe={\n        \"customer_billing_address\": {\n            \"country\": \"US\",\n        },\n    })\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.checkouts.clientConfirm({\n    clientSecret: \"<value>\",\n    checkoutConfirmStripe: {\n      customerBillingAddress: {\n        country: \"US\",\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$checkoutConfirmStripe = new Components\\CheckoutConfirmStripe(\n    customerBillingAddress: new Components\\Address(\n        country: 'US',\n    ),\n);\n\n$response = $sdk->checkouts->clientConfirm(\n    clientSecret: '<value>',\n    checkoutConfirmStripe: $checkoutConfirmStripe\n\n);\n\nif ($response->checkoutPublicConfirmed !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Checkouts.ClientConfirm(ctx, \"<value>\", components.CheckoutConfirmStripe{\n        CustomerBillingAddress: &components.Address{\n            Country: \"US\",\n        },\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CheckoutPublicConfirmed != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/files/": {
      "get": {
        "tags": [
          "files",
          "documented"
        ],
        "summary": "List Files",
        "description": "List files.\n\n**Scopes**: `files:read` `files:write`",
        "operationId": "files:list",
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "examples": [
                    "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                  ],
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "examples": [
                      "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                    ],
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "ids",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "FileID Filter",
              "description": "Filter by file ID."
            },
            "description": "Filter by file ID."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_FileRead_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "files",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.files.list(organization_id=\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\", page=1, limit=10)\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.files.list({\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$responses = $sdk->files->list(\n    organizationId: '1dbfc517-0bbf-4301-9ba8-555ca42b9737',\n    page: 1,\n    limit: 10\n\n);\n\n\nforeach ($responses as $response) {\n    if ($response->statusCode === 200) {\n        // handle response\n    }\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Files.List(ctx, polargo.Pointer(operations.CreateFilesListQueryParamOrganizationIDFilterStr(\n        \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    )), nil, polargo.Int64(1), polargo.Int64(10))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceFileRead != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          }
        ]
      },
      "post": {
        "tags": [
          "files",
          "documented"
        ],
        "summary": "Create File",
        "description": "Create a file.\n\n**Scopes**: `files:write`",
        "operationId": "files:create",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "File created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileUpload"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "files",
        "x-speakeasy-name-override": "create",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.files.create(request={\n        \"name\": \"<value>\",\n        \"mime_type\": \"<value>\",\n        \"size\": 612128,\n        \"upload\": {\n            \"parts\": [],\n        },\n        \"service\": \"downloadable\",\n    })\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.files.create({\n    name: \"<value>\",\n    mimeType: \"<value>\",\n    size: 612128,\n    upload: {\n      parts: [],\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$request = new Components\\DownloadableFileCreate(\n    name: '<value>',\n    mimeType: '<value>',\n    size: 612128,\n    upload: new Components\\S3FileCreateMultipart(\n        parts: [],\n    ),\n);\n\n$response = $sdk->files->create(\n    request: $request\n);\n\nif ($response->fileUpload !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Files.Create(ctx, components.CreateFileCreateDownloadable(\n        components.DownloadableFileCreate{\n            Name: \"<value>\",\n            MimeType: \"<value>\",\n            Size: 612128,\n            Upload: components.S3FileCreateMultipart{\n                Parts: []components.S3FileCreatePart{},\n            },\n        },\n    ))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.FileUpload != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/files/{id}/uploaded": {
      "post": {
        "tags": [
          "files",
          "documented"
        ],
        "summary": "Complete File Upload",
        "description": "Complete a file upload.\n\n**Scopes**: `files:write`",
        "operationId": "files:uploaded",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The file ID.",
              "title": "Id"
            },
            "description": "The file ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileUploadCompleted"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File upload completed.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DownloadableFileRead"
                    },
                    {
                      "$ref": "#/components/schemas/ProductMediaFileRead"
                    },
                    {
                      "$ref": "#/components/schemas/OrganizationAvatarFileRead"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "service",
                    "mapping": {
                      "downloadable": "#/components/schemas/DownloadableFileRead",
                      "product_media": "#/components/schemas/ProductMediaFileRead",
                      "organization_avatar": "#/components/schemas/OrganizationAvatarFileRead"
                    }
                  },
                  "title": "Response Files:Uploaded"
                }
              }
            }
          },
          "403": {
            "description": "You don't have the permission to update this file.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotPermitted"
                }
              }
            }
          },
          "404": {
            "description": "File not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "files",
        "x-speakeasy-name-override": "uploaded",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.files.uploaded(id=\"<value>\", file_upload_completed={\n        \"id\": \"<id>\",\n        \"path\": \"/boot\",\n        \"parts\": [\n            {\n                \"number\": 979613,\n                \"checksum_etag\": \"<value>\",\n                \"checksum_sha256_base64\": \"<value>\",\n            },\n        ],\n    })\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.files.uploaded({\n    id: \"<value>\",\n    fileUploadCompleted: {\n      id: \"<id>\",\n      path: \"/boot\",\n      parts: [\n        {\n          number: 979613,\n          checksumEtag: \"<value>\",\n          checksumSha256Base64: \"<value>\",\n        },\n      ],\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$fileUploadCompleted = new Components\\FileUploadCompleted(\n    id: '<id>',\n    path: '/boot',\n    parts: [\n        new Components\\S3FileUploadCompletedPart(\n            number: 979613,\n            checksumEtag: '<value>',\n            checksumSha256Base64: '<value>',\n        ),\n    ],\n);\n\n$response = $sdk->files->uploaded(\n    id: '<value>',\n    fileUploadCompleted: $fileUploadCompleted\n\n);\n\nif ($response->responseFilesUploaded !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Files.Uploaded(ctx, \"<value>\", components.FileUploadCompleted{\n        ID: \"<id>\",\n        Path: \"/boot\",\n        Parts: []components.S3FileUploadCompletedPart{\n            components.S3FileUploadCompletedPart{\n                Number: 979613,\n                ChecksumEtag: \"<value>\",\n                ChecksumSha256Base64: polargo.String(\"<value>\"),\n            },\n        },\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ResponseFilesUploaded != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/files/{id}": {
      "patch": {
        "tags": [
          "files",
          "documented"
        ],
        "summary": "Update File",
        "description": "Update a file.\n\n**Scopes**: `files:write`",
        "operationId": "files:update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The file ID.",
              "title": "Id"
            },
            "description": "The file ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilePatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File updated.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DownloadableFileRead"
                    },
                    {
                      "$ref": "#/components/schemas/ProductMediaFileRead"
                    },
                    {
                      "$ref": "#/components/schemas/OrganizationAvatarFileRead"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "service",
                    "mapping": {
                      "downloadable": "#/components/schemas/DownloadableFileRead",
                      "product_media": "#/components/schemas/ProductMediaFileRead",
                      "organization_avatar": "#/components/schemas/OrganizationAvatarFileRead"
                    }
                  },
                  "title": "Response Files:Update"
                }
              }
            }
          },
          "403": {
            "description": "You don't have the permission to update this file.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotPermitted"
                }
              }
            }
          },
          "404": {
            "description": "File not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "files",
        "x-speakeasy-name-override": "update",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.files.update(id=\"<value>\", file_patch={})\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.files.update({\n    id: \"<value>\",\n    filePatch: {},\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$filePatch = new Components\\FilePatch();\n\n$response = $sdk->files->update(\n    id: '<value>',\n    filePatch: $filePatch\n\n);\n\nif ($response->responseFilesUpdate !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Files.Update(ctx, \"<value>\", components.FilePatch{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ResponseFilesUpdate != nil {\n        // handle response\n    }\n}"
          }
        ]
      },
      "delete": {
        "tags": [
          "files",
          "documented"
        ],
        "summary": "Delete File",
        "description": "Delete a file.\n\n**Scopes**: `files:write`",
        "operationId": "files:delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "File deleted."
          },
          "403": {
            "description": "You don't have the permission to delete this file.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotPermitted"
                }
              }
            }
          },
          "404": {
            "description": "File not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "files",
        "x-speakeasy-name-override": "delete",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    polar.files.delete(id=\"<value>\")\n\n    # Use the SDK ..."
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  await polar.files.delete({\n    id: \"<value>\",\n  });\n\n\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->files->delete(\n    id: '<value>'\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Files.Delete(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/metrics/": {
      "get": {
        "tags": [
          "metrics",
          "documented",
          "mcp"
        ],
        "summary": "Get Metrics",
        "description": "Get metrics about your orders and subscriptions.\n\nCurrency values are output in cents.\n\n**Scopes**: `metrics:read`",
        "operationId": "metrics:get",
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "description": "Start date.",
              "title": "Start Date"
            },
            "description": "Start date."
          },
          {
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "description": "End date.",
              "title": "End Date"
            },
            "description": "End date."
          },
          {
            "name": "interval",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TimeInterval",
              "description": "Interval between two timestamps."
            },
            "description": "Interval between two timestamps."
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "examples": [
                    "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                  ],
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "examples": [
                      "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                    ],
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "product_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The product ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/products",
                    "resourceName": "Product",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The product ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/products",
                      "resourceName": "Product",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "ProductID Filter",
              "description": "Filter by product ID."
            },
            "description": "Filter by product ID."
          },
          {
            "name": "billing_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ProductBillingType"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductBillingType"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "ProductBillingType Filter",
              "description": "Filter by billing type. `recurring` will filter data corresponding to subscriptions creations or renewals. `one_time` will filter data corresponding to one-time purchases."
            },
            "description": "Filter by billing type. `recurring` will filter data corresponding to subscriptions creations or renewals. `one_time` will filter data corresponding to one-time purchases."
          },
          {
            "name": "customer_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The customer ID."
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The customer ID."
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "CustomerID Filter",
              "description": "Filter by customer ID."
            },
            "description": "Filter by customer ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": false,
          "scopes": [
            "read",
            "metrics"
          ]
        },
        "x-speakeasy-group": "metrics",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from datetime import date\nimport polar_sdk\nfrom polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.metrics.get(start_date=date.fromisoformat(\"2025-03-14\"), end_date=date.fromisoformat(\"2025-03-18\"), interval=polar_sdk.TimeInterval.HOUR, organization_id=None)\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\nimport { RFCDate } from \"@polar-sh/sdk/types/rfcdate.js\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.metrics.get({\n    startDate: new RFCDate(\"2025-03-14\"),\n    endDate: new RFCDate(\"2025-03-18\"),\n    interval: \"hour\",\n    organizationId: null,\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Brick\\DateTime\\LocalDate;\nuse Polar;\nuse Polar\\Models\\Components;\nuse Polar\\Models\\Operations;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\MetricsGetRequest(\n    startDate: LocalDate::parse('2025-03-14'),\n    endDate: LocalDate::parse('2025-03-18'),\n    interval: Components\\TimeInterval::Hour,\n    organizationId: null,\n);\n\n$response = $sdk->metrics->get(\n    request: $request\n);\n\nif ($response->metricsResponse !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/types\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Metrics.Get(ctx, operations.MetricsGetRequest{\n        StartDate: types.MustDateFromString(\"2025-03-14\"),\n        EndDate: types.MustDateFromString(\"2025-03-18\"),\n        Interval: components.TimeIntervalHour,\n        OrganizationID: nil,\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.MetricsResponse != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/metrics/limits": {
      "get": {
        "tags": [
          "metrics",
          "documented",
          "mcp"
        ],
        "summary": "Get Metrics Limits",
        "description": "Get the interval limits for the metrics endpoint.\n\n**Scopes**: `metrics:read`",
        "operationId": "metrics:limits",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsLimits"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": false,
          "scopes": [
            "read",
            "metrics"
          ]
        },
        "x-speakeasy-group": "metrics",
        "x-speakeasy-name-override": "limits",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.metrics.limits()\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.metrics.limits();\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->metrics->limits(\n\n);\n\nif ($response->metricsLimits !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Metrics.Limits(ctx)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.MetricsLimits != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/license-keys/": {
      "get": {
        "tags": [
          "license_keys",
          "documented",
          "featured"
        ],
        "summary": "List License Keys",
        "description": "Get license keys connected to the given organization & filters.\n\n**Scopes**: `license_keys:read` `license_keys:write`",
        "operationId": "license_keys:list",
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "examples": [
                    "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                  ],
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "examples": [
                      "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                    ],
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "benefit_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The benefit ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/benefits",
                    "resourceName": "Benefit",
                    "displayProperty": "description"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The benefit ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/benefits",
                      "resourceName": "Benefit",
                      "displayProperty": "description"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "BenefitID Filter",
              "description": "Filter by benefit ID."
            },
            "description": "Filter by benefit ID."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_LicenseKeyRead_"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized to manage license key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "License key not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "license_keys",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.license_keys.list(organization_id=\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\", page=1, limit=10)\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.licenseKeys.list({\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$responses = $sdk->licenseKeys->list(\n    organizationId: '1dbfc517-0bbf-4301-9ba8-555ca42b9737',\n    page: 1,\n    limit: 10\n\n);\n\n\nforeach ($responses as $response) {\n    if ($response->statusCode === 200) {\n        // handle response\n    }\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.LicenseKeys.List(ctx, polargo.Pointer(operations.CreateLicenseKeysListQueryParamOrganizationIDFilterStr(\n        \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    )), nil, polargo.Int64(1), polargo.Int64(10))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceLicenseKeyRead != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          }
        ]
      }
    },
    "/v1/license-keys/{id}": {
      "get": {
        "tags": [
          "license_keys",
          "documented",
          "featured"
        ],
        "summary": "Get License Key",
        "description": "Get a license key.\n\n**Scopes**: `license_keys:read` `license_keys:write`",
        "operationId": "license_keys:get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseKeyWithActivations"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized to manage license key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "License key not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "license_keys",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.license_keys.get(id=\"<value>\")\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.licenseKeys.get({\n    id: \"<value>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->licenseKeys->get(\n    id: '<value>'\n);\n\nif ($response->licenseKeyWithActivations !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.LicenseKeys.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.LicenseKeyWithActivations != nil {\n        // handle response\n    }\n}"
          }
        ]
      },
      "patch": {
        "tags": [
          "license_keys",
          "documented",
          "featured"
        ],
        "summary": "Update License Key",
        "description": "Update a license key.\n\n**Scopes**: `license_keys:write`",
        "operationId": "license_keys:update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LicenseKeyUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseKeyRead"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized to manage license key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "License key not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "license_keys",
        "x-speakeasy-name-override": "update",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.license_keys.update(id=\"<value>\", license_key_update={})\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.licenseKeys.update({\n    id: \"<value>\",\n    licenseKeyUpdate: {},\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$licenseKeyUpdate = new Components\\LicenseKeyUpdate();\n\n$response = $sdk->licenseKeys->update(\n    id: '<value>',\n    licenseKeyUpdate: $licenseKeyUpdate\n\n);\n\nif ($response->licenseKeyRead !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.LicenseKeys.Update(ctx, \"<value>\", components.LicenseKeyUpdate{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.LicenseKeyRead != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/license-keys/{id}/activations/{activation_id}": {
      "get": {
        "tags": [
          "license_keys",
          "documented",
          "featured"
        ],
        "summary": "Get Activation",
        "description": "Get a license key activation.\n\n**Scopes**: `license_keys:read` `license_keys:write`",
        "operationId": "license_keys:get_activation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            }
          },
          {
            "name": "activation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "title": "Activation Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseKeyActivationRead"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized to manage license key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "License key not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "license_keys",
        "x-speakeasy-name-override": "get_activation",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.license_keys.get_activation(id=\"<value>\", activation_id=\"<value>\")\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.licenseKeys.getActivation({\n    id: \"<value>\",\n    activationId: \"<value>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->licenseKeys->getActivation(\n    id: '<value>',\n    activationId: '<value>'\n\n);\n\nif ($response->licenseKeyActivationRead !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.LicenseKeys.GetActivation(ctx, \"<value>\", \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.LicenseKeyActivationRead != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/checkout-links/": {
      "get": {
        "tags": [
          "checkout-links",
          "documented"
        ],
        "summary": "List Checkout Links",
        "description": "List checkout links.\n\n**Scopes**: `checkout_links:read` `checkout_links:write`",
        "operationId": "checkout-links:list",
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "examples": [
                    "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                  ],
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "examples": [
                      "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                    ],
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "product_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The product ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/products",
                    "resourceName": "Product",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The product ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/products",
                      "resourceName": "Product",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "ProductID Filter",
              "description": "Filter by product ID."
            },
            "description": "Filter by product ID."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CheckoutLinkSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "created_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_CheckoutLink_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "checkout-links",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.checkout_links.list(organization_id=\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\", page=1, limit=10)\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.checkoutLinks.list({\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Operations;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CheckoutLinksListRequest(\n    organizationId: '1dbfc517-0bbf-4301-9ba8-555ca42b9737',\n);\n\n$responses = $sdk->checkoutLinks->list(\n    request: $request\n);\n\n\nforeach ($responses as $response) {\n    if ($response->statusCode === 200) {\n        // handle response\n    }\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CheckoutLinks.List(ctx, operations.CheckoutLinksListRequest{\n        OrganizationID: polargo.Pointer(operations.CreateCheckoutLinksListQueryParamOrganizationIDFilterStr(\n            \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n        )),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceCheckoutLink != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          }
        ]
      },
      "post": {
        "tags": [
          "checkout-links",
          "documented"
        ],
        "summary": "Create Checkout Link",
        "description": "Create a checkout link.\n\n**Scopes**: `checkout_links:write`",
        "operationId": "checkout-links:create",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/CheckoutLinkCreateProductPrice"
                  },
                  {
                    "$ref": "#/components/schemas/CheckoutLinkCreateProduct"
                  },
                  {
                    "$ref": "#/components/schemas/CheckoutLinkCreateProducts"
                  }
                ],
                "title": "Checkout Link Create"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Checkout link created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutLink"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "checkout-links",
        "x-speakeasy-name-override": "create",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.checkout_links.create(request={\n        \"payment_processor\": \"stripe\",\n        \"allow_discount_codes\": True,\n        \"require_billing_address\": False,\n        \"product_price_id\": \"<value>\",\n    })\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.checkoutLinks.create({\n    allowDiscountCodes: true,\n    requireBillingAddress: false,\n    productPriceId: \"<value>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$request = new Components\\CheckoutLinkCreateProductPrice(\n    productPriceId: '<value>',\n);\n\n$response = $sdk->checkoutLinks->create(\n    request: $request\n);\n\nif ($response->checkoutLink !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CheckoutLinks.Create(ctx, operations.CreateCheckoutLinksCreateCheckoutLinkCreateCheckoutLinkCreateProductPrice(\n        components.CheckoutLinkCreateProductPrice{\n            ProductPriceID: \"<value>\",\n        },\n    ))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CheckoutLink != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/checkout-links/{id}": {
      "get": {
        "tags": [
          "checkout-links",
          "documented"
        ],
        "summary": "Get Checkout Link",
        "description": "Get a checkout link by ID.\n\n**Scopes**: `checkout_links:read` `checkout_links:write`",
        "operationId": "checkout-links:get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The checkout link ID.",
              "title": "Id"
            },
            "description": "The checkout link ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutLink"
                }
              }
            }
          },
          "404": {
            "description": "Checkout link not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "checkout-links",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.checkout_links.get(id=\"<value>\")\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.checkoutLinks.get({\n    id: \"<value>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->checkoutLinks->get(\n    id: '<value>'\n);\n\nif ($response->checkoutLink !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CheckoutLinks.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CheckoutLink != nil {\n        // handle response\n    }\n}"
          }
        ]
      },
      "patch": {
        "tags": [
          "checkout-links",
          "documented"
        ],
        "summary": "Update Checkout Link",
        "description": "Update a checkout link.\n\n**Scopes**: `checkout_links:write`",
        "operationId": "checkout-links:update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The checkout link ID.",
              "title": "Id"
            },
            "description": "The checkout link ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckoutLinkUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Checkout link updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutLink"
                }
              }
            }
          },
          "404": {
            "description": "Checkout link not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "checkout-links",
        "x-speakeasy-name-override": "update",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.checkout_links.update(id=\"<value>\", checkout_link_update={})\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.checkoutLinks.update({\n    id: \"<value>\",\n    checkoutLinkUpdate: {},\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$checkoutLinkUpdate = new Components\\CheckoutLinkUpdate();\n\n$response = $sdk->checkoutLinks->update(\n    id: '<value>',\n    checkoutLinkUpdate: $checkoutLinkUpdate\n\n);\n\nif ($response->checkoutLink !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CheckoutLinks.Update(ctx, \"<value>\", components.CheckoutLinkUpdate{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CheckoutLink != nil {\n        // handle response\n    }\n}"
          }
        ]
      },
      "delete": {
        "tags": [
          "checkout-links",
          "documented"
        ],
        "summary": "Delete Checkout Link",
        "description": "Delete a checkout link.\n\n**Scopes**: `checkout_links:write`",
        "operationId": "checkout-links:delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The checkout link ID.",
              "title": "Id"
            },
            "description": "The checkout link ID."
          }
        ],
        "responses": {
          "204": {
            "description": "Checkout link deleted."
          },
          "404": {
            "description": "Checkout link not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "checkout-links",
        "x-speakeasy-name-override": "delete",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    polar.checkout_links.delete(id=\"<value>\")\n\n    # Use the SDK ..."
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  await polar.checkoutLinks.delete({\n    id: \"<value>\",\n  });\n\n\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->checkoutLinks->delete(\n    id: '<value>'\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CheckoutLinks.Delete(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/custom-fields/": {
      "get": {
        "tags": [
          "custom-fields",
          "documented"
        ],
        "summary": "List Custom Fields",
        "description": "List custom fields.\n\n**Scopes**: `custom_fields:read` `custom_fields:write`",
        "operationId": "custom-fields:list",
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "examples": [
                    "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                  ],
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "examples": [
                      "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                    ],
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by custom field name or slug.",
              "title": "Query"
            },
            "description": "Filter by custom field name or slug."
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/CustomFieldType"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomFieldType"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "CustomFieldType Filter",
              "description": "Filter by custom field type."
            },
            "description": "Filter by custom field type.",
            "x-speakeasy-name-override": "type_filter"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomFieldSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "slug"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_CustomField_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "custom-fields",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.custom_fields.list(organization_id=\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\", page=1, limit=10)\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customFields.list({\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Operations;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CustomFieldsListRequest(\n    organizationId: '1dbfc517-0bbf-4301-9ba8-555ca42b9737',\n);\n\n$responses = $sdk->customFields->list(\n    request: $request\n);\n\n\nforeach ($responses as $response) {\n    if ($response->statusCode === 200) {\n        // handle response\n    }\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomFields.List(ctx, operations.CustomFieldsListRequest{\n        OrganizationID: polargo.Pointer(operations.CreateCustomFieldsListQueryParamOrganizationIDFilterStr(\n            \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n        )),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceCustomField != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          }
        ]
      },
      "post": {
        "tags": [
          "custom-fields",
          "documented"
        ],
        "summary": "Create Custom Field",
        "description": "Create a custom field.\n\n**Scopes**: `custom_fields:write`",
        "operationId": "custom-fields:create",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Custom field created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomField",
                  "title": "CustomField"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "custom-fields",
        "x-speakeasy-name-override": "create",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.custom_fields.create(request={\n        \"type\": \"select\",\n        \"slug\": \"<value>\",\n        \"name\": \"<value>\",\n        \"properties\": {\n            \"options\": [],\n        },\n    })\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customFields.create({\n    slug: \"<value>\",\n    name: \"<value>\",\n    properties: {\n      options: [],\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$request = new Components\\CustomFieldCreateSelect(\n    slug: '<value>',\n    name: '<value>',\n    properties: new Components\\CustomFieldSelectProperties(\n        options: [],\n    ),\n);\n\n$response = $sdk->customFields->create(\n    request: $request\n);\n\nif ($response->customField !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomFields.Create(ctx, components.CreateCustomFieldCreateSelect(\n        components.CustomFieldCreateSelect{\n            Slug: \"<value>\",\n            Name: \"<value>\",\n            Properties: components.CustomFieldSelectProperties{\n                Options: []components.CustomFieldSelectOption{},\n            },\n        },\n    ))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CustomField != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/custom-fields/{id}": {
      "get": {
        "tags": [
          "custom-fields",
          "documented"
        ],
        "summary": "Get Custom Field",
        "description": "Get a custom field by ID.\n\n**Scopes**: `custom_fields:read` `custom_fields:write`",
        "operationId": "custom-fields:get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The custom field ID.",
              "title": "Id"
            },
            "description": "The custom field ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomField",
                  "title": "CustomField"
                }
              }
            }
          },
          "404": {
            "description": "Custom field not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "custom-fields",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.custom_fields.get(id=\"<value>\")\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customFields.get({\n    id: \"<value>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->customFields->get(\n    id: '<value>'\n);\n\nif ($response->customField !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomFields.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CustomField != nil {\n        // handle response\n    }\n}"
          }
        ]
      },
      "patch": {
        "tags": [
          "custom-fields",
          "documented"
        ],
        "summary": "Update Custom Field",
        "description": "Update a custom field.\n\n**Scopes**: `custom_fields:write`",
        "operationId": "custom-fields:update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The custom field ID.",
              "title": "Id"
            },
            "description": "The custom field ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Custom field updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomField",
                  "title": "CustomField"
                }
              }
            }
          },
          "404": {
            "description": "Custom field not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "custom-fields",
        "x-speakeasy-name-override": "update",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.custom_fields.update(id=\"<value>\", custom_field_update={\n        \"type\": \"date\",\n    })\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customFields.update({\n    id: \"<value>\",\n    customFieldUpdate: {},\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->customFields->update(\n    id: '<value>',\n    customFieldUpdate: new Components\\CustomFieldUpdateDate()\n\n);\n\nif ($response->customField !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomFields.Update(ctx, \"<value>\", components.CreateCustomFieldUpdateDate(\n        components.CustomFieldUpdateDate{},\n    ))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CustomField != nil {\n        // handle response\n    }\n}"
          }
        ]
      },
      "delete": {
        "tags": [
          "custom-fields",
          "documented"
        ],
        "summary": "Delete Custom Field",
        "description": "Delete a custom field.\n\n**Scopes**: `custom_fields:write`",
        "operationId": "custom-fields:delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The custom field ID.",
              "title": "Id"
            },
            "description": "The custom field ID."
          }
        ],
        "responses": {
          "204": {
            "description": "Custom field deleted."
          },
          "404": {
            "description": "Custom field not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "custom-fields",
        "x-speakeasy-name-override": "delete",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    polar.custom_fields.delete(id=\"<value>\")\n\n    # Use the SDK ..."
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  await polar.customFields.delete({\n    id: \"<value>\",\n  });\n\n\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->customFields->delete(\n    id: '<value>'\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomFields.Delete(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/discounts/": {
      "get": {
        "tags": [
          "discounts",
          "featured",
          "documented"
        ],
        "summary": "List Discounts",
        "description": "List discounts.\n\n**Scopes**: `discounts:read` `discounts:write`",
        "operationId": "discounts:list",
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "examples": [
                    "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                  ],
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "examples": [
                      "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                    ],
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by name.",
              "title": "Query"
            },
            "description": "Filter by name."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DiscountSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "-created_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_Discount_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "discounts",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.discounts.list(organization_id=\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\", page=1, limit=10)\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.discounts.list({\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Operations;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\DiscountsListRequest(\n    organizationId: '1dbfc517-0bbf-4301-9ba8-555ca42b9737',\n);\n\n$responses = $sdk->discounts->list(\n    request: $request\n);\n\n\nforeach ($responses as $response) {\n    if ($response->statusCode === 200) {\n        // handle response\n    }\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Discounts.List(ctx, operations.DiscountsListRequest{\n        OrganizationID: polargo.Pointer(operations.CreateDiscountsListQueryParamOrganizationIDFilterStr(\n            \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n        )),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceDiscount != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          }
        ]
      },
      "post": {
        "tags": [
          "discounts",
          "featured",
          "documented"
        ],
        "summary": "Create Discount",
        "description": "Create a discount.\n\n**Scopes**: `discounts:write`",
        "operationId": "discounts:create",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscountCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Discount created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Discount",
                  "title": "Discount"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "discounts",
        "x-speakeasy-name-override": "create",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "import polar_sdk\nfrom polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.discounts.create(request={\n        \"duration\": polar_sdk.DiscountDuration.ONCE,\n        \"type\": polar_sdk.DiscountType.FIXED,\n        \"basis_points\": 449604,\n        \"name\": \"<value>\",\n        \"organization_id\": \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    })\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.discounts.create({\n    duration: \"once\",\n    type: \"fixed\",\n    basisPoints: 449604,\n    name: \"<value>\",\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$request = new Components\\DiscountPercentageOnceForeverDurationCreate(\n    duration: Components\\DiscountDuration::Once,\n    type: Components\\DiscountType::Fixed,\n    basisPoints: 449604,\n    name: '<value>',\n    organizationId: '1dbfc517-0bbf-4301-9ba8-555ca42b9737',\n);\n\n$response = $sdk->discounts->create(\n    request: $request\n);\n\nif ($response->discount !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Discounts.Create(ctx, components.CreateDiscountCreateDiscountPercentageOnceForeverDurationCreate(\n        components.DiscountPercentageOnceForeverDurationCreate{\n            Duration: components.DiscountDurationOnce,\n            Type: components.DiscountTypeFixed,\n            BasisPoints: 449604,\n            Name: \"<value>\",\n            OrganizationID: polargo.String(\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"),\n        },\n    ))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Discount != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/discounts/{id}": {
      "get": {
        "tags": [
          "discounts",
          "featured",
          "documented"
        ],
        "summary": "Get Discount",
        "description": "Get a discount by ID.\n\n**Scopes**: `discounts:read` `discounts:write`",
        "operationId": "discounts:get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The discount ID.",
              "title": "Id"
            },
            "description": "The discount ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Discount",
                  "title": "Discount"
                }
              }
            }
          },
          "404": {
            "description": "Discount not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "discounts",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.discounts.get(id=\"<value>\")\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.discounts.get({\n    id: \"<value>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->discounts->get(\n    id: '<value>'\n);\n\nif ($response->discount !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Discounts.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Discount != nil {\n        // handle response\n    }\n}"
          }
        ]
      },
      "patch": {
        "tags": [
          "discounts",
          "featured",
          "documented"
        ],
        "summary": "Update Discount",
        "description": "Update a discount.\n\n**Scopes**: `discounts:write`",
        "operationId": "discounts:update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The discount ID.",
              "title": "Id"
            },
            "description": "The discount ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscountUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Discount updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Discount",
                  "title": "Discount"
                }
              }
            }
          },
          "404": {
            "description": "Discount not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "discounts",
        "x-speakeasy-name-override": "update",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.discounts.update(id=\"<value>\", discount_update={})\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.discounts.update({\n    id: \"<value>\",\n    discountUpdate: {},\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$discountUpdate = new Components\\DiscountUpdate();\n\n$response = $sdk->discounts->update(\n    id: '<value>',\n    discountUpdate: $discountUpdate\n\n);\n\nif ($response->discount !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Discounts.Update(ctx, \"<value>\", components.DiscountUpdate{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Discount != nil {\n        // handle response\n    }\n}"
          }
        ]
      },
      "delete": {
        "tags": [
          "discounts",
          "featured",
          "documented"
        ],
        "summary": "Delete Discount",
        "description": "Delete a discount.\n\n**Scopes**: `discounts:write`",
        "operationId": "discounts:delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The discount ID.",
              "title": "Id"
            },
            "description": "The discount ID."
          }
        ],
        "responses": {
          "204": {
            "description": "Discount deleted."
          },
          "404": {
            "description": "Discount not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "discounts",
        "x-speakeasy-name-override": "delete",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    polar.discounts.delete(id=\"<value>\")\n\n    # Use the SDK ..."
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  await polar.discounts.delete({\n    id: \"<value>\",\n  });\n\n\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->discounts->delete(\n    id: '<value>'\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Discounts.Delete(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/customers/": {
      "get": {
        "tags": [
          "customers",
          "documented",
          "featured",
          "mcp"
        ],
        "summary": "List Customers",
        "description": "List customers.\n\n**Scopes**: `customers:read` `customers:write`",
        "operationId": "customers:list",
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "examples": [
                    "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                  ],
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "examples": [
                      "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                    ],
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "email",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by exact email.",
              "title": "Email"
            },
            "description": "Filter by exact email."
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by name or email.",
              "title": "Query"
            },
            "description": "Filter by name or email."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "-created_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          },
          {
            "name": "metadata",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "schema": {
              "$ref": "#/components/schemas/MetadataQuery"
            },
            "description": "Filter by metadata key-value pairs. It uses the `deepObject` style, e.g. `?metadata[key]=value`."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_Customer_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-mcp": {
          "disabled": false,
          "scopes": [
            "read",
            "customers"
          ]
        },
        "x-speakeasy-group": "customers",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.customers.list(organization_id=\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\", page=1, limit=10)\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customers.list({\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Operations;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CustomersListRequest(\n    organizationId: '1dbfc517-0bbf-4301-9ba8-555ca42b9737',\n);\n\n$responses = $sdk->customers->list(\n    request: $request\n);\n\n\nforeach ($responses as $response) {\n    if ($response->statusCode === 200) {\n        // handle response\n    }\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Customers.List(ctx, operations.CustomersListRequest{\n        OrganizationID: polargo.Pointer(operations.CreateCustomersListQueryParamOrganizationIDFilterStr(\n            \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n        )),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceCustomer != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          }
        ]
      },
      "post": {
        "tags": [
          "customers",
          "documented",
          "featured",
          "mcp"
        ],
        "summary": "Create Customer",
        "description": "Create a customer.\n\n**Scopes**: `customers:write`",
        "operationId": "customers:create",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Customer created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": false,
          "scopes": [
            "write",
            "customers"
          ]
        },
        "x-speakeasy-group": "customers",
        "x-speakeasy-name-override": "create",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.customers.create(request={\n        \"external_id\": \"usr_1337\",\n        \"email\": \"customer@example.com\",\n        \"name\": \"John Doe\",\n        \"billing_address\": {\n            \"country\": \"US\",\n        },\n        \"tax_id\": [\n            \"911144442\",\n            \"us_ein\",\n        ],\n        \"organization_id\": \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    })\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customers.create({\n    externalId: \"usr_1337\",\n    email: \"customer@example.com\",\n    name: \"John Doe\",\n    billingAddress: {\n      country: \"US\",\n    },\n    taxId: [\n      \"911144442\",\n      \"us_ein\",\n    ],\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$request = new Components\\CustomerCreate(\n    externalId: 'usr_1337',\n    email: 'customer@example.com',\n    name: 'John Doe',\n    billingAddress: new Components\\Address(\n        country: 'US',\n    ),\n    taxId: [\n        '911144442',\n        'us_ein',\n    ],\n    organizationId: '1dbfc517-0bbf-4301-9ba8-555ca42b9737',\n);\n\n$response = $sdk->customers->create(\n    request: $request\n);\n\nif ($response->customer !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Customers.Create(ctx, components.CustomerCreate{\n        ExternalID: polargo.String(\"usr_1337\"),\n        Email: \"customer@example.com\",\n        Name: polargo.String(\"John Doe\"),\n        BillingAddress: &components.Address{\n            Country: \"US\",\n        },\n        TaxID: []*components.CustomerCreateTaxID{\n            polargo.Pointer(components.CreateCustomerCreateTaxIDStr(\n                \"911144442\",\n            )),\n            polargo.Pointer(components.CreateCustomerCreateTaxIDStr(\n                \"us_ein\",\n            )),\n        },\n        OrganizationID: polargo.String(\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Customer != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/customers/{id}": {
      "get": {
        "tags": [
          "customers",
          "documented",
          "featured",
          "mcp"
        ],
        "summary": "Get Customer",
        "description": "Get a customer by ID.\n\n**Scopes**: `customers:read` `customers:write`",
        "operationId": "customers:get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The customer ID.",
              "title": "Id"
            },
            "description": "The customer ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "404": {
            "description": "Customer not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": false,
          "scopes": [
            "read",
            "customers"
          ]
        },
        "x-speakeasy-group": "customers",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.customers.get(id=\"<value>\")\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customers.get({\n    id: \"<value>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->customers->get(\n    id: '<value>'\n);\n\nif ($response->customer !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Customers.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Customer != nil {\n        // handle response\n    }\n}"
          }
        ]
      },
      "patch": {
        "tags": [
          "customers",
          "documented",
          "featured",
          "mcp"
        ],
        "summary": "Update Customer",
        "description": "Update a customer.\n\n**Scopes**: `customers:write`",
        "operationId": "customers:update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The customer ID.",
              "title": "Id"
            },
            "description": "The customer ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Customer updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "404": {
            "description": "Customer not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": false,
          "scopes": [
            "write",
            "customers"
          ]
        },
        "x-speakeasy-group": "customers",
        "x-speakeasy-name-override": "update",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.customers.update(id=\"<value>\", customer_update={\n        \"email\": \"customer@example.com\",\n        \"name\": \"John Doe\",\n        \"billing_address\": {\n            \"country\": \"US\",\n        },\n        \"tax_id\": [\n            \"911144442\",\n            \"us_ein\",\n        ],\n        \"external_id\": \"usr_1337\",\n    })\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customers.update({\n    id: \"<value>\",\n    customerUpdate: {\n      email: \"customer@example.com\",\n      name: \"John Doe\",\n      billingAddress: {\n        country: \"US\",\n      },\n      taxId: [\n        \"911144442\",\n        \"us_ein\",\n      ],\n      externalId: \"usr_1337\",\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$customerUpdate = new Components\\CustomerUpdate(\n    email: 'customer@example.com',\n    name: 'John Doe',\n    billingAddress: new Components\\Address(\n        country: 'US',\n    ),\n    taxId: [\n        '911144442',\n        'us_ein',\n    ],\n    externalId: 'usr_1337',\n);\n\n$response = $sdk->customers->update(\n    id: '<value>',\n    customerUpdate: $customerUpdate\n\n);\n\nif ($response->customer !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Customers.Update(ctx, \"<value>\", components.CustomerUpdate{\n        Email: polargo.String(\"customer@example.com\"),\n        Name: polargo.String(\"John Doe\"),\n        BillingAddress: &components.Address{\n            Country: \"US\",\n        },\n        TaxID: []*components.CustomerUpdateTaxID{\n            polargo.Pointer(components.CreateCustomerUpdateTaxIDStr(\n                \"911144442\",\n            )),\n            polargo.Pointer(components.CreateCustomerUpdateTaxIDStr(\n                \"us_ein\",\n            )),\n        },\n        ExternalID: polargo.String(\"usr_1337\"),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Customer != nil {\n        // handle response\n    }\n}"
          }
        ]
      },
      "delete": {
        "tags": [
          "customers",
          "documented",
          "featured",
          "mcp"
        ],
        "summary": "Delete Customer",
        "description": "Delete a customer.\n\nThis action cannot be undone and will immediately:\n- Cancel any active subscriptions for the customer\n- Revoke all their benefits\n- Clear any `external_id`\n\nUse it only in the context of deleting a user within your\nown service. Otherwise, use more granular API endpoints to cancel\na specific subscription or revoke certain benefits.\n\nNote: The customers information will nonetheless be retained for historic\norders and subscriptions.\n\n**Scopes**: `customers:write`",
        "operationId": "customers:delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The customer ID.",
              "title": "Id"
            },
            "description": "The customer ID."
          }
        ],
        "responses": {
          "204": {
            "description": "Customer deleted."
          },
          "404": {
            "description": "Customer not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": false,
          "scopes": [
            "write",
            "customers"
          ]
        },
        "x-speakeasy-group": "customers",
        "x-speakeasy-name-override": "delete",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    polar.customers.delete(id=\"<value>\")\n\n    # Use the SDK ..."
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  await polar.customers.delete({\n    id: \"<value>\",\n  });\n\n\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->customers->delete(\n    id: '<value>'\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Customers.Delete(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/customers/external/{external_id}": {
      "get": {
        "tags": [
          "customers",
          "documented",
          "featured",
          "mcp"
        ],
        "summary": "Get Customer by External ID",
        "description": "Get a customer by external ID.\n\n**Scopes**: `customers:read` `customers:write`",
        "operationId": "customers:get_external",
        "parameters": [
          {
            "name": "external_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The customer external ID.",
              "title": "External Id"
            },
            "description": "The customer external ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "404": {
            "description": "Customer not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": false,
          "scopes": [
            "read",
            "customers"
          ]
        },
        "x-speakeasy-group": "customers",
        "x-speakeasy-name-override": "get_external",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.customers.get_external(external_id=\"<id>\")\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customers.getExternal({\n    externalId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->customers->getExternal(\n    externalId: '<id>'\n);\n\nif ($response->customer !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Customers.GetExternal(ctx, \"<id>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Customer != nil {\n        // handle response\n    }\n}"
          }
        ]
      },
      "patch": {
        "tags": [
          "customers",
          "documented",
          "featured",
          "mcp"
        ],
        "summary": "Update Customer by External ID",
        "description": "Update a customer by external ID.\n\n**Scopes**: `customers:write`",
        "operationId": "customers:update_external",
        "parameters": [
          {
            "name": "external_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The customer external ID.",
              "title": "External Id"
            },
            "description": "The customer external ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerUpdateExternalID"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Customer updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "404": {
            "description": "Customer not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": false,
          "scopes": [
            "write",
            "customers"
          ]
        },
        "x-speakeasy-group": "customers",
        "x-speakeasy-name-override": "update_external",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.customers.update_external(external_id=\"<id>\", customer_update_external_id={\n        \"email\": \"customer@example.com\",\n        \"name\": \"John Doe\",\n        \"billing_address\": None,\n        \"tax_id\": [\n            \"911144442\",\n            \"us_ein\",\n        ],\n    })\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customers.updateExternal({\n    externalId: \"<id>\",\n    customerUpdateExternalID: {\n      email: \"customer@example.com\",\n      name: \"John Doe\",\n      billingAddress: null,\n      taxId: [\n        \"911144442\",\n        \"us_ein\",\n      ],\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$customerUpdateExternalID = new Components\\CustomerUpdateExternalID(\n    email: 'customer@example.com',\n    name: 'John Doe',\n    billingAddress: null,\n    taxId: [\n        '911144442',\n        'us_ein',\n    ],\n);\n\n$response = $sdk->customers->updateExternal(\n    externalId: '<id>',\n    customerUpdateExternalID: $customerUpdateExternalID\n\n);\n\nif ($response->customer !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Customers.UpdateExternal(ctx, \"<id>\", components.CustomerUpdateExternalID{\n        Email: polargo.String(\"customer@example.com\"),\n        Name: polargo.String(\"John Doe\"),\n        BillingAddress: nil,\n        TaxID: []*components.CustomerUpdateExternalIDTaxID{\n            polargo.Pointer(components.CreateCustomerUpdateExternalIDTaxIDStr(\n                \"911144442\",\n            )),\n            polargo.Pointer(components.CreateCustomerUpdateExternalIDTaxIDStr(\n                \"us_ein\",\n            )),\n        },\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Customer != nil {\n        // handle response\n    }\n}"
          }
        ]
      },
      "delete": {
        "tags": [
          "customers",
          "documented",
          "featured",
          "mcp"
        ],
        "summary": "Delete Customer by External ID",
        "description": "Delete a customer by external ID.\n\nImmediately cancels any active subscriptions and revokes any active benefits.\n\n**Scopes**: `customers:write`",
        "operationId": "customers:delete_external",
        "parameters": [
          {
            "name": "external_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The customer external ID.",
              "title": "External Id"
            },
            "description": "The customer external ID."
          }
        ],
        "responses": {
          "204": {
            "description": "Customer deleted."
          },
          "404": {
            "description": "Customer not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": false,
          "scopes": [
            "write",
            "customers"
          ]
        },
        "x-speakeasy-group": "customers",
        "x-speakeasy-name-override": "delete_external",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    polar.customers.delete_external(external_id=\"<id>\")\n\n    # Use the SDK ..."
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  await polar.customers.deleteExternal({\n    externalId: \"<id>\",\n  });\n\n\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->customers->deleteExternal(\n    externalId: '<id>'\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Customers.DeleteExternal(ctx, \"<id>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/customers/{id}/state": {
      "get": {
        "tags": [
          "customers",
          "documented",
          "featured",
          "mcp"
        ],
        "summary": "Get Customer State",
        "description": "Get a customer state by ID.\n\nThe customer state includes information about\nthe customer's active subscriptions and benefits.\n\nIt's the ideal endpoint to use when you need to get a full overview\nof a customer's status.\n\n**Scopes**: `customers:read` `customers:write`",
        "operationId": "customers:get_state",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The customer ID.",
              "title": "Id"
            },
            "description": "The customer ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerState"
                }
              }
            }
          },
          "404": {
            "description": "Customer not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": false,
          "scopes": [
            "read",
            "customers"
          ]
        },
        "x-speakeasy-group": "customers",
        "x-speakeasy-name-override": "get_state",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.customers.get_state(id=\"<value>\")\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customers.getState({\n    id: \"<value>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->customers->getState(\n    id: '<value>'\n);\n\nif ($response->customerState !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Customers.GetState(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CustomerState != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/customers/external/{external_id}/state": {
      "get": {
        "tags": [
          "customers",
          "documented",
          "featured",
          "mcp"
        ],
        "summary": "Get Customer State by External ID",
        "description": "Get a customer state by external ID.\n\nThe customer state includes information about\nthe customer's active subscriptions and benefits.\n\nIt's the ideal endpoint to use when you need to get a full overview\nof a customer's status.\n\n**Scopes**: `customers:read` `customers:write`",
        "operationId": "customers:get_state_external",
        "parameters": [
          {
            "name": "external_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The customer external ID.",
              "title": "External Id"
            },
            "description": "The customer external ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerState"
                }
              }
            }
          },
          "404": {
            "description": "Customer not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": false,
          "scopes": [
            "read",
            "customers"
          ]
        },
        "x-speakeasy-group": "customers",
        "x-speakeasy-name-override": "get_state_external",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.customers.get_state_external(external_id=\"<id>\")\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customers.getStateExternal({\n    externalId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->customers->getStateExternal(\n    externalId: '<id>'\n);\n\nif ($response->customerState !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Customers.GetStateExternal(ctx, \"<id>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CustomerState != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/customer-portal/benefit-grants/": {
      "get": {
        "tags": [
          "customer_portal",
          "benefit-grants",
          "documented"
        ],
        "summary": "List Benefit Grants",
        "description": "List benefits grants of the authenticated customer.\n\n**Scopes**: `customer_portal:read` `customer_portal:write`",
        "operationId": "customer_portal:benefit-grants:list",
        "security": [
          {
            "customer_session": []
          }
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/BenefitType"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BenefitType"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "BenefitType Filter",
              "description": "Filter by benefit type."
            },
            "description": "Filter by benefit type.",
            "x-speakeasy-name-override": "type_filter"
          },
          {
            "name": "benefit_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "BenefitID Filter",
              "description": "Filter by benefit ID."
            },
            "description": "Filter by benefit ID."
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "examples": [
                    "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                  ],
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "examples": [
                      "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                    ],
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "checkout_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "CheckoutID Filter",
              "description": "Filter by checkout ID."
            },
            "description": "Filter by checkout ID."
          },
          {
            "name": "order_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The order ID."
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The order ID."
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrderID Filter",
              "description": "Filter by order ID."
            },
            "description": "Filter by order ID."
          },
          {
            "name": "subscription_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The subscription ID."
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The subscription ID."
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "SubscriptionID Filter",
              "description": "Filter by subscription ID."
            },
            "description": "Filter by subscription ID."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerBenefitGrantSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "-granted_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_CustomerBenefitGrant_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Customer"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "customer_portal.benefit-grants",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "import polar_sdk\nfrom polar_sdk import Polar\n\n\nwith Polar() as polar:\n\n    res = polar.customer_portal.benefit_grants.list(security=polar_sdk.CustomerPortalBenefitGrantsListSecurity(\n        customer_session=\"<YOUR_BEARER_TOKEN_HERE>\",\n    ), organization_id=None, page=1, limit=10)\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.benefitGrants.list({\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    organizationId: null,\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Operations;\n\n$sdk = Polar\\Polar::builder()->build();\n\n$request = new Operations\\CustomerPortalBenefitGrantsListRequest(\n    organizationId: null,\n);\n$requestSecurity = new Operations\\CustomerPortalBenefitGrantsListSecurity(\n    customerSession: '<YOUR_BEARER_TOKEN_HERE>',\n);\n\n$responses = $sdk->customerPortal->benefitGrants->list(\n    request: $request,\n    security: $requestSecurity\n);\n\n\nforeach ($responses as $response) {\n    if ($response->statusCode === 200) {\n        // handle response\n    }\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"os\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New()\n\n    res, err := s.CustomerPortal.BenefitGrants.List(ctx, operations.CustomerPortalBenefitGrantsListRequest{\n        OrganizationID: nil,\n    }, operations.CustomerPortalBenefitGrantsListSecurity{\n        CustomerSession: os.Getenv(\"POLAR_CUSTOMER_SESSION\"),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceCustomerBenefitGrant != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          }
        ]
      }
    },
    "/v1/customer-portal/benefit-grants/{id}": {
      "get": {
        "tags": [
          "customer_portal",
          "benefit-grants",
          "documented"
        ],
        "summary": "Get Benefit Grant",
        "description": "Get a benefit grant by ID for the authenticated customer.\n\n**Scopes**: `customer_portal:read` `customer_portal:write`",
        "operationId": "customer_portal:benefit-grants:get",
        "security": [
          {
            "customer_session": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The benefit grant ID.",
              "title": "Id"
            },
            "description": "The benefit grant ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerBenefitGrant",
                  "title": "CustomerBenefitGrant"
                }
              }
            }
          },
          "404": {
            "description": "Benefit grant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Customer"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "customer_portal.benefit-grants",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "import polar_sdk\nfrom polar_sdk import Polar\n\n\nwith Polar() as polar:\n\n    res = polar.customer_portal.benefit_grants.get(security=polar_sdk.CustomerPortalBenefitGrantsGetSecurity(\n        customer_session=\"<YOUR_BEARER_TOKEN_HERE>\",\n    ), id=\"<value>\")\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.benefitGrants.get({\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    id: \"<value>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Operations;\n\n$sdk = Polar\\Polar::builder()->build();\n\n\n$requestSecurity = new Operations\\CustomerPortalBenefitGrantsGetSecurity(\n    customerSession: '<YOUR_BEARER_TOKEN_HERE>',\n);\n\n$response = $sdk->customerPortal->benefitGrants->get(\n    security: $requestSecurity,\n    id: '<value>'\n\n);\n\nif ($response->customerBenefitGrant !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"os\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New()\n\n    res, err := s.CustomerPortal.BenefitGrants.Get(ctx, operations.CustomerPortalBenefitGrantsGetSecurity{\n        CustomerSession: os.Getenv(\"POLAR_CUSTOMER_SESSION\"),\n    }, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CustomerBenefitGrant != nil {\n        // handle response\n    }\n}"
          }
        ]
      },
      "patch": {
        "tags": [
          "customer_portal",
          "benefit-grants",
          "documented"
        ],
        "summary": "Update Benefit Grant",
        "description": "Update a benefit grant for the authenticated customer.\n\n**Scopes**: `customer_portal:write`",
        "operationId": "customer_portal:benefit-grants:update",
        "security": [
          {
            "customer_session": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The benefit grant ID.",
              "title": "Id"
            },
            "description": "The benefit grant ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerBenefitGrantUpdate",
                "title": "CustomerBenefitGrantUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Benefit grant updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerBenefitGrant",
                  "title": "CustomerBenefitGrant"
                }
              }
            }
          },
          "403": {
            "description": "The benefit grant is revoked and cannot be updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotPermitted"
                }
              }
            }
          },
          "404": {
            "description": "Benefit grant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Customer"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "customer_portal.benefit-grants",
        "x-speakeasy-name-override": "update",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "import polar_sdk\nfrom polar_sdk import Polar\n\n\nwith Polar() as polar:\n\n    res = polar.customer_portal.benefit_grants.update(security=polar_sdk.CustomerPortalBenefitGrantsUpdateSecurity(\n        customer_session=\"<YOUR_BEARER_TOKEN_HERE>\",\n    ), id=\"<value>\", customer_benefit_grant_update={\n        \"benefit_type\": \"license_keys\",\n    })\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.benefitGrants.update({\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    id: \"<value>\",\n    customerBenefitGrantUpdate: {},\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\nuse Polar\\Models\\Operations;\n\n$sdk = Polar\\Polar::builder()->build();\n\n\n$requestSecurity = new Operations\\CustomerPortalBenefitGrantsUpdateSecurity(\n    customerSession: '<YOUR_BEARER_TOKEN_HERE>',\n);\n\n$response = $sdk->customerPortal->benefitGrants->update(\n    security: $requestSecurity,\n    id: '<value>',\n    customerBenefitGrantUpdate: new Components\\CustomerBenefitGrantLicenseKeysUpdate()\n\n);\n\nif ($response->customerBenefitGrant !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"os\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New()\n\n    res, err := s.CustomerPortal.BenefitGrants.Update(ctx, operations.CustomerPortalBenefitGrantsUpdateSecurity{\n        CustomerSession: os.Getenv(\"POLAR_CUSTOMER_SESSION\"),\n    }, \"<value>\", components.CreateCustomerBenefitGrantUpdateLicenseKeys(\n        components.CustomerBenefitGrantLicenseKeysUpdate{},\n    ))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CustomerBenefitGrant != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/customer-portal/customers/me": {
      "get": {
        "tags": [
          "customer_portal",
          "customers",
          "documented"
        ],
        "summary": "Get Customer",
        "description": "Get authenticated customer.\n\n**Scopes**: `customer_portal:read` `customer_portal:write`",
        "operationId": "customer_portal:customers:get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerPortalCustomer"
                }
              }
            }
          }
        },
        "security": [
          {
            "customer_session": []
          }
        ],
        "x-polar-allowed-subjects": [
          "Customer"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "customer_portal.customers",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "import polar_sdk\nfrom polar_sdk import Polar\n\n\nwith Polar() as polar:\n\n    res = polar.customer_portal.customers.get(security=polar_sdk.CustomerPortalCustomersGetSecurity(\n        customer_session=\"<YOUR_BEARER_TOKEN_HERE>\",\n    ))\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.customers.get({\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Operations;\n\n$sdk = Polar\\Polar::builder()->build();\n\n\n$requestSecurity = new Operations\\CustomerPortalCustomersGetSecurity(\n    customerSession: '<YOUR_BEARER_TOKEN_HERE>',\n);\n\n$response = $sdk->customerPortal->customers->get(\n    security: $requestSecurity\n);\n\nif ($response->customerPortalCustomer !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"os\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New()\n\n    res, err := s.CustomerPortal.Customers.Get(ctx, operations.CustomerPortalCustomersGetSecurity{\n        CustomerSession: os.Getenv(\"POLAR_CUSTOMER_SESSION\"),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CustomerPortalCustomer != nil {\n        // handle response\n    }\n}"
          }
        ]
      },
      "patch": {
        "tags": [
          "customer_portal",
          "customers",
          "documented"
        ],
        "summary": "Update Customer",
        "description": "Update authenticated customer.\n\n**Scopes**: `customer_portal:write`",
        "operationId": "customer_portal:customers:update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerPortalCustomerUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Customer updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerPortalCustomer"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "customer_session": []
          }
        ],
        "x-polar-allowed-subjects": [
          "Customer"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "customer_portal.customers",
        "x-speakeasy-name-override": "update",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "import polar_sdk\nfrom polar_sdk import Polar\n\n\nwith Polar() as polar:\n\n    res = polar.customer_portal.customers.update(security=polar_sdk.CustomerPortalCustomersUpdateSecurity(\n        customer_session=\"<YOUR_BEARER_TOKEN_HERE>\",\n    ), request={\n        \"billing_address\": {\n            \"country\": \"US\",\n        },\n    })\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.customers.update({\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    billingAddress: {\n      country: \"US\",\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\nuse Polar\\Models\\Operations;\n\n$sdk = Polar\\Polar::builder()->build();\n\n$request = new Components\\CustomerPortalCustomerUpdate(\n    billingAddress: new Components\\Address(\n        country: 'US',\n    ),\n);\n$requestSecurity = new Operations\\CustomerPortalCustomersUpdateSecurity(\n    customerSession: '<YOUR_BEARER_TOKEN_HERE>',\n);\n\n$response = $sdk->customerPortal->customers->update(\n    request: $request,\n    security: $requestSecurity\n);\n\nif ($response->customerPortalCustomer !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"os\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New()\n\n    res, err := s.CustomerPortal.Customers.Update(ctx, components.CustomerPortalCustomerUpdate{\n        BillingAddress: &components.Address{\n            Country: \"US\",\n        },\n    }, operations.CustomerPortalCustomersUpdateSecurity{\n        CustomerSession: os.Getenv(\"POLAR_CUSTOMER_SESSION\"),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CustomerPortalCustomer != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/customer-portal/customers/me/payment-methods": {
      "get": {
        "tags": [
          "customer_portal",
          "customers",
          "documented"
        ],
        "summary": "Get Customer Payment Methods",
        "description": "Get saved payment methods of the authenticated customer.\n\n**Scopes**: `customer_portal:read` `customer_portal:write`",
        "operationId": "customer_portal:customers:get_payment_methods",
        "security": [
          {
            "customer_session": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_Union_PaymentMethodCard__PaymentMethodGeneric__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Customer"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "customer_portal.customers",
        "x-speakeasy-name-override": "get_payment_methods",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "import polar_sdk\nfrom polar_sdk import Polar\n\n\nwith Polar() as polar:\n\n    res = polar.customer_portal.customers.get_payment_methods(security=polar_sdk.CustomerPortalCustomersGetPaymentMethodsSecurity(\n        customer_session=\"<YOUR_BEARER_TOKEN_HERE>\",\n    ), page=1, limit=10)\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.customers.getPaymentMethods({\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {});\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Operations;\n\n$sdk = Polar\\Polar::builder()->build();\n\n\n$requestSecurity = new Operations\\CustomerPortalCustomersGetPaymentMethodsSecurity(\n    customerSession: '<YOUR_BEARER_TOKEN_HERE>',\n);\n\n$responses = $sdk->customerPortal->customers->getPaymentMethods(\n    security: $requestSecurity,\n    page: 1,\n    limit: 10\n\n);\n\n\nforeach ($responses as $response) {\n    if ($response->statusCode === 200) {\n        // handle response\n    }\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"os\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New()\n\n    res, err := s.CustomerPortal.Customers.GetPaymentMethods(ctx, operations.CustomerPortalCustomersGetPaymentMethodsSecurity{\n        CustomerSession: os.Getenv(\"POLAR_CUSTOMER_SESSION\"),\n    }, polargo.Int64(1), polargo.Int64(10))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceUnionPaymentMethodCardPaymentMethodGeneric != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          }
        ]
      },
      "post": {
        "tags": [
          "customer_portal",
          "customers",
          "documented"
        ],
        "summary": "Add Customer Payment Method",
        "description": "Add a payment method to the authenticated customer.\n\n**Scopes**: `customer_portal:read` `customer_portal:write`",
        "operationId": "customer_portal:customers:add_payment_method",
        "security": [
          {
            "customer_session": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerPaymentMethodCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payment method created.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/PaymentMethodCard"
                    },
                    {
                      "$ref": "#/components/schemas/PaymentMethodGeneric"
                    }
                  ],
                  "title": "Response Customer Portal:Customers:Add Payment Method"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Customer"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "customer_portal.customers",
        "x-speakeasy-name-override": "add_payment_method",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "import polar_sdk\nfrom polar_sdk import Polar\n\n\nwith Polar() as polar:\n\n    res = polar.customer_portal.customers.add_payment_method(security=polar_sdk.CustomerPortalCustomersAddPaymentMethodSecurity(\n        customer_session=\"<YOUR_BEARER_TOKEN_HERE>\",\n    ), request={\n        \"confirmation_token_id\": \"<id>\",\n        \"set_default\": False,\n        \"return_url\": \"https://yearly-custom.net/\",\n    })\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.customers.addPaymentMethod({\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    confirmationTokenId: \"<id>\",\n    setDefault: false,\n    returnUrl: \"https://yearly-custom.net/\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\nuse Polar\\Models\\Operations;\n\n$sdk = Polar\\Polar::builder()->build();\n\n$request = new Components\\CustomerPaymentMethodCreate(\n    confirmationTokenId: '<id>',\n    setDefault: false,\n    returnUrl: 'https://yearly-custom.net/',\n);\n$requestSecurity = new Operations\\CustomerPortalCustomersAddPaymentMethodSecurity(\n    customerSession: '<YOUR_BEARER_TOKEN_HERE>',\n);\n\n$response = $sdk->customerPortal->customers->addPaymentMethod(\n    request: $request,\n    security: $requestSecurity\n);\n\nif ($response->responseCustomerPortalCustomersAddPaymentMethod !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"os\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New()\n\n    res, err := s.CustomerPortal.Customers.AddPaymentMethod(ctx, components.CustomerPaymentMethodCreate{\n        ConfirmationTokenID: \"<id>\",\n        SetDefault: false,\n        ReturnURL: \"https://yearly-custom.net/\",\n    }, operations.CustomerPortalCustomersAddPaymentMethodSecurity{\n        CustomerSession: os.Getenv(\"POLAR_CUSTOMER_SESSION\"),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ResponseCustomerPortalCustomersAddPaymentMethod != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/customer-portal/customers/me/payment-methods/{id}": {
      "delete": {
        "tags": [
          "customer_portal",
          "customers",
          "documented"
        ],
        "summary": "Delete Customer Payment Method",
        "description": "Delete a payment method from the authenticated customer.\n\n**Scopes**: `customer_portal:read` `customer_portal:write`",
        "operationId": "customer_portal:customers:delete_payment_method",
        "security": [
          {
            "customer_session": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Payment method deleted."
          },
          "404": {
            "description": "Payment method not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Customer"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "customer_portal.customers",
        "x-speakeasy-name-override": "delete_payment_method",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "import polar_sdk\nfrom polar_sdk import Polar\n\n\nwith Polar() as polar:\n\n    polar.customer_portal.customers.delete_payment_method(security=polar_sdk.CustomerPortalCustomersDeletePaymentMethodSecurity(\n        customer_session=\"<YOUR_BEARER_TOKEN_HERE>\",\n    ), id=\"<id>\")\n\n    # Use the SDK ..."
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  await polar.customerPortal.customers.deletePaymentMethod({\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    id: \"<id>\",\n  });\n\n\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Operations;\n\n$sdk = Polar\\Polar::builder()->build();\n\n\n$requestSecurity = new Operations\\CustomerPortalCustomersDeletePaymentMethodSecurity(\n    customerSession: '<YOUR_BEARER_TOKEN_HERE>',\n);\n\n$response = $sdk->customerPortal->customers->deletePaymentMethod(\n    security: $requestSecurity,\n    id: '<id>'\n\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"os\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New()\n\n    res, err := s.CustomerPortal.Customers.DeletePaymentMethod(ctx, operations.CustomerPortalCustomersDeletePaymentMethodSecurity{\n        CustomerSession: os.Getenv(\"POLAR_CUSTOMER_SESSION\"),\n    }, \"<id>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/customer-portal/meters/": {
      "get": {
        "tags": [
          "customer_portal",
          "customer_meters",
          "documented",
          "featured"
        ],
        "summary": "List Meters",
        "description": "List meters of the authenticated customer.\n\n**Scopes**: `customer_portal:read` `customer_portal:write`",
        "operationId": "customer_portal:customer_meters:list",
        "security": [
          {
            "customer_session": []
          }
        ],
        "parameters": [
          {
            "name": "meter_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The meter ID."
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The meter ID."
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "MeterID Filter",
              "description": "Filter by meter ID."
            },
            "description": "Filter by meter ID."
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by meter name.",
              "title": "Query"
            },
            "description": "Filter by meter name."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerCustomerMeterSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "-modified_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_CustomerCustomerMeter_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Customer"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "customer_portal.customer_meters",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "import polar_sdk\nfrom polar_sdk import Polar\n\n\nwith Polar() as polar:\n\n    res = polar.customer_portal.customer_meters.list(security=polar_sdk.CustomerPortalCustomerMetersListSecurity(\n        customer_session=\"<YOUR_BEARER_TOKEN_HERE>\",\n    ), page=1, limit=10)\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.customerMeters.list({\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {});\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Operations;\n\n$sdk = Polar\\Polar::builder()->build();\n\n$request = new Operations\\CustomerPortalCustomerMetersListRequest();\n$requestSecurity = new Operations\\CustomerPortalCustomerMetersListSecurity(\n    customerSession: '<YOUR_BEARER_TOKEN_HERE>',\n);\n\n$responses = $sdk->customerPortal->customerMeters->list(\n    request: $request,\n    security: $requestSecurity\n);\n\n\nforeach ($responses as $response) {\n    if ($response->statusCode === 200) {\n        // handle response\n    }\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"os\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New()\n\n    res, err := s.CustomerPortal.CustomerMeters.List(ctx, operations.CustomerPortalCustomerMetersListRequest{}, operations.CustomerPortalCustomerMetersListSecurity{\n        CustomerSession: os.Getenv(\"POLAR_CUSTOMER_SESSION\"),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceCustomerCustomerMeter != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          }
        ]
      }
    },
    "/v1/customer-portal/meters/{id}": {
      "get": {
        "tags": [
          "customer_portal",
          "customer_meters",
          "documented",
          "featured"
        ],
        "summary": "Get Customer Meter",
        "description": "Get a meter by ID for the authenticated customer.\n\n**Scopes**: `customer_portal:read` `customer_portal:write`",
        "operationId": "customer_portal:customer_meters:get",
        "security": [
          {
            "customer_session": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The customer meter ID.",
              "title": "Id"
            },
            "description": "The customer meter ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCustomerMeter"
                }
              }
            }
          },
          "404": {
            "description": "Customer meter not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Customer"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "customer_portal.customer_meters",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "import polar_sdk\nfrom polar_sdk import Polar\n\n\nwith Polar() as polar:\n\n    res = polar.customer_portal.customer_meters.get(security=polar_sdk.CustomerPortalCustomerMetersGetSecurity(\n        customer_session=\"<YOUR_BEARER_TOKEN_HERE>\",\n    ), id=\"<value>\")\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.customerMeters.get({\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    id: \"<value>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Operations;\n\n$sdk = Polar\\Polar::builder()->build();\n\n\n$requestSecurity = new Operations\\CustomerPortalCustomerMetersGetSecurity(\n    customerSession: '<YOUR_BEARER_TOKEN_HERE>',\n);\n\n$response = $sdk->customerPortal->customerMeters->get(\n    security: $requestSecurity,\n    id: '<value>'\n\n);\n\nif ($response->customerCustomerMeter !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"os\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New()\n\n    res, err := s.CustomerPortal.CustomerMeters.Get(ctx, operations.CustomerPortalCustomerMetersGetSecurity{\n        CustomerSession: os.Getenv(\"POLAR_CUSTOMER_SESSION\"),\n    }, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CustomerCustomerMeter != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/customer-portal/downloadables/": {
      "get": {
        "tags": [
          "customer_portal",
          "downloadables",
          "documented"
        ],
        "summary": "List Downloadables",
        "description": "**Scopes**: `customer_portal:read` `customer_portal:write`",
        "operationId": "customer_portal:downloadables:list",
        "security": [
          {
            "customer_session": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "examples": [
                    "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                  ],
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "examples": [
                      "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                    ],
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "benefit_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The benefit ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/benefits",
                    "resourceName": "Benefit",
                    "displayProperty": "description"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The benefit ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/benefits",
                      "resourceName": "Benefit",
                      "displayProperty": "description"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "BenefitID Filter",
              "description": "Filter by benefit ID."
            },
            "description": "Filter by benefit ID."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_DownloadableRead_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Customer"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "customer_portal.downloadables",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "import polar_sdk\nfrom polar_sdk import Polar\n\n\nwith Polar() as polar:\n\n    res = polar.customer_portal.downloadables.list(security=polar_sdk.CustomerPortalDownloadablesListSecurity(\n        customer_session=\"<YOUR_BEARER_TOKEN_HERE>\",\n    ), organization_id=\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\", page=1, limit=10)\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.downloadables.list({\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Operations;\n\n$sdk = Polar\\Polar::builder()->build();\n\n\n$requestSecurity = new Operations\\CustomerPortalDownloadablesListSecurity(\n    customerSession: '<YOUR_BEARER_TOKEN_HERE>',\n);\n\n$responses = $sdk->customerPortal->downloadables->list(\n    security: $requestSecurity,\n    organizationId: '1dbfc517-0bbf-4301-9ba8-555ca42b9737',\n    page: 1,\n    limit: 10\n\n);\n\n\nforeach ($responses as $response) {\n    if ($response->statusCode === 200) {\n        // handle response\n    }\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"os\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New()\n\n    res, err := s.CustomerPortal.Downloadables.List(ctx, operations.CustomerPortalDownloadablesListSecurity{\n        CustomerSession: os.Getenv(\"POLAR_CUSTOMER_SESSION\"),\n    }, polargo.Pointer(operations.CreateCustomerPortalDownloadablesListQueryParamOrganizationIDFilterStr(\n        \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    )), nil, polargo.Int64(1), polargo.Int64(10))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceDownloadableRead != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          }
        ]
      }
    },
    "/v1/customer-portal/downloadables/{token}": {
      "get": {
        "tags": [
          "customer_portal",
          "downloadables",
          "documented"
        ],
        "summary": "Get Downloadable",
        "operationId": "customer_portal:downloadables:customer_portal.downloadables.get",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "302": {
            "description": "Redirected to download"
          },
          "400": {
            "description": "Invalid signature"
          },
          "404": {
            "description": "Downloadable not found"
          },
          "410": {
            "description": "Expired signature"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "customer_portal.downloadables",
        "x-speakeasy-name-override": "get",
        "security": [
          {}
        ],
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar() as polar:\n\n    res = polar.customer_portal.downloadables.get(token=\"<value>\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.downloadables.get({\n    token: \"<value>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()->build();\n\n\n\n$response = $sdk->customerPortal->downloadables->get(\n    token: '<value>'\n);\n\nif ($response->any !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New()\n\n    res, err := s.CustomerPortal.Downloadables.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Any != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/customer-portal/license-keys/": {
      "get": {
        "tags": [
          "customer_portal",
          "license_keys",
          "documented",
          "featured"
        ],
        "summary": "List License Keys",
        "description": "**Scopes**: `customer_portal:read` `customer_portal:write`",
        "operationId": "customer_portal:license_keys:list",
        "security": [
          {
            "customer_session": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "examples": [
                    "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                  ],
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "examples": [
                      "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                    ],
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "benefit_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The benefit ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/benefits",
                    "resourceName": "Benefit",
                    "displayProperty": "description"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by a specific benefit",
              "title": "Benefit Id"
            },
            "description": "Filter by a specific benefit"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_LicenseKeyRead_"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized to manage license key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "License key not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Customer"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "customer_portal.license_keys",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "import polar_sdk\nfrom polar_sdk import Polar\n\n\nwith Polar() as polar:\n\n    res = polar.customer_portal.license_keys.list(security=polar_sdk.CustomerPortalLicenseKeysListSecurity(\n        customer_session=\"<YOUR_BEARER_TOKEN_HERE>\",\n    ), organization_id=\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\", page=1, limit=10)\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.licenseKeys.list({\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Operations;\n\n$sdk = Polar\\Polar::builder()->build();\n\n\n$requestSecurity = new Operations\\CustomerPortalLicenseKeysListSecurity(\n    customerSession: '<YOUR_BEARER_TOKEN_HERE>',\n);\n\n$responses = $sdk->customerPortal->licenseKeys->list(\n    security: $requestSecurity,\n    organizationId: '1dbfc517-0bbf-4301-9ba8-555ca42b9737',\n    page: 1,\n    limit: 10\n\n);\n\n\nforeach ($responses as $response) {\n    if ($response->statusCode === 200) {\n        // handle response\n    }\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"os\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New()\n\n    res, err := s.CustomerPortal.LicenseKeys.List(ctx, operations.CustomerPortalLicenseKeysListSecurity{\n        CustomerSession: os.Getenv(\"POLAR_CUSTOMER_SESSION\"),\n    }, polargo.Pointer(operations.CreateCustomerPortalLicenseKeysListQueryParamOrganizationIDFilterStr(\n        \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    )), nil, polargo.Int64(1), polargo.Int64(10))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceLicenseKeyRead != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          }
        ]
      }
    },
    "/v1/customer-portal/license-keys/{id}": {
      "get": {
        "tags": [
          "customer_portal",
          "license_keys",
          "documented",
          "featured"
        ],
        "summary": "Get License Key",
        "description": "Get a license key.\n\n**Scopes**: `customer_portal:read` `customer_portal:write`",
        "operationId": "customer_portal:license_keys:get",
        "security": [
          {
            "customer_session": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseKeyWithActivations"
                }
              }
            }
          },
          "404": {
            "description": "License key not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Customer"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "customer_portal.license_keys",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "import polar_sdk\nfrom polar_sdk import Polar\n\n\nwith Polar() as polar:\n\n    res = polar.customer_portal.license_keys.get(security=polar_sdk.CustomerPortalLicenseKeysGetSecurity(\n        customer_session=\"<YOUR_BEARER_TOKEN_HERE>\",\n    ), id=\"<value>\")\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.licenseKeys.get({\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    id: \"<value>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Operations;\n\n$sdk = Polar\\Polar::builder()->build();\n\n\n$requestSecurity = new Operations\\CustomerPortalLicenseKeysGetSecurity(\n    customerSession: '<YOUR_BEARER_TOKEN_HERE>',\n);\n\n$response = $sdk->customerPortal->licenseKeys->get(\n    security: $requestSecurity,\n    id: '<value>'\n\n);\n\nif ($response->licenseKeyWithActivations !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"os\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New()\n\n    res, err := s.CustomerPortal.LicenseKeys.Get(ctx, operations.CustomerPortalLicenseKeysGetSecurity{\n        CustomerSession: os.Getenv(\"POLAR_CUSTOMER_SESSION\"),\n    }, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.LicenseKeyWithActivations != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/customer-portal/license-keys/validate": {
      "post": {
        "tags": [
          "customer_portal",
          "license_keys",
          "documented",
          "featured"
        ],
        "summary": "Validate License Key",
        "description": "Validate a license key.",
        "operationId": "customer_portal:license_keys:validate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LicenseKeyValidate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidatedLicenseKey"
                }
              }
            }
          },
          "404": {
            "description": "License key not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "customer_portal.license_keys",
        "x-speakeasy-name-override": "validate",
        "security": [
          {}
        ],
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar() as polar:\n\n    res = polar.customer_portal.license_keys.validate(request={\n        \"key\": \"<key>\",\n        \"organization_id\": \"<value>\",\n    })\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.licenseKeys.validate({\n    key: \"<key>\",\n    organizationId: \"<value>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\n\n$sdk = Polar\\Polar::builder()->build();\n\n$request = new Components\\LicenseKeyValidate(\n    key: '<key>',\n    organizationId: '<value>',\n);\n\n$response = $sdk->customerPortal->licenseKeys->validate(\n    request: $request\n);\n\nif ($response->validatedLicenseKey !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New()\n\n    res, err := s.CustomerPortal.LicenseKeys.Validate(ctx, components.LicenseKeyValidate{\n        Key: \"<key>\",\n        OrganizationID: \"<value>\",\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ValidatedLicenseKey != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/customer-portal/license-keys/activate": {
      "post": {
        "tags": [
          "customer_portal",
          "license_keys",
          "documented",
          "featured"
        ],
        "summary": "Activate License Key",
        "description": "Activate a license key instance.",
        "operationId": "customer_portal:license_keys:activate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LicenseKeyActivate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseKeyActivationRead"
                }
              }
            }
          },
          "403": {
            "description": "License key activation not required or permitted (limit reached).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotPermitted"
                }
              }
            }
          },
          "404": {
            "description": "License key not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "customer_portal.license_keys",
        "x-speakeasy-name-override": "activate",
        "security": [
          {}
        ],
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar() as polar:\n\n    res = polar.customer_portal.license_keys.activate(request={\n        \"key\": \"<key>\",\n        \"organization_id\": \"<value>\",\n        \"label\": \"<value>\",\n    })\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.licenseKeys.activate({\n    key: \"<key>\",\n    organizationId: \"<value>\",\n    label: \"<value>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\n\n$sdk = Polar\\Polar::builder()->build();\n\n$request = new Components\\LicenseKeyActivate(\n    key: '<key>',\n    organizationId: '<value>',\n    label: '<value>',\n);\n\n$response = $sdk->customerPortal->licenseKeys->activate(\n    request: $request\n);\n\nif ($response->licenseKeyActivationRead !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New()\n\n    res, err := s.CustomerPortal.LicenseKeys.Activate(ctx, components.LicenseKeyActivate{\n        Key: \"<key>\",\n        OrganizationID: \"<value>\",\n        Label: \"<value>\",\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.LicenseKeyActivationRead != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/customer-portal/license-keys/deactivate": {
      "post": {
        "tags": [
          "customer_portal",
          "license_keys",
          "documented",
          "featured"
        ],
        "summary": "Deactivate License Key",
        "description": "Deactivate a license key instance.",
        "operationId": "customer_portal:license_keys:deactivate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LicenseKeyDeactivate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "License key activation deactivated."
          },
          "404": {
            "description": "License key not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "customer_portal.license_keys",
        "x-speakeasy-name-override": "deactivate",
        "security": [
          {}
        ],
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar() as polar:\n\n    polar.customer_portal.license_keys.deactivate(request={\n        \"key\": \"<key>\",\n        \"organization_id\": \"<value>\",\n        \"activation_id\": \"<value>\",\n    })\n\n    # Use the SDK ..."
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  await polar.customerPortal.licenseKeys.deactivate({\n    key: \"<key>\",\n    organizationId: \"<value>\",\n    activationId: \"<value>\",\n  });\n\n\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\n\n$sdk = Polar\\Polar::builder()->build();\n\n$request = new Components\\LicenseKeyDeactivate(\n    key: '<key>',\n    organizationId: '<value>',\n    activationId: '<value>',\n);\n\n$response = $sdk->customerPortal->licenseKeys->deactivate(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New()\n\n    res, err := s.CustomerPortal.LicenseKeys.Deactivate(ctx, components.LicenseKeyDeactivate{\n        Key: \"<key>\",\n        OrganizationID: \"<value>\",\n        ActivationID: \"<value>\",\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/customer-portal/orders/": {
      "get": {
        "tags": [
          "customer_portal",
          "orders",
          "documented"
        ],
        "summary": "List Orders",
        "description": "List orders of the authenticated customer.\n\n**Scopes**: `customer_portal:read` `customer_portal:write`",
        "operationId": "customer_portal:orders:list",
        "security": [
          {
            "customer_session": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "examples": [
                    "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                  ],
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "examples": [
                      "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                    ],
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "product_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The product ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/products",
                    "resourceName": "Product",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The product ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/products",
                      "resourceName": "Product",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "ProductID Filter",
              "description": "Filter by product ID."
            },
            "description": "Filter by product ID."
          },
          {
            "name": "product_billing_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ProductBillingType"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductBillingType"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "ProductBillingType Filter",
              "description": "Filter by product billing type. `recurring` will filter data corresponding to subscriptions creations or renewals. `one_time` will filter data corresponding to one-time purchases."
            },
            "description": "Filter by product billing type. `recurring` will filter data corresponding to subscriptions creations or renewals. `one_time` will filter data corresponding to one-time purchases."
          },
          {
            "name": "subscription_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The subscription ID."
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The subscription ID."
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "SubscriptionID Filter",
              "description": "Filter by subscription ID."
            },
            "description": "Filter by subscription ID."
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Search by product or organization name.",
              "title": "Query"
            },
            "description": "Search by product or organization name."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerOrderSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "-created_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_CustomerOrder_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Customer"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "customer_portal.orders",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "import polar_sdk\nfrom polar_sdk import Polar\n\n\nwith Polar() as polar:\n\n    res = polar.customer_portal.orders.list(security=polar_sdk.CustomerPortalOrdersListSecurity(\n        customer_session=\"<YOUR_BEARER_TOKEN_HERE>\",\n    ), organization_id=\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\", page=1, limit=10)\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.orders.list({\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Operations;\n\n$sdk = Polar\\Polar::builder()->build();\n\n$request = new Operations\\CustomerPortalOrdersListRequest(\n    organizationId: '1dbfc517-0bbf-4301-9ba8-555ca42b9737',\n);\n$requestSecurity = new Operations\\CustomerPortalOrdersListSecurity(\n    customerSession: '<YOUR_BEARER_TOKEN_HERE>',\n);\n\n$responses = $sdk->customerPortal->orders->list(\n    request: $request,\n    security: $requestSecurity\n);\n\n\nforeach ($responses as $response) {\n    if ($response->statusCode === 200) {\n        // handle response\n    }\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"os\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New()\n\n    res, err := s.CustomerPortal.Orders.List(ctx, operations.CustomerPortalOrdersListRequest{\n        OrganizationID: polargo.Pointer(operations.CreateCustomerPortalOrdersListQueryParamOrganizationIDFilterStr(\n            \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n        )),\n    }, operations.CustomerPortalOrdersListSecurity{\n        CustomerSession: os.Getenv(\"POLAR_CUSTOMER_SESSION\"),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceCustomerOrder != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          }
        ]
      }
    },
    "/v1/customer-portal/orders/{id}": {
      "get": {
        "tags": [
          "customer_portal",
          "orders",
          "documented"
        ],
        "summary": "Get Order",
        "description": "Get an order by ID for the authenticated customer.\n\n**Scopes**: `customer_portal:read` `customer_portal:write`",
        "operationId": "customer_portal:orders:get",
        "security": [
          {
            "customer_session": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The order ID.",
              "title": "Id"
            },
            "description": "The order ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerOrder"
                }
              }
            }
          },
          "404": {
            "description": "Order not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Customer"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "customer_portal.orders",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "import polar_sdk\nfrom polar_sdk import Polar\n\n\nwith Polar() as polar:\n\n    res = polar.customer_portal.orders.get(security=polar_sdk.CustomerPortalOrdersGetSecurity(\n        customer_session=\"<YOUR_BEARER_TOKEN_HERE>\",\n    ), id=\"<value>\")\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.orders.get({\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    id: \"<value>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Operations;\n\n$sdk = Polar\\Polar::builder()->build();\n\n\n$requestSecurity = new Operations\\CustomerPortalOrdersGetSecurity(\n    customerSession: '<YOUR_BEARER_TOKEN_HERE>',\n);\n\n$response = $sdk->customerPortal->orders->get(\n    security: $requestSecurity,\n    id: '<value>'\n\n);\n\nif ($response->customerOrder !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"os\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New()\n\n    res, err := s.CustomerPortal.Orders.Get(ctx, operations.CustomerPortalOrdersGetSecurity{\n        CustomerSession: os.Getenv(\"POLAR_CUSTOMER_SESSION\"),\n    }, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CustomerOrder != nil {\n        // handle response\n    }\n}"
          }
        ]
      },
      "patch": {
        "tags": [
          "customer_portal",
          "orders",
          "documented"
        ],
        "summary": "Update Order",
        "description": "Update an order for the authenticated customer.\n\n**Scopes**: `customer_portal:write`",
        "operationId": "customer_portal:orders:update",
        "security": [
          {
            "customer_session": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The order ID.",
              "title": "Id"
            },
            "description": "The order ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerOrderUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerOrder"
                }
              }
            }
          },
          "404": {
            "description": "Order not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Customer"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "customer_portal.orders",
        "x-speakeasy-name-override": "update",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "import polar_sdk\nfrom polar_sdk import Polar\n\n\nwith Polar() as polar:\n\n    res = polar.customer_portal.orders.update(security=polar_sdk.CustomerPortalOrdersUpdateSecurity(\n        customer_session=\"<YOUR_BEARER_TOKEN_HERE>\",\n    ), id=\"<value>\", customer_order_update={\n        \"billing_name\": \"<value>\",\n        \"billing_address\": {\n            \"country\": \"US\",\n        },\n    })\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.orders.update({\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    id: \"<value>\",\n    customerOrderUpdate: {\n      billingName: \"<value>\",\n      billingAddress: {\n        country: \"US\",\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\nuse Polar\\Models\\Operations;\n\n$sdk = Polar\\Polar::builder()->build();\n\n$customerOrderUpdate = new Components\\CustomerOrderUpdate(\n    billingName: '<value>',\n    billingAddress: new Components\\Address(\n        country: 'US',\n    ),\n);\n$requestSecurity = new Operations\\CustomerPortalOrdersUpdateSecurity(\n    customerSession: '<YOUR_BEARER_TOKEN_HERE>',\n);\n\n$response = $sdk->customerPortal->orders->update(\n    security: $requestSecurity,\n    id: '<value>',\n    customerOrderUpdate: $customerOrderUpdate\n\n);\n\nif ($response->customerOrder !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"os\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New()\n\n    res, err := s.CustomerPortal.Orders.Update(ctx, operations.CustomerPortalOrdersUpdateSecurity{\n        CustomerSession: os.Getenv(\"POLAR_CUSTOMER_SESSION\"),\n    }, \"<value>\", components.CustomerOrderUpdate{\n        BillingName: polargo.String(\"<value>\"),\n        BillingAddress: &components.Address{\n            Country: \"US\",\n        },\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CustomerOrder != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/customer-portal/orders/{id}/invoice": {
      "post": {
        "tags": [
          "customer_portal",
          "orders",
          "documented"
        ],
        "summary": "Generate Order Invoice",
        "description": "Trigger generation of an order's invoice.\n\n**Scopes**: `customer_portal:read` `customer_portal:write`",
        "operationId": "customer_portal:orders:generate_invoice",
        "security": [
          {
            "customer_session": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The order ID.",
              "title": "Id"
            },
            "description": "The order ID."
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "409": {
            "description": "Order already has an invoice.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceAlreadyExists"
                }
              }
            }
          },
          "422": {
            "description": "Order is not paid or is missing billing name or address.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/MissingInvoiceBillingDetails"
                    },
                    {
                      "$ref": "#/components/schemas/NotPaidOrder"
                    }
                  ],
                  "title": "Response 422 Customer Portal:Orders:Generate Invoice"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Customer"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "customer_portal.orders",
        "x-speakeasy-name-override": "generate_invoice",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "import polar_sdk\nfrom polar_sdk import Polar\n\n\nwith Polar() as polar:\n\n    res = polar.customer_portal.orders.generate_invoice(security=polar_sdk.CustomerPortalOrdersGenerateInvoiceSecurity(\n        customer_session=\"<YOUR_BEARER_TOKEN_HERE>\",\n    ), id=\"<value>\")\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.orders.generateInvoice({\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    id: \"<value>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Operations;\n\n$sdk = Polar\\Polar::builder()->build();\n\n\n$requestSecurity = new Operations\\CustomerPortalOrdersGenerateInvoiceSecurity(\n    customerSession: '<YOUR_BEARER_TOKEN_HERE>',\n);\n\n$response = $sdk->customerPortal->orders->generateInvoice(\n    security: $requestSecurity,\n    id: '<value>'\n\n);\n\nif ($response->any !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"os\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New()\n\n    res, err := s.CustomerPortal.Orders.GenerateInvoice(ctx, operations.CustomerPortalOrdersGenerateInvoiceSecurity{\n        CustomerSession: os.Getenv(\"POLAR_CUSTOMER_SESSION\"),\n    }, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Any != nil {\n        // handle response\n    }\n}"
          }
        ]
      },
      "get": {
        "tags": [
          "customer_portal",
          "orders",
          "documented"
        ],
        "summary": "Get Order Invoice",
        "description": "Get an order's invoice data.\n\n**Scopes**: `customer_portal:read` `customer_portal:write`",
        "operationId": "customer_portal:orders:invoice",
        "security": [
          {
            "customer_session": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The order ID.",
              "title": "Id"
            },
            "description": "The order ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerOrderInvoice"
                }
              }
            }
          },
          "404": {
            "description": "Order not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Customer"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "customer_portal.orders",
        "x-speakeasy-name-override": "invoice",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "import polar_sdk\nfrom polar_sdk import Polar\n\n\nwith Polar() as polar:\n\n    res = polar.customer_portal.orders.invoice(security=polar_sdk.CustomerPortalOrdersInvoiceSecurity(\n        customer_session=\"<YOUR_BEARER_TOKEN_HERE>\",\n    ), id=\"<value>\")\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.orders.invoice({\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    id: \"<value>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Operations;\n\n$sdk = Polar\\Polar::builder()->build();\n\n\n$requestSecurity = new Operations\\CustomerPortalOrdersInvoiceSecurity(\n    customerSession: '<YOUR_BEARER_TOKEN_HERE>',\n);\n\n$response = $sdk->customerPortal->orders->invoice(\n    security: $requestSecurity,\n    id: '<value>'\n\n);\n\nif ($response->customerOrderInvoice !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"os\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New()\n\n    res, err := s.CustomerPortal.Orders.Invoice(ctx, operations.CustomerPortalOrdersInvoiceSecurity{\n        CustomerSession: os.Getenv(\"POLAR_CUSTOMER_SESSION\"),\n    }, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CustomerOrderInvoice != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/customer-portal/organizations/{slug}": {
      "get": {
        "tags": [
          "customer_portal",
          "organizations",
          "documented"
        ],
        "summary": "Get Organization",
        "description": "Get a customer portal's organization by slug.",
        "operationId": "customer_portal:organizations:get",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The organization slug.",
              "title": "Slug"
            },
            "description": "The organization slug."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerOrganization"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "customer_portal.organizations",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.customer_portal.organizations.get(slug=\"<value>\")\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customerPortal.organizations.get({\n    slug: \"<value>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->customerPortal->organizations->get(\n    slug: '<value>'\n);\n\nif ($response->customerOrganization !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomerPortal.Organizations.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CustomerOrganization != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/customer-portal/subscriptions/": {
      "get": {
        "tags": [
          "customer_portal",
          "subscriptions",
          "documented",
          "featured"
        ],
        "summary": "List Subscriptions",
        "description": "List subscriptions of the authenticated customer.\n\n**Scopes**: `customer_portal:read` `customer_portal:write`",
        "operationId": "customer_portal:subscriptions:list",
        "security": [
          {
            "customer_session": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "examples": [
                    "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                  ],
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "examples": [
                      "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                    ],
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "product_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The product ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/products",
                    "resourceName": "Product",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The product ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/products",
                      "resourceName": "Product",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "ProductID Filter",
              "description": "Filter by product ID."
            },
            "description": "Filter by product ID."
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by active or cancelled subscription.",
              "title": "Active"
            },
            "description": "Filter by active or cancelled subscription."
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Search by product or organization name.",
              "title": "Query"
            },
            "description": "Search by product or organization name."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerSubscriptionSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "-started_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_CustomerSubscription_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Customer"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "customer_portal.subscriptions",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "import polar_sdk\nfrom polar_sdk import Polar\n\n\nwith Polar() as polar:\n\n    res = polar.customer_portal.subscriptions.list(security=polar_sdk.CustomerPortalSubscriptionsListSecurity(\n        customer_session=\"<YOUR_BEARER_TOKEN_HERE>\",\n    ), organization_id=\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\", page=1, limit=10)\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.subscriptions.list({\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Operations;\n\n$sdk = Polar\\Polar::builder()->build();\n\n$request = new Operations\\CustomerPortalSubscriptionsListRequest(\n    organizationId: '1dbfc517-0bbf-4301-9ba8-555ca42b9737',\n);\n$requestSecurity = new Operations\\CustomerPortalSubscriptionsListSecurity(\n    customerSession: '<YOUR_BEARER_TOKEN_HERE>',\n);\n\n$responses = $sdk->customerPortal->subscriptions->list(\n    request: $request,\n    security: $requestSecurity\n);\n\n\nforeach ($responses as $response) {\n    if ($response->statusCode === 200) {\n        // handle response\n    }\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"os\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New()\n\n    res, err := s.CustomerPortal.Subscriptions.List(ctx, operations.CustomerPortalSubscriptionsListRequest{\n        OrganizationID: polargo.Pointer(operations.CreateCustomerPortalSubscriptionsListQueryParamOrganizationIDFilterStr(\n            \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n        )),\n    }, operations.CustomerPortalSubscriptionsListSecurity{\n        CustomerSession: os.Getenv(\"POLAR_CUSTOMER_SESSION\"),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceCustomerSubscription != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          }
        ]
      }
    },
    "/v1/customer-portal/subscriptions/{id}": {
      "get": {
        "tags": [
          "customer_portal",
          "subscriptions",
          "documented",
          "featured"
        ],
        "summary": "Get Subscription",
        "description": "Get a subscription for the authenticated customer.\n\n**Scopes**: `customer_portal:read` `customer_portal:write`",
        "operationId": "customer_portal:subscriptions:get",
        "security": [
          {
            "customer_session": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The subscription ID.",
              "title": "Id"
            },
            "description": "The subscription ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSubscription"
                }
              }
            }
          },
          "404": {
            "description": "Customer subscription was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Customer"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "customer_portal.subscriptions",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "import polar_sdk\nfrom polar_sdk import Polar\n\n\nwith Polar() as polar:\n\n    res = polar.customer_portal.subscriptions.get(security=polar_sdk.CustomerPortalSubscriptionsGetSecurity(\n        customer_session=\"<YOUR_BEARER_TOKEN_HERE>\",\n    ), id=\"<value>\")\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.subscriptions.get({\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    id: \"<value>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Operations;\n\n$sdk = Polar\\Polar::builder()->build();\n\n\n$requestSecurity = new Operations\\CustomerPortalSubscriptionsGetSecurity(\n    customerSession: '<YOUR_BEARER_TOKEN_HERE>',\n);\n\n$response = $sdk->customerPortal->subscriptions->get(\n    security: $requestSecurity,\n    id: '<value>'\n\n);\n\nif ($response->customerSubscription !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"os\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New()\n\n    res, err := s.CustomerPortal.Subscriptions.Get(ctx, operations.CustomerPortalSubscriptionsGetSecurity{\n        CustomerSession: os.Getenv(\"POLAR_CUSTOMER_SESSION\"),\n    }, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CustomerSubscription != nil {\n        // handle response\n    }\n}"
          }
        ]
      },
      "patch": {
        "tags": [
          "customer_portal",
          "subscriptions",
          "documented",
          "featured"
        ],
        "summary": "Update Subscription",
        "description": "Update a subscription of the authenticated customer.\n\n**Scopes**: `customer_portal:write`",
        "operationId": "customer_portal:subscriptions:update",
        "security": [
          {
            "customer_session": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The subscription ID.",
              "title": "Id"
            },
            "description": "The subscription ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerSubscriptionUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Customer subscription updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSubscription"
                }
              }
            }
          },
          "403": {
            "description": "Customer subscription is already canceled or will be at the end of the period.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlreadyCanceledSubscription"
                }
              }
            }
          },
          "404": {
            "description": "Customer subscription was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Customer"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "customer_portal.subscriptions",
        "x-speakeasy-name-override": "update",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "import polar_sdk\nfrom polar_sdk import Polar\n\n\nwith Polar() as polar:\n\n    res = polar.customer_portal.subscriptions.update(security=polar_sdk.CustomerPortalSubscriptionsUpdateSecurity(\n        customer_session=\"<YOUR_BEARER_TOKEN_HERE>\",\n    ), id=\"<value>\", customer_subscription_update={})\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.subscriptions.update({\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    id: \"<value>\",\n    customerSubscriptionUpdate: {},\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\nuse Polar\\Models\\Operations;\n\n$sdk = Polar\\Polar::builder()->build();\n\n\n$requestSecurity = new Operations\\CustomerPortalSubscriptionsUpdateSecurity(\n    customerSession: '<YOUR_BEARER_TOKEN_HERE>',\n);\n\n$response = $sdk->customerPortal->subscriptions->update(\n    security: $requestSecurity,\n    id: '<value>',\n    customerSubscriptionUpdate: new Components\\CustomerSubscriptionCancel()\n\n);\n\nif ($response->customerSubscription !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"os\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New()\n\n    res, err := s.CustomerPortal.Subscriptions.Update(ctx, operations.CustomerPortalSubscriptionsUpdateSecurity{\n        CustomerSession: os.Getenv(\"POLAR_CUSTOMER_SESSION\"),\n    }, \"<value>\", components.CreateCustomerSubscriptionUpdateCustomerSubscriptionCancel(\n        components.CustomerSubscriptionCancel{},\n    ))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CustomerSubscription != nil {\n        // handle response\n    }\n}"
          }
        ]
      },
      "delete": {
        "tags": [
          "customer_portal",
          "subscriptions",
          "documented",
          "featured"
        ],
        "summary": "Cancel Subscription",
        "description": "Cancel a subscription of the authenticated customer.\n\n**Scopes**: `customer_portal:write`",
        "operationId": "customer_portal:subscriptions:cancel",
        "security": [
          {
            "customer_session": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The subscription ID.",
              "title": "Id"
            },
            "description": "The subscription ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Customer subscription is canceled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSubscription"
                }
              }
            }
          },
          "403": {
            "description": "Customer subscription is already canceled or will be at the end of the period.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlreadyCanceledSubscription"
                }
              }
            }
          },
          "404": {
            "description": "Customer subscription was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Customer"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "customer_portal.subscriptions",
        "x-speakeasy-name-override": "cancel",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "import polar_sdk\nfrom polar_sdk import Polar\n\n\nwith Polar() as polar:\n\n    res = polar.customer_portal.subscriptions.cancel(security=polar_sdk.CustomerPortalSubscriptionsCancelSecurity(\n        customer_session=\"<YOUR_BEARER_TOKEN_HERE>\",\n    ), id=\"<value>\")\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.subscriptions.cancel({\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    id: \"<value>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Operations;\n\n$sdk = Polar\\Polar::builder()->build();\n\n\n$requestSecurity = new Operations\\CustomerPortalSubscriptionsCancelSecurity(\n    customerSession: '<YOUR_BEARER_TOKEN_HERE>',\n);\n\n$response = $sdk->customerPortal->subscriptions->cancel(\n    security: $requestSecurity,\n    id: '<value>'\n\n);\n\nif ($response->customerSubscription !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"os\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New()\n\n    res, err := s.CustomerPortal.Subscriptions.Cancel(ctx, operations.CustomerPortalSubscriptionsCancelSecurity{\n        CustomerSession: os.Getenv(\"POLAR_CUSTOMER_SESSION\"),\n    }, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CustomerSubscription != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/customer-sessions/": {
      "post": {
        "tags": [
          "customer-sessions",
          "documented",
          "featured"
        ],
        "summary": "Create Customer Session",
        "description": "Create a customer session.\n\n**Scopes**: `customer_sessions:write`",
        "operationId": "customer-sessions:create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/CustomerSessionCustomerIDCreate"
                  },
                  {
                    "$ref": "#/components/schemas/CustomerSessionCustomerExternalIDCreate"
                  }
                ],
                "title": "Customer Session Create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Customer session created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSession"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "customer-sessions",
        "x-speakeasy-name-override": "create",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.customer_sessions.create(request={\n        \"external_customer_id\": \"<id>\",\n    })\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customerSessions.create({\n    externalCustomerId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$request = new Components\\CustomerSessionCustomerExternalIDCreate(\n    externalCustomerId: '<id>',\n);\n\n$response = $sdk->customerSessions->create(\n    request: $request\n);\n\nif ($response->customerSession !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomerSessions.Create(ctx, operations.CreateCustomerSessionsCreateCustomerSessionCreateCustomerSessionCustomerExternalIDCreate(\n        components.CustomerSessionCustomerExternalIDCreate{\n            ExternalCustomerID: \"<id>\",\n        },\n    ))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CustomerSession != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/events/": {
      "get": {
        "tags": [
          "events",
          "documented",
          "featured"
        ],
        "summary": "List Events",
        "description": "List events.\n\n**Scopes**: `events:read` `events:write`",
        "operationId": "events:list",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter events following filter clauses. JSON string following the same schema a meter filter clause. ",
              "title": "Filter"
            },
            "description": "Filter events following filter clauses. JSON string following the same schema a meter filter clause. "
          },
          {
            "name": "start_timestamp",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter events after this timestamp.",
              "title": "Start Timestamp"
            },
            "description": "Filter events after this timestamp."
          },
          {
            "name": "end_timestamp",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter events before this timestamp.",
              "title": "End Timestamp"
            },
            "description": "Filter events before this timestamp."
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "examples": [
                    "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                  ],
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "examples": [
                      "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                    ],
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "customer_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The customer ID."
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The customer ID."
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "CustomerID Filter",
              "description": "Filter by customer ID."
            },
            "description": "Filter by customer ID."
          },
          {
            "name": "external_customer_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "ExternalCustomerID Filter",
              "description": "Filter by external customer ID."
            },
            "description": "Filter by external customer ID."
          },
          {
            "name": "meter_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The meter ID."
                },
                {
                  "type": "null"
                }
              ],
              "title": "MeterID Filter",
              "description": "Filter by a meter filter clause."
            },
            "description": "Filter by a meter filter clause."
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name Filter",
              "description": "Filter by event name."
            },
            "description": "Filter by event name."
          },
          {
            "name": "source",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/EventSource"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventSource"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Source Filter",
              "description": "Filter by event source."
            },
            "description": "Filter by event source."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "-timestamp"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          },
          {
            "name": "metadata",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "schema": {
              "$ref": "#/components/schemas/MetadataQuery"
            },
            "description": "Filter by metadata key-value pairs. It uses the `deepObject` style, e.g. `?metadata[key]=value`."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_Event_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "events",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.events.list(organization_id=\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\", page=1, limit=10)\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.events.list({\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Operations;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\EventsListRequest(\n    organizationId: '1dbfc517-0bbf-4301-9ba8-555ca42b9737',\n);\n\n$responses = $sdk->events->list(\n    request: $request\n);\n\n\nforeach ($responses as $response) {\n    if ($response->statusCode === 200) {\n        // handle response\n    }\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Events.List(ctx, operations.EventsListRequest{\n        OrganizationID: polargo.Pointer(operations.CreateEventsListQueryParamOrganizationIDFilterStr(\n            \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n        )),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceEvent != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          }
        ]
      }
    },
    "/v1/events/names": {
      "get": {
        "tags": [
          "events",
          "documented",
          "featured"
        ],
        "summary": "List Event Names",
        "description": "List event names.\n\n**Scopes**: `events:read` `events:write`",
        "operationId": "events:list_names",
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "examples": [
                    "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                  ],
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "examples": [
                      "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                    ],
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "customer_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The customer ID."
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The customer ID."
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "CustomerID Filter",
              "description": "Filter by customer ID."
            },
            "description": "Filter by customer ID."
          },
          {
            "name": "external_customer_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "ExternalCustomerID Filter",
              "description": "Filter by external customer ID."
            },
            "description": "Filter by external customer ID."
          },
          {
            "name": "source",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/EventSource"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventSource"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Source Filter",
              "description": "Filter by event source."
            },
            "description": "Filter by event source."
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Query",
              "description": "Query to filter event names."
            },
            "description": "Query to filter event names."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventNamesSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "-last_seen"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_EventName_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "events",
        "x-speakeasy-name-override": "list_names",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.events.list_names(organization_id=\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\", page=1, limit=10)\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.events.listNames({\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Operations;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\EventsListNamesRequest(\n    organizationId: '1dbfc517-0bbf-4301-9ba8-555ca42b9737',\n);\n\n$responses = $sdk->events->listNames(\n    request: $request\n);\n\n\nforeach ($responses as $response) {\n    if ($response->statusCode === 200) {\n        // handle response\n    }\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Events.ListNames(ctx, operations.EventsListNamesRequest{\n        OrganizationID: polargo.Pointer(operations.CreateEventsListNamesQueryParamOrganizationIDFilterStr(\n            \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n        )),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceEventName != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          }
        ]
      }
    },
    "/v1/events/{id}": {
      "get": {
        "tags": [
          "events",
          "documented",
          "featured"
        ],
        "summary": "Get Event",
        "description": "Get an event by ID.\n\n**Scopes**: `events:read` `events:write`",
        "operationId": "events:get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The event ID.",
              "title": "Id"
            },
            "description": "The event ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "404": {
            "description": "Event not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "events",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.events.get(id=\"<value>\")\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.events.get({\n    id: \"<value>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->events->get(\n    id: '<value>'\n);\n\nif ($response->event !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Events.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Event != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/events/ingest": {
      "post": {
        "tags": [
          "events",
          "documented",
          "featured"
        ],
        "summary": "Ingest Events",
        "description": "Ingest batch of events.\n\n**Scopes**: `events:write`",
        "operationId": "events:ingest",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventsIngest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventsIngestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "events",
        "x-speakeasy-name-override": "ingest",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.events.ingest(request={\n        \"events\": [],\n    })\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.events.ingest({\n    events: [],\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$request = new Components\\EventsIngest(\n    events: [],\n);\n\n$response = $sdk->events->ingest(\n    request: $request\n);\n\nif ($response->eventsIngestResponse !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Events.Ingest(ctx, components.EventsIngest{\n        Events: []components.Events{},\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.EventsIngestResponse != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/meters/": {
      "get": {
        "tags": [
          "meters",
          "documented",
          "featured"
        ],
        "summary": "List Meters",
        "description": "List meters.\n\n**Scopes**: `meters:read` `meters:write`",
        "operationId": "meters:list",
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "examples": [
                    "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                  ],
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "examples": [
                      "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                    ],
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by name.",
              "title": "Query"
            },
            "description": "Filter by name."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeterSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "name"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          },
          {
            "name": "metadata",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "schema": {
              "$ref": "#/components/schemas/MetadataQuery"
            },
            "description": "Filter by metadata key-value pairs. It uses the `deepObject` style, e.g. `?metadata[key]=value`."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_Meter_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "meters",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.meters.list(organization_id=\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\", page=1, limit=10)\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.meters.list({\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Operations;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\MetersListRequest(\n    organizationId: '1dbfc517-0bbf-4301-9ba8-555ca42b9737',\n);\n\n$responses = $sdk->meters->list(\n    request: $request\n);\n\n\nforeach ($responses as $response) {\n    if ($response->statusCode === 200) {\n        // handle response\n    }\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Meters.List(ctx, operations.MetersListRequest{\n        OrganizationID: polargo.Pointer(operations.CreateMetersListQueryParamOrganizationIDFilterStr(\n            \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n        )),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceMeter != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          }
        ]
      },
      "post": {
        "tags": [
          "meters",
          "documented",
          "featured"
        ],
        "summary": "Create Meter",
        "description": "Create a meter.\n\n**Scopes**: `meters:write`",
        "operationId": "meters:create",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MeterCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Meter created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Meter"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "meters",
        "x-speakeasy-name-override": "create",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "import polar_sdk\nfrom polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.meters.create(request={\n        \"name\": \"<value>\",\n        \"filter_\": {\n            \"conjunction\": polar_sdk.FilterConjunction.OR,\n            \"clauses\": [],\n        },\n        \"aggregation\": {\n            \"func\": \"count\",\n        },\n        \"organization_id\": \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    })\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.meters.create({\n    name: \"<value>\",\n    filter: {\n      conjunction: \"or\",\n      clauses: [],\n    },\n    aggregation: {},\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$request = new Components\\MeterCreate(\n    name: '<value>',\n    filter: new Components\\Filter(\n        conjunction: Components\\FilterConjunction::Or,\n        clauses: [],\n    ),\n    aggregation: new Components\\CountAggregation(),\n    organizationId: '1dbfc517-0bbf-4301-9ba8-555ca42b9737',\n);\n\n$response = $sdk->meters->create(\n    request: $request\n);\n\nif ($response->meter !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Meters.Create(ctx, components.MeterCreate{\n        Name: \"<value>\",\n        Filter: components.Filter{\n            Conjunction: components.FilterConjunctionOr,\n            Clauses: []components.Clauses{},\n        },\n        Aggregation: components.CreateMeterCreateAggregationCount(\n            components.CountAggregation{},\n        ),\n        OrganizationID: polargo.String(\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Meter != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/meters/{id}": {
      "get": {
        "tags": [
          "meters",
          "documented",
          "featured"
        ],
        "summary": "Get Meter",
        "description": "Get a meter by ID.\n\n**Scopes**: `meters:read` `meters:write`",
        "operationId": "meters:get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The meter ID.",
              "title": "Id"
            },
            "description": "The meter ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Meter"
                }
              }
            }
          },
          "404": {
            "description": "Meter not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "meters",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.meters.get(id=\"<value>\")\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.meters.get({\n    id: \"<value>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->meters->get(\n    id: '<value>'\n);\n\nif ($response->meter !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Meters.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Meter != nil {\n        // handle response\n    }\n}"
          }
        ]
      },
      "patch": {
        "tags": [
          "meters",
          "documented",
          "featured"
        ],
        "summary": "Update Meter",
        "description": "Update a meter.\n\n**Scopes**: `meters:write`",
        "operationId": "meters:update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The meter ID.",
              "title": "Id"
            },
            "description": "The meter ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MeterUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Meter updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Meter"
                }
              }
            }
          },
          "404": {
            "description": "Meter not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "meters",
        "x-speakeasy-name-override": "update",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.meters.update(id=\"<value>\", meter_update={})\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.meters.update({\n    id: \"<value>\",\n    meterUpdate: {},\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$meterUpdate = new Components\\MeterUpdate();\n\n$response = $sdk->meters->update(\n    id: '<value>',\n    meterUpdate: $meterUpdate\n\n);\n\nif ($response->meter !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Meters.Update(ctx, \"<value>\", components.MeterUpdate{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Meter != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/meters/{id}/quantities": {
      "get": {
        "tags": [
          "meters",
          "documented",
          "featured"
        ],
        "summary": "Get Meter Quantities",
        "description": "Get quantities of a meter over a time period.\n\n**Scopes**: `meters:read` `meters:write`",
        "operationId": "meters:quantities",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The meter ID.",
              "title": "Id"
            },
            "description": "The meter ID."
          },
          {
            "name": "start_timestamp",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Start timestamp.",
              "title": "Start Timestamp"
            },
            "description": "Start timestamp."
          },
          {
            "name": "end_timestamp",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "End timestamp.",
              "title": "End Timestamp"
            },
            "description": "End timestamp."
          },
          {
            "name": "interval",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TimeInterval",
              "description": "Interval between two timestamps."
            },
            "description": "Interval between two timestamps."
          },
          {
            "name": "customer_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The customer ID."
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The customer ID."
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "CustomerID Filter",
              "description": "Filter by customer ID."
            },
            "description": "Filter by customer ID."
          },
          {
            "name": "external_customer_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "ExternalCustomerID Filter",
              "description": "Filter by external customer ID."
            },
            "description": "Filter by external customer ID."
          },
          {
            "name": "metadata",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "schema": {
              "$ref": "#/components/schemas/MetadataQuery"
            },
            "description": "Filter by metadata key-value pairs. It uses the `deepObject` style, e.g. `?metadata[key]=value`."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeterQuantities"
                }
              }
            }
          },
          "404": {
            "description": "Meter not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": true
        },
        "x-speakeasy-group": "meters",
        "x-speakeasy-name-override": "quantities",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "import polar_sdk\nfrom polar_sdk import Polar\nfrom polar_sdk.utils import parse_datetime\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.meters.quantities(id=\"<value>\", start_timestamp=parse_datetime(\"2025-11-25T04:37:16.823Z\"), end_timestamp=parse_datetime(\"2025-11-26T17:06:00.727Z\"), interval=polar_sdk.TimeInterval.DAY)\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.meters.quantities({\n    id: \"<value>\",\n    startTimestamp: new Date(\"2025-11-25T04:37:16.823Z\"),\n    endTimestamp: new Date(\"2025-11-26T17:06:00.727Z\"),\n    interval: \"day\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Components;\nuse Polar\\Models\\Operations;\nuse Polar\\Utils;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\MetersQuantitiesRequest(\n    id: '<value>',\n    startTimestamp: Utils\\Utils::parseDateTime('2025-11-25T04:37:16.823Z'),\n    endTimestamp: Utils\\Utils::parseDateTime('2025-11-26T17:06:00.727Z'),\n    interval: Components\\TimeInterval::Day,\n);\n\n$response = $sdk->meters->quantities(\n    request: $request\n);\n\nif ($response->meterQuantities !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/types\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Meters.Quantities(ctx, operations.MetersQuantitiesRequest{\n        ID: \"<value>\",\n        StartTimestamp: types.MustTimeFromString(\"2025-11-25T04:37:16.823Z\"),\n        EndTimestamp: types.MustTimeFromString(\"2025-11-26T17:06:00.727Z\"),\n        Interval: components.TimeIntervalDay,\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.MeterQuantities != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/customer-meters/": {
      "get": {
        "tags": [
          "customer_meters",
          "documented",
          "featured",
          "mcp"
        ],
        "summary": "List Customer Meters",
        "description": "List customer meters.\n\n**Scopes**: `customer_meters:read`",
        "operationId": "customer_meters:list",
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "examples": [
                    "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                  ],
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "examples": [
                      "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                    ],
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "customer_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The customer ID."
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The customer ID."
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "CustomerID Filter",
              "description": "Filter by customer ID."
            },
            "description": "Filter by customer ID."
          },
          {
            "name": "external_customer_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "ExternalCustomerID Filter",
              "description": "Filter by external customer ID."
            },
            "description": "Filter by external customer ID."
          },
          {
            "name": "meter_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The meter ID."
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The meter ID."
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "MeterID Filter",
              "description": "Filter by meter ID."
            },
            "description": "Filter by meter ID."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerMeterSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "-modified_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_CustomerMeter_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-mcp": {
          "disabled": false,
          "scopes": [
            "read",
            "customer_meters"
          ]
        },
        "x-speakeasy-group": "customer_meters",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.customer_meters.list(organization_id=\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\", page=1, limit=10)\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customerMeters.list({\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Operations;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\CustomerMetersListRequest(\n    organizationId: '1dbfc517-0bbf-4301-9ba8-555ca42b9737',\n);\n\n$responses = $sdk->customerMeters->list(\n    request: $request\n);\n\n\nforeach ($responses as $response) {\n    if ($response->statusCode === 200) {\n        // handle response\n    }\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomerMeters.List(ctx, operations.CustomerMetersListRequest{\n        OrganizationID: polargo.Pointer(operations.CreateCustomerMetersListQueryParamOrganizationIDFilterStr(\n            \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n        )),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceCustomerMeter != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          }
        ]
      }
    },
    "/v1/customer-meters/{id}": {
      "get": {
        "tags": [
          "customer_meters",
          "documented",
          "featured",
          "mcp"
        ],
        "summary": "Get Customer Meter",
        "description": "Get a customer meter by ID.\n\n**Scopes**: `customer_meters:read`",
        "operationId": "customer_meters:get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The customer meter ID.",
              "title": "Id"
            },
            "description": "The customer meter ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerMeter"
                }
              }
            }
          },
          "404": {
            "description": "Customer meter not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": false,
          "scopes": [
            "read",
            "customer_meters"
          ]
        },
        "x-speakeasy-group": "customer_meters",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.customer_meters.get(id=\"<value>\")\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customerMeters.get({\n    id: \"<value>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->customerMeters->get(\n    id: '<value>'\n);\n\nif ($response->customerMeter !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomerMeters.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CustomerMeter != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    },
    "/v1/payments/": {
      "get": {
        "tags": [
          "payments",
          "documented",
          "mcp"
        ],
        "summary": "List Payments",
        "description": "List payments.\n\n**Scopes**: `payments:read`",
        "operationId": "payments:list",
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "examples": [
                    "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                  ],
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "examples": [
                      "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                    ],
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "checkout_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "CheckoutID Filter",
              "description": "Filter by checkout ID."
            },
            "description": "Filter by checkout ID."
          },
          {
            "name": "order_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrderID Filter",
              "description": "Filter by order ID."
            },
            "description": "Filter by order ID."
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/PaymentStatus"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentStatus"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status Filter",
              "description": "Filter by payment status."
            },
            "description": "Filter by payment status."
          },
          {
            "name": "method",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Method Filter",
              "description": "Filter by payment method."
            },
            "description": "Filter by payment method."
          },
          {
            "name": "customer_email",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "CustomerEmail Filter",
              "description": "Filter by customer email."
            },
            "description": "Filter by customer email."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "-created_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-mcp": {
          "disabled": false,
          "scopes": [
            "read",
            "payments"
          ]
        },
        "x-speakeasy-group": "payments",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.payments.list(organization_id=\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\", page=1, limit=10)\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.payments.list({\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\nuse Polar\\Models\\Operations;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\PaymentsListRequest(\n    organizationId: '1dbfc517-0bbf-4301-9ba8-555ca42b9737',\n);\n\n$responses = $sdk->payments->list(\n    request: $request\n);\n\n\nforeach ($responses as $response) {\n    if ($response->statusCode === 200) {\n        // handle response\n    }\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Payments.List(ctx, operations.PaymentsListRequest{\n        OrganizationID: polargo.Pointer(operations.CreatePaymentsListQueryParamOrganizationIDFilterStr(\n            \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n        )),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResource != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          }
        ]
      }
    },
    "/v1/payments/{id}": {
      "get": {
        "tags": [
          "payments",
          "documented",
          "mcp"
        ],
        "summary": "Get Payment",
        "description": "Get a payment by ID.\n\n**Scopes**: `payments:read`",
        "operationId": "payments:get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The payment ID.",
              "title": "Id"
            },
            "description": "The payment ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          },
          "404": {
            "description": "Payment not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-mcp": {
          "disabled": false,
          "scopes": [
            "read",
            "payments"
          ]
        },
        "x-speakeasy-group": "payments",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.payments.get(id=\"<value>\")\n\n    # Handle response\n    print(res)"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.payments.get({\n    id: \"<value>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP (SDK)",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Polar;\n\n$sdk = Polar\\Polar::builder()\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->payments->get(\n    id: '<value>'\n);\n\nif ($response->payment !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Payments.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Payment != nil {\n        // handle response\n    }\n}"
          }
        ]
      }
    }
  },
  "webhooks": {
    "checkout.created": {
      "post": {
        "summary": "checkout.created",
        "description": "Sent when a new checkout is created.\n\n**Discord & Slack support:** Basic",
        "operationId": "_endpointcheckout_created_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookCheckoutCreatedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "checkout.updated": {
      "post": {
        "summary": "checkout.updated",
        "description": "Sent when a checkout is updated.\n\n**Discord & Slack support:** Basic",
        "operationId": "_endpointcheckout_updated_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookCheckoutUpdatedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "customer.created": {
      "post": {
        "summary": "customer.created",
        "description": "Sent when a new customer is created.\n\nA customer can be created:\n\n* After a successful checkout.\n* Programmatically via the API.\n\n**Discord & Slack support:** Basic",
        "operationId": "_endpointcustomer_created_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookCustomerCreatedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "customer.updated": {
      "post": {
        "summary": "customer.updated",
        "description": "Sent when a customer is updated.\n\nThis event is fired when the customer details are updated.\n\nIf you want to be notified when a customer subscription or benefit state changes, you should listen to the `customer_state_changed` event.\n\n**Discord & Slack support:** Basic",
        "operationId": "_endpointcustomer_updated_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookCustomerUpdatedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "customer.deleted": {
      "post": {
        "summary": "customer.deleted",
        "description": "Sent when a customer is deleted.\n\n**Discord & Slack support:** Basic",
        "operationId": "_endpointcustomer_deleted_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookCustomerDeletedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "customer.state_changed": {
      "post": {
        "summary": "customer.state_changed",
        "description": "Sent when a customer state has changed.\n\nIt's triggered when:\n\n* Customer is created, updated or deleted.\n* A subscription is created or updated.\n* A benefit is granted or revoked.\n\n**Discord & Slack support:** Basic",
        "operationId": "_endpointcustomer_state_changed_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookCustomerStateChangedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "order.created": {
      "post": {
        "summary": "order.created",
        "description": "Sent when a new order is created.\n\nA new order is created when:\n\n* A customer purchases a one-time product. In this case, `billing_reason` is set to `purchase`.\n* A customer starts a subscription. In this case, `billing_reason` is set to `subscription_create`.\n* A subscription is renewed. In this case, `billing_reason` is set to `subscription_cycle`.\n* A subscription is upgraded or downgraded with an immediate proration invoice. In this case, `billing_reason` is set to `subscription_update`.\n\n<Warning>The order might not be paid yet, so the `status` field might be `pending`.</Warning>\n\n**Discord & Slack support:** Full",
        "operationId": "_endpointorder_created_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookOrderCreatedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "order.updated": {
      "post": {
        "summary": "order.updated",
        "description": "Sent when an order is updated.\n\nAn order is updated when:\n\n* Its status changes, e.g. from `pending` to `paid`.\n* It's refunded, partially or fully.\n\n**Discord & Slack support:** Full",
        "operationId": "_endpointorder_updated_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookOrderUpdatedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "order.paid": {
      "post": {
        "summary": "order.paid",
        "description": "Sent when an order is paid.\n\nWhen you receive this event, the order is fully processed and payment has been received.\n\n**Discord & Slack support:** Full",
        "operationId": "_endpointorder_paid_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookOrderPaidPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "order.refunded": {
      "post": {
        "summary": "order.refunded",
        "description": "Sent when an order is fully or partially refunded.\n\n**Discord & Slack support:** Full",
        "operationId": "_endpointorder_refunded_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookOrderRefundedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "subscription.created": {
      "post": {
        "summary": "subscription.created",
        "description": "Sent when a new subscription is created.\n\nWhen this event occurs, the subscription `status` might not be `active` yet, as we can still have to wait for the first payment to be processed.\n\n**Discord & Slack support:** Full",
        "operationId": "_endpointsubscription_created_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookSubscriptionCreatedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "subscription.updated": {
      "post": {
        "summary": "subscription.updated",
        "description": "Sent when a subscription is updated. This event fires for all changes to the subscription, including renewals.\n\nIf you want more specific events, you can listen to `subscription.active`, `subscription.canceled`, and `subscription.revoked`.\n\nTo listen specifically for renewals, you can listen to `order.created` events and check the `billing_reason` field.\n\n**Discord & Slack support:** On cancellation and revocation. Renewals are skipped.",
        "operationId": "_endpointsubscription_updated_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookSubscriptionUpdatedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "subscription.active": {
      "post": {
        "summary": "subscription.active",
        "description": "Sent when a subscription becomes active,\nwhether because it's a new paid subscription or because payment was recovered.\n\n**Discord & Slack support:** Full",
        "operationId": "_endpointsubscription_active_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookSubscriptionActivePayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "subscription.canceled": {
      "post": {
        "summary": "subscription.canceled",
        "description": "Sent when a subscription is canceled.\nCustomers might still have access until the end of the current period.\n\n**Discord & Slack support:** Full",
        "operationId": "_endpointsubscription_canceled_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookSubscriptionCanceledPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "subscription.uncanceled": {
      "post": {
        "summary": "subscription.uncanceled",
        "description": "Sent when a subscription is uncanceled.\n\n**Discord & Slack support:** Full",
        "operationId": "_endpointsubscription_uncanceled_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookSubscriptionUncanceledPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "subscription.revoked": {
      "post": {
        "summary": "subscription.revoked",
        "description": "Sent when a subscription is revoked, the user loses access immediately.\nHappens when the subscription is canceled, or payment is past due.\n\n**Discord & Slack support:** Full",
        "operationId": "_endpointsubscription_revoked_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookSubscriptionRevokedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "refund.created": {
      "post": {
        "summary": "refund.created",
        "description": "Sent when a refund is created regardless of status.\n\n**Discord & Slack support:** Full",
        "operationId": "_endpointrefund_created_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookRefundCreatedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "refund.updated": {
      "post": {
        "summary": "refund.updated",
        "description": "Sent when a refund is updated.\n\n**Discord & Slack support:** Full",
        "operationId": "_endpointrefund_updated_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookRefundUpdatedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "product.created": {
      "post": {
        "summary": "product.created",
        "description": "Sent when a new product is created.\n\n**Discord & Slack support:** Basic",
        "operationId": "_endpointproduct_created_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookProductCreatedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "product.updated": {
      "post": {
        "summary": "product.updated",
        "description": "Sent when a product is updated.\n\n**Discord & Slack support:** Basic",
        "operationId": "_endpointproduct_updated_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookProductUpdatedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "organization.updated": {
      "post": {
        "summary": "organization.updated",
        "description": "Sent when a organization is updated.\n\n**Discord & Slack support:** Basic",
        "operationId": "_endpointorganization_updated_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookOrganizationUpdatedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "benefit.created": {
      "post": {
        "summary": "benefit.created",
        "description": "Sent when a new benefit is created.\n\n**Discord & Slack support:** Basic",
        "operationId": "_endpointbenefit_created_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookBenefitCreatedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "benefit.updated": {
      "post": {
        "summary": "benefit.updated",
        "description": "Sent when a benefit is updated.\n\n**Discord & Slack support:** Basic",
        "operationId": "_endpointbenefit_updated_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookBenefitUpdatedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "benefit_grant.created": {
      "post": {
        "summary": "benefit_grant.created",
        "description": "Sent when a new benefit grant is created.\n\n**Discord & Slack support:** Basic",
        "operationId": "_endpointbenefit_grant_created_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookBenefitGrantCreatedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "benefit_grant.updated": {
      "post": {
        "summary": "benefit_grant.updated",
        "description": "Sent when a benefit grant is updated.\n\n**Discord & Slack support:** Basic",
        "operationId": "_endpointbenefit_grant_updated_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookBenefitGrantUpdatedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "benefit_grant.cycled": {
      "post": {
        "summary": "benefit_grant.cycled",
        "description": "Sent when a benefit grant is cycled,\nmeaning the related subscription has been renewed for another period.\n\n**Discord & Slack support:** Basic",
        "operationId": "_endpointbenefit_grant_cycled_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookBenefitGrantCycledPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "benefit_grant.revoked": {
      "post": {
        "summary": "benefit_grant.revoked",
        "description": "Sent when a benefit grant is revoked.\n\n**Discord & Slack support:** Basic",
        "operationId": "_endpointbenefit_grant_revoked_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookBenefitGrantRevokedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Address": {
        "properties": {
          "line1": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Line1"
          },
          "line2": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Line2"
          },
          "postal_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Postal Code"
          },
          "city": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "City"
          },
          "state": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "State"
          },
          "country": {
            "type": "string",
            "pattern": "^\\w{2}$",
            "title": "Country",
            "examples": [
              "US",
              "SE",
              "FR"
            ]
          }
        },
        "type": "object",
        "required": [
          "country"
        ],
        "title": "Address"
      },
      "AlreadyActiveSubscriptionError": {
        "properties": {
          "error": {
            "type": "string",
            "const": "AlreadyActiveSubscriptionError",
            "title": "Error",
            "examples": [
              "AlreadyActiveSubscriptionError"
            ]
          },
          "detail": {
            "type": "string",
            "title": "Detail"
          }
        },
        "type": "object",
        "required": [
          "error",
          "detail"
        ],
        "title": "AlreadyActiveSubscriptionError"
      },
      "AlreadyCanceledSubscription": {
        "properties": {
          "error": {
            "type": "string",
            "const": "AlreadyCanceledSubscription",
            "title": "Error",
            "examples": [
              "AlreadyCanceledSubscription"
            ]
          },
          "detail": {
            "type": "string",
            "title": "Detail"
          }
        },
        "type": "object",
        "required": [
          "error",
          "detail"
        ],
        "title": "AlreadyCanceledSubscription"
      },
      "AttachedCustomField": {
        "properties": {
          "custom_field_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Custom Field Id",
            "description": "ID of the custom field."
          },
          "custom_field": {
            "$ref": "#/components/schemas/CustomField",
            "title": "CustomField"
          },
          "order": {
            "type": "integer",
            "title": "Order",
            "description": "Order of the custom field in the resource."
          },
          "required": {
            "type": "boolean",
            "title": "Required",
            "description": "Whether the value is required for this custom field."
          }
        },
        "type": "object",
        "required": [
          "custom_field_id",
          "custom_field",
          "order",
          "required"
        ],
        "title": "AttachedCustomField",
        "description": "Schema of a custom field attached to a resource."
      },
      "AttachedCustomFieldCreate": {
        "properties": {
          "custom_field_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Custom Field Id",
            "description": "ID of the custom field to attach."
          },
          "required": {
            "type": "boolean",
            "title": "Required",
            "description": "Whether the value is required for this custom field."
          }
        },
        "type": "object",
        "required": [
          "custom_field_id",
          "required"
        ],
        "title": "AttachedCustomFieldCreate",
        "description": "Schema to attach a custom field to a resource."
      },
      "AuthorizeOrganization": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "slug": {
            "type": "string",
            "title": "Slug"
          },
          "avatar_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avatar Url"
          }
        },
        "type": "object",
        "required": [
          "id",
          "slug",
          "avatar_url"
        ],
        "title": "AuthorizeOrganization"
      },
      "AuthorizeResponseOrganization": {
        "properties": {
          "client": {
            "$ref": "#/components/schemas/OAuth2ClientPublic"
          },
          "sub_type": {
            "type": "string",
            "const": "organization",
            "title": "Sub Type"
          },
          "sub": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AuthorizeOrganization"
              },
              {
                "type": "null"
              }
            ]
          },
          "scopes": {
            "items": {
              "$ref": "#/components/schemas/Scope"
            },
            "type": "array",
            "title": "Scopes"
          },
          "organizations": {
            "items": {
              "$ref": "#/components/schemas/AuthorizeOrganization"
            },
            "type": "array",
            "title": "Organizations"
          }
        },
        "type": "object",
        "required": [
          "client",
          "sub_type",
          "sub",
          "scopes",
          "organizations"
        ],
        "title": "AuthorizeResponseOrganization"
      },
      "AuthorizeResponseUser": {
        "properties": {
          "client": {
            "$ref": "#/components/schemas/OAuth2ClientPublic"
          },
          "sub_type": {
            "type": "string",
            "const": "user",
            "title": "Sub Type"
          },
          "sub": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AuthorizeUser"
              },
              {
                "type": "null"
              }
            ]
          },
          "scopes": {
            "items": {
              "$ref": "#/components/schemas/Scope"
            },
            "type": "array",
            "title": "Scopes"
          }
        },
        "type": "object",
        "required": [
          "client",
          "sub_type",
          "sub",
          "scopes"
        ],
        "title": "AuthorizeResponseUser"
      },
      "AuthorizeUser": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "avatar_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avatar Url"
          }
        },
        "type": "object",
        "required": [
          "id",
          "email",
          "avatar_url"
        ],
        "title": "AuthorizeUser"
      },
      "Benefit": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/BenefitCustom"
          },
          {
            "$ref": "#/components/schemas/BenefitDiscord"
          },
          {
            "$ref": "#/components/schemas/BenefitGitHubRepository"
          },
          {
            "$ref": "#/components/schemas/BenefitDownloadables"
          },
          {
            "$ref": "#/components/schemas/BenefitLicenseKeys"
          },
          {
            "$ref": "#/components/schemas/BenefitMeterCredit"
          }
        ]
      },
      "BenefitCreate": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/BenefitCustomCreate"
          },
          {
            "$ref": "#/components/schemas/BenefitDiscordCreate"
          },
          {
            "$ref": "#/components/schemas/BenefitGitHubRepositoryCreate"
          },
          {
            "$ref": "#/components/schemas/BenefitDownloadablesCreate"
          },
          {
            "$ref": "#/components/schemas/BenefitLicenseKeysCreate"
          },
          {
            "$ref": "#/components/schemas/BenefitMeterCreditCreate"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "custom": "#/components/schemas/BenefitCustomCreate",
            "discord": "#/components/schemas/BenefitDiscordCreate",
            "downloadables": "#/components/schemas/BenefitDownloadablesCreate",
            "github_repository": "#/components/schemas/BenefitGitHubRepositoryCreate",
            "license_keys": "#/components/schemas/BenefitLicenseKeysCreate",
            "meter_credit": "#/components/schemas/BenefitMeterCreditCreate"
          }
        }
      },
      "BenefitCustom": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the benefit."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "type": {
            "type": "string",
            "const": "custom",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the benefit."
          },
          "selectable": {
            "type": "boolean",
            "title": "Selectable",
            "description": "Whether the benefit is selectable when creating a product."
          },
          "deletable": {
            "type": "boolean",
            "title": "Deletable",
            "description": "Whether the benefit is deletable."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitCustomProperties"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "modified_at",
          "type",
          "description",
          "selectable",
          "deletable",
          "organization_id",
          "metadata",
          "properties"
        ],
        "title": "BenefitCustom",
        "description": "A benefit of type `custom`.\n\nUse it to grant any kind of benefit that doesn't fit in the other types."
      },
      "BenefitCustomCreate": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "type": {
            "type": "string",
            "const": "custom",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "maxLength": 42,
            "minLength": 3,
            "title": "Description",
            "description": "The description of the benefit. Will be displayed on products having this benefit."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "examples": [
                  "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                ],
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit. **Required unless you use an organization token.**"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitCustomCreateProperties"
          }
        },
        "type": "object",
        "required": [
          "type",
          "description",
          "properties"
        ],
        "title": "BenefitCustomCreate",
        "description": "Schema to create a benefit of type `custom`."
      },
      "BenefitCustomCreateProperties": {
        "properties": {
          "note": {
            "anyOf": [
              {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Private note to be shared with customers who have this benefit granted."
              },
              {
                "type": "null"
              }
            ],
            "title": "Note"
          }
        },
        "type": "object",
        "title": "BenefitCustomCreateProperties",
        "description": "Properties for creating a benefit of type `custom`."
      },
      "BenefitCustomProperties": {
        "properties": {
          "note": {
            "anyOf": [
              {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Private note to be shared with customers who have this benefit granted."
              },
              {
                "type": "null"
              }
            ],
            "title": "Note"
          }
        },
        "type": "object",
        "required": [
          "note"
        ],
        "title": "BenefitCustomProperties",
        "description": "Properties for a benefit of type `custom`."
      },
      "BenefitCustomSubscriber": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the benefit."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "type": {
            "type": "string",
            "const": "custom",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the benefit."
          },
          "selectable": {
            "type": "boolean",
            "title": "Selectable",
            "description": "Whether the benefit is selectable when creating a product."
          },
          "deletable": {
            "type": "boolean",
            "title": "Deletable",
            "description": "Whether the benefit is deletable."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitCustomSubscriberProperties"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "modified_at",
          "type",
          "description",
          "selectable",
          "deletable",
          "organization_id",
          "metadata",
          "organization",
          "properties"
        ],
        "title": "BenefitCustomSubscriber"
      },
      "BenefitCustomSubscriberProperties": {
        "properties": {
          "note": {
            "anyOf": [
              {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Private note to be shared with customers who have this benefit granted."
              },
              {
                "type": "null"
              }
            ],
            "title": "Note"
          }
        },
        "type": "object",
        "required": [
          "note"
        ],
        "title": "BenefitCustomSubscriberProperties",
        "description": "Properties available to subscribers for a benefit of type `custom`."
      },
      "BenefitCustomUpdate": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 42,
                "minLength": 3
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the benefit. Will be displayed on products having this benefit."
          },
          "type": {
            "type": "string",
            "const": "custom",
            "title": "Type"
          },
          "properties": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitCustomProperties"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "type"
        ],
        "title": "BenefitCustomUpdate"
      },
      "BenefitCycledEvent": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp",
            "description": "The timestamp of the event."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the event.",
            "examples": [
              "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
            ],
            "x-polar-selector-widget": {
              "displayProperty": "name",
              "resourceName": "Organization",
              "resourceRoot": "/v1/organizations"
            }
          },
          "customer_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Id",
            "description": "ID of the customer in your Polar organization associated with the event."
          },
          "customer": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Customer"
              },
              {
                "type": "null"
              }
            ],
            "description": "The customer associated with the event."
          },
          "external_customer_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "External Customer Id",
            "description": "ID of the customer in your system associated with the event."
          },
          "source": {
            "type": "string",
            "const": "system",
            "title": "Source",
            "description": "The source of the event. `system` events are created by Polar. `user` events are the one you create through our ingestion API."
          },
          "name": {
            "type": "string",
            "const": "benefit.cycled",
            "title": "Name",
            "description": "The name of the event."
          },
          "metadata": {
            "$ref": "#/components/schemas/BenefitGrantMetadata"
          }
        },
        "type": "object",
        "required": [
          "id",
          "timestamp",
          "organization_id",
          "customer_id",
          "customer",
          "external_customer_id",
          "source",
          "name",
          "metadata"
        ],
        "title": "BenefitCycledEvent",
        "description": "An event created by Polar when a benefit is cycled."
      },
      "BenefitDiscord": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the benefit."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "type": {
            "type": "string",
            "const": "discord",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the benefit."
          },
          "selectable": {
            "type": "boolean",
            "title": "Selectable",
            "description": "Whether the benefit is selectable when creating a product."
          },
          "deletable": {
            "type": "boolean",
            "title": "Deletable",
            "description": "Whether the benefit is deletable."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitDiscordProperties"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "modified_at",
          "type",
          "description",
          "selectable",
          "deletable",
          "organization_id",
          "metadata",
          "properties"
        ],
        "title": "BenefitDiscord",
        "description": "A benefit of type `discord`.\n\nUse it to automatically invite your backers to a Discord server."
      },
      "BenefitDiscordCreate": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "type": {
            "type": "string",
            "const": "discord",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "maxLength": 42,
            "minLength": 3,
            "title": "Description",
            "description": "The description of the benefit. Will be displayed on products having this benefit."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "examples": [
                  "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                ],
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit. **Required unless you use an organization token.**"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitDiscordCreateProperties"
          }
        },
        "type": "object",
        "required": [
          "type",
          "description",
          "properties"
        ],
        "title": "BenefitDiscordCreate"
      },
      "BenefitDiscordCreateProperties": {
        "properties": {
          "guild_token": {
            "type": "string",
            "title": "Guild Token"
          },
          "role_id": {
            "type": "string",
            "title": "Role Id",
            "description": "The ID of the Discord role to grant."
          }
        },
        "type": "object",
        "required": [
          "guild_token",
          "role_id"
        ],
        "title": "BenefitDiscordCreateProperties",
        "description": "Properties to create a benefit of type `discord`."
      },
      "BenefitDiscordProperties": {
        "properties": {
          "guild_id": {
            "type": "string",
            "title": "Guild Id",
            "description": "The ID of the Discord server."
          },
          "role_id": {
            "type": "string",
            "title": "Role Id",
            "description": "The ID of the Discord role to grant."
          },
          "guild_token": {
            "type": "string",
            "title": "Guild Token"
          }
        },
        "type": "object",
        "required": [
          "guild_id",
          "role_id",
          "guild_token"
        ],
        "title": "BenefitDiscordProperties",
        "description": "Properties for a benefit of type `discord`."
      },
      "BenefitDiscordSubscriber": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the benefit."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "type": {
            "type": "string",
            "const": "discord",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the benefit."
          },
          "selectable": {
            "type": "boolean",
            "title": "Selectable",
            "description": "Whether the benefit is selectable when creating a product."
          },
          "deletable": {
            "type": "boolean",
            "title": "Deletable",
            "description": "Whether the benefit is deletable."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitDiscordSubscriberProperties"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "modified_at",
          "type",
          "description",
          "selectable",
          "deletable",
          "organization_id",
          "metadata",
          "organization",
          "properties"
        ],
        "title": "BenefitDiscordSubscriber"
      },
      "BenefitDiscordSubscriberProperties": {
        "properties": {
          "guild_id": {
            "type": "string",
            "title": "Guild Id",
            "description": "The ID of the Discord server."
          }
        },
        "type": "object",
        "required": [
          "guild_id"
        ],
        "title": "BenefitDiscordSubscriberProperties",
        "description": "Properties available to subscribers for a benefit of type `discord`."
      },
      "BenefitDiscordUpdate": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 42,
                "minLength": 3
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the benefit. Will be displayed on products having this benefit."
          },
          "type": {
            "type": "string",
            "const": "discord",
            "title": "Type"
          },
          "properties": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitDiscordCreateProperties"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "type"
        ],
        "title": "BenefitDiscordUpdate"
      },
      "BenefitDownloadables": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the benefit."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "type": {
            "type": "string",
            "const": "downloadables",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the benefit."
          },
          "selectable": {
            "type": "boolean",
            "title": "Selectable",
            "description": "Whether the benefit is selectable when creating a product."
          },
          "deletable": {
            "type": "boolean",
            "title": "Deletable",
            "description": "Whether the benefit is deletable."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitDownloadablesProperties"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "modified_at",
          "type",
          "description",
          "selectable",
          "deletable",
          "organization_id",
          "metadata",
          "properties"
        ],
        "title": "BenefitDownloadables"
      },
      "BenefitDownloadablesCreate": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "type": {
            "type": "string",
            "const": "downloadables",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "maxLength": 42,
            "minLength": 3,
            "title": "Description",
            "description": "The description of the benefit. Will be displayed on products having this benefit."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "examples": [
                  "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                ],
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit. **Required unless you use an organization token.**"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitDownloadablesCreateProperties"
          }
        },
        "type": "object",
        "required": [
          "type",
          "description",
          "properties"
        ],
        "title": "BenefitDownloadablesCreate"
      },
      "BenefitDownloadablesCreateProperties": {
        "properties": {
          "archived": {
            "additionalProperties": {
              "type": "boolean"
            },
            "propertyNames": {
              "format": "uuid4"
            },
            "type": "object",
            "title": "Archived",
            "default": {}
          },
          "files": {
            "items": {
              "type": "string",
              "format": "uuid4"
            },
            "type": "array",
            "minItems": 1,
            "title": "Files"
          }
        },
        "type": "object",
        "required": [
          "files"
        ],
        "title": "BenefitDownloadablesCreateProperties"
      },
      "BenefitDownloadablesProperties": {
        "properties": {
          "archived": {
            "additionalProperties": {
              "type": "boolean"
            },
            "propertyNames": {
              "format": "uuid4"
            },
            "type": "object",
            "title": "Archived"
          },
          "files": {
            "items": {
              "type": "string",
              "format": "uuid4"
            },
            "type": "array",
            "title": "Files"
          }
        },
        "type": "object",
        "required": [
          "archived",
          "files"
        ],
        "title": "BenefitDownloadablesProperties"
      },
      "BenefitDownloadablesSubscriber": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the benefit."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "type": {
            "type": "string",
            "const": "downloadables",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the benefit."
          },
          "selectable": {
            "type": "boolean",
            "title": "Selectable",
            "description": "Whether the benefit is selectable when creating a product."
          },
          "deletable": {
            "type": "boolean",
            "title": "Deletable",
            "description": "Whether the benefit is deletable."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitDownloadablesSubscriberProperties"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "modified_at",
          "type",
          "description",
          "selectable",
          "deletable",
          "organization_id",
          "metadata",
          "organization",
          "properties"
        ],
        "title": "BenefitDownloadablesSubscriber"
      },
      "BenefitDownloadablesSubscriberProperties": {
        "properties": {
          "active_files": {
            "items": {
              "type": "string",
              "format": "uuid4"
            },
            "type": "array",
            "title": "Active Files"
          }
        },
        "type": "object",
        "required": [
          "active_files"
        ],
        "title": "BenefitDownloadablesSubscriberProperties"
      },
      "BenefitDownloadablesUpdate": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 42,
                "minLength": 3
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the benefit. Will be displayed on products having this benefit."
          },
          "type": {
            "type": "string",
            "const": "downloadables",
            "title": "Type"
          },
          "properties": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitDownloadablesCreateProperties"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "type"
        ],
        "title": "BenefitDownloadablesUpdate"
      },
      "BenefitGitHubRepository": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the benefit."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "type": {
            "type": "string",
            "const": "github_repository",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the benefit."
          },
          "selectable": {
            "type": "boolean",
            "title": "Selectable",
            "description": "Whether the benefit is selectable when creating a product."
          },
          "deletable": {
            "type": "boolean",
            "title": "Deletable",
            "description": "Whether the benefit is deletable."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitGitHubRepositoryProperties"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "modified_at",
          "type",
          "description",
          "selectable",
          "deletable",
          "organization_id",
          "metadata",
          "properties"
        ],
        "title": "BenefitGitHubRepository",
        "description": "A benefit of type `github_repository`.\n\nUse it to automatically invite your backers to a private GitHub repository."
      },
      "BenefitGitHubRepositoryCreate": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "type": {
            "type": "string",
            "const": "github_repository",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "maxLength": 42,
            "minLength": 3,
            "title": "Description",
            "description": "The description of the benefit. Will be displayed on products having this benefit."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "examples": [
                  "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                ],
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit. **Required unless you use an organization token.**"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitGitHubRepositoryCreateProperties"
          }
        },
        "type": "object",
        "required": [
          "type",
          "description",
          "properties"
        ],
        "title": "BenefitGitHubRepositoryCreate"
      },
      "BenefitGitHubRepositoryCreateProperties": {
        "properties": {
          "repository_owner": {
            "type": "string",
            "title": "Repository Owner",
            "description": "The owner of the repository.",
            "examples": [
              "polarsource"
            ]
          },
          "repository_name": {
            "type": "string",
            "title": "Repository Name",
            "description": "The name of the repository.",
            "examples": [
              "private_repo"
            ]
          },
          "permission": {
            "type": "string",
            "enum": [
              "pull",
              "triage",
              "push",
              "maintain",
              "admin"
            ],
            "title": "Permission",
            "description": "The permission level to grant. Read more about roles and their permissions on [GitHub documentation](https://docs.github.com/en/organizations/managing-user-access-to-your-organizations-repositories/managing-repository-roles/repository-roles-for-an-organization#permissions-for-each-role)."
          }
        },
        "type": "object",
        "required": [
          "repository_owner",
          "repository_name",
          "permission"
        ],
        "title": "BenefitGitHubRepositoryCreateProperties",
        "description": "Properties to create a benefit of type `github_repository`."
      },
      "BenefitGitHubRepositoryProperties": {
        "properties": {
          "repository_owner": {
            "type": "string",
            "title": "Repository Owner",
            "description": "The owner of the repository.",
            "examples": [
              "polarsource"
            ]
          },
          "repository_name": {
            "type": "string",
            "title": "Repository Name",
            "description": "The name of the repository.",
            "examples": [
              "private_repo"
            ]
          },
          "permission": {
            "type": "string",
            "enum": [
              "pull",
              "triage",
              "push",
              "maintain",
              "admin"
            ],
            "title": "Permission",
            "description": "The permission level to grant. Read more about roles and their permissions on [GitHub documentation](https://docs.github.com/en/organizations/managing-user-access-to-your-organizations-repositories/managing-repository-roles/repository-roles-for-an-organization#permissions-for-each-role)."
          }
        },
        "type": "object",
        "required": [
          "repository_owner",
          "repository_name",
          "permission"
        ],
        "title": "BenefitGitHubRepositoryProperties",
        "description": "Properties for a benefit of type `github_repository`."
      },
      "BenefitGitHubRepositorySubscriber": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the benefit."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "type": {
            "type": "string",
            "const": "github_repository",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the benefit."
          },
          "selectable": {
            "type": "boolean",
            "title": "Selectable",
            "description": "Whether the benefit is selectable when creating a product."
          },
          "deletable": {
            "type": "boolean",
            "title": "Deletable",
            "description": "Whether the benefit is deletable."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitGitHubRepositorySubscriberProperties"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "modified_at",
          "type",
          "description",
          "selectable",
          "deletable",
          "organization_id",
          "metadata",
          "organization",
          "properties"
        ],
        "title": "BenefitGitHubRepositorySubscriber"
      },
      "BenefitGitHubRepositorySubscriberProperties": {
        "properties": {
          "repository_owner": {
            "type": "string",
            "title": "Repository Owner",
            "description": "The owner of the repository.",
            "examples": [
              "polarsource"
            ]
          },
          "repository_name": {
            "type": "string",
            "title": "Repository Name",
            "description": "The name of the repository.",
            "examples": [
              "private_repo"
            ]
          }
        },
        "type": "object",
        "required": [
          "repository_owner",
          "repository_name"
        ],
        "title": "BenefitGitHubRepositorySubscriberProperties",
        "description": "Properties available to subscribers for a benefit of type `github_repository`."
      },
      "BenefitGitHubRepositoryUpdate": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 42,
                "minLength": 3
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the benefit. Will be displayed on products having this benefit."
          },
          "type": {
            "type": "string",
            "const": "github_repository",
            "title": "Type"
          },
          "properties": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitGitHubRepositoryCreateProperties"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "type"
        ],
        "title": "BenefitGitHubRepositoryUpdate"
      },
      "BenefitGrant": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the grant."
          },
          "granted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Granted At",
            "description": "The timestamp when the benefit was granted. If `None`, the benefit is not granted."
          },
          "is_granted": {
            "type": "boolean",
            "title": "Is Granted",
            "description": "Whether the benefit is granted."
          },
          "revoked_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Revoked At",
            "description": "The timestamp when the benefit was revoked. If `None`, the benefit is not revoked."
          },
          "is_revoked": {
            "type": "boolean",
            "title": "Is Revoked",
            "description": "Whether the benefit is revoked."
          },
          "subscription_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subscription Id",
            "description": "The ID of the subscription that granted this benefit."
          },
          "order_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id",
            "description": "The ID of the order that granted this benefit."
          },
          "customer_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Customer Id",
            "description": "The ID of the customer concerned by this grant."
          },
          "benefit_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Benefit Id",
            "description": "The ID of the benefit concerned by this grant."
          },
          "error": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitGrantError"
              },
              {
                "type": "null"
              }
            ],
            "description": "The error information if the benefit grant failed with an unrecoverable error."
          },
          "customer": {
            "$ref": "#/components/schemas/Customer"
          },
          "properties": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitGrantDiscordProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantGitHubRepositoryProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantDownloadablesProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantLicenseKeysProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantCustomProperties"
              }
            ],
            "title": "Properties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "is_granted",
          "is_revoked",
          "subscription_id",
          "order_id",
          "customer_id",
          "benefit_id",
          "customer",
          "properties"
        ],
        "title": "BenefitGrant"
      },
      "BenefitGrantCustomProperties": {
        "properties": {},
        "type": "object",
        "title": "BenefitGrantCustomProperties"
      },
      "BenefitGrantDiscordProperties": {
        "properties": {
          "account_id": {
            "type": "string",
            "title": "Account Id"
          },
          "guild_id": {
            "type": "string",
            "title": "Guild Id"
          },
          "role_id": {
            "type": "string",
            "title": "Role Id"
          }
        },
        "type": "object",
        "title": "BenefitGrantDiscordProperties"
      },
      "BenefitGrantDownloadablesProperties": {
        "properties": {
          "files": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Files"
          }
        },
        "type": "object",
        "title": "BenefitGrantDownloadablesProperties"
      },
      "BenefitGrantError": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "timestamp": {
            "type": "string",
            "title": "Timestamp"
          }
        },
        "type": "object",
        "required": [
          "message",
          "type",
          "timestamp"
        ],
        "title": "BenefitGrantError"
      },
      "BenefitGrantGitHubRepositoryProperties": {
        "properties": {
          "account_id": {
            "type": "string",
            "title": "Account Id"
          },
          "repository_owner": {
            "type": "string",
            "title": "Repository Owner"
          },
          "repository_name": {
            "type": "string",
            "title": "Repository Name"
          },
          "permission": {
            "type": "string",
            "enum": [
              "pull",
              "triage",
              "push",
              "maintain",
              "admin"
            ],
            "title": "Permission"
          }
        },
        "type": "object",
        "title": "BenefitGrantGitHubRepositoryProperties"
      },
      "BenefitGrantLicenseKeysProperties": {
        "properties": {
          "license_key_id": {
            "type": "string",
            "title": "License Key Id"
          },
          "display_key": {
            "type": "string",
            "title": "Display Key"
          }
        },
        "type": "object",
        "title": "BenefitGrantLicenseKeysProperties"
      },
      "BenefitGrantMetadata": {
        "properties": {
          "benefit_id": {
            "type": "string",
            "title": "Benefit Id"
          },
          "benefit_grant_id": {
            "type": "string",
            "title": "Benefit Grant Id"
          },
          "benefit_type": {
            "$ref": "#/components/schemas/BenefitType"
          }
        },
        "type": "object",
        "required": [
          "benefit_id",
          "benefit_grant_id",
          "benefit_type"
        ],
        "title": "BenefitGrantMetadata"
      },
      "BenefitGrantMeterCreditProperties": {
        "properties": {
          "last_credited_meter_id": {
            "type": "string",
            "title": "Last Credited Meter Id"
          },
          "last_credited_units": {
            "type": "integer",
            "title": "Last Credited Units"
          },
          "last_credited_at": {
            "type": "string",
            "title": "Last Credited At"
          }
        },
        "type": "object",
        "required": [
          "last_credited_meter_id",
          "last_credited_units",
          "last_credited_at"
        ],
        "title": "BenefitGrantMeterCreditProperties"
      },
      "BenefitGrantWebhook": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the grant."
          },
          "granted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Granted At",
            "description": "The timestamp when the benefit was granted. If `None`, the benefit is not granted."
          },
          "is_granted": {
            "type": "boolean",
            "title": "Is Granted",
            "description": "Whether the benefit is granted."
          },
          "revoked_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Revoked At",
            "description": "The timestamp when the benefit was revoked. If `None`, the benefit is not revoked."
          },
          "is_revoked": {
            "type": "boolean",
            "title": "Is Revoked",
            "description": "Whether the benefit is revoked."
          },
          "subscription_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subscription Id",
            "description": "The ID of the subscription that granted this benefit."
          },
          "order_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id",
            "description": "The ID of the order that granted this benefit."
          },
          "customer_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Customer Id",
            "description": "The ID of the customer concerned by this grant."
          },
          "benefit_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Benefit Id",
            "description": "The ID of the benefit concerned by this grant."
          },
          "error": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitGrantError"
              },
              {
                "type": "null"
              }
            ],
            "description": "The error information if the benefit grant failed with an unrecoverable error."
          },
          "customer": {
            "$ref": "#/components/schemas/Customer"
          },
          "properties": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitGrantDiscordProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantGitHubRepositoryProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantDownloadablesProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantLicenseKeysProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantCustomProperties"
              }
            ],
            "title": "Properties"
          },
          "benefit": {
            "$ref": "#/components/schemas/Benefit",
            "title": "Benefit"
          },
          "previous_properties": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitGrantDiscordProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantGitHubRepositoryProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantDownloadablesProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantLicenseKeysProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantCustomProperties"
              },
              {
                "type": "null"
              }
            ],
            "title": "Previous Properties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "is_granted",
          "is_revoked",
          "subscription_id",
          "order_id",
          "customer_id",
          "benefit_id",
          "customer",
          "properties",
          "benefit"
        ],
        "title": "BenefitGrantWebhook"
      },
      "BenefitGrantedEvent": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp",
            "description": "The timestamp of the event."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the event.",
            "examples": [
              "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
            ],
            "x-polar-selector-widget": {
              "displayProperty": "name",
              "resourceName": "Organization",
              "resourceRoot": "/v1/organizations"
            }
          },
          "customer_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Id",
            "description": "ID of the customer in your Polar organization associated with the event."
          },
          "customer": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Customer"
              },
              {
                "type": "null"
              }
            ],
            "description": "The customer associated with the event."
          },
          "external_customer_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "External Customer Id",
            "description": "ID of the customer in your system associated with the event."
          },
          "source": {
            "type": "string",
            "const": "system",
            "title": "Source",
            "description": "The source of the event. `system` events are created by Polar. `user` events are the one you create through our ingestion API."
          },
          "name": {
            "type": "string",
            "const": "benefit.granted",
            "title": "Name",
            "description": "The name of the event."
          },
          "metadata": {
            "$ref": "#/components/schemas/BenefitGrantMetadata"
          }
        },
        "type": "object",
        "required": [
          "id",
          "timestamp",
          "organization_id",
          "customer_id",
          "customer",
          "external_customer_id",
          "source",
          "name",
          "metadata"
        ],
        "title": "BenefitGrantedEvent",
        "description": "An event created by Polar when a benefit is granted to a customer."
      },
      "BenefitLicenseKeyActivationCreateProperties": {
        "properties": {
          "limit": {
            "type": "integer",
            "maximum": 50,
            "exclusiveMinimum": 0,
            "title": "Limit"
          },
          "enable_customer_admin": {
            "type": "boolean",
            "title": "Enable Customer Admin"
          }
        },
        "type": "object",
        "required": [
          "limit",
          "enable_customer_admin"
        ],
        "title": "BenefitLicenseKeyActivationCreateProperties"
      },
      "BenefitLicenseKeyActivationProperties": {
        "properties": {
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "enable_customer_admin": {
            "type": "boolean",
            "title": "Enable Customer Admin"
          }
        },
        "type": "object",
        "required": [
          "limit",
          "enable_customer_admin"
        ],
        "title": "BenefitLicenseKeyActivationProperties"
      },
      "BenefitLicenseKeyExpirationProperties": {
        "properties": {
          "ttl": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "Ttl"
          },
          "timeframe": {
            "type": "string",
            "enum": [
              "year",
              "month",
              "day"
            ],
            "title": "Timeframe"
          }
        },
        "type": "object",
        "required": [
          "ttl",
          "timeframe"
        ],
        "title": "BenefitLicenseKeyExpirationProperties"
      },
      "BenefitLicenseKeys": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the benefit."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "type": {
            "type": "string",
            "const": "license_keys",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the benefit."
          },
          "selectable": {
            "type": "boolean",
            "title": "Selectable",
            "description": "Whether the benefit is selectable when creating a product."
          },
          "deletable": {
            "type": "boolean",
            "title": "Deletable",
            "description": "Whether the benefit is deletable."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitLicenseKeysProperties"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "modified_at",
          "type",
          "description",
          "selectable",
          "deletable",
          "organization_id",
          "metadata",
          "properties"
        ],
        "title": "BenefitLicenseKeys"
      },
      "BenefitLicenseKeysCreate": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "type": {
            "type": "string",
            "const": "license_keys",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "maxLength": 42,
            "minLength": 3,
            "title": "Description",
            "description": "The description of the benefit. Will be displayed on products having this benefit."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "examples": [
                  "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                ],
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit. **Required unless you use an organization token.**"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitLicenseKeysCreateProperties"
          }
        },
        "type": "object",
        "required": [
          "type",
          "description",
          "properties"
        ],
        "title": "BenefitLicenseKeysCreate"
      },
      "BenefitLicenseKeysCreateProperties": {
        "properties": {
          "prefix": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prefix"
          },
          "expires": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitLicenseKeyExpirationProperties"
              },
              {
                "type": "null"
              }
            ]
          },
          "activations": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitLicenseKeyActivationCreateProperties"
              },
              {
                "type": "null"
              }
            ]
          },
          "limit_usage": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMinimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit Usage"
          }
        },
        "type": "object",
        "title": "BenefitLicenseKeysCreateProperties"
      },
      "BenefitLicenseKeysProperties": {
        "properties": {
          "prefix": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prefix"
          },
          "expires": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitLicenseKeyExpirationProperties"
              },
              {
                "type": "null"
              }
            ]
          },
          "activations": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitLicenseKeyActivationProperties"
              },
              {
                "type": "null"
              }
            ]
          },
          "limit_usage": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit Usage"
          }
        },
        "type": "object",
        "required": [
          "prefix",
          "expires",
          "activations",
          "limit_usage"
        ],
        "title": "BenefitLicenseKeysProperties"
      },
      "BenefitLicenseKeysSubscriber": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the benefit."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "type": {
            "type": "string",
            "const": "license_keys",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the benefit."
          },
          "selectable": {
            "type": "boolean",
            "title": "Selectable",
            "description": "Whether the benefit is selectable when creating a product."
          },
          "deletable": {
            "type": "boolean",
            "title": "Deletable",
            "description": "Whether the benefit is deletable."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitLicenseKeysSubscriberProperties"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "modified_at",
          "type",
          "description",
          "selectable",
          "deletable",
          "organization_id",
          "metadata",
          "organization",
          "properties"
        ],
        "title": "BenefitLicenseKeysSubscriber"
      },
      "BenefitLicenseKeysSubscriberProperties": {
        "properties": {
          "prefix": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prefix"
          },
          "expires": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitLicenseKeyExpirationProperties"
              },
              {
                "type": "null"
              }
            ]
          },
          "activations": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitLicenseKeyActivationProperties"
              },
              {
                "type": "null"
              }
            ]
          },
          "limit_usage": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit Usage"
          }
        },
        "type": "object",
        "required": [
          "prefix",
          "expires",
          "activations",
          "limit_usage"
        ],
        "title": "BenefitLicenseKeysSubscriberProperties"
      },
      "BenefitLicenseKeysUpdate": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 42,
                "minLength": 3
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the benefit. Will be displayed on products having this benefit."
          },
          "type": {
            "type": "string",
            "const": "license_keys",
            "title": "Type"
          },
          "properties": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitLicenseKeysCreateProperties"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "type"
        ],
        "title": "BenefitLicenseKeysUpdate"
      },
      "BenefitMeterCredit": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the benefit."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "type": {
            "type": "string",
            "const": "meter_credit",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the benefit."
          },
          "selectable": {
            "type": "boolean",
            "title": "Selectable",
            "description": "Whether the benefit is selectable when creating a product."
          },
          "deletable": {
            "type": "boolean",
            "title": "Deletable",
            "description": "Whether the benefit is deletable."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitMeterCreditProperties"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "modified_at",
          "type",
          "description",
          "selectable",
          "deletable",
          "organization_id",
          "metadata",
          "properties"
        ],
        "title": "BenefitMeterCredit",
        "description": "A benefit of type `meter_unit`.\n\nUse it to grant a number of units on a specific meter."
      },
      "BenefitMeterCreditCreate": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "type": {
            "type": "string",
            "const": "meter_credit",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "maxLength": 42,
            "minLength": 3,
            "title": "Description",
            "description": "The description of the benefit. Will be displayed on products having this benefit."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "examples": [
                  "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                ],
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit. **Required unless you use an organization token.**"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitMeterCreditCreateProperties"
          }
        },
        "type": "object",
        "required": [
          "type",
          "description",
          "properties"
        ],
        "title": "BenefitMeterCreditCreate",
        "description": "Schema to create a benefit of type `meter_unit`."
      },
      "BenefitMeterCreditCreateProperties": {
        "properties": {
          "units": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "Units"
          },
          "rollover": {
            "type": "boolean",
            "title": "Rollover"
          },
          "meter_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Meter Id"
          }
        },
        "type": "object",
        "required": [
          "units",
          "rollover",
          "meter_id"
        ],
        "title": "BenefitMeterCreditCreateProperties",
        "description": "Properties for creating a benefit of type `meter_unit`."
      },
      "BenefitMeterCreditProperties": {
        "properties": {
          "units": {
            "type": "integer",
            "title": "Units"
          },
          "rollover": {
            "type": "boolean",
            "title": "Rollover"
          },
          "meter_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Meter Id"
          }
        },
        "type": "object",
        "required": [
          "units",
          "rollover",
          "meter_id"
        ],
        "title": "BenefitMeterCreditProperties",
        "description": "Properties for a benefit of type `meter_unit`."
      },
      "BenefitMeterCreditSubscriber": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the benefit."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "type": {
            "type": "string",
            "const": "meter_credit",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the benefit."
          },
          "selectable": {
            "type": "boolean",
            "title": "Selectable",
            "description": "Whether the benefit is selectable when creating a product."
          },
          "deletable": {
            "type": "boolean",
            "title": "Deletable",
            "description": "Whether the benefit is deletable."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitMeterCreditSubscriberProperties"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "modified_at",
          "type",
          "description",
          "selectable",
          "deletable",
          "organization_id",
          "metadata",
          "organization",
          "properties"
        ],
        "title": "BenefitMeterCreditSubscriber"
      },
      "BenefitMeterCreditSubscriberProperties": {
        "properties": {
          "units": {
            "type": "integer",
            "title": "Units"
          },
          "rollover": {
            "type": "boolean",
            "title": "Rollover"
          },
          "meter_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Meter Id"
          }
        },
        "type": "object",
        "required": [
          "units",
          "rollover",
          "meter_id"
        ],
        "title": "BenefitMeterCreditSubscriberProperties",
        "description": "Properties available to subscribers for a benefit of type `meter_unit`."
      },
      "BenefitMeterCreditUpdate": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 42,
                "minLength": 3
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the benefit. Will be displayed on products having this benefit."
          },
          "type": {
            "type": "string",
            "const": "meter_credit",
            "title": "Type"
          },
          "properties": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitMeterCreditCreateProperties"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "type"
        ],
        "title": "BenefitMeterCreditUpdate"
      },
      "BenefitPublic": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the benefit."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "type": {
            "$ref": "#/components/schemas/BenefitType",
            "description": "The type of the benefit."
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the benefit."
          },
          "selectable": {
            "type": "boolean",
            "title": "Selectable",
            "description": "Whether the benefit is selectable when creating a product."
          },
          "deletable": {
            "type": "boolean",
            "title": "Deletable",
            "description": "Whether the benefit is deletable."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit."
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "modified_at",
          "type",
          "description",
          "selectable",
          "deletable",
          "organization_id"
        ],
        "title": "BenefitPublic"
      },
      "BenefitRevokedEvent": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp",
            "description": "The timestamp of the event."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the event.",
            "examples": [
              "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
            ],
            "x-polar-selector-widget": {
              "displayProperty": "name",
              "resourceName": "Organization",
              "resourceRoot": "/v1/organizations"
            }
          },
          "customer_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Id",
            "description": "ID of the customer in your Polar organization associated with the event."
          },
          "customer": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Customer"
              },
              {
                "type": "null"
              }
            ],
            "description": "The customer associated with the event."
          },
          "external_customer_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "External Customer Id",
            "description": "ID of the customer in your system associated with the event."
          },
          "source": {
            "type": "string",
            "const": "system",
            "title": "Source",
            "description": "The source of the event. `system` events are created by Polar. `user` events are the one you create through our ingestion API."
          },
          "name": {
            "type": "string",
            "const": "benefit.revoked",
            "title": "Name",
            "description": "The name of the event."
          },
          "metadata": {
            "$ref": "#/components/schemas/BenefitGrantMetadata"
          }
        },
        "type": "object",
        "required": [
          "id",
          "timestamp",
          "organization_id",
          "customer_id",
          "customer",
          "external_customer_id",
          "source",
          "name",
          "metadata"
        ],
        "title": "BenefitRevokedEvent",
        "description": "An event created by Polar when a benefit is revoked from a customer."
      },
      "BenefitSortProperty": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "description",
          "-description"
        ],
        "title": "BenefitSortProperty"
      },
      "BenefitType": {
        "type": "string",
        "enum": [
          "custom",
          "discord",
          "github_repository",
          "downloadables",
          "license_keys",
          "meter_credit"
        ],
        "title": "BenefitType"
      },
      "BenefitUpdatedEvent": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp",
            "description": "The timestamp of the event."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the event.",
            "examples": [
              "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
            ],
            "x-polar-selector-widget": {
              "displayProperty": "name",
              "resourceName": "Organization",
              "resourceRoot": "/v1/organizations"
            }
          },
          "customer_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Id",
            "description": "ID of the customer in your Polar organization associated with the event."
          },
          "customer": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Customer"
              },
              {
                "type": "null"
              }
            ],
            "description": "The customer associated with the event."
          },
          "external_customer_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "External Customer Id",
            "description": "ID of the customer in your system associated with the event."
          },
          "source": {
            "type": "string",
            "const": "system",
            "title": "Source",
            "description": "The source of the event. `system` events are created by Polar. `user` events are the one you create through our ingestion API."
          },
          "name": {
            "type": "string",
            "const": "benefit.updated",
            "title": "Name",
            "description": "The name of the event."
          },
          "metadata": {
            "$ref": "#/components/schemas/BenefitGrantMetadata"
          }
        },
        "type": "object",
        "required": [
          "id",
          "timestamp",
          "organization_id",
          "customer_id",
          "customer",
          "external_customer_id",
          "source",
          "name",
          "metadata"
        ],
        "title": "BenefitUpdatedEvent",
        "description": "An event created by Polar when a benefit is updated."
      },
      "CardPayment": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "processor": {
            "$ref": "#/components/schemas/PaymentProcessor",
            "description": "The payment processor.",
            "examples": [
              "stripe"
            ]
          },
          "status": {
            "$ref": "#/components/schemas/PaymentStatus",
            "description": "The payment status.",
            "examples": [
              "succeeded"
            ]
          },
          "amount": {
            "type": "integer",
            "title": "Amount",
            "description": "The payment amount in cents.",
            "examples": [
              1000
            ]
          },
          "currency": {
            "type": "string",
            "title": "Currency",
            "description": "The payment currency. Currently, only `usd` is supported.",
            "examples": [
              "usd"
            ]
          },
          "method": {
            "type": "string",
            "const": "card",
            "title": "Method",
            "description": "The payment method used.",
            "examples": [
              "card"
            ]
          },
          "decline_reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Decline Reason",
            "description": "Error code, if the payment was declined.",
            "examples": [
              "insufficient_funds"
            ]
          },
          "decline_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Decline Message",
            "description": "Human-reasable error message, if the payment was declined.",
            "examples": [
              "Your card has insufficient funds."
            ]
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization that owns the payment.",
            "examples": [
              "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
            ]
          },
          "checkout_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checkout Id",
            "description": "The ID of the checkout session associated with this payment.",
            "examples": [
              "e4b478fa-cd25-4253-9f1f-8a41e6370ede"
            ]
          },
          "order_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id",
            "description": "The ID of the order associated with this payment.",
            "examples": [
              "e4b478fa-cd25-4253-9f1f-8a41e6370ede"
            ]
          },
          "method_metadata": {
            "$ref": "#/components/schemas/CardPaymentMetadata",
            "description": "Additional metadata for the card payment method."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "processor",
          "status",
          "amount",
          "currency",
          "method",
          "decline_reason",
          "decline_message",
          "organization_id",
          "checkout_id",
          "order_id",
          "method_metadata"
        ],
        "title": "CardPayment",
        "description": "Schema of a payment with a card payment method."
      },
      "CardPaymentMetadata": {
        "properties": {
          "brand": {
            "type": "string",
            "title": "Brand",
            "description": "The brand of the card used for the payment.",
            "examples": [
              "visa"
            ]
          },
          "last4": {
            "type": "string",
            "title": "Last4",
            "description": "The last 4 digits of the card number.",
            "examples": [
              "4242"
            ]
          }
        },
        "type": "object",
        "required": [
          "brand",
          "last4"
        ],
        "title": "CardPaymentMetadata",
        "description": "Additional metadata for a card payment method."
      },
      "Checkout": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "custom_field_data": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ]
            },
            "type": "object",
            "title": "Custom Field Data",
            "description": "Key-value object storing custom field values."
          },
          "payment_processor": {
            "$ref": "#/components/schemas/PaymentProcessor",
            "description": "Payment processor used."
          },
          "status": {
            "$ref": "#/components/schemas/CheckoutStatus",
            "description": "Status of the checkout session."
          },
          "client_secret": {
            "type": "string",
            "title": "Client Secret",
            "description": "Client secret used to update and complete the checkout session from the client."
          },
          "url": {
            "type": "string",
            "title": "Url",
            "description": "URL where the customer can access the checkout session."
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "title": "Expires At",
            "description": "Expiration date and time of the checkout session."
          },
          "success_url": {
            "type": "string",
            "title": "Success Url",
            "description": "URL where the customer will be redirected after a successful payment."
          },
          "embed_origin": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Embed Origin",
            "description": "When checkout is embedded, represents the Origin of the page embedding the checkout. Used as a security measure to send messages only to the embedding page."
          },
          "amount": {
            "type": "integer",
            "title": "Amount",
            "description": "Amount in cents, before discounts and taxes."
          },
          "discount_amount": {
            "type": "integer",
            "title": "Discount Amount",
            "description": "Discount amount in cents."
          },
          "net_amount": {
            "type": "integer",
            "title": "Net Amount",
            "description": "Amount in cents, after discounts but before taxes."
          },
          "tax_amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Amount",
            "description": "Sales tax amount in cents. If `null`, it means there is no enough information yet to calculate it."
          },
          "total_amount": {
            "type": "integer",
            "title": "Total Amount",
            "description": "Amount in cents, after discounts and taxes."
          },
          "currency": {
            "type": "string",
            "title": "Currency",
            "description": "Currency code of the checkout session."
          },
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id",
            "description": "ID of the product to checkout."
          },
          "product_price_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Price Id",
            "description": "ID of the product price to checkout."
          },
          "discount_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Id",
            "description": "ID of the discount applied to the checkout."
          },
          "allow_discount_codes": {
            "type": "boolean",
            "title": "Allow Discount Codes",
            "description": "Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it."
          },
          "require_billing_address": {
            "type": "boolean",
            "title": "Require Billing Address",
            "description": "Whether to require the customer to fill their full billing address, instead of just the country. Customers in the US will always be required to fill their full address, regardless of this setting. If you preset the billing address, this setting will be automatically set to `true`."
          },
          "is_discount_applicable": {
            "type": "boolean",
            "title": "Is Discount Applicable",
            "description": "Whether the discount is applicable to the checkout. Typically, free and custom prices are not discountable."
          },
          "is_free_product_price": {
            "type": "boolean",
            "title": "Is Free Product Price",
            "description": "Whether the product price is free, regardless of discounts."
          },
          "is_payment_required": {
            "type": "boolean",
            "title": "Is Payment Required",
            "description": "Whether the checkout requires payment, e.g. in case of free products or discounts that cover the total amount."
          },
          "is_payment_setup_required": {
            "type": "boolean",
            "title": "Is Payment Setup Required",
            "description": "Whether the checkout requires setting up a payment method, regardless of the amount, e.g. subscriptions that have first free cycles."
          },
          "is_payment_form_required": {
            "type": "boolean",
            "title": "Is Payment Form Required",
            "description": "Whether the checkout requires a payment form, whether because of a payment or payment method setup."
          },
          "customer_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Id"
          },
          "is_business_customer": {
            "type": "boolean",
            "title": "Is Business Customer",
            "description": "Whether the customer is a business or an individual. If `true`, the customer will be required to fill their full billing address and billing name."
          },
          "customer_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Name",
            "description": "Name of the customer."
          },
          "customer_email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Email",
            "description": "Email address of the customer."
          },
          "customer_ip_address": {
            "anyOf": [
              {
                "type": "string",
                "format": "ipvanyaddress"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Ip Address"
          },
          "customer_billing_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Billing Name"
          },
          "customer_billing_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address",
                "description": "Billing address of the customer."
              },
              {
                "type": "null"
              }
            ]
          },
          "customer_tax_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Tax Id"
          },
          "payment_processor_metadata": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Payment Processor Metadata"
          },
          "customer_billing_address_fields": {
            "$ref": "#/components/schemas/CheckoutCustomerBillingAddressFields",
            "description": "Determine which billing address fields should be shown in the checkout form."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "external_customer_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "External Customer Id",
            "description": "ID of the customer in your system. If a matching customer exists on Polar, the resulting order will be linked to this customer. Otherwise, a new customer will be created with this external ID set."
          },
          "customer_external_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer External Id",
            "deprecated": true
          },
          "products": {
            "items": {
              "$ref": "#/components/schemas/CheckoutProduct"
            },
            "type": "array",
            "title": "Products",
            "description": "List of products available to select."
          },
          "product": {
            "$ref": "#/components/schemas/CheckoutProduct",
            "description": "Product selected to checkout."
          },
          "product_price": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/LegacyRecurringProductPrice"
              },
              {
                "$ref": "#/components/schemas/ProductPrice"
              }
            ],
            "title": "Product Price",
            "description": "Price of the selected product."
          },
          "discount": {
            "anyOf": [
              {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CheckoutDiscountFixedOnceForeverDuration"
                  },
                  {
                    "$ref": "#/components/schemas/CheckoutDiscountFixedRepeatDuration"
                  },
                  {
                    "$ref": "#/components/schemas/CheckoutDiscountPercentageOnceForeverDuration"
                  },
                  {
                    "$ref": "#/components/schemas/CheckoutDiscountPercentageRepeatDuration"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount"
          },
          "subscription_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subscription Id"
          },
          "attached_custom_fields": {
            "items": {
              "$ref": "#/components/schemas/AttachedCustomField"
            },
            "type": "array",
            "title": "Attached Custom Fields"
          },
          "customer_metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Customer Metadata"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "payment_processor",
          "status",
          "client_secret",
          "url",
          "expires_at",
          "success_url",
          "embed_origin",
          "amount",
          "discount_amount",
          "net_amount",
          "tax_amount",
          "total_amount",
          "currency",
          "product_id",
          "product_price_id",
          "discount_id",
          "allow_discount_codes",
          "require_billing_address",
          "is_discount_applicable",
          "is_free_product_price",
          "is_payment_required",
          "is_payment_setup_required",
          "is_payment_form_required",
          "customer_id",
          "is_business_customer",
          "customer_name",
          "customer_email",
          "customer_ip_address",
          "customer_billing_name",
          "customer_billing_address",
          "customer_tax_id",
          "payment_processor_metadata",
          "customer_billing_address_fields",
          "metadata",
          "external_customer_id",
          "customer_external_id",
          "products",
          "product",
          "product_price",
          "discount",
          "subscription_id",
          "attached_custom_fields",
          "customer_metadata"
        ],
        "title": "Checkout",
        "description": "Checkout session data retrieved using an access token."
      },
      "CheckoutConfirmStripe": {
        "properties": {
          "custom_field_data": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ]
            },
            "type": "object",
            "title": "Custom Field Data",
            "description": "Key-value object storing custom field values."
          },
          "product_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Product Id",
            "description": "ID of the product to checkout. Must be present in the checkout's product list."
          },
          "product_price_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Product Price Id",
            "description": "ID of the product price to checkout. Must correspond to a price present in the checkout's product list.",
            "deprecated": true
          },
          "amount": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 99999999,
                "minimum": 50,
                "description": "Amount in cents, before discounts and taxes. Only useful for custom prices, it'll be ignored for fixed and free prices."
              },
              {
                "type": "null"
              }
            ],
            "title": "Amount"
          },
          "is_business_customer": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Business Customer"
          },
          "customer_name": {
            "anyOf": [
              {
                "type": "string",
                "description": "Name of the customer."
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Name"
          },
          "customer_email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email",
                "description": "Email address of the customer."
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Email"
          },
          "customer_billing_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Billing Name"
          },
          "customer_billing_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address",
                "description": "Billing address of the customer."
              },
              {
                "type": "null"
              }
            ]
          },
          "customer_tax_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Tax Id"
          },
          "discount_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Code",
            "description": "Discount code to apply to the checkout."
          },
          "confirmation_token_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Confirmation Token Id",
            "description": "ID of the Stripe confirmation token. Required for fixed prices and custom prices."
          }
        },
        "type": "object",
        "title": "CheckoutConfirmStripe",
        "description": "Confirm a checkout session using a Stripe confirmation token."
      },
      "CheckoutCreate": {
        "$ref": "#/components/schemas/CheckoutProductsCreate"
      },
      "CheckoutCustomerBillingAddressFields": {
        "properties": {
          "country": {
            "type": "boolean",
            "title": "Country"
          },
          "state": {
            "type": "boolean",
            "title": "State"
          },
          "city": {
            "type": "boolean",
            "title": "City"
          },
          "postal_code": {
            "type": "boolean",
            "title": "Postal Code"
          },
          "line1": {
            "type": "boolean",
            "title": "Line1"
          },
          "line2": {
            "type": "boolean",
            "title": "Line2"
          }
        },
        "type": "object",
        "required": [
          "country",
          "state",
          "city",
          "postal_code",
          "line1",
          "line2"
        ],
        "title": "CheckoutCustomerBillingAddressFields"
      },
      "CheckoutDiscountFixedOnceForeverDuration": {
        "properties": {
          "duration": {
            "$ref": "#/components/schemas/DiscountDuration"
          },
          "type": {
            "$ref": "#/components/schemas/DiscountType"
          },
          "amount": {
            "type": "integer",
            "title": "Amount"
          },
          "currency": {
            "type": "string",
            "title": "Currency"
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Code"
          }
        },
        "type": "object",
        "required": [
          "duration",
          "type",
          "amount",
          "currency",
          "id",
          "name",
          "code"
        ],
        "title": "CheckoutDiscountFixedOnceForeverDuration",
        "description": "Schema for a fixed amount discount that is applied once or forever."
      },
      "CheckoutDiscountFixedRepeatDuration": {
        "properties": {
          "duration": {
            "$ref": "#/components/schemas/DiscountDuration"
          },
          "duration_in_months": {
            "type": "integer",
            "title": "Duration In Months"
          },
          "type": {
            "$ref": "#/components/schemas/DiscountType"
          },
          "amount": {
            "type": "integer",
            "title": "Amount"
          },
          "currency": {
            "type": "string",
            "title": "Currency"
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Code"
          }
        },
        "type": "object",
        "required": [
          "duration",
          "duration_in_months",
          "type",
          "amount",
          "currency",
          "id",
          "name",
          "code"
        ],
        "title": "CheckoutDiscountFixedRepeatDuration",
        "description": "Schema for a fixed amount discount that is applied on every invoice\nfor a certain number of months."
      },
      "CheckoutDiscountPercentageOnceForeverDuration": {
        "properties": {
          "duration": {
            "$ref": "#/components/schemas/DiscountDuration"
          },
          "type": {
            "$ref": "#/components/schemas/DiscountType"
          },
          "basis_points": {
            "type": "integer",
            "title": "Basis Points"
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Code"
          }
        },
        "type": "object",
        "required": [
          "duration",
          "type",
          "basis_points",
          "id",
          "name",
          "code"
        ],
        "title": "CheckoutDiscountPercentageOnceForeverDuration",
        "description": "Schema for a percentage discount that is applied once or forever."
      },
      "CheckoutDiscountPercentageRepeatDuration": {
        "properties": {
          "duration": {
            "$ref": "#/components/schemas/DiscountDuration"
          },
          "duration_in_months": {
            "type": "integer",
            "title": "Duration In Months"
          },
          "type": {
            "$ref": "#/components/schemas/DiscountType"
          },
          "basis_points": {
            "type": "integer",
            "title": "Basis Points"
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Code"
          }
        },
        "type": "object",
        "required": [
          "duration",
          "duration_in_months",
          "type",
          "basis_points",
          "id",
          "name",
          "code"
        ],
        "title": "CheckoutDiscountPercentageRepeatDuration",
        "description": "Schema for a percentage discount that is applied on every invoice\nfor a certain number of months."
      },
      "CheckoutForbiddenError": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/AlreadyActiveSubscriptionError"
          },
          {
            "$ref": "#/components/schemas/NotOpenCheckout"
          }
        ]
      },
      "CheckoutLink": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "payment_processor": {
            "$ref": "#/components/schemas/PaymentProcessor",
            "description": "Payment processor used."
          },
          "client_secret": {
            "type": "string",
            "title": "Client Secret",
            "description": "Client secret used to access the checkout link."
          },
          "success_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Success Url",
            "description": "URL where the customer will be redirected after a successful payment."
          },
          "label": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Label",
            "description": "Optional label to distinguish links internally"
          },
          "allow_discount_codes": {
            "type": "boolean",
            "title": "Allow Discount Codes",
            "description": "Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it."
          },
          "require_billing_address": {
            "type": "boolean",
            "title": "Require Billing Address",
            "description": "Whether to require the customer to fill their full billing address, instead of just the country. Customers in the US will always be required to fill their full address, regardless of this setting."
          },
          "discount_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Id",
            "description": "ID of the discount to apply to the checkout. If the discount is not applicable anymore when opening the checkout link, it'll be ignored."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The organization ID.",
            "examples": [
              "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
            ],
            "x-polar-selector-widget": {
              "displayProperty": "name",
              "resourceName": "Organization",
              "resourceRoot": "/v1/organizations"
            }
          },
          "products": {
            "items": {
              "$ref": "#/components/schemas/CheckoutLinkProduct"
            },
            "type": "array",
            "title": "Products"
          },
          "discount": {
            "anyOf": [
              {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/DiscountFixedOnceForeverDurationBase"
                  },
                  {
                    "$ref": "#/components/schemas/DiscountFixedRepeatDurationBase"
                  },
                  {
                    "$ref": "#/components/schemas/DiscountPercentageOnceForeverDurationBase"
                  },
                  {
                    "$ref": "#/components/schemas/DiscountPercentageRepeatDurationBase"
                  }
                ],
                "title": "CheckoutLinkDiscount"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount"
          },
          "url": {
            "type": "string",
            "title": "Url"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "metadata",
          "payment_processor",
          "client_secret",
          "success_url",
          "label",
          "allow_discount_codes",
          "require_billing_address",
          "discount_id",
          "organization_id",
          "products",
          "discount",
          "url"
        ],
        "title": "CheckoutLink",
        "description": "Checkout link data."
      },
      "CheckoutLinkCreateProduct": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "payment_processor": {
            "type": "string",
            "const": "stripe",
            "title": "Payment Processor",
            "description": "Payment processor to use. Currently only Stripe is supported."
          },
          "label": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Label",
            "description": "Optional label to distinguish links internally"
          },
          "allow_discount_codes": {
            "type": "boolean",
            "title": "Allow Discount Codes",
            "description": "Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it.",
            "default": true
          },
          "require_billing_address": {
            "type": "boolean",
            "title": "Require Billing Address",
            "description": "Whether to require the customer to fill their full billing address, instead of just the country. Customers in the US will always be required to fill their full address, regardless of this setting.",
            "default": false
          },
          "discount_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Id",
            "description": "ID of the discount to apply to the checkout. If the discount is not applicable anymore when opening the checkout link, it'll be ignored."
          },
          "success_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Success Url",
            "description": "URL where the customer will be redirected after a successful payment.You can add the `checkout_id={CHECKOUT_ID}` query parameter to retrieve the checkout session id."
          },
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id"
          }
        },
        "type": "object",
        "required": [
          "payment_processor",
          "product_id"
        ],
        "title": "CheckoutLinkCreateProduct",
        "description": "Schema to create a new checkout link from a a single product.\n\n**Deprecated**: Use `CheckoutLinkCreateProducts` instead."
      },
      "CheckoutLinkCreateProductPrice": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "payment_processor": {
            "type": "string",
            "const": "stripe",
            "title": "Payment Processor",
            "description": "Payment processor to use. Currently only Stripe is supported."
          },
          "label": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Label",
            "description": "Optional label to distinguish links internally"
          },
          "allow_discount_codes": {
            "type": "boolean",
            "title": "Allow Discount Codes",
            "description": "Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it.",
            "default": true
          },
          "require_billing_address": {
            "type": "boolean",
            "title": "Require Billing Address",
            "description": "Whether to require the customer to fill their full billing address, instead of just the country. Customers in the US will always be required to fill their full address, regardless of this setting.",
            "default": false
          },
          "discount_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Id",
            "description": "ID of the discount to apply to the checkout. If the discount is not applicable anymore when opening the checkout link, it'll be ignored."
          },
          "success_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Success Url",
            "description": "URL where the customer will be redirected after a successful payment.You can add the `checkout_id={CHECKOUT_ID}` query parameter to retrieve the checkout session id."
          },
          "product_price_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Price Id"
          }
        },
        "type": "object",
        "required": [
          "payment_processor",
          "product_price_id"
        ],
        "title": "CheckoutLinkCreateProductPrice",
        "description": "Schema to create a new checkout link from a a single product price.\n\n**Deprecated**: Use `CheckoutLinkCreateProducts` instead."
      },
      "CheckoutLinkCreateProducts": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "payment_processor": {
            "type": "string",
            "const": "stripe",
            "title": "Payment Processor",
            "description": "Payment processor to use. Currently only Stripe is supported."
          },
          "label": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Label",
            "description": "Optional label to distinguish links internally"
          },
          "allow_discount_codes": {
            "type": "boolean",
            "title": "Allow Discount Codes",
            "description": "Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it.",
            "default": true
          },
          "require_billing_address": {
            "type": "boolean",
            "title": "Require Billing Address",
            "description": "Whether to require the customer to fill their full billing address, instead of just the country. Customers in the US will always be required to fill their full address, regardless of this setting.",
            "default": false
          },
          "discount_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Id",
            "description": "ID of the discount to apply to the checkout. If the discount is not applicable anymore when opening the checkout link, it'll be ignored."
          },
          "success_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Success Url",
            "description": "URL where the customer will be redirected after a successful payment.You can add the `checkout_id={CHECKOUT_ID}` query parameter to retrieve the checkout session id."
          },
          "products": {
            "items": {
              "type": "string",
              "format": "uuid4"
            },
            "type": "array",
            "minItems": 1,
            "title": "Products",
            "description": "List of products that will be available to select at checkout."
          }
        },
        "type": "object",
        "required": [
          "payment_processor",
          "products"
        ],
        "title": "CheckoutLinkCreateProducts",
        "description": "Schema to create a new checkout link."
      },
      "CheckoutLinkProduct": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the product."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the product."
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the product."
          },
          "recurring_interval": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SubscriptionRecurringInterval"
              },
              {
                "type": "null"
              }
            ],
            "description": "The recurring interval of the product. If `None`, the product is a one-time purchase."
          },
          "is_recurring": {
            "type": "boolean",
            "title": "Is Recurring",
            "description": "Whether the product is a subscription."
          },
          "is_archived": {
            "type": "boolean",
            "title": "Is Archived",
            "description": "Whether the product is archived and no longer available."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the product."
          },
          "prices": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/LegacyRecurringProductPrice"
                },
                {
                  "$ref": "#/components/schemas/ProductPrice"
                }
              ]
            },
            "type": "array",
            "title": "Prices",
            "description": "List of prices for this product."
          },
          "benefits": {
            "items": {
              "$ref": "#/components/schemas/BenefitPublic"
            },
            "type": "array",
            "title": "BenefitPublic",
            "description": "List of benefits granted by the product."
          },
          "medias": {
            "items": {
              "$ref": "#/components/schemas/ProductMediaFileRead"
            },
            "type": "array",
            "title": "Medias",
            "description": "List of medias associated to the product."
          }
        },
        "type": "object",
        "required": [
          "metadata",
          "created_at",
          "modified_at",
          "id",
          "name",
          "description",
          "recurring_interval",
          "is_recurring",
          "is_archived",
          "organization_id",
          "prices",
          "benefits",
          "medias"
        ],
        "title": "CheckoutLinkProduct",
        "description": "Product data for a checkout link."
      },
      "CheckoutLinkSortProperty": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "label",
          "-label",
          "success_url",
          "-success_url",
          "allow_discount_codes",
          "-allow_discount_codes"
        ],
        "title": "CheckoutLinkSortProperty"
      },
      "CheckoutLinkUpdate": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "products": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "format": "uuid4"
                },
                "type": "array",
                "minItems": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Products",
            "description": "List of products that will be available to select at checkout."
          },
          "label": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Label"
          },
          "allow_discount_codes": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Allow Discount Codes",
            "description": "Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it."
          },
          "require_billing_address": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Require Billing Address",
            "description": "Whether to require the customer to fill their full billing address, instead of just the country. Customers in the US will always be required to fill their full address, regardless of this setting."
          },
          "discount_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Id",
            "description": "ID of the discount to apply to the checkout. If the discount is not applicable anymore when opening the checkout link, it'll be ignored."
          },
          "success_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Success Url",
            "description": "URL where the customer will be redirected after a successful payment.You can add the `checkout_id={CHECKOUT_ID}` query parameter to retrieve the checkout session id."
          }
        },
        "type": "object",
        "title": "CheckoutLinkUpdate",
        "description": "Schema to update an existing checkout link."
      },
      "CheckoutPriceCreate": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "custom_field_data": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ]
            },
            "type": "object",
            "title": "Custom Field Data",
            "description": "Key-value object storing custom field values."
          },
          "discount_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Id",
            "description": "ID of the discount to apply to the checkout."
          },
          "allow_discount_codes": {
            "type": "boolean",
            "title": "Allow Discount Codes",
            "description": "Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it.",
            "default": true
          },
          "require_billing_address": {
            "type": "boolean",
            "title": "Require Billing Address",
            "description": "Whether to require the customer to fill their full billing address, instead of just the country. Customers in the US will always be required to fill their full address, regardless of this setting. If you preset the billing address, this setting will be automatically set to `true`.",
            "default": false
          },
          "amount": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 99999999,
                "minimum": 50,
                "description": "Amount in cents, before discounts and taxes. Only useful for custom prices, it'll be ignored for fixed and free prices."
              },
              {
                "type": "null"
              }
            ],
            "title": "Amount"
          },
          "customer_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Id",
            "description": "ID of an existing customer in the organization. The customer data will be pre-filled in the checkout form. The resulting order will be linked to this customer."
          },
          "is_business_customer": {
            "type": "boolean",
            "title": "Is Business Customer",
            "description": "Whether the customer is a business or an individual. If `true`, the customer will be required to fill their full billing address and billing name.",
            "default": false
          },
          "external_customer_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "External Customer Id",
            "description": "ID of the customer in your system. If a matching customer exists on Polar, the resulting order will be linked to this customer. Otherwise, a new customer will be created with this external ID set."
          },
          "customer_name": {
            "anyOf": [
              {
                "type": "string",
                "description": "Name of the customer."
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Name"
          },
          "customer_email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email",
                "description": "Email address of the customer."
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Email"
          },
          "customer_ip_address": {
            "anyOf": [
              {
                "type": "string",
                "format": "ipvanyaddress"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Ip Address"
          },
          "customer_billing_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Billing Name"
          },
          "customer_billing_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address",
                "description": "Billing address of the customer."
              },
              {
                "type": "null"
              }
            ]
          },
          "customer_tax_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Tax Id"
          },
          "customer_metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Customer Metadata",
            "description": "Key-value object allowing you to store additional information that'll be copied to the created customer.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "subscription_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subscription Id",
            "description": "ID of a subscription to upgrade. It must be on a free pricing. If checkout is successful, metadata set on this checkout will be copied to the subscription, and existing keys will be overwritten."
          },
          "success_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Success Url",
            "description": "URL where the customer will be redirected after a successful payment.You can add the `checkout_id={CHECKOUT_ID}` query parameter to retrieve the checkout session id."
          },
          "embed_origin": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Embed Origin",
            "description": "If you plan to embed the checkout session, set this to the Origin of the embedding page. It'll allow the Polar iframe to communicate with the parent page."
          },
          "product_price_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Price Id",
            "description": "ID of the product price to checkout."
          }
        },
        "type": "object",
        "required": [
          "product_price_id"
        ],
        "title": "CheckoutPriceCreate",
        "description": "Create a new checkout session from a product price.\n\n**Deprecated**: Use `CheckoutProductsCreate` instead.\n\nMetadata set on the checkout will be copied\nto the resulting order and/or subscription."
      },
      "CheckoutProduct": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the product."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the product."
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the product."
          },
          "recurring_interval": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SubscriptionRecurringInterval"
              },
              {
                "type": "null"
              }
            ],
            "description": "The recurring interval of the product. If `None`, the product is a one-time purchase."
          },
          "is_recurring": {
            "type": "boolean",
            "title": "Is Recurring",
            "description": "Whether the product is a subscription."
          },
          "is_archived": {
            "type": "boolean",
            "title": "Is Archived",
            "description": "Whether the product is archived and no longer available."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the product."
          },
          "prices": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/LegacyRecurringProductPrice"
                },
                {
                  "$ref": "#/components/schemas/ProductPrice"
                }
              ]
            },
            "type": "array",
            "title": "Prices",
            "description": "List of prices for this product."
          },
          "benefits": {
            "items": {
              "$ref": "#/components/schemas/BenefitPublic"
            },
            "type": "array",
            "title": "BenefitPublic",
            "description": "List of benefits granted by the product."
          },
          "medias": {
            "items": {
              "$ref": "#/components/schemas/ProductMediaFileRead"
            },
            "type": "array",
            "title": "Medias",
            "description": "List of medias associated to the product."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "name",
          "description",
          "recurring_interval",
          "is_recurring",
          "is_archived",
          "organization_id",
          "prices",
          "benefits",
          "medias"
        ],
        "title": "CheckoutProduct",
        "description": "Product data for a checkout session."
      },
      "CheckoutProductCreate": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "custom_field_data": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ]
            },
            "type": "object",
            "title": "Custom Field Data",
            "description": "Key-value object storing custom field values."
          },
          "discount_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Id",
            "description": "ID of the discount to apply to the checkout."
          },
          "allow_discount_codes": {
            "type": "boolean",
            "title": "Allow Discount Codes",
            "description": "Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it.",
            "default": true
          },
          "require_billing_address": {
            "type": "boolean",
            "title": "Require Billing Address",
            "description": "Whether to require the customer to fill their full billing address, instead of just the country. Customers in the US will always be required to fill their full address, regardless of this setting. If you preset the billing address, this setting will be automatically set to `true`.",
            "default": false
          },
          "amount": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 99999999,
                "minimum": 50,
                "description": "Amount in cents, before discounts and taxes. Only useful for custom prices, it'll be ignored for fixed and free prices."
              },
              {
                "type": "null"
              }
            ],
            "title": "Amount"
          },
          "customer_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Id",
            "description": "ID of an existing customer in the organization. The customer data will be pre-filled in the checkout form. The resulting order will be linked to this customer."
          },
          "is_business_customer": {
            "type": "boolean",
            "title": "Is Business Customer",
            "description": "Whether the customer is a business or an individual. If `true`, the customer will be required to fill their full billing address and billing name.",
            "default": false
          },
          "external_customer_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "External Customer Id",
            "description": "ID of the customer in your system. If a matching customer exists on Polar, the resulting order will be linked to this customer. Otherwise, a new customer will be created with this external ID set."
          },
          "customer_name": {
            "anyOf": [
              {
                "type": "string",
                "description": "Name of the customer."
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Name"
          },
          "customer_email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email",
                "description": "Email address of the customer."
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Email"
          },
          "customer_ip_address": {
            "anyOf": [
              {
                "type": "string",
                "format": "ipvanyaddress"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Ip Address"
          },
          "customer_billing_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Billing Name"
          },
          "customer_billing_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address",
                "description": "Billing address of the customer."
              },
              {
                "type": "null"
              }
            ]
          },
          "customer_tax_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Tax Id"
          },
          "customer_metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Customer Metadata",
            "description": "Key-value object allowing you to store additional information that'll be copied to the created customer.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "subscription_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subscription Id",
            "description": "ID of a subscription to upgrade. It must be on a free pricing. If checkout is successful, metadata set on this checkout will be copied to the subscription, and existing keys will be overwritten."
          },
          "success_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Success Url",
            "description": "URL where the customer will be redirected after a successful payment.You can add the `checkout_id={CHECKOUT_ID}` query parameter to retrieve the checkout session id."
          },
          "embed_origin": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Embed Origin",
            "description": "If you plan to embed the checkout session, set this to the Origin of the embedding page. It'll allow the Polar iframe to communicate with the parent page."
          },
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id",
            "description": "ID of the product to checkout. First available price will be selected."
          }
        },
        "type": "object",
        "required": [
          "product_id"
        ],
        "title": "CheckoutProductCreate",
        "description": "Create a new checkout session from a product.\n\n**Deprecated**: Use `CheckoutProductsCreate` instead.\n\nMetadata set on the checkout will be copied\nto the resulting order and/or subscription."
      },
      "CheckoutProductsCreate": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "custom_field_data": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ]
            },
            "type": "object",
            "title": "Custom Field Data",
            "description": "Key-value object storing custom field values."
          },
          "discount_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Id",
            "description": "ID of the discount to apply to the checkout."
          },
          "allow_discount_codes": {
            "type": "boolean",
            "title": "Allow Discount Codes",
            "description": "Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it.",
            "default": true
          },
          "require_billing_address": {
            "type": "boolean",
            "title": "Require Billing Address",
            "description": "Whether to require the customer to fill their full billing address, instead of just the country. Customers in the US will always be required to fill their full address, regardless of this setting. If you preset the billing address, this setting will be automatically set to `true`.",
            "default": false
          },
          "amount": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 99999999,
                "minimum": 50,
                "description": "Amount in cents, before discounts and taxes. Only useful for custom prices, it'll be ignored for fixed and free prices."
              },
              {
                "type": "null"
              }
            ],
            "title": "Amount"
          },
          "customer_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Id",
            "description": "ID of an existing customer in the organization. The customer data will be pre-filled in the checkout form. The resulting order will be linked to this customer."
          },
          "is_business_customer": {
            "type": "boolean",
            "title": "Is Business Customer",
            "description": "Whether the customer is a business or an individual. If `true`, the customer will be required to fill their full billing address and billing name.",
            "default": false
          },
          "external_customer_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "External Customer Id",
            "description": "ID of the customer in your system. If a matching customer exists on Polar, the resulting order will be linked to this customer. Otherwise, a new customer will be created with this external ID set."
          },
          "customer_name": {
            "anyOf": [
              {
                "type": "string",
                "description": "Name of the customer."
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Name"
          },
          "customer_email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email",
                "description": "Email address of the customer."
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Email"
          },
          "customer_ip_address": {
            "anyOf": [
              {
                "type": "string",
                "format": "ipvanyaddress"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Ip Address"
          },
          "customer_billing_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Billing Name"
          },
          "customer_billing_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address",
                "description": "Billing address of the customer."
              },
              {
                "type": "null"
              }
            ]
          },
          "customer_tax_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Tax Id"
          },
          "customer_metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Customer Metadata",
            "description": "Key-value object allowing you to store additional information that'll be copied to the created customer.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "subscription_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subscription Id",
            "description": "ID of a subscription to upgrade. It must be on a free pricing. If checkout is successful, metadata set on this checkout will be copied to the subscription, and existing keys will be overwritten."
          },
          "success_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Success Url",
            "description": "URL where the customer will be redirected after a successful payment.You can add the `checkout_id={CHECKOUT_ID}` query parameter to retrieve the checkout session id."
          },
          "embed_origin": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Embed Origin",
            "description": "If you plan to embed the checkout session, set this to the Origin of the embedding page. It'll allow the Polar iframe to communicate with the parent page."
          },
          "products": {
            "items": {
              "type": "string",
              "format": "uuid4"
            },
            "type": "array",
            "minItems": 1,
            "title": "Products",
            "description": "List of product IDs available to select at that checkout. The first one will be selected by default."
          }
        },
        "type": "object",
        "required": [
          "products"
        ],
        "title": "CheckoutProductsCreate",
        "description": "Create a new checkout session from a list of products.\nCustomers will be able to switch between those products.\n\nMetadata set on the checkout will be copied\nto the resulting order and/or subscription."
      },
      "CheckoutPublic": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "custom_field_data": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ]
            },
            "type": "object",
            "title": "Custom Field Data",
            "description": "Key-value object storing custom field values."
          },
          "payment_processor": {
            "$ref": "#/components/schemas/PaymentProcessor",
            "description": "Payment processor used."
          },
          "status": {
            "$ref": "#/components/schemas/CheckoutStatus",
            "description": "Status of the checkout session."
          },
          "client_secret": {
            "type": "string",
            "title": "Client Secret",
            "description": "Client secret used to update and complete the checkout session from the client."
          },
          "url": {
            "type": "string",
            "title": "Url",
            "description": "URL where the customer can access the checkout session."
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "title": "Expires At",
            "description": "Expiration date and time of the checkout session."
          },
          "success_url": {
            "type": "string",
            "title": "Success Url",
            "description": "URL where the customer will be redirected after a successful payment."
          },
          "embed_origin": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Embed Origin",
            "description": "When checkout is embedded, represents the Origin of the page embedding the checkout. Used as a security measure to send messages only to the embedding page."
          },
          "amount": {
            "type": "integer",
            "title": "Amount",
            "description": "Amount in cents, before discounts and taxes."
          },
          "discount_amount": {
            "type": "integer",
            "title": "Discount Amount",
            "description": "Discount amount in cents."
          },
          "net_amount": {
            "type": "integer",
            "title": "Net Amount",
            "description": "Amount in cents, after discounts but before taxes."
          },
          "tax_amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Amount",
            "description": "Sales tax amount in cents. If `null`, it means there is no enough information yet to calculate it."
          },
          "total_amount": {
            "type": "integer",
            "title": "Total Amount",
            "description": "Amount in cents, after discounts and taxes."
          },
          "currency": {
            "type": "string",
            "title": "Currency",
            "description": "Currency code of the checkout session."
          },
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id",
            "description": "ID of the product to checkout."
          },
          "product_price_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Price Id",
            "description": "ID of the product price to checkout."
          },
          "discount_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Id",
            "description": "ID of the discount applied to the checkout."
          },
          "allow_discount_codes": {
            "type": "boolean",
            "title": "Allow Discount Codes",
            "description": "Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it."
          },
          "require_billing_address": {
            "type": "boolean",
            "title": "Require Billing Address",
            "description": "Whether to require the customer to fill their full billing address, instead of just the country. Customers in the US will always be required to fill their full address, regardless of this setting. If you preset the billing address, this setting will be automatically set to `true`."
          },
          "is_discount_applicable": {
            "type": "boolean",
            "title": "Is Discount Applicable",
            "description": "Whether the discount is applicable to the checkout. Typically, free and custom prices are not discountable."
          },
          "is_free_product_price": {
            "type": "boolean",
            "title": "Is Free Product Price",
            "description": "Whether the product price is free, regardless of discounts."
          },
          "is_payment_required": {
            "type": "boolean",
            "title": "Is Payment Required",
            "description": "Whether the checkout requires payment, e.g. in case of free products or discounts that cover the total amount."
          },
          "is_payment_setup_required": {
            "type": "boolean",
            "title": "Is Payment Setup Required",
            "description": "Whether the checkout requires setting up a payment method, regardless of the amount, e.g. subscriptions that have first free cycles."
          },
          "is_payment_form_required": {
            "type": "boolean",
            "title": "Is Payment Form Required",
            "description": "Whether the checkout requires a payment form, whether because of a payment or payment method setup."
          },
          "customer_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Id"
          },
          "is_business_customer": {
            "type": "boolean",
            "title": "Is Business Customer",
            "description": "Whether the customer is a business or an individual. If `true`, the customer will be required to fill their full billing address and billing name."
          },
          "customer_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Name",
            "description": "Name of the customer."
          },
          "customer_email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Email",
            "description": "Email address of the customer."
          },
          "customer_ip_address": {
            "anyOf": [
              {
                "type": "string",
                "format": "ipvanyaddress"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Ip Address"
          },
          "customer_billing_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Billing Name"
          },
          "customer_billing_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address",
                "description": "Billing address of the customer."
              },
              {
                "type": "null"
              }
            ]
          },
          "customer_tax_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Tax Id"
          },
          "payment_processor_metadata": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Payment Processor Metadata"
          },
          "customer_billing_address_fields": {
            "$ref": "#/components/schemas/CheckoutCustomerBillingAddressFields",
            "description": "Determine which billing address fields should be shown in the checkout form."
          },
          "products": {
            "items": {
              "$ref": "#/components/schemas/CheckoutProduct"
            },
            "type": "array",
            "title": "Products",
            "description": "List of products available to select."
          },
          "product": {
            "$ref": "#/components/schemas/CheckoutProduct",
            "description": "Product selected to checkout."
          },
          "product_price": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/LegacyRecurringProductPrice"
              },
              {
                "$ref": "#/components/schemas/ProductPrice"
              }
            ],
            "title": "Product Price",
            "description": "Price of the selected product."
          },
          "discount": {
            "anyOf": [
              {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CheckoutDiscountFixedOnceForeverDuration"
                  },
                  {
                    "$ref": "#/components/schemas/CheckoutDiscountFixedRepeatDuration"
                  },
                  {
                    "$ref": "#/components/schemas/CheckoutDiscountPercentageOnceForeverDuration"
                  },
                  {
                    "$ref": "#/components/schemas/CheckoutDiscountPercentageRepeatDuration"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount"
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          },
          "attached_custom_fields": {
            "items": {
              "$ref": "#/components/schemas/AttachedCustomField"
            },
            "type": "array",
            "title": "Attached Custom Fields"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "payment_processor",
          "status",
          "client_secret",
          "url",
          "expires_at",
          "success_url",
          "embed_origin",
          "amount",
          "discount_amount",
          "net_amount",
          "tax_amount",
          "total_amount",
          "currency",
          "product_id",
          "product_price_id",
          "discount_id",
          "allow_discount_codes",
          "require_billing_address",
          "is_discount_applicable",
          "is_free_product_price",
          "is_payment_required",
          "is_payment_setup_required",
          "is_payment_form_required",
          "customer_id",
          "is_business_customer",
          "customer_name",
          "customer_email",
          "customer_ip_address",
          "customer_billing_name",
          "customer_billing_address",
          "customer_tax_id",
          "payment_processor_metadata",
          "customer_billing_address_fields",
          "products",
          "product",
          "product_price",
          "discount",
          "organization",
          "attached_custom_fields"
        ],
        "title": "CheckoutPublic",
        "description": "Checkout session data retrieved using the client secret."
      },
      "CheckoutPublicConfirmed": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "custom_field_data": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ]
            },
            "type": "object",
            "title": "Custom Field Data",
            "description": "Key-value object storing custom field values."
          },
          "payment_processor": {
            "$ref": "#/components/schemas/PaymentProcessor",
            "description": "Payment processor used."
          },
          "status": {
            "type": "string",
            "const": "confirmed",
            "title": "Status"
          },
          "client_secret": {
            "type": "string",
            "title": "Client Secret",
            "description": "Client secret used to update and complete the checkout session from the client."
          },
          "url": {
            "type": "string",
            "title": "Url",
            "description": "URL where the customer can access the checkout session."
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "title": "Expires At",
            "description": "Expiration date and time of the checkout session."
          },
          "success_url": {
            "type": "string",
            "title": "Success Url",
            "description": "URL where the customer will be redirected after a successful payment."
          },
          "embed_origin": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Embed Origin",
            "description": "When checkout is embedded, represents the Origin of the page embedding the checkout. Used as a security measure to send messages only to the embedding page."
          },
          "amount": {
            "type": "integer",
            "title": "Amount",
            "description": "Amount in cents, before discounts and taxes."
          },
          "discount_amount": {
            "type": "integer",
            "title": "Discount Amount",
            "description": "Discount amount in cents."
          },
          "net_amount": {
            "type": "integer",
            "title": "Net Amount",
            "description": "Amount in cents, after discounts but before taxes."
          },
          "tax_amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Amount",
            "description": "Sales tax amount in cents. If `null`, it means there is no enough information yet to calculate it."
          },
          "total_amount": {
            "type": "integer",
            "title": "Total Amount",
            "description": "Amount in cents, after discounts and taxes."
          },
          "currency": {
            "type": "string",
            "title": "Currency",
            "description": "Currency code of the checkout session."
          },
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id",
            "description": "ID of the product to checkout."
          },
          "product_price_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Price Id",
            "description": "ID of the product price to checkout."
          },
          "discount_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Id",
            "description": "ID of the discount applied to the checkout."
          },
          "allow_discount_codes": {
            "type": "boolean",
            "title": "Allow Discount Codes",
            "description": "Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it."
          },
          "require_billing_address": {
            "type": "boolean",
            "title": "Require Billing Address",
            "description": "Whether to require the customer to fill their full billing address, instead of just the country. Customers in the US will always be required to fill their full address, regardless of this setting. If you preset the billing address, this setting will be automatically set to `true`."
          },
          "is_discount_applicable": {
            "type": "boolean",
            "title": "Is Discount Applicable",
            "description": "Whether the discount is applicable to the checkout. Typically, free and custom prices are not discountable."
          },
          "is_free_product_price": {
            "type": "boolean",
            "title": "Is Free Product Price",
            "description": "Whether the product price is free, regardless of discounts."
          },
          "is_payment_required": {
            "type": "boolean",
            "title": "Is Payment Required",
            "description": "Whether the checkout requires payment, e.g. in case of free products or discounts that cover the total amount."
          },
          "is_payment_setup_required": {
            "type": "boolean",
            "title": "Is Payment Setup Required",
            "description": "Whether the checkout requires setting up a payment method, regardless of the amount, e.g. subscriptions that have first free cycles."
          },
          "is_payment_form_required": {
            "type": "boolean",
            "title": "Is Payment Form Required",
            "description": "Whether the checkout requires a payment form, whether because of a payment or payment method setup."
          },
          "customer_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Id"
          },
          "is_business_customer": {
            "type": "boolean",
            "title": "Is Business Customer",
            "description": "Whether the customer is a business or an individual. If `true`, the customer will be required to fill their full billing address and billing name."
          },
          "customer_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Name",
            "description": "Name of the customer."
          },
          "customer_email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Email",
            "description": "Email address of the customer."
          },
          "customer_ip_address": {
            "anyOf": [
              {
                "type": "string",
                "format": "ipvanyaddress"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Ip Address"
          },
          "customer_billing_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Billing Name"
          },
          "customer_billing_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address",
                "description": "Billing address of the customer."
              },
              {
                "type": "null"
              }
            ]
          },
          "customer_tax_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Tax Id"
          },
          "payment_processor_metadata": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Payment Processor Metadata"
          },
          "customer_billing_address_fields": {
            "$ref": "#/components/schemas/CheckoutCustomerBillingAddressFields",
            "description": "Determine which billing address fields should be shown in the checkout form."
          },
          "products": {
            "items": {
              "$ref": "#/components/schemas/CheckoutProduct"
            },
            "type": "array",
            "title": "Products",
            "description": "List of products available to select."
          },
          "product": {
            "$ref": "#/components/schemas/CheckoutProduct",
            "description": "Product selected to checkout."
          },
          "product_price": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/LegacyRecurringProductPrice"
              },
              {
                "$ref": "#/components/schemas/ProductPrice"
              }
            ],
            "title": "Product Price",
            "description": "Price of the selected product."
          },
          "discount": {
            "anyOf": [
              {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CheckoutDiscountFixedOnceForeverDuration"
                  },
                  {
                    "$ref": "#/components/schemas/CheckoutDiscountFixedRepeatDuration"
                  },
                  {
                    "$ref": "#/components/schemas/CheckoutDiscountPercentageOnceForeverDuration"
                  },
                  {
                    "$ref": "#/components/schemas/CheckoutDiscountPercentageRepeatDuration"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount"
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          },
          "attached_custom_fields": {
            "items": {
              "$ref": "#/components/schemas/AttachedCustomField"
            },
            "type": "array",
            "title": "Attached Custom Fields"
          },
          "customer_session_token": {
            "type": "string",
            "title": "Customer Session Token"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "payment_processor",
          "status",
          "client_secret",
          "url",
          "expires_at",
          "success_url",
          "embed_origin",
          "amount",
          "discount_amount",
          "net_amount",
          "tax_amount",
          "total_amount",
          "currency",
          "product_id",
          "product_price_id",
          "discount_id",
          "allow_discount_codes",
          "require_billing_address",
          "is_discount_applicable",
          "is_free_product_price",
          "is_payment_required",
          "is_payment_setup_required",
          "is_payment_form_required",
          "customer_id",
          "is_business_customer",
          "customer_name",
          "customer_email",
          "customer_ip_address",
          "customer_billing_name",
          "customer_billing_address",
          "customer_tax_id",
          "payment_processor_metadata",
          "customer_billing_address_fields",
          "products",
          "product",
          "product_price",
          "discount",
          "organization",
          "attached_custom_fields",
          "customer_session_token"
        ],
        "title": "CheckoutPublicConfirmed",
        "description": "Checkout session data retrieved using the client secret after confirmation.\n\nIt contains a customer session token to retrieve order information\nright after the checkout."
      },
      "CheckoutSortProperty": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "expires_at",
          "-expires_at",
          "status",
          "-status"
        ],
        "title": "CheckoutSortProperty"
      },
      "CheckoutStatus": {
        "type": "string",
        "enum": [
          "open",
          "expired",
          "confirmed",
          "succeeded",
          "failed"
        ],
        "title": "CheckoutStatus"
      },
      "CheckoutUpdate": {
        "properties": {
          "custom_field_data": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ]
            },
            "type": "object",
            "title": "Custom Field Data",
            "description": "Key-value object storing custom field values."
          },
          "product_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Product Id",
            "description": "ID of the product to checkout. Must be present in the checkout's product list."
          },
          "product_price_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Product Price Id",
            "description": "ID of the product price to checkout. Must correspond to a price present in the checkout's product list.",
            "deprecated": true
          },
          "amount": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 99999999,
                "minimum": 50,
                "description": "Amount in cents, before discounts and taxes. Only useful for custom prices, it'll be ignored for fixed and free prices."
              },
              {
                "type": "null"
              }
            ],
            "title": "Amount"
          },
          "is_business_customer": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Business Customer"
          },
          "customer_name": {
            "anyOf": [
              {
                "type": "string",
                "description": "Name of the customer."
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Name"
          },
          "customer_email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email",
                "description": "Email address of the customer."
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Email"
          },
          "customer_billing_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Billing Name"
          },
          "customer_billing_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address",
                "description": "Billing address of the customer."
              },
              {
                "type": "null"
              }
            ]
          },
          "customer_tax_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Tax Id"
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "discount_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Id",
            "description": "ID of the discount to apply to the checkout."
          },
          "allow_discount_codes": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Allow Discount Codes",
            "description": "Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it."
          },
          "require_billing_address": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Require Billing Address",
            "description": "Whether to require the customer to fill their full billing address, instead of just the country. Customers in the US will always be required to fill their full address, regardless of this setting. If you preset the billing address, this setting will be automatically set to `true`."
          },
          "customer_ip_address": {
            "anyOf": [
              {
                "type": "string",
                "format": "ipvanyaddress"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Ip Address"
          },
          "customer_metadata": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {
                      "type": "string",
                      "maxLength": 500,
                      "minLength": 1
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    }
                  ]
                },
                "propertyNames": {
                  "maxLength": 40,
                  "minLength": 1
                },
                "type": "object",
                "maxProperties": 50,
                "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Metadata",
            "description": "Key-value object allowing you to store additional information that'll be copied to the created customer.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "success_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Success Url",
            "description": "URL where the customer will be redirected after a successful payment.You can add the `checkout_id={CHECKOUT_ID}` query parameter to retrieve the checkout session id."
          },
          "embed_origin": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Embed Origin",
            "description": "If you plan to embed the checkout session, set this to the Origin of the embedding page. It'll allow the Polar iframe to communicate with the parent page."
          }
        },
        "type": "object",
        "title": "CheckoutUpdate",
        "description": "Update an existing checkout session using an access token."
      },
      "CheckoutUpdatePublic": {
        "properties": {
          "custom_field_data": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ]
            },
            "type": "object",
            "title": "Custom Field Data",
            "description": "Key-value object storing custom field values."
          },
          "product_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Product Id",
            "description": "ID of the product to checkout. Must be present in the checkout's product list."
          },
          "product_price_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Product Price Id",
            "description": "ID of the product price to checkout. Must correspond to a price present in the checkout's product list.",
            "deprecated": true
          },
          "amount": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 99999999,
                "minimum": 50,
                "description": "Amount in cents, before discounts and taxes. Only useful for custom prices, it'll be ignored for fixed and free prices."
              },
              {
                "type": "null"
              }
            ],
            "title": "Amount"
          },
          "is_business_customer": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Business Customer"
          },
          "customer_name": {
            "anyOf": [
              {
                "type": "string",
                "description": "Name of the customer."
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Name"
          },
          "customer_email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email",
                "description": "Email address of the customer."
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Email"
          },
          "customer_billing_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Billing Name"
          },
          "customer_billing_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address",
                "description": "Billing address of the customer."
              },
              {
                "type": "null"
              }
            ]
          },
          "customer_tax_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Tax Id"
          },
          "discount_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Code",
            "description": "Discount code to apply to the checkout."
          }
        },
        "type": "object",
        "title": "CheckoutUpdatePublic",
        "description": "Update an existing checkout session using the client secret."
      },
      "CountAggregation": {
        "properties": {
          "func": {
            "type": "string",
            "const": "count",
            "title": "Func",
            "default": "count"
          }
        },
        "type": "object",
        "title": "CountAggregation"
      },
      "CustomField": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/CustomFieldText"
          },
          {
            "$ref": "#/components/schemas/CustomFieldNumber"
          },
          {
            "$ref": "#/components/schemas/CustomFieldDate"
          },
          {
            "$ref": "#/components/schemas/CustomFieldCheckbox"
          },
          {
            "$ref": "#/components/schemas/CustomFieldSelect"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "checkbox": "#/components/schemas/CustomFieldCheckbox",
            "date": "#/components/schemas/CustomFieldDate",
            "number": "#/components/schemas/CustomFieldNumber",
            "select": "#/components/schemas/CustomFieldSelect",
            "text": "#/components/schemas/CustomFieldText"
          }
        }
      },
      "CustomFieldCheckbox": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "type": {
            "type": "string",
            "const": "checkbox",
            "title": "Type"
          },
          "slug": {
            "type": "string",
            "title": "Slug",
            "description": "Identifier of the custom field. It'll be used as key when storing the value."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the custom field."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the custom field.",
            "examples": [
              "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
            ],
            "x-polar-selector-widget": {
              "displayProperty": "name",
              "resourceName": "Organization",
              "resourceRoot": "/v1/organizations"
            }
          },
          "properties": {
            "$ref": "#/components/schemas/CustomFieldCheckboxProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "metadata",
          "type",
          "slug",
          "name",
          "organization_id",
          "properties"
        ],
        "title": "CustomFieldCheckbox",
        "description": "Schema for a custom field of type checkbox."
      },
      "CustomFieldCheckboxProperties": {
        "properties": {
          "form_label": {
            "type": "string",
            "minLength": 1,
            "title": "Form Label"
          },
          "form_help_text": {
            "type": "string",
            "minLength": 1,
            "title": "Form Help Text"
          },
          "form_placeholder": {
            "type": "string",
            "minLength": 1,
            "title": "Form Placeholder"
          }
        },
        "type": "object",
        "title": "CustomFieldCheckboxProperties"
      },
      "CustomFieldCreate": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/CustomFieldCreateText"
          },
          {
            "$ref": "#/components/schemas/CustomFieldCreateNumber"
          },
          {
            "$ref": "#/components/schemas/CustomFieldCreateDate"
          },
          {
            "$ref": "#/components/schemas/CustomFieldCreateCheckbox"
          },
          {
            "$ref": "#/components/schemas/CustomFieldCreateSelect"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "checkbox": "#/components/schemas/CustomFieldCreateCheckbox",
            "date": "#/components/schemas/CustomFieldCreateDate",
            "number": "#/components/schemas/CustomFieldCreateNumber",
            "select": "#/components/schemas/CustomFieldCreateSelect",
            "text": "#/components/schemas/CustomFieldCreateText"
          }
        }
      },
      "CustomFieldCreateCheckbox": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "type": {
            "type": "string",
            "const": "checkbox",
            "title": "Type"
          },
          "slug": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[a-z0-9-_]+$",
            "title": "Slug",
            "description": "Identifier of the custom field. It'll be used as key when storing the value. Must be unique across the organization.It can only contain ASCII letters, numbers and hyphens."
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "title": "Name",
            "description": "Name of the custom field."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "examples": [
                  "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                ],
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the custom field. **Required unless you use an organization token.**"
          },
          "properties": {
            "$ref": "#/components/schemas/CustomFieldCheckboxProperties"
          }
        },
        "type": "object",
        "required": [
          "type",
          "slug",
          "name",
          "properties"
        ],
        "title": "CustomFieldCreateCheckbox",
        "description": "Schema to create a custom field of type checkbox."
      },
      "CustomFieldCreateDate": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "type": {
            "type": "string",
            "const": "date",
            "title": "Type"
          },
          "slug": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[a-z0-9-_]+$",
            "title": "Slug",
            "description": "Identifier of the custom field. It'll be used as key when storing the value. Must be unique across the organization.It can only contain ASCII letters, numbers and hyphens."
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "title": "Name",
            "description": "Name of the custom field."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "examples": [
                  "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                ],
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the custom field. **Required unless you use an organization token.**"
          },
          "properties": {
            "$ref": "#/components/schemas/CustomFieldDateProperties"
          }
        },
        "type": "object",
        "required": [
          "type",
          "slug",
          "name",
          "properties"
        ],
        "title": "CustomFieldCreateDate",
        "description": "Schema to create a custom field of type date."
      },
      "CustomFieldCreateNumber": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "type": {
            "type": "string",
            "const": "number",
            "title": "Type"
          },
          "slug": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[a-z0-9-_]+$",
            "title": "Slug",
            "description": "Identifier of the custom field. It'll be used as key when storing the value. Must be unique across the organization.It can only contain ASCII letters, numbers and hyphens."
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "title": "Name",
            "description": "Name of the custom field."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "examples": [
                  "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                ],
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the custom field. **Required unless you use an organization token.**"
          },
          "properties": {
            "$ref": "#/components/schemas/CustomFieldNumberProperties"
          }
        },
        "type": "object",
        "required": [
          "type",
          "slug",
          "name",
          "properties"
        ],
        "title": "CustomFieldCreateNumber",
        "description": "Schema to create a custom field of type number."
      },
      "CustomFieldCreateSelect": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "type": {
            "type": "string",
            "const": "select",
            "title": "Type"
          },
          "slug": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[a-z0-9-_]+$",
            "title": "Slug",
            "description": "Identifier of the custom field. It'll be used as key when storing the value. Must be unique across the organization.It can only contain ASCII letters, numbers and hyphens."
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "title": "Name",
            "description": "Name of the custom field."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "examples": [
                  "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                ],
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the custom field. **Required unless you use an organization token.**"
          },
          "properties": {
            "$ref": "#/components/schemas/CustomFieldSelectProperties"
          }
        },
        "type": "object",
        "required": [
          "type",
          "slug",
          "name",
          "properties"
        ],
        "title": "CustomFieldCreateSelect",
        "description": "Schema to create a custom field of type select."
      },
      "CustomFieldCreateText": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "type": {
            "type": "string",
            "const": "text",
            "title": "Type"
          },
          "slug": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[a-z0-9-_]+$",
            "title": "Slug",
            "description": "Identifier of the custom field. It'll be used as key when storing the value. Must be unique across the organization.It can only contain ASCII letters, numbers and hyphens."
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "title": "Name",
            "description": "Name of the custom field."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "examples": [
                  "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                ],
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the custom field. **Required unless you use an organization token.**"
          },
          "properties": {
            "$ref": "#/components/schemas/CustomFieldTextProperties"
          }
        },
        "type": "object",
        "required": [
          "type",
          "slug",
          "name",
          "properties"
        ],
        "title": "CustomFieldCreateText",
        "description": "Schema to create a custom field of type text."
      },
      "CustomFieldDate": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "type": {
            "type": "string",
            "const": "date",
            "title": "Type"
          },
          "slug": {
            "type": "string",
            "title": "Slug",
            "description": "Identifier of the custom field. It'll be used as key when storing the value."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the custom field."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the custom field.",
            "examples": [
              "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
            ],
            "x-polar-selector-widget": {
              "displayProperty": "name",
              "resourceName": "Organization",
              "resourceRoot": "/v1/organizations"
            }
          },
          "properties": {
            "$ref": "#/components/schemas/CustomFieldDateProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "metadata",
          "type",
          "slug",
          "name",
          "organization_id",
          "properties"
        ],
        "title": "CustomFieldDate",
        "description": "Schema for a custom field of type date."
      },
      "CustomFieldDateProperties": {
        "properties": {
          "form_label": {
            "type": "string",
            "minLength": 1,
            "title": "Form Label"
          },
          "form_help_text": {
            "type": "string",
            "minLength": 1,
            "title": "Form Help Text"
          },
          "form_placeholder": {
            "type": "string",
            "minLength": 1,
            "title": "Form Placeholder"
          },
          "ge": {
            "type": "integer",
            "title": "Ge"
          },
          "le": {
            "type": "integer",
            "title": "Le"
          }
        },
        "type": "object",
        "title": "CustomFieldDateProperties"
      },
      "CustomFieldNumber": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "type": {
            "type": "string",
            "const": "number",
            "title": "Type"
          },
          "slug": {
            "type": "string",
            "title": "Slug",
            "description": "Identifier of the custom field. It'll be used as key when storing the value."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the custom field."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the custom field.",
            "examples": [
              "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
            ],
            "x-polar-selector-widget": {
              "displayProperty": "name",
              "resourceName": "Organization",
              "resourceRoot": "/v1/organizations"
            }
          },
          "properties": {
            "$ref": "#/components/schemas/CustomFieldNumberProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "metadata",
          "type",
          "slug",
          "name",
          "organization_id",
          "properties"
        ],
        "title": "CustomFieldNumber",
        "description": "Schema for a custom field of type number."
      },
      "CustomFieldNumberProperties": {
        "properties": {
          "form_label": {
            "type": "string",
            "minLength": 1,
            "title": "Form Label"
          },
          "form_help_text": {
            "type": "string",
            "minLength": 1,
            "title": "Form Help Text"
          },
          "form_placeholder": {
            "type": "string",
            "minLength": 1,
            "title": "Form Placeholder"
          },
          "ge": {
            "type": "integer",
            "title": "Ge"
          },
          "le": {
            "type": "integer",
            "title": "Le"
          }
        },
        "type": "object",
        "title": "CustomFieldNumberProperties"
      },
      "CustomFieldSelect": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "type": {
            "type": "string",
            "const": "select",
            "title": "Type"
          },
          "slug": {
            "type": "string",
            "title": "Slug",
            "description": "Identifier of the custom field. It'll be used as key when storing the value."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the custom field."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the custom field.",
            "examples": [
              "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
            ],
            "x-polar-selector-widget": {
              "displayProperty": "name",
              "resourceName": "Organization",
              "resourceRoot": "/v1/organizations"
            }
          },
          "properties": {
            "$ref": "#/components/schemas/CustomFieldSelectProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "metadata",
          "type",
          "slug",
          "name",
          "organization_id",
          "properties"
        ],
        "title": "CustomFieldSelect",
        "description": "Schema for a custom field of type select."
      },
      "CustomFieldSelectOption": {
        "properties": {
          "value": {
            "type": "string",
            "minLength": 1,
            "title": "Value"
          },
          "label": {
            "type": "string",
            "minLength": 1,
            "title": "Label"
          }
        },
        "type": "object",
        "required": [
          "value",
          "label"
        ],
        "title": "CustomFieldSelectOption"
      },
      "CustomFieldSelectProperties": {
        "properties": {
          "form_label": {
            "type": "string",
            "minLength": 1,
            "title": "Form Label"
          },
          "form_help_text": {
            "type": "string",
            "minLength": 1,
            "title": "Form Help Text"
          },
          "form_placeholder": {
            "type": "string",
            "minLength": 1,
            "title": "Form Placeholder"
          },
          "options": {
            "items": {
              "$ref": "#/components/schemas/CustomFieldSelectOption"
            },
            "type": "array",
            "title": "Options"
          }
        },
        "type": "object",
        "required": [
          "options"
        ],
        "title": "CustomFieldSelectProperties"
      },
      "CustomFieldSortProperty": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "slug",
          "-slug",
          "name",
          "-name",
          "type",
          "-type"
        ],
        "title": "CustomFieldSortProperty"
      },
      "CustomFieldText": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "type": {
            "type": "string",
            "const": "text",
            "title": "Type"
          },
          "slug": {
            "type": "string",
            "title": "Slug",
            "description": "Identifier of the custom field. It'll be used as key when storing the value."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the custom field."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the custom field.",
            "examples": [
              "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
            ],
            "x-polar-selector-widget": {
              "displayProperty": "name",
              "resourceName": "Organization",
              "resourceRoot": "/v1/organizations"
            }
          },
          "properties": {
            "$ref": "#/components/schemas/CustomFieldTextProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "metadata",
          "type",
          "slug",
          "name",
          "organization_id",
          "properties"
        ],
        "title": "CustomFieldText",
        "description": "Schema for a custom field of type text."
      },
      "CustomFieldTextProperties": {
        "properties": {
          "form_label": {
            "type": "string",
            "minLength": 1,
            "title": "Form Label"
          },
          "form_help_text": {
            "type": "string",
            "minLength": 1,
            "title": "Form Help Text"
          },
          "form_placeholder": {
            "type": "string",
            "minLength": 1,
            "title": "Form Placeholder"
          },
          "textarea": {
            "type": "boolean",
            "title": "Textarea"
          },
          "min_length": {
            "type": "integer",
            "minimum": 0,
            "title": "Min Length"
          },
          "max_length": {
            "type": "integer",
            "minimum": 0,
            "title": "Max Length"
          }
        },
        "type": "object",
        "title": "CustomFieldTextProperties"
      },
      "CustomFieldType": {
        "type": "string",
        "enum": [
          "text",
          "number",
          "date",
          "checkbox",
          "select"
        ],
        "title": "CustomFieldType"
      },
      "CustomFieldUpdate": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/CustomFieldUpdateText"
          },
          {
            "$ref": "#/components/schemas/CustomFieldUpdateNumber"
          },
          {
            "$ref": "#/components/schemas/CustomFieldUpdateDate"
          },
          {
            "$ref": "#/components/schemas/CustomFieldUpdateCheckbox"
          },
          {
            "$ref": "#/components/schemas/CustomFieldUpdateSelect"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "checkbox": "#/components/schemas/CustomFieldUpdateCheckbox",
            "date": "#/components/schemas/CustomFieldUpdateDate",
            "number": "#/components/schemas/CustomFieldUpdateNumber",
            "select": "#/components/schemas/CustomFieldUpdateSelect",
            "text": "#/components/schemas/CustomFieldUpdateText"
          }
        }
      },
      "CustomFieldUpdateCheckbox": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "name": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 1,
                "description": "Name of the custom field."
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "slug": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 1,
                "pattern": "^[a-z0-9-_]+$",
                "description": "Identifier of the custom field. It'll be used as key when storing the value. Must be unique across the organization.It can only contain ASCII letters, numbers and hyphens."
              },
              {
                "type": "null"
              }
            ],
            "title": "Slug"
          },
          "type": {
            "type": "string",
            "const": "checkbox",
            "title": "Type"
          },
          "properties": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CustomFieldCheckboxProperties"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "type"
        ],
        "title": "CustomFieldUpdateCheckbox",
        "description": "Schema to update a custom field of type checkbox."
      },
      "CustomFieldUpdateDate": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "name": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 1,
                "description": "Name of the custom field."
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "slug": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 1,
                "pattern": "^[a-z0-9-_]+$",
                "description": "Identifier of the custom field. It'll be used as key when storing the value. Must be unique across the organization.It can only contain ASCII letters, numbers and hyphens."
              },
              {
                "type": "null"
              }
            ],
            "title": "Slug"
          },
          "type": {
            "type": "string",
            "const": "date",
            "title": "Type"
          },
          "properties": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CustomFieldDateProperties"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "type"
        ],
        "title": "CustomFieldUpdateDate",
        "description": "Schema to update a custom field of type date."
      },
      "CustomFieldUpdateNumber": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "name": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 1,
                "description": "Name of the custom field."
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "slug": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 1,
                "pattern": "^[a-z0-9-_]+$",
                "description": "Identifier of the custom field. It'll be used as key when storing the value. Must be unique across the organization.It can only contain ASCII letters, numbers and hyphens."
              },
              {
                "type": "null"
              }
            ],
            "title": "Slug"
          },
          "type": {
            "type": "string",
            "const": "number",
            "title": "Type"
          },
          "properties": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CustomFieldNumberProperties"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "type"
        ],
        "title": "CustomFieldUpdateNumber",
        "description": "Schema to update a custom field of type number."
      },
      "CustomFieldUpdateSelect": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "name": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 1,
                "description": "Name of the custom field."
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "slug": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 1,
                "pattern": "^[a-z0-9-_]+$",
                "description": "Identifier of the custom field. It'll be used as key when storing the value. Must be unique across the organization.It can only contain ASCII letters, numbers and hyphens."
              },
              {
                "type": "null"
              }
            ],
            "title": "Slug"
          },
          "type": {
            "type": "string",
            "const": "select",
            "title": "Type"
          },
          "properties": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CustomFieldSelectProperties"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "type"
        ],
        "title": "CustomFieldUpdateSelect",
        "description": "Schema to update a custom field of type select."
      },
      "CustomFieldUpdateText": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "name": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 1,
                "description": "Name of the custom field."
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "slug": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 1,
                "pattern": "^[a-z0-9-_]+$",
                "description": "Identifier of the custom field. It'll be used as key when storing the value. Must be unique across the organization.It can only contain ASCII letters, numbers and hyphens."
              },
              {
                "type": "null"
              }
            ],
            "title": "Slug"
          },
          "type": {
            "type": "string",
            "const": "text",
            "title": "Type"
          },
          "properties": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CustomFieldTextProperties"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "type"
        ],
        "title": "CustomFieldUpdateText",
        "description": "Schema to update a custom field of type text."
      },
      "Customer": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the customer.",
            "examples": [
              "992fae2a-2a17-4b7a-8d9e-e287cf90131b"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "external_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "External Id",
            "description": "The ID of the customer in your system. This must be unique within the organization. Once set, it can't be updated.",
            "examples": [
              "usr_1337"
            ]
          },
          "email": {
            "type": "string",
            "title": "Email",
            "description": "The email address of the customer. This must be unique within the organization.",
            "examples": [
              "customer@example.com"
            ]
          },
          "email_verified": {
            "type": "boolean",
            "title": "Email Verified",
            "description": "Whether the customer email address is verified. The address is automatically verified when the customer accesses the customer portal using their email address.",
            "examples": [
              true
            ]
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "The name of the customer.",
            "examples": [
              "John Doe"
            ]
          },
          "billing_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address"
              },
              {
                "type": "null"
              }
            ]
          },
          "tax_id": {
            "anyOf": [
              {
                "prefixItems": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/components/schemas/TaxIDFormat"
                  }
                ],
                "type": "array",
                "maxItems": 2,
                "minItems": 2,
                "examples": [
                  [
                    "911144442",
                    "us_ein"
                  ],
                  [
                    "FR61954506077",
                    "eu_vat"
                  ]
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Id"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the customer.",
            "examples": [
              "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
            ]
          },
          "deleted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Deleted At",
            "description": "Timestamp for when the customer was soft deleted."
          },
          "avatar_url": {
            "type": "string",
            "title": "Avatar Url",
            "examples": [
              "https://www.gravatar.com/avatar/xxx?d=blank"
            ]
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "modified_at",
          "metadata",
          "external_id",
          "email",
          "email_verified",
          "name",
          "billing_address",
          "tax_id",
          "organization_id",
          "deleted_at",
          "avatar_url"
        ],
        "title": "Customer",
        "description": "A customer in an organization."
      },
      "CustomerBenefitGrant": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/CustomerBenefitGrantDiscord"
          },
          {
            "$ref": "#/components/schemas/CustomerBenefitGrantGitHubRepository"
          },
          {
            "$ref": "#/components/schemas/CustomerBenefitGrantDownloadables"
          },
          {
            "$ref": "#/components/schemas/CustomerBenefitGrantLicenseKeys"
          },
          {
            "$ref": "#/components/schemas/CustomerBenefitGrantCustom"
          },
          {
            "$ref": "#/components/schemas/CustomerBenefitGrantMeterCredit"
          }
        ]
      },
      "CustomerBenefitGrantCustom": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "granted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Granted At"
          },
          "revoked_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Revoked At"
          },
          "customer_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Customer Id"
          },
          "benefit_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Benefit Id"
          },
          "subscription_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subscription Id"
          },
          "order_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id"
          },
          "is_granted": {
            "type": "boolean",
            "title": "Is Granted"
          },
          "is_revoked": {
            "type": "boolean",
            "title": "Is Revoked"
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerPortalCustomer"
          },
          "benefit": {
            "$ref": "#/components/schemas/BenefitCustomSubscriber"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitGrantCustomProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "granted_at",
          "revoked_at",
          "customer_id",
          "benefit_id",
          "subscription_id",
          "order_id",
          "is_granted",
          "is_revoked",
          "customer",
          "benefit",
          "properties"
        ],
        "title": "CustomerBenefitGrantCustom"
      },
      "CustomerBenefitGrantCustomUpdate": {
        "properties": {
          "benefit_type": {
            "type": "string",
            "const": "custom",
            "title": "Benefit Type"
          }
        },
        "type": "object",
        "required": [
          "benefit_type"
        ],
        "title": "CustomerBenefitGrantCustomUpdate"
      },
      "CustomerBenefitGrantDiscord": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "granted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Granted At"
          },
          "revoked_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Revoked At"
          },
          "customer_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Customer Id"
          },
          "benefit_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Benefit Id"
          },
          "subscription_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subscription Id"
          },
          "order_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id"
          },
          "is_granted": {
            "type": "boolean",
            "title": "Is Granted"
          },
          "is_revoked": {
            "type": "boolean",
            "title": "Is Revoked"
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerPortalCustomer"
          },
          "benefit": {
            "$ref": "#/components/schemas/BenefitDiscordSubscriber"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitGrantDiscordProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "granted_at",
          "revoked_at",
          "customer_id",
          "benefit_id",
          "subscription_id",
          "order_id",
          "is_granted",
          "is_revoked",
          "customer",
          "benefit",
          "properties"
        ],
        "title": "CustomerBenefitGrantDiscord"
      },
      "CustomerBenefitGrantDiscordPropertiesUpdate": {
        "properties": {
          "account_id": {
            "type": "string",
            "title": "Account Id"
          }
        },
        "type": "object",
        "required": [
          "account_id"
        ],
        "title": "CustomerBenefitGrantDiscordPropertiesUpdate"
      },
      "CustomerBenefitGrantDiscordUpdate": {
        "properties": {
          "benefit_type": {
            "type": "string",
            "const": "discord",
            "title": "Benefit Type"
          },
          "properties": {
            "$ref": "#/components/schemas/CustomerBenefitGrantDiscordPropertiesUpdate"
          }
        },
        "type": "object",
        "required": [
          "benefit_type",
          "properties"
        ],
        "title": "CustomerBenefitGrantDiscordUpdate"
      },
      "CustomerBenefitGrantDownloadables": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "granted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Granted At"
          },
          "revoked_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Revoked At"
          },
          "customer_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Customer Id"
          },
          "benefit_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Benefit Id"
          },
          "subscription_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subscription Id"
          },
          "order_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id"
          },
          "is_granted": {
            "type": "boolean",
            "title": "Is Granted"
          },
          "is_revoked": {
            "type": "boolean",
            "title": "Is Revoked"
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerPortalCustomer"
          },
          "benefit": {
            "$ref": "#/components/schemas/BenefitDownloadablesSubscriber"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitGrantDownloadablesProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "granted_at",
          "revoked_at",
          "customer_id",
          "benefit_id",
          "subscription_id",
          "order_id",
          "is_granted",
          "is_revoked",
          "customer",
          "benefit",
          "properties"
        ],
        "title": "CustomerBenefitGrantDownloadables"
      },
      "CustomerBenefitGrantDownloadablesUpdate": {
        "properties": {
          "benefit_type": {
            "type": "string",
            "const": "downloadables",
            "title": "Benefit Type"
          }
        },
        "type": "object",
        "required": [
          "benefit_type"
        ],
        "title": "CustomerBenefitGrantDownloadablesUpdate"
      },
      "CustomerBenefitGrantGitHubRepository": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "granted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Granted At"
          },
          "revoked_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Revoked At"
          },
          "customer_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Customer Id"
          },
          "benefit_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Benefit Id"
          },
          "subscription_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subscription Id"
          },
          "order_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id"
          },
          "is_granted": {
            "type": "boolean",
            "title": "Is Granted"
          },
          "is_revoked": {
            "type": "boolean",
            "title": "Is Revoked"
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerPortalCustomer"
          },
          "benefit": {
            "$ref": "#/components/schemas/BenefitGitHubRepositorySubscriber"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitGrantGitHubRepositoryProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "granted_at",
          "revoked_at",
          "customer_id",
          "benefit_id",
          "subscription_id",
          "order_id",
          "is_granted",
          "is_revoked",
          "customer",
          "benefit",
          "properties"
        ],
        "title": "CustomerBenefitGrantGitHubRepository"
      },
      "CustomerBenefitGrantGitHubRepositoryPropertiesUpdate": {
        "properties": {
          "account_id": {
            "type": "string",
            "title": "Account Id"
          }
        },
        "type": "object",
        "required": [
          "account_id"
        ],
        "title": "CustomerBenefitGrantGitHubRepositoryPropertiesUpdate"
      },
      "CustomerBenefitGrantGitHubRepositoryUpdate": {
        "properties": {
          "benefit_type": {
            "type": "string",
            "const": "github_repository",
            "title": "Benefit Type"
          },
          "properties": {
            "$ref": "#/components/schemas/CustomerBenefitGrantGitHubRepositoryPropertiesUpdate"
          }
        },
        "type": "object",
        "required": [
          "benefit_type",
          "properties"
        ],
        "title": "CustomerBenefitGrantGitHubRepositoryUpdate"
      },
      "CustomerBenefitGrantLicenseKeys": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "granted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Granted At"
          },
          "revoked_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Revoked At"
          },
          "customer_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Customer Id"
          },
          "benefit_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Benefit Id"
          },
          "subscription_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subscription Id"
          },
          "order_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id"
          },
          "is_granted": {
            "type": "boolean",
            "title": "Is Granted"
          },
          "is_revoked": {
            "type": "boolean",
            "title": "Is Revoked"
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerPortalCustomer"
          },
          "benefit": {
            "$ref": "#/components/schemas/BenefitLicenseKeysSubscriber"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitGrantLicenseKeysProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "granted_at",
          "revoked_at",
          "customer_id",
          "benefit_id",
          "subscription_id",
          "order_id",
          "is_granted",
          "is_revoked",
          "customer",
          "benefit",
          "properties"
        ],
        "title": "CustomerBenefitGrantLicenseKeys"
      },
      "CustomerBenefitGrantLicenseKeysUpdate": {
        "properties": {
          "benefit_type": {
            "type": "string",
            "const": "license_keys",
            "title": "Benefit Type"
          }
        },
        "type": "object",
        "required": [
          "benefit_type"
        ],
        "title": "CustomerBenefitGrantLicenseKeysUpdate"
      },
      "CustomerBenefitGrantMeterCredit": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "granted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Granted At"
          },
          "revoked_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Revoked At"
          },
          "customer_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Customer Id"
          },
          "benefit_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Benefit Id"
          },
          "subscription_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subscription Id"
          },
          "order_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id"
          },
          "is_granted": {
            "type": "boolean",
            "title": "Is Granted"
          },
          "is_revoked": {
            "type": "boolean",
            "title": "Is Revoked"
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerPortalCustomer"
          },
          "benefit": {
            "$ref": "#/components/schemas/BenefitMeterCreditSubscriber"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitGrantMeterCreditProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "granted_at",
          "revoked_at",
          "customer_id",
          "benefit_id",
          "subscription_id",
          "order_id",
          "is_granted",
          "is_revoked",
          "customer",
          "benefit",
          "properties"
        ],
        "title": "CustomerBenefitGrantMeterCredit"
      },
      "CustomerBenefitGrantMeterCreditUpdate": {
        "properties": {
          "benefit_type": {
            "type": "string",
            "const": "meter_credit",
            "title": "Benefit Type"
          }
        },
        "type": "object",
        "required": [
          "benefit_type"
        ],
        "title": "CustomerBenefitGrantMeterCreditUpdate"
      },
      "CustomerBenefitGrantSortProperty": {
        "type": "string",
        "enum": [
          "granted_at",
          "-granted_at",
          "type",
          "-type",
          "organization",
          "-organization"
        ],
        "title": "CustomerBenefitGrantSortProperty"
      },
      "CustomerBenefitGrantUpdate": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/CustomerBenefitGrantDiscordUpdate"
          },
          {
            "$ref": "#/components/schemas/CustomerBenefitGrantGitHubRepositoryUpdate"
          },
          {
            "$ref": "#/components/schemas/CustomerBenefitGrantDownloadablesUpdate"
          },
          {
            "$ref": "#/components/schemas/CustomerBenefitGrantLicenseKeysUpdate"
          },
          {
            "$ref": "#/components/schemas/CustomerBenefitGrantCustomUpdate"
          },
          {
            "$ref": "#/components/schemas/CustomerBenefitGrantMeterCreditUpdate"
          }
        ],
        "discriminator": {
          "propertyName": "benefit_type",
          "mapping": {
            "custom": "#/components/schemas/CustomerBenefitGrantCustomUpdate",
            "discord": "#/components/schemas/CustomerBenefitGrantDiscordUpdate",
            "downloadables": "#/components/schemas/CustomerBenefitGrantDownloadablesUpdate",
            "github_repository": "#/components/schemas/CustomerBenefitGrantGitHubRepositoryUpdate",
            "license_keys": "#/components/schemas/CustomerBenefitGrantLicenseKeysUpdate",
            "meter_credit": "#/components/schemas/CustomerBenefitGrantMeterCreditUpdate"
          }
        }
      },
      "CustomerCancellationReason": {
        "type": "string",
        "enum": [
          "customer_service",
          "low_quality",
          "missing_features",
          "switched_service",
          "too_complex",
          "too_expensive",
          "unused",
          "other"
        ],
        "title": "CustomerCancellationReason"
      },
      "CustomerCreate": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "external_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "External Id",
            "description": "The ID of the customer in your system. This must be unique within the organization. Once set, it can't be updated.",
            "examples": [
              "usr_1337"
            ]
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email",
            "description": "The email address of the customer. This must be unique within the organization.",
            "examples": [
              "customer@example.com"
            ]
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "The name of the customer.",
            "examples": [
              "John Doe"
            ]
          },
          "billing_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address"
              },
              {
                "type": "null"
              }
            ]
          },
          "tax_id": {
            "anyOf": [
              {
                "prefixItems": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/components/schemas/TaxIDFormat"
                  }
                ],
                "type": "array",
                "maxItems": 2,
                "minItems": 2,
                "examples": [
                  [
                    "911144442",
                    "us_ein"
                  ],
                  [
                    "FR61954506077",
                    "eu_vat"
                  ]
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Id"
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "examples": [
                  "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                ],
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the customer. **Required unless you use an organization token.**"
          }
        },
        "type": "object",
        "required": [
          "email"
        ],
        "title": "CustomerCreate"
      },
      "CustomerCustomerMeter": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "customer_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Customer Id",
            "description": "The ID of the customer.",
            "examples": [
              "992fae2a-2a17-4b7a-8d9e-e287cf90131b"
            ]
          },
          "meter_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Meter Id",
            "description": "The ID of the meter.",
            "examples": [
              "d498a884-e2cd-4d3e-8002-f536468a8b22"
            ]
          },
          "consumed_units": {
            "type": "number",
            "title": "Consumed Units",
            "description": "The number of consumed units.",
            "examples": [
              25
            ]
          },
          "credited_units": {
            "type": "integer",
            "title": "Credited Units",
            "description": "The number of credited units.",
            "examples": [
              100
            ]
          },
          "balance": {
            "type": "number",
            "title": "Balance",
            "description": "The balance of the meter, i.e. the difference between credited and consumed units.",
            "examples": [
              75
            ]
          },
          "meter": {
            "$ref": "#/components/schemas/CustomerCustomerMeterMeter"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "modified_at",
          "customer_id",
          "meter_id",
          "consumed_units",
          "credited_units",
          "balance",
          "meter"
        ],
        "title": "CustomerCustomerMeter"
      },
      "CustomerCustomerMeterMeter": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the meter. Will be shown on customer's invoices and usage."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "name"
        ],
        "title": "CustomerCustomerMeterMeter"
      },
      "CustomerCustomerMeterSortProperty": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "modified_at",
          "-modified_at",
          "meter_id",
          "-meter_id",
          "meter_name",
          "-meter_name",
          "consumed_units",
          "-consumed_units",
          "credited_units",
          "-credited_units",
          "balance",
          "-balance"
        ],
        "title": "CustomerCustomerMeterSortProperty"
      },
      "CustomerMeter": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "customer_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Customer Id",
            "description": "The ID of the customer.",
            "examples": [
              "992fae2a-2a17-4b7a-8d9e-e287cf90131b"
            ]
          },
          "meter_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Meter Id",
            "description": "The ID of the meter.",
            "examples": [
              "d498a884-e2cd-4d3e-8002-f536468a8b22"
            ]
          },
          "consumed_units": {
            "type": "number",
            "title": "Consumed Units",
            "description": "The number of consumed units.",
            "examples": [
              25
            ]
          },
          "credited_units": {
            "type": "integer",
            "title": "Credited Units",
            "description": "The number of credited units.",
            "examples": [
              100
            ]
          },
          "balance": {
            "type": "number",
            "title": "Balance",
            "description": "The balance of the meter, i.e. the difference between credited and consumed units.",
            "examples": [
              75
            ]
          },
          "customer": {
            "$ref": "#/components/schemas/Customer",
            "description": "The customer associated with this meter."
          },
          "meter": {
            "$ref": "#/components/schemas/Meter",
            "description": "The meter associated with this customer."
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "modified_at",
          "customer_id",
          "meter_id",
          "consumed_units",
          "credited_units",
          "balance",
          "customer",
          "meter"
        ],
        "title": "CustomerMeter",
        "description": "An active customer meter, with current consumed and credited units."
      },
      "CustomerMeterSortProperty": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "modified_at",
          "-modified_at",
          "customer_id",
          "-customer_id",
          "customer_name",
          "-customer_name",
          "meter_id",
          "-meter_id",
          "meter_name",
          "-meter_name",
          "consumed_units",
          "-consumed_units",
          "credited_units",
          "-credited_units",
          "balance",
          "-balance"
        ],
        "title": "CustomerMeterSortProperty"
      },
      "CustomerOrder": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "status": {
            "$ref": "#/components/schemas/OrderStatus",
            "examples": [
              "paid"
            ]
          },
          "paid": {
            "type": "boolean",
            "title": "Paid",
            "description": "Whether the order has been paid for.",
            "examples": [
              true
            ]
          },
          "subtotal_amount": {
            "type": "integer",
            "title": "Subtotal Amount",
            "description": "Amount in cents, before discounts and taxes."
          },
          "discount_amount": {
            "type": "integer",
            "title": "Discount Amount",
            "description": "Discount amount in cents."
          },
          "net_amount": {
            "type": "integer",
            "title": "Net Amount",
            "description": "Amount in cents, after discounts but before taxes."
          },
          "amount": {
            "type": "integer",
            "title": "Amount",
            "description": "Amount in cents, after discounts but before taxes.",
            "deprecated": true
          },
          "tax_amount": {
            "type": "integer",
            "title": "Tax Amount",
            "description": "Sales tax amount in cents."
          },
          "total_amount": {
            "type": "integer",
            "title": "Total Amount",
            "description": "Amount in cents, after discounts and taxes."
          },
          "refunded_amount": {
            "type": "integer",
            "title": "Refunded Amount",
            "description": "Amount refunded in cents."
          },
          "refunded_tax_amount": {
            "type": "integer",
            "title": "Refunded Tax Amount",
            "description": "Sales tax refunded in cents."
          },
          "currency": {
            "type": "string",
            "title": "Currency"
          },
          "billing_reason": {
            "$ref": "#/components/schemas/OrderBillingReason"
          },
          "billing_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Billing Name",
            "description": "The name of the customer that should appear on the invoice. "
          },
          "billing_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address"
              },
              {
                "type": "null"
              }
            ]
          },
          "is_invoice_generated": {
            "type": "boolean",
            "title": "Is Invoice Generated",
            "description": "Whether an invoice has been generated for this order."
          },
          "customer_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Customer Id"
          },
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id"
          },
          "discount_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Id"
          },
          "subscription_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subscription Id"
          },
          "checkout_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checkout Id"
          },
          "user_id": {
            "type": "string",
            "format": "uuid4",
            "title": "User Id",
            "deprecated": true
          },
          "product": {
            "$ref": "#/components/schemas/CustomerOrderProduct"
          },
          "subscription": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CustomerOrderSubscription"
              },
              {
                "type": "null"
              }
            ]
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/OrderItemSchema"
            },
            "type": "array",
            "title": "Items",
            "description": "Line items composing the order."
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "modified_at",
          "status",
          "paid",
          "subtotal_amount",
          "discount_amount",
          "net_amount",
          "amount",
          "tax_amount",
          "total_amount",
          "refunded_amount",
          "refunded_tax_amount",
          "currency",
          "billing_reason",
          "billing_name",
          "billing_address",
          "is_invoice_generated",
          "customer_id",
          "product_id",
          "discount_id",
          "subscription_id",
          "checkout_id",
          "user_id",
          "product",
          "subscription",
          "items"
        ],
        "title": "CustomerOrder"
      },
      "CustomerOrderInvoice": {
        "properties": {
          "url": {
            "type": "string",
            "title": "Url",
            "description": "The URL to the invoice."
          }
        },
        "type": "object",
        "required": [
          "url"
        ],
        "title": "CustomerOrderInvoice",
        "description": "Order's invoice data."
      },
      "CustomerOrderProduct": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the product."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the product."
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the product."
          },
          "recurring_interval": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SubscriptionRecurringInterval"
              },
              {
                "type": "null"
              }
            ],
            "description": "The recurring interval of the product. If `None`, the product is a one-time purchase."
          },
          "is_recurring": {
            "type": "boolean",
            "title": "Is Recurring",
            "description": "Whether the product is a subscription."
          },
          "is_archived": {
            "type": "boolean",
            "title": "Is Archived",
            "description": "Whether the product is archived and no longer available."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the product."
          },
          "prices": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/LegacyRecurringProductPrice"
                },
                {
                  "$ref": "#/components/schemas/ProductPrice"
                }
              ]
            },
            "type": "array",
            "title": "Prices",
            "description": "List of prices for this product."
          },
          "benefits": {
            "items": {
              "$ref": "#/components/schemas/BenefitPublic"
            },
            "type": "array",
            "title": "BenefitPublic",
            "description": "List of benefits granted by the product."
          },
          "medias": {
            "items": {
              "$ref": "#/components/schemas/ProductMediaFileRead"
            },
            "type": "array",
            "title": "Medias",
            "description": "List of medias associated to the product."
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "name",
          "description",
          "recurring_interval",
          "is_recurring",
          "is_archived",
          "organization_id",
          "prices",
          "benefits",
          "medias",
          "organization"
        ],
        "title": "CustomerOrderProduct"
      },
      "CustomerOrderSortProperty": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "amount",
          "-amount",
          "net_amount",
          "-net_amount",
          "product",
          "-product",
          "subscription",
          "-subscription"
        ],
        "title": "CustomerOrderSortProperty"
      },
      "CustomerOrderSubscription": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "amount": {
            "type": "integer",
            "title": "Amount",
            "description": "The amount of the subscription."
          },
          "currency": {
            "type": "string",
            "title": "Currency",
            "description": "The currency of the subscription."
          },
          "recurring_interval": {
            "$ref": "#/components/schemas/SubscriptionRecurringInterval",
            "description": "The interval at which the subscription recurs."
          },
          "status": {
            "$ref": "#/components/schemas/SubscriptionStatus",
            "description": "The status of the subscription."
          },
          "current_period_start": {
            "type": "string",
            "format": "date-time",
            "title": "Current Period Start",
            "description": "The start timestamp of the current billing period."
          },
          "current_period_end": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Current Period End",
            "description": "The end timestamp of the current billing period."
          },
          "cancel_at_period_end": {
            "type": "boolean",
            "title": "Cancel At Period End",
            "description": "Whether the subscription will be canceled at the end of the current period."
          },
          "canceled_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Canceled At",
            "description": "The timestamp when the subscription was canceled. The subscription might still be active if `cancel_at_period_end` is `true`."
          },
          "started_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Started At",
            "description": "The timestamp when the subscription started."
          },
          "ends_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ends At",
            "description": "The timestamp when the subscription will end."
          },
          "ended_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ended At",
            "description": "The timestamp when the subscription ended."
          },
          "customer_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Customer Id",
            "description": "The ID of the subscribed customer."
          },
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id",
            "description": "The ID of the subscribed product."
          },
          "discount_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Id",
            "description": "The ID of the applied discount, if any."
          },
          "checkout_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checkout Id"
          },
          "customer_cancellation_reason": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CustomerCancellationReason"
              },
              {
                "type": "null"
              }
            ]
          },
          "customer_cancellation_comment": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Cancellation Comment"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "amount",
          "currency",
          "recurring_interval",
          "status",
          "current_period_start",
          "current_period_end",
          "cancel_at_period_end",
          "canceled_at",
          "started_at",
          "ends_at",
          "ended_at",
          "customer_id",
          "product_id",
          "discount_id",
          "checkout_id",
          "customer_cancellation_reason",
          "customer_cancellation_comment"
        ],
        "title": "CustomerOrderSubscription"
      },
      "CustomerOrderUpdate": {
        "properties": {
          "billing_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Billing Name",
            "description": "The name of the customer that should appear on the invoice. Can't be updated after the invoice is generated."
          },
          "billing_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address"
              },
              {
                "type": "null"
              }
            ],
            "description": "The address of the customer that should appear on the invoice. Can't be updated after the invoice is generated."
          }
        },
        "type": "object",
        "required": [
          "billing_name",
          "billing_address"
        ],
        "title": "CustomerOrderUpdate",
        "description": "Schema to update an order."
      },
      "CustomerOrganization": {
        "properties": {
          "organization": {
            "$ref": "#/components/schemas/Organization"
          },
          "products": {
            "items": {
              "$ref": "#/components/schemas/CustomerProduct"
            },
            "type": "array",
            "title": "Products"
          }
        },
        "type": "object",
        "required": [
          "organization",
          "products"
        ],
        "title": "CustomerOrganization",
        "description": "Schema of an organization and related data for customer portal."
      },
      "CustomerPaymentMethodCreate": {
        "properties": {
          "confirmation_token_id": {
            "type": "string",
            "title": "Confirmation Token Id"
          },
          "set_default": {
            "type": "boolean",
            "title": "Set Default"
          },
          "return_url": {
            "type": "string",
            "title": "Return Url"
          }
        },
        "type": "object",
        "required": [
          "confirmation_token_id",
          "set_default",
          "return_url"
        ],
        "title": "CustomerPaymentMethodCreate"
      },
      "CustomerPortalCustomer": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "email_verified": {
            "type": "boolean",
            "title": "Email Verified"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "billing_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address"
              },
              {
                "type": "null"
              }
            ]
          },
          "tax_id": {
            "anyOf": [
              {
                "prefixItems": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/components/schemas/TaxIDFormat"
                  }
                ],
                "type": "array",
                "maxItems": 2,
                "minItems": 2,
                "examples": [
                  [
                    "911144442",
                    "us_ein"
                  ],
                  [
                    "FR61954506077",
                    "eu_vat"
                  ]
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Id"
          },
          "oauth_accounts": {
            "additionalProperties": {
              "$ref": "#/components/schemas/CustomerPortalOAuthAccount"
            },
            "type": "object",
            "title": "Oauth Accounts"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "email",
          "email_verified",
          "name",
          "billing_address",
          "tax_id",
          "oauth_accounts"
        ],
        "title": "CustomerPortalCustomer"
      },
      "CustomerPortalCustomerUpdate": {
        "properties": {
          "email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "billing_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address"
              },
              {
                "type": "null"
              }
            ]
          },
          "tax_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Id"
          }
        },
        "type": "object",
        "title": "CustomerPortalCustomerUpdate"
      },
      "CustomerPortalOAuthAccount": {
        "properties": {
          "account_id": {
            "type": "string",
            "title": "Account Id"
          },
          "account_username": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Account Username"
          }
        },
        "type": "object",
        "required": [
          "account_id",
          "account_username"
        ],
        "title": "CustomerPortalOAuthAccount"
      },
      "CustomerProduct": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the product."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the product."
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the product."
          },
          "recurring_interval": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SubscriptionRecurringInterval"
              },
              {
                "type": "null"
              }
            ],
            "description": "The recurring interval of the product. If `None`, the product is a one-time purchase."
          },
          "is_recurring": {
            "type": "boolean",
            "title": "Is Recurring",
            "description": "Whether the product is a subscription."
          },
          "is_archived": {
            "type": "boolean",
            "title": "Is Archived",
            "description": "Whether the product is archived and no longer available."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the product."
          },
          "prices": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/LegacyRecurringProductPrice"
                },
                {
                  "$ref": "#/components/schemas/ProductPrice"
                }
              ]
            },
            "type": "array",
            "title": "Prices",
            "description": "List of available prices for this product."
          },
          "benefits": {
            "items": {
              "$ref": "#/components/schemas/BenefitPublic"
            },
            "type": "array",
            "title": "BenefitPublic",
            "description": "The benefits granted by the product."
          },
          "medias": {
            "items": {
              "$ref": "#/components/schemas/ProductMediaFileRead"
            },
            "type": "array",
            "title": "Medias",
            "description": "The medias associated to the product."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "name",
          "description",
          "recurring_interval",
          "is_recurring",
          "is_archived",
          "organization_id",
          "prices",
          "benefits",
          "medias"
        ],
        "title": "CustomerProduct",
        "description": "Schema of a product for customer portal."
      },
      "CustomerSession": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "token": {
            "type": "string",
            "title": "Token"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "title": "Expires At"
          },
          "customer_portal_url": {
            "type": "string",
            "title": "Customer Portal Url"
          },
          "customer_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Customer Id"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "token",
          "expires_at",
          "customer_portal_url",
          "customer_id",
          "customer"
        ],
        "title": "CustomerSession",
        "description": "A customer session that can be used to authenticate as a customer."
      },
      "CustomerSessionCustomerExternalIDCreate": {
        "properties": {
          "external_customer_id": {
            "type": "string",
            "title": "External Customer Id",
            "description": "External ID of the customer to create a session for."
          }
        },
        "type": "object",
        "required": [
          "external_customer_id"
        ],
        "title": "CustomerSessionCustomerExternalIDCreate",
        "description": "Schema for creating a customer session using an external customer ID."
      },
      "CustomerSessionCustomerIDCreate": {
        "properties": {
          "customer_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Customer Id",
            "description": "ID of the customer to create a session for."
          }
        },
        "type": "object",
        "required": [
          "customer_id"
        ],
        "title": "CustomerSessionCustomerIDCreate",
        "description": "Schema for creating a customer session using a customer ID."
      },
      "CustomerSortProperty": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "email",
          "-email",
          "name",
          "-name"
        ],
        "title": "CustomerSortProperty"
      },
      "CustomerState": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the customer.",
            "examples": [
              "992fae2a-2a17-4b7a-8d9e-e287cf90131b"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "external_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "External Id",
            "description": "The ID of the customer in your system. This must be unique within the organization. Once set, it can't be updated.",
            "examples": [
              "usr_1337"
            ]
          },
          "email": {
            "type": "string",
            "title": "Email",
            "description": "The email address of the customer. This must be unique within the organization.",
            "examples": [
              "customer@example.com"
            ]
          },
          "email_verified": {
            "type": "boolean",
            "title": "Email Verified",
            "description": "Whether the customer email address is verified. The address is automatically verified when the customer accesses the customer portal using their email address.",
            "examples": [
              true
            ]
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "The name of the customer.",
            "examples": [
              "John Doe"
            ]
          },
          "billing_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address"
              },
              {
                "type": "null"
              }
            ]
          },
          "tax_id": {
            "anyOf": [
              {
                "prefixItems": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/components/schemas/TaxIDFormat"
                  }
                ],
                "type": "array",
                "maxItems": 2,
                "minItems": 2,
                "examples": [
                  [
                    "911144442",
                    "us_ein"
                  ],
                  [
                    "FR61954506077",
                    "eu_vat"
                  ]
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Id"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the customer.",
            "examples": [
              "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
            ]
          },
          "deleted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Deleted At",
            "description": "Timestamp for when the customer was soft deleted."
          },
          "active_subscriptions": {
            "items": {
              "$ref": "#/components/schemas/CustomerStateSubscription"
            },
            "type": "array",
            "title": "Active Subscriptions",
            "description": "The customer's active subscriptions."
          },
          "granted_benefits": {
            "items": {
              "$ref": "#/components/schemas/CustomerStateBenefitGrant"
            },
            "type": "array",
            "title": "Granted Benefits",
            "description": "The customer's active benefit grants."
          },
          "active_meters": {
            "items": {
              "$ref": "#/components/schemas/CustomerStateMeter"
            },
            "type": "array",
            "title": "Active Meters",
            "description": "The customer's active meters."
          },
          "avatar_url": {
            "type": "string",
            "title": "Avatar Url",
            "examples": [
              "https://www.gravatar.com/avatar/xxx?d=blank"
            ]
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "modified_at",
          "metadata",
          "external_id",
          "email",
          "email_verified",
          "name",
          "billing_address",
          "tax_id",
          "organization_id",
          "deleted_at",
          "active_subscriptions",
          "granted_benefits",
          "active_meters",
          "avatar_url"
        ],
        "title": "CustomerState",
        "description": "A customer along with additional state information:\n\n* Active subscriptions\n* Granted benefits\n* Active meters"
      },
      "CustomerStateBenefitGrant": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the grant.",
            "examples": [
              "d322132c-a9d0-4e0d-b8d3-d81ad021a3a9"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "granted_at": {
            "type": "string",
            "format": "date-time",
            "title": "Granted At",
            "description": "The timestamp when the benefit was granted.",
            "examples": [
              "2025-01-03T13:37:00Z"
            ]
          },
          "benefit_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Benefit Id",
            "description": "The ID of the benefit concerned by this grant.",
            "examples": [
              "397a17aa-15cf-4cb4-9333-18040203cf98"
            ]
          },
          "benefit_type": {
            "$ref": "#/components/schemas/BenefitType",
            "description": "The type of the benefit concerned by this grant.",
            "examples": [
              "custom"
            ]
          },
          "benefit_metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Benefit Metadata",
            "description": "The metadata of the benefit concerned by this grant.",
            "examples": [
              {
                "key": "value"
              }
            ]
          },
          "properties": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitGrantDiscordProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantGitHubRepositoryProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantDownloadablesProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantLicenseKeysProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantCustomProperties"
              }
            ],
            "title": "Properties"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "modified_at",
          "granted_at",
          "benefit_id",
          "benefit_type",
          "benefit_metadata",
          "properties"
        ],
        "title": "CustomerStateBenefitGrant",
        "description": "An active benefit grant for a customer."
      },
      "CustomerStateMeter": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "meter_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Meter Id",
            "description": "The ID of the meter.",
            "examples": [
              "d498a884-e2cd-4d3e-8002-f536468a8b22"
            ]
          },
          "consumed_units": {
            "type": "number",
            "title": "Consumed Units",
            "description": "The number of consumed units.",
            "examples": [
              25
            ]
          },
          "credited_units": {
            "type": "integer",
            "title": "Credited Units",
            "description": "The number of credited units.",
            "examples": [
              100
            ]
          },
          "balance": {
            "type": "number",
            "title": "Balance",
            "description": "The balance of the meter, i.e. the difference between credited and consumed units.",
            "examples": [
              75
            ]
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "modified_at",
          "meter_id",
          "consumed_units",
          "credited_units",
          "balance"
        ],
        "title": "CustomerStateMeter",
        "description": "An active meter for a customer, with latest consumed and credited units."
      },
      "CustomerStateSubscription": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the subscription.",
            "examples": [
              "e5149aae-e521-42b9-b24c-abb3d71eea2e"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "custom_field_data": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ]
            },
            "type": "object",
            "title": "Custom Field Data",
            "description": "Key-value object storing custom field values."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "status": {
            "type": "string",
            "const": "active",
            "title": "Status",
            "examples": [
              "active"
            ]
          },
          "amount": {
            "type": "integer",
            "title": "Amount",
            "description": "The amount of the subscription.",
            "examples": [
              1000
            ]
          },
          "currency": {
            "type": "string",
            "title": "Currency",
            "description": "The currency of the subscription.",
            "examples": [
              "usd"
            ]
          },
          "recurring_interval": {
            "$ref": "#/components/schemas/SubscriptionRecurringInterval",
            "description": "The interval at which the subscription recurs."
          },
          "current_period_start": {
            "type": "string",
            "format": "date-time",
            "title": "Current Period Start",
            "description": "The start timestamp of the current billing period.",
            "examples": [
              "2025-02-03T13:37:00Z"
            ]
          },
          "current_period_end": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Current Period End",
            "description": "The end timestamp of the current billing period.",
            "examples": [
              "2025-03-03T13:37:00Z"
            ]
          },
          "cancel_at_period_end": {
            "type": "boolean",
            "title": "Cancel At Period End",
            "description": "Whether the subscription will be canceled at the end of the current period.",
            "examples": [
              false
            ]
          },
          "canceled_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Canceled At",
            "description": "The timestamp when the subscription was canceled. The subscription might still be active if `cancel_at_period_end` is `true`.",
            "examples": [
              null
            ]
          },
          "started_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Started At",
            "description": "The timestamp when the subscription started.",
            "examples": [
              "2025-01-03T13:37:00Z"
            ]
          },
          "ends_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ends At",
            "description": "The timestamp when the subscription will end.",
            "examples": [
              null
            ]
          },
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id",
            "description": "The ID of the subscribed product.",
            "examples": [
              "d8dd2de1-21b7-4a41-8bc3-ce909c0cfe23"
            ]
          },
          "discount_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Id",
            "description": "The ID of the applied discount, if any.",
            "examples": [
              null
            ]
          },
          "meters": {
            "items": {
              "$ref": "#/components/schemas/CustomerStateSubscriptionMeter"
            },
            "type": "array",
            "title": "Meters",
            "description": "List of meters associated with the subscription."
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "modified_at",
          "metadata",
          "status",
          "amount",
          "currency",
          "recurring_interval",
          "current_period_start",
          "current_period_end",
          "cancel_at_period_end",
          "canceled_at",
          "started_at",
          "ends_at",
          "product_id",
          "discount_id",
          "meters"
        ],
        "title": "CustomerStateSubscription",
        "description": "An active customer subscription."
      },
      "CustomerStateSubscriptionMeter": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "consumed_units": {
            "type": "number",
            "title": "Consumed Units",
            "description": "The number of consumed units so far in this billing period.",
            "examples": [
              25
            ]
          },
          "credited_units": {
            "type": "integer",
            "title": "Credited Units",
            "description": "The number of credited units so far in this billing period.",
            "examples": [
              100
            ]
          },
          "amount": {
            "type": "integer",
            "title": "Amount",
            "description": "The amount due in cents so far in this billing period.",
            "examples": [
              0
            ]
          },
          "meter_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Meter Id",
            "description": "The ID of the meter.",
            "examples": [
              "d498a884-e2cd-4d3e-8002-f536468a8b22"
            ]
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "consumed_units",
          "credited_units",
          "amount",
          "meter_id"
        ],
        "title": "CustomerStateSubscriptionMeter",
        "description": "Current consumption and spending for a subscription meter."
      },
      "CustomerSubscription": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "amount": {
            "type": "integer",
            "title": "Amount",
            "description": "The amount of the subscription."
          },
          "currency": {
            "type": "string",
            "title": "Currency",
            "description": "The currency of the subscription."
          },
          "recurring_interval": {
            "$ref": "#/components/schemas/SubscriptionRecurringInterval",
            "description": "The interval at which the subscription recurs."
          },
          "status": {
            "$ref": "#/components/schemas/SubscriptionStatus",
            "description": "The status of the subscription."
          },
          "current_period_start": {
            "type": "string",
            "format": "date-time",
            "title": "Current Period Start",
            "description": "The start timestamp of the current billing period."
          },
          "current_period_end": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Current Period End",
            "description": "The end timestamp of the current billing period."
          },
          "cancel_at_period_end": {
            "type": "boolean",
            "title": "Cancel At Period End",
            "description": "Whether the subscription will be canceled at the end of the current period."
          },
          "canceled_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Canceled At",
            "description": "The timestamp when the subscription was canceled. The subscription might still be active if `cancel_at_period_end` is `true`."
          },
          "started_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Started At",
            "description": "The timestamp when the subscription started."
          },
          "ends_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ends At",
            "description": "The timestamp when the subscription will end."
          },
          "ended_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ended At",
            "description": "The timestamp when the subscription ended."
          },
          "customer_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Customer Id",
            "description": "The ID of the subscribed customer."
          },
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id",
            "description": "The ID of the subscribed product."
          },
          "discount_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Id",
            "description": "The ID of the applied discount, if any."
          },
          "checkout_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checkout Id"
          },
          "customer_cancellation_reason": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CustomerCancellationReason"
              },
              {
                "type": "null"
              }
            ]
          },
          "customer_cancellation_comment": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Cancellation Comment"
          },
          "product": {
            "$ref": "#/components/schemas/CustomerSubscriptionProduct"
          },
          "prices": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/LegacyRecurringProductPrice"
                },
                {
                  "$ref": "#/components/schemas/ProductPrice"
                }
              ]
            },
            "type": "array",
            "title": "Prices",
            "description": "List of enabled prices for the subscription."
          },
          "meters": {
            "items": {
              "$ref": "#/components/schemas/CustomerSubscriptionMeter"
            },
            "type": "array",
            "title": "Meters",
            "description": "List of meters associated with the subscription."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "amount",
          "currency",
          "recurring_interval",
          "status",
          "current_period_start",
          "current_period_end",
          "cancel_at_period_end",
          "canceled_at",
          "started_at",
          "ends_at",
          "ended_at",
          "customer_id",
          "product_id",
          "discount_id",
          "checkout_id",
          "customer_cancellation_reason",
          "customer_cancellation_comment",
          "product",
          "prices",
          "meters"
        ],
        "title": "CustomerSubscription"
      },
      "CustomerSubscriptionCancel": {
        "properties": {
          "cancel_at_period_end": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cancel At Period End",
            "description": "Cancel an active subscription once the current period ends.\n\nOr uncancel a subscription currently set to be revoked at period end."
          },
          "cancellation_reason": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CustomerCancellationReason"
              },
              {
                "type": "null"
              }
            ],
            "description": "Customers reason for cancellation.\n\n* `too_expensive`: Too expensive for the customer.\n* `missing_features`: Customer is missing certain features.\n* `switched_service`: Customer switched to another service.\n* `unused`: Customer is not using it enough.\n* `customer_service`: Customer is not satisfied with the customer service.\n* `low_quality`: Customer is unhappy with the quality.\n* `too_complex`: Customer considers the service too complicated.\n* `other`: Other reason(s)."
          },
          "cancellation_comment": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cancellation Comment",
            "description": "Customer feedback and why they decided to cancel."
          }
        },
        "type": "object",
        "title": "CustomerSubscriptionCancel"
      },
      "CustomerSubscriptionMeter": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "consumed_units": {
            "type": "number",
            "title": "Consumed Units",
            "description": "The number of consumed units so far in this billing period.",
            "examples": [
              25
            ]
          },
          "credited_units": {
            "type": "integer",
            "title": "Credited Units",
            "description": "The number of credited units so far in this billing period.",
            "examples": [
              100
            ]
          },
          "amount": {
            "type": "integer",
            "title": "Amount",
            "description": "The amount due in cents so far in this billing period.",
            "examples": [
              0
            ]
          },
          "meter_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Meter Id",
            "description": "The ID of the meter.",
            "examples": [
              "d498a884-e2cd-4d3e-8002-f536468a8b22"
            ]
          },
          "meter": {
            "$ref": "#/components/schemas/CustomerSubscriptionMeterMeter"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "consumed_units",
          "credited_units",
          "amount",
          "meter_id",
          "meter"
        ],
        "title": "CustomerSubscriptionMeter"
      },
      "CustomerSubscriptionMeterMeter": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the meter. Will be shown on customer's invoices and usage."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "name"
        ],
        "title": "CustomerSubscriptionMeterMeter"
      },
      "CustomerSubscriptionProduct": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the product."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the product."
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the product."
          },
          "recurring_interval": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SubscriptionRecurringInterval"
              },
              {
                "type": "null"
              }
            ],
            "description": "The recurring interval of the product. If `None`, the product is a one-time purchase."
          },
          "is_recurring": {
            "type": "boolean",
            "title": "Is Recurring",
            "description": "Whether the product is a subscription."
          },
          "is_archived": {
            "type": "boolean",
            "title": "Is Archived",
            "description": "Whether the product is archived and no longer available."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the product."
          },
          "prices": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/LegacyRecurringProductPrice"
                },
                {
                  "$ref": "#/components/schemas/ProductPrice"
                }
              ]
            },
            "type": "array",
            "title": "Prices",
            "description": "List of prices for this product."
          },
          "benefits": {
            "items": {
              "$ref": "#/components/schemas/BenefitPublic"
            },
            "type": "array",
            "title": "BenefitPublic",
            "description": "List of benefits granted by the product."
          },
          "medias": {
            "items": {
              "$ref": "#/components/schemas/ProductMediaFileRead"
            },
            "type": "array",
            "title": "Medias",
            "description": "List of medias associated to the product."
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "name",
          "description",
          "recurring_interval",
          "is_recurring",
          "is_archived",
          "organization_id",
          "prices",
          "benefits",
          "medias",
          "organization"
        ],
        "title": "CustomerSubscriptionProduct"
      },
      "CustomerSubscriptionSortProperty": {
        "type": "string",
        "enum": [
          "started_at",
          "-started_at",
          "amount",
          "-amount",
          "status",
          "-status",
          "organization",
          "-organization",
          "product",
          "-product"
        ],
        "title": "CustomerSubscriptionSortProperty"
      },
      "CustomerSubscriptionUpdate": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/CustomerSubscriptionUpdateProduct"
          },
          {
            "$ref": "#/components/schemas/CustomerSubscriptionCancel"
          }
        ]
      },
      "CustomerSubscriptionUpdateProduct": {
        "properties": {
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id",
            "description": "Update subscription to another product."
          }
        },
        "type": "object",
        "required": [
          "product_id"
        ],
        "title": "CustomerSubscriptionUpdateProduct"
      },
      "CustomerUpdate": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email",
            "description": "The email address of the customer. This must be unique within the organization.",
            "examples": [
              "customer@example.com"
            ]
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "The name of the customer.",
            "examples": [
              "John Doe"
            ]
          },
          "billing_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address"
              },
              {
                "type": "null"
              }
            ]
          },
          "tax_id": {
            "anyOf": [
              {
                "prefixItems": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/components/schemas/TaxIDFormat"
                  }
                ],
                "type": "array",
                "maxItems": 2,
                "minItems": 2,
                "examples": [
                  [
                    "911144442",
                    "us_ein"
                  ],
                  [
                    "FR61954506077",
                    "eu_vat"
                  ]
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Id"
          },
          "external_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "External Id",
            "description": "The ID of the customer in your system. This must be unique within the organization. Once set, it can't be updated.",
            "examples": [
              "usr_1337"
            ]
          }
        },
        "type": "object",
        "title": "CustomerUpdate"
      },
      "CustomerUpdateExternalID": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email",
            "description": "The email address of the customer. This must be unique within the organization.",
            "examples": [
              "customer@example.com"
            ]
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "The name of the customer.",
            "examples": [
              "John Doe"
            ]
          },
          "billing_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address"
              },
              {
                "type": "null"
              }
            ]
          },
          "tax_id": {
            "anyOf": [
              {
                "prefixItems": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/components/schemas/TaxIDFormat"
                  }
                ],
                "type": "array",
                "maxItems": 2,
                "minItems": 2,
                "examples": [
                  [
                    "911144442",
                    "us_ein"
                  ],
                  [
                    "FR61954506077",
                    "eu_vat"
                  ]
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Id"
          }
        },
        "type": "object",
        "title": "CustomerUpdateExternalID"
      },
      "Discount": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/DiscountFixedOnceForeverDuration"
          },
          {
            "$ref": "#/components/schemas/DiscountFixedRepeatDuration"
          },
          {
            "$ref": "#/components/schemas/DiscountPercentageOnceForeverDuration"
          },
          {
            "$ref": "#/components/schemas/DiscountPercentageRepeatDuration"
          }
        ]
      },
      "DiscountCreate": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/DiscountFixedOnceForeverDurationCreate"
          },
          {
            "$ref": "#/components/schemas/DiscountFixedRepeatDurationCreate"
          },
          {
            "$ref": "#/components/schemas/DiscountPercentageOnceForeverDurationCreate"
          },
          {
            "$ref": "#/components/schemas/DiscountPercentageRepeatDurationCreate"
          }
        ]
      },
      "DiscountDuration": {
        "type": "string",
        "enum": [
          "once",
          "forever",
          "repeating"
        ],
        "title": "DiscountDuration"
      },
      "DiscountFixedOnceForeverDuration": {
        "properties": {
          "duration": {
            "$ref": "#/components/schemas/DiscountDuration"
          },
          "type": {
            "$ref": "#/components/schemas/DiscountType"
          },
          "amount": {
            "type": "integer",
            "title": "Amount"
          },
          "currency": {
            "type": "string",
            "title": "Currency"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the discount. Will be displayed to the customer when the discount is applied."
          },
          "code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Code",
            "description": "Code customers can use to apply the discount during checkout."
          },
          "starts_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Starts At",
            "description": "Timestamp after which the discount is redeemable."
          },
          "ends_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ends At",
            "description": "Timestamp after which the discount is no longer redeemable."
          },
          "max_redemptions": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Redemptions",
            "description": "Maximum number of times the discount can be redeemed."
          },
          "redemptions_count": {
            "type": "integer",
            "title": "Redemptions Count",
            "description": "Number of times the discount has been redeemed."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The organization ID.",
            "examples": [
              "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
            ],
            "x-polar-selector-widget": {
              "displayProperty": "name",
              "resourceName": "Organization",
              "resourceRoot": "/v1/organizations"
            }
          },
          "products": {
            "items": {
              "$ref": "#/components/schemas/DiscountProduct"
            },
            "type": "array",
            "title": "Products"
          }
        },
        "type": "object",
        "required": [
          "duration",
          "type",
          "amount",
          "currency",
          "created_at",
          "modified_at",
          "id",
          "metadata",
          "name",
          "code",
          "starts_at",
          "ends_at",
          "max_redemptions",
          "redemptions_count",
          "organization_id",
          "products"
        ],
        "title": "DiscountFixedOnceForeverDuration",
        "description": "Schema for a fixed amount discount that is applied once or forever."
      },
      "DiscountFixedOnceForeverDurationBase": {
        "properties": {
          "duration": {
            "$ref": "#/components/schemas/DiscountDuration"
          },
          "type": {
            "$ref": "#/components/schemas/DiscountType"
          },
          "amount": {
            "type": "integer",
            "title": "Amount"
          },
          "currency": {
            "type": "string",
            "title": "Currency"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the discount. Will be displayed to the customer when the discount is applied."
          },
          "code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Code",
            "description": "Code customers can use to apply the discount during checkout."
          },
          "starts_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Starts At",
            "description": "Timestamp after which the discount is redeemable."
          },
          "ends_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ends At",
            "description": "Timestamp after which the discount is no longer redeemable."
          },
          "max_redemptions": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Redemptions",
            "description": "Maximum number of times the discount can be redeemed."
          },
          "redemptions_count": {
            "type": "integer",
            "title": "Redemptions Count",
            "description": "Number of times the discount has been redeemed."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The organization ID.",
            "examples": [
              "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
            ],
            "x-polar-selector-widget": {
              "displayProperty": "name",
              "resourceName": "Organization",
              "resourceRoot": "/v1/organizations"
            }
          }
        },
        "type": "object",
        "required": [
          "duration",
          "type",
          "amount",
          "currency",
          "created_at",
          "modified_at",
          "id",
          "metadata",
          "name",
          "code",
          "starts_at",
          "ends_at",
          "max_redemptions",
          "redemptions_count",
          "organization_id"
        ],
        "title": "DiscountFixedOnceForeverDurationBase"
      },
      "DiscountFixedOnceForeverDurationCreate": {
        "properties": {
          "duration": {
            "$ref": "#/components/schemas/DiscountDuration"
          },
          "type": {
            "$ref": "#/components/schemas/DiscountType",
            "description": "Type of the discount."
          },
          "amount": {
            "type": "integer",
            "minimum": 0,
            "title": "Amount",
            "description": "Fixed amount to discount from the invoice total."
          },
          "currency": {
            "type": "string",
            "pattern": "usd",
            "title": "Currency",
            "description": "The currency. Currently, only `usd` is supported.",
            "default": "usd"
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "title": "Name",
            "description": "Name of the discount. Will be displayed to the customer when the discount is applied."
          },
          "code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Code",
            "description": "Code customers can use to apply the discount during checkout. Must be between 3 and 256 characters long and contain only alphanumeric characters.If not provided, the discount can only be applied via the API."
          },
          "starts_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Starts At",
            "description": "Optional timestamp after which the discount is redeemable."
          },
          "ends_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ends At",
            "description": "Optional timestamp after which the discount is no longer redeemable."
          },
          "max_redemptions": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Redemptions",
            "description": "Optional maximum number of times the discount can be redeemed."
          },
          "products": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "format": "uuid4"
                },
                "type": "array",
                "description": "List of product IDs the discount can be applied to."
              },
              {
                "type": "null"
              }
            ],
            "title": "Products"
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "examples": [
                  "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                ],
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the discount. **Required unless you use an organization token.**"
          }
        },
        "type": "object",
        "required": [
          "duration",
          "type",
          "amount",
          "name"
        ],
        "title": "DiscountFixedOnceForeverDurationCreate",
        "description": "Schema to create a fixed amount discount that is applied once or forever."
      },
      "DiscountFixedRepeatDuration": {
        "properties": {
          "duration": {
            "$ref": "#/components/schemas/DiscountDuration"
          },
          "duration_in_months": {
            "type": "integer",
            "title": "Duration In Months"
          },
          "type": {
            "$ref": "#/components/schemas/DiscountType"
          },
          "amount": {
            "type": "integer",
            "title": "Amount"
          },
          "currency": {
            "type": "string",
            "title": "Currency"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the discount. Will be displayed to the customer when the discount is applied."
          },
          "code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Code",
            "description": "Code customers can use to apply the discount during checkout."
          },
          "starts_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Starts At",
            "description": "Timestamp after which the discount is redeemable."
          },
          "ends_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ends At",
            "description": "Timestamp after which the discount is no longer redeemable."
          },
          "max_redemptions": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Redemptions",
            "description": "Maximum number of times the discount can be redeemed."
          },
          "redemptions_count": {
            "type": "integer",
            "title": "Redemptions Count",
            "description": "Number of times the discount has been redeemed."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The organization ID.",
            "examples": [
              "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
            ],
            "x-polar-selector-widget": {
              "displayProperty": "name",
              "resourceName": "Organization",
              "resourceRoot": "/v1/organizations"
            }
          },
          "products": {
            "items": {
              "$ref": "#/components/schemas/DiscountProduct"
            },
            "type": "array",
            "title": "Products"
          }
        },
        "type": "object",
        "required": [
          "duration",
          "duration_in_months",
          "type",
          "amount",
          "currency",
          "created_at",
          "modified_at",
          "id",
          "metadata",
          "name",
          "code",
          "starts_at",
          "ends_at",
          "max_redemptions",
          "redemptions_count",
          "organization_id",
          "products"
        ],
        "title": "DiscountFixedRepeatDuration",
        "description": "Schema for a fixed amount discount that is applied on every invoice\nfor a certain number of months."
      },
      "DiscountFixedRepeatDurationBase": {
        "properties": {
          "duration": {
            "$ref": "#/components/schemas/DiscountDuration"
          },
          "duration_in_months": {
            "type": "integer",
            "title": "Duration In Months"
          },
          "type": {
            "$ref": "#/components/schemas/DiscountType"
          },
          "amount": {
            "type": "integer",
            "title": "Amount"
          },
          "currency": {
            "type": "string",
            "title": "Currency"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the discount. Will be displayed to the customer when the discount is applied."
          },
          "code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Code",
            "description": "Code customers can use to apply the discount during checkout."
          },
          "starts_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Starts At",
            "description": "Timestamp after which the discount is redeemable."
          },
          "ends_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ends At",
            "description": "Timestamp after which the discount is no longer redeemable."
          },
          "max_redemptions": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Redemptions",
            "description": "Maximum number of times the discount can be redeemed."
          },
          "redemptions_count": {
            "type": "integer",
            "title": "Redemptions Count",
            "description": "Number of times the discount has been redeemed."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The organization ID.",
            "examples": [
              "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
            ],
            "x-polar-selector-widget": {
              "displayProperty": "name",
              "resourceName": "Organization",
              "resourceRoot": "/v1/organizations"
            }
          }
        },
        "type": "object",
        "required": [
          "duration",
          "duration_in_months",
          "type",
          "amount",
          "currency",
          "created_at",
          "modified_at",
          "id",
          "metadata",
          "name",
          "code",
          "starts_at",
          "ends_at",
          "max_redemptions",
          "redemptions_count",
          "organization_id"
        ],
        "title": "DiscountFixedRepeatDurationBase"
      },
      "DiscountFixedRepeatDurationCreate": {
        "properties": {
          "duration": {
            "$ref": "#/components/schemas/DiscountDuration"
          },
          "duration_in_months": {
            "type": "integer",
            "minimum": 1,
            "title": "Duration In Months",
            "description": "Number of months the discount should be applied.\n\nFor this to work on yearly pricing, you should multiply this by 12.\nFor example, to apply the discount for 2 years, set this to 24."
          },
          "type": {
            "$ref": "#/components/schemas/DiscountType",
            "description": "Type of the discount."
          },
          "amount": {
            "type": "integer",
            "minimum": 0,
            "title": "Amount",
            "description": "Fixed amount to discount from the invoice total."
          },
          "currency": {
            "type": "string",
            "pattern": "usd",
            "title": "Currency",
            "description": "The currency. Currently, only `usd` is supported.",
            "default": "usd"
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "title": "Name",
            "description": "Name of the discount. Will be displayed to the customer when the discount is applied."
          },
          "code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Code",
            "description": "Code customers can use to apply the discount during checkout. Must be between 3 and 256 characters long and contain only alphanumeric characters.If not provided, the discount can only be applied via the API."
          },
          "starts_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Starts At",
            "description": "Optional timestamp after which the discount is redeemable."
          },
          "ends_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ends At",
            "description": "Optional timestamp after which the discount is no longer redeemable."
          },
          "max_redemptions": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Redemptions",
            "description": "Optional maximum number of times the discount can be redeemed."
          },
          "products": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "format": "uuid4"
                },
                "type": "array",
                "description": "List of product IDs the discount can be applied to."
              },
              {
                "type": "null"
              }
            ],
            "title": "Products"
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "examples": [
                  "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                ],
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the discount. **Required unless you use an organization token.**"
          }
        },
        "type": "object",
        "required": [
          "duration",
          "duration_in_months",
          "type",
          "amount",
          "name"
        ],
        "title": "DiscountFixedRepeatDurationCreate",
        "description": "Schema to create a fixed amount discount that is applied on every invoice\nfor a certain number of months."
      },
      "DiscountPercentageOnceForeverDuration": {
        "properties": {
          "duration": {
            "$ref": "#/components/schemas/DiscountDuration"
          },
          "type": {
            "$ref": "#/components/schemas/DiscountType"
          },
          "basis_points": {
            "type": "integer",
            "title": "Basis Points"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the discount. Will be displayed to the customer when the discount is applied."
          },
          "code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Code",
            "description": "Code customers can use to apply the discount during checkout."
          },
          "starts_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Starts At",
            "description": "Timestamp after which the discount is redeemable."
          },
          "ends_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ends At",
            "description": "Timestamp after which the discount is no longer redeemable."
          },
          "max_redemptions": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Redemptions",
            "description": "Maximum number of times the discount can be redeemed."
          },
          "redemptions_count": {
            "type": "integer",
            "title": "Redemptions Count",
            "description": "Number of times the discount has been redeemed."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The organization ID.",
            "examples": [
              "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
            ],
            "x-polar-selector-widget": {
              "displayProperty": "name",
              "resourceName": "Organization",
              "resourceRoot": "/v1/organizations"
            }
          },
          "products": {
            "items": {
              "$ref": "#/components/schemas/DiscountProduct"
            },
            "type": "array",
            "title": "Products"
          }
        },
        "type": "object",
        "required": [
          "duration",
          "type",
          "basis_points",
          "created_at",
          "modified_at",
          "id",
          "metadata",
          "name",
          "code",
          "starts_at",
          "ends_at",
          "max_redemptions",
          "redemptions_count",
          "organization_id",
          "products"
        ],
        "title": "DiscountPercentageOnceForeverDuration",
        "description": "Schema for a percentage discount that is applied once or forever."
      },
      "DiscountPercentageOnceForeverDurationBase": {
        "properties": {
          "duration": {
            "$ref": "#/components/schemas/DiscountDuration"
          },
          "type": {
            "$ref": "#/components/schemas/DiscountType"
          },
          "basis_points": {
            "type": "integer",
            "title": "Basis Points"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the discount. Will be displayed to the customer when the discount is applied."
          },
          "code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Code",
            "description": "Code customers can use to apply the discount during checkout."
          },
          "starts_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Starts At",
            "description": "Timestamp after which the discount is redeemable."
          },
          "ends_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ends At",
            "description": "Timestamp after which the discount is no longer redeemable."
          },
          "max_redemptions": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Redemptions",
            "description": "Maximum number of times the discount can be redeemed."
          },
          "redemptions_count": {
            "type": "integer",
            "title": "Redemptions Count",
            "description": "Number of times the discount has been redeemed."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The organization ID.",
            "examples": [
              "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
            ],
            "x-polar-selector-widget": {
              "displayProperty": "name",
              "resourceName": "Organization",
              "resourceRoot": "/v1/organizations"
            }
          }
        },
        "type": "object",
        "required": [
          "duration",
          "type",
          "basis_points",
          "created_at",
          "modified_at",
          "id",
          "metadata",
          "name",
          "code",
          "starts_at",
          "ends_at",
          "max_redemptions",
          "redemptions_count",
          "organization_id"
        ],
        "title": "DiscountPercentageOnceForeverDurationBase"
      },
      "DiscountPercentageOnceForeverDurationCreate": {
        "properties": {
          "duration": {
            "$ref": "#/components/schemas/DiscountDuration"
          },
          "type": {
            "$ref": "#/components/schemas/DiscountType",
            "description": "Type of the discount."
          },
          "basis_points": {
            "type": "integer",
            "maximum": 10000,
            "minimum": 1,
            "title": "Basis Points",
            "description": "Discount percentage in basis points.\n\nA basis point is 1/100th of a percent.\nFor example, to create a 25.5% discount, set this to 2550."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "title": "Name",
            "description": "Name of the discount. Will be displayed to the customer when the discount is applied."
          },
          "code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Code",
            "description": "Code customers can use to apply the discount during checkout. Must be between 3 and 256 characters long and contain only alphanumeric characters.If not provided, the discount can only be applied via the API."
          },
          "starts_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Starts At",
            "description": "Optional timestamp after which the discount is redeemable."
          },
          "ends_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ends At",
            "description": "Optional timestamp after which the discount is no longer redeemable."
          },
          "max_redemptions": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Redemptions",
            "description": "Optional maximum number of times the discount can be redeemed."
          },
          "products": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "format": "uuid4"
                },
                "type": "array",
                "description": "List of product IDs the discount can be applied to."
              },
              {
                "type": "null"
              }
            ],
            "title": "Products"
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "examples": [
                  "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                ],
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the discount. **Required unless you use an organization token.**"
          }
        },
        "type": "object",
        "required": [
          "duration",
          "type",
          "basis_points",
          "name"
        ],
        "title": "DiscountPercentageOnceForeverDurationCreate",
        "description": "Schema to create a percentage discount that is applied once or forever."
      },
      "DiscountPercentageRepeatDuration": {
        "properties": {
          "duration": {
            "$ref": "#/components/schemas/DiscountDuration"
          },
          "duration_in_months": {
            "type": "integer",
            "title": "Duration In Months"
          },
          "type": {
            "$ref": "#/components/schemas/DiscountType"
          },
          "basis_points": {
            "type": "integer",
            "title": "Basis Points"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the discount. Will be displayed to the customer when the discount is applied."
          },
          "code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Code",
            "description": "Code customers can use to apply the discount during checkout."
          },
          "starts_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Starts At",
            "description": "Timestamp after which the discount is redeemable."
          },
          "ends_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ends At",
            "description": "Timestamp after which the discount is no longer redeemable."
          },
          "max_redemptions": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Redemptions",
            "description": "Maximum number of times the discount can be redeemed."
          },
          "redemptions_count": {
            "type": "integer",
            "title": "Redemptions Count",
            "description": "Number of times the discount has been redeemed."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The organization ID.",
            "examples": [
              "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
            ],
            "x-polar-selector-widget": {
              "displayProperty": "name",
              "resourceName": "Organization",
              "resourceRoot": "/v1/organizations"
            }
          },
          "products": {
            "items": {
              "$ref": "#/components/schemas/DiscountProduct"
            },
            "type": "array",
            "title": "Products"
          }
        },
        "type": "object",
        "required": [
          "duration",
          "duration_in_months",
          "type",
          "basis_points",
          "created_at",
          "modified_at",
          "id",
          "metadata",
          "name",
          "code",
          "starts_at",
          "ends_at",
          "max_redemptions",
          "redemptions_count",
          "organization_id",
          "products"
        ],
        "title": "DiscountPercentageRepeatDuration",
        "description": "Schema for a percentage discount that is applied on every invoice\nfor a certain number of months."
      },
      "DiscountPercentageRepeatDurationBase": {
        "properties": {
          "duration": {
            "$ref": "#/components/schemas/DiscountDuration"
          },
          "duration_in_months": {
            "type": "integer",
            "title": "Duration In Months"
          },
          "type": {
            "$ref": "#/components/schemas/DiscountType"
          },
          "basis_points": {
            "type": "integer",
            "title": "Basis Points"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the discount. Will be displayed to the customer when the discount is applied."
          },
          "code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Code",
            "description": "Code customers can use to apply the discount during checkout."
          },
          "starts_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Starts At",
            "description": "Timestamp after which the discount is redeemable."
          },
          "ends_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ends At",
            "description": "Timestamp after which the discount is no longer redeemable."
          },
          "max_redemptions": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Redemptions",
            "description": "Maximum number of times the discount can be redeemed."
          },
          "redemptions_count": {
            "type": "integer",
            "title": "Redemptions Count",
            "description": "Number of times the discount has been redeemed."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The organization ID.",
            "examples": [
              "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
            ],
            "x-polar-selector-widget": {
              "displayProperty": "name",
              "resourceName": "Organization",
              "resourceRoot": "/v1/organizations"
            }
          }
        },
        "type": "object",
        "required": [
          "duration",
          "duration_in_months",
          "type",
          "basis_points",
          "created_at",
          "modified_at",
          "id",
          "metadata",
          "name",
          "code",
          "starts_at",
          "ends_at",
          "max_redemptions",
          "redemptions_count",
          "organization_id"
        ],
        "title": "DiscountPercentageRepeatDurationBase"
      },
      "DiscountPercentageRepeatDurationCreate": {
        "properties": {
          "duration": {
            "$ref": "#/components/schemas/DiscountDuration"
          },
          "duration_in_months": {
            "type": "integer",
            "minimum": 1,
            "title": "Duration In Months",
            "description": "Number of months the discount should be applied.\n\nFor this to work on yearly pricing, you should multiply this by 12.\nFor example, to apply the discount for 2 years, set this to 24."
          },
          "type": {
            "$ref": "#/components/schemas/DiscountType",
            "description": "Type of the discount."
          },
          "basis_points": {
            "type": "integer",
            "maximum": 10000,
            "minimum": 1,
            "title": "Basis Points",
            "description": "Discount percentage in basis points.\n\nA basis point is 1/100th of a percent.\nFor example, to create a 25.5% discount, set this to 2550."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "title": "Name",
            "description": "Name of the discount. Will be displayed to the customer when the discount is applied."
          },
          "code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Code",
            "description": "Code customers can use to apply the discount during checkout. Must be between 3 and 256 characters long and contain only alphanumeric characters.If not provided, the discount can only be applied via the API."
          },
          "starts_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Starts At",
            "description": "Optional timestamp after which the discount is redeemable."
          },
          "ends_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ends At",
            "description": "Optional timestamp after which the discount is no longer redeemable."
          },
          "max_redemptions": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Redemptions",
            "description": "Optional maximum number of times the discount can be redeemed."
          },
          "products": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "format": "uuid4"
                },
                "type": "array",
                "description": "List of product IDs the discount can be applied to."
              },
              {
                "type": "null"
              }
            ],
            "title": "Products"
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "examples": [
                  "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                ],
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the discount. **Required unless you use an organization token.**"
          }
        },
        "type": "object",
        "required": [
          "duration",
          "duration_in_months",
          "type",
          "basis_points",
          "name"
        ],
        "title": "DiscountPercentageRepeatDurationCreate",
        "description": "Schema to create a percentage discount that is applied on every invoice\nfor a certain number of months."
      },
      "DiscountProduct": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the product."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the product."
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the product."
          },
          "recurring_interval": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SubscriptionRecurringInterval"
              },
              {
                "type": "null"
              }
            ],
            "description": "The recurring interval of the product. If `None`, the product is a one-time purchase."
          },
          "is_recurring": {
            "type": "boolean",
            "title": "Is Recurring",
            "description": "Whether the product is a subscription."
          },
          "is_archived": {
            "type": "boolean",
            "title": "Is Archived",
            "description": "Whether the product is archived and no longer available."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the product."
          }
        },
        "type": "object",
        "required": [
          "metadata",
          "created_at",
          "modified_at",
          "id",
          "name",
          "description",
          "recurring_interval",
          "is_recurring",
          "is_archived",
          "organization_id"
        ],
        "title": "DiscountProduct",
        "description": "A product that a discount can be applied to."
      },
      "DiscountSortProperty": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "name",
          "-name",
          "code",
          "-code",
          "redemptions_count",
          "-redemptions_count"
        ],
        "title": "DiscountSortProperty"
      },
      "DiscountType": {
        "type": "string",
        "enum": [
          "fixed",
          "percentage"
        ],
        "title": "DiscountType"
      },
      "DiscountUpdate": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "name": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 1,
                "description": "Name of the discount. Will be displayed to the customer when the discount is applied."
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "code": {
            "anyOf": [
              {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Code customers can use to apply the discount during checkout. Must be between 3 and 256 characters long and contain only alphanumeric characters.If not provided, the discount can only be applied via the API."
              },
              {
                "type": "null"
              }
            ],
            "title": "Code"
          },
          "starts_at": {
            "anyOf": [
              {
                "anyOf": [
                  {
                    "type": "string",
                    "format": "date-time"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Optional timestamp after which the discount is redeemable."
              },
              {
                "type": "null"
              }
            ],
            "title": "Starts At"
          },
          "ends_at": {
            "anyOf": [
              {
                "anyOf": [
                  {
                    "type": "string",
                    "format": "date-time"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Optional timestamp after which the discount is no longer redeemable."
              },
              {
                "type": "null"
              }
            ],
            "title": "Ends At"
          },
          "max_redemptions": {
            "anyOf": [
              {
                "anyOf": [
                  {
                    "type": "integer",
                    "minimum": 1
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Optional maximum number of times the discount can be redeemed."
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Redemptions"
          },
          "duration": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DiscountDuration"
              },
              {
                "type": "null"
              }
            ]
          },
          "duration_in_months": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1,
                "description": "Number of months the discount should be applied.\n\nFor this to work on yearly pricing, you should multiply this by 12.\nFor example, to apply the discount for 2 years, set this to 24."
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration In Months"
          },
          "type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DiscountType"
              },
              {
                "type": "null"
              }
            ]
          },
          "amount": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0,
                "description": "Fixed amount to discount from the invoice total."
              },
              {
                "type": "null"
              }
            ],
            "title": "Amount"
          },
          "currency": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "usd",
                "description": "The currency. Currently, only `usd` is supported.",
                "default": "usd"
              },
              {
                "type": "null"
              }
            ],
            "title": "Currency"
          },
          "basis_points": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 10000,
                "minimum": 1,
                "description": "Discount percentage in basis points.\n\nA basis point is 1/100th of a percent.\nFor example, to create a 25.5% discount, set this to 2550."
              },
              {
                "type": "null"
              }
            ],
            "title": "Basis Points"
          },
          "products": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "format": "uuid4"
                },
                "type": "array",
                "description": "List of product IDs the discount can be applied to."
              },
              {
                "type": "null"
              }
            ],
            "title": "Products"
          }
        },
        "type": "object",
        "title": "DiscountUpdate",
        "description": "Schema to update a discount."
      },
      "DownloadableFileCreate": {
        "properties": {
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "examples": [
                  "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                ],
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "mime_type": {
            "type": "string",
            "title": "Mime Type"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "checksum_sha256_base64": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Base64"
          },
          "upload": {
            "$ref": "#/components/schemas/S3FileCreateMultipart"
          },
          "service": {
            "type": "string",
            "const": "downloadable",
            "title": "Service"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version"
          }
        },
        "type": "object",
        "required": [
          "name",
          "mime_type",
          "size",
          "upload",
          "service"
        ],
        "title": "DownloadableFileCreate",
        "description": "Schema to create a file to be associated with the downloadables benefit."
      },
      "DownloadableFileRead": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "path": {
            "type": "string",
            "title": "Path"
          },
          "mime_type": {
            "type": "string",
            "title": "Mime Type"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "storage_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Storage Version"
          },
          "checksum_etag": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Etag"
          },
          "checksum_sha256_base64": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Base64"
          },
          "checksum_sha256_hex": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Hex"
          },
          "last_modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Modified At"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version"
          },
          "service": {
            "type": "string",
            "const": "downloadable",
            "title": "Service"
          },
          "is_uploaded": {
            "type": "boolean",
            "title": "Is Uploaded"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "size_readable": {
            "type": "string",
            "title": "Size Readable"
          }
        },
        "type": "object",
        "required": [
          "id",
          "organization_id",
          "name",
          "path",
          "mime_type",
          "size",
          "storage_version",
          "checksum_etag",
          "checksum_sha256_base64",
          "checksum_sha256_hex",
          "last_modified_at",
          "version",
          "service",
          "is_uploaded",
          "created_at",
          "size_readable"
        ],
        "title": "DownloadableFileRead",
        "description": "File to be associated with the downloadables benefit."
      },
      "DownloadableRead": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "benefit_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Benefit Id"
          },
          "file": {
            "$ref": "#/components/schemas/FileDownload"
          }
        },
        "type": "object",
        "required": [
          "id",
          "benefit_id",
          "file"
        ],
        "title": "DownloadableRead"
      },
      "Event": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SystemEvent"
          },
          {
            "$ref": "#/components/schemas/UserEvent"
          }
        ]
      },
      "EventCreateCustomer": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp",
            "description": "The timestamp of the event."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the event."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "examples": [
                  "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                ],
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the event. **Required unless you use an organization token.**"
          },
          "customer_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Customer Id",
            "description": "ID of the customer in your Polar organization associated with the event."
          }
        },
        "type": "object",
        "required": [
          "name",
          "customer_id"
        ],
        "title": "EventCreateCustomer"
      },
      "EventCreateExternalCustomer": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp",
            "description": "The timestamp of the event."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the event."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "examples": [
                  "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                ],
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the event. **Required unless you use an organization token.**"
          },
          "external_customer_id": {
            "type": "string",
            "title": "External Customer Id",
            "description": "ID of the customer in your system associated with the event."
          }
        },
        "type": "object",
        "required": [
          "name",
          "external_customer_id"
        ],
        "title": "EventCreateExternalCustomer"
      },
      "EventName": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the event."
          },
          "source": {
            "$ref": "#/components/schemas/EventSource",
            "description": "The source of the event. `system` events are created by Polar. `user` events are the one you create through our ingestion API."
          },
          "occurrences": {
            "type": "integer",
            "title": "Occurrences",
            "description": "Number of times the event has occurred."
          },
          "first_seen": {
            "type": "string",
            "format": "date-time",
            "title": "First Seen",
            "description": "The first time the event occurred."
          },
          "last_seen": {
            "type": "string",
            "format": "date-time",
            "title": "Last Seen",
            "description": "The last time the event occurred."
          }
        },
        "type": "object",
        "required": [
          "name",
          "source",
          "occurrences",
          "first_seen",
          "last_seen"
        ],
        "title": "EventName"
      },
      "EventNamesSortProperty": {
        "type": "string",
        "enum": [
          "name",
          "-name",
          "occurrences",
          "-occurrences",
          "first_seen",
          "-first_seen",
          "last_seen",
          "-last_seen"
        ],
        "title": "EventNamesSortProperty"
      },
      "EventSortProperty": {
        "type": "string",
        "enum": [
          "timestamp",
          "-timestamp"
        ],
        "title": "EventSortProperty"
      },
      "EventSource": {
        "type": "string",
        "enum": [
          "system",
          "user"
        ],
        "title": "EventSource"
      },
      "EventsIngest": {
        "properties": {
          "events": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/EventCreateCustomer"
                },
                {
                  "$ref": "#/components/schemas/EventCreateExternalCustomer"
                }
              ]
            },
            "type": "array",
            "title": "Events",
            "description": "List of events to ingest."
          }
        },
        "type": "object",
        "required": [
          "events"
        ],
        "title": "EventsIngest"
      },
      "EventsIngestResponse": {
        "properties": {
          "inserted": {
            "type": "integer",
            "title": "Inserted",
            "description": "Number of events inserted."
          }
        },
        "type": "object",
        "required": [
          "inserted"
        ],
        "title": "EventsIngestResponse"
      },
      "ExistingProductPrice": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          }
        },
        "type": "object",
        "required": [
          "id"
        ],
        "title": "ExistingProductPrice",
        "description": "A price that already exists for this product.\n\nUseful when updating a product if you want to keep an existing price."
      },
      "ExpiredCheckoutError": {
        "properties": {
          "error": {
            "type": "string",
            "const": "ExpiredCheckoutError",
            "title": "Error",
            "examples": [
              "ExpiredCheckoutError"
            ]
          },
          "detail": {
            "type": "string",
            "title": "Detail"
          }
        },
        "type": "object",
        "required": [
          "error",
          "detail"
        ],
        "title": "ExpiredCheckoutError"
      },
      "FileCreate": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/DownloadableFileCreate"
          },
          {
            "$ref": "#/components/schemas/ProductMediaFileCreate"
          },
          {
            "$ref": "#/components/schemas/OrganizationAvatarFileCreate"
          }
        ],
        "discriminator": {
          "propertyName": "service",
          "mapping": {
            "downloadable": "#/components/schemas/DownloadableFileCreate",
            "organization_avatar": "#/components/schemas/OrganizationAvatarFileCreate",
            "product_media": "#/components/schemas/ProductMediaFileCreate"
          }
        }
      },
      "FileDownload": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "path": {
            "type": "string",
            "title": "Path"
          },
          "mime_type": {
            "type": "string",
            "title": "Mime Type"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "storage_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Storage Version"
          },
          "checksum_etag": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Etag"
          },
          "checksum_sha256_base64": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Base64"
          },
          "checksum_sha256_hex": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Hex"
          },
          "last_modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Modified At"
          },
          "download": {
            "$ref": "#/components/schemas/S3DownloadURL"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version"
          },
          "is_uploaded": {
            "type": "boolean",
            "title": "Is Uploaded"
          },
          "service": {
            "$ref": "#/components/schemas/FileServiceTypes"
          },
          "size_readable": {
            "type": "string",
            "title": "Size Readable"
          }
        },
        "type": "object",
        "required": [
          "id",
          "organization_id",
          "name",
          "path",
          "mime_type",
          "size",
          "storage_version",
          "checksum_etag",
          "checksum_sha256_base64",
          "checksum_sha256_hex",
          "last_modified_at",
          "download",
          "version",
          "is_uploaded",
          "service",
          "size_readable"
        ],
        "title": "FileDownload"
      },
      "FilePatch": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version"
          }
        },
        "type": "object",
        "title": "FilePatch"
      },
      "FileServiceTypes": {
        "type": "string",
        "enum": [
          "downloadable",
          "product_media",
          "organization_avatar"
        ],
        "title": "FileServiceTypes"
      },
      "FileUpload": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "path": {
            "type": "string",
            "title": "Path"
          },
          "mime_type": {
            "type": "string",
            "title": "Mime Type"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "storage_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Storage Version"
          },
          "checksum_etag": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Etag"
          },
          "checksum_sha256_base64": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Base64"
          },
          "checksum_sha256_hex": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Hex"
          },
          "last_modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Modified At"
          },
          "upload": {
            "$ref": "#/components/schemas/S3FileUploadMultipart"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version"
          },
          "is_uploaded": {
            "type": "boolean",
            "title": "Is Uploaded",
            "default": false
          },
          "service": {
            "$ref": "#/components/schemas/FileServiceTypes"
          },
          "size_readable": {
            "type": "string",
            "title": "Size Readable"
          }
        },
        "type": "object",
        "required": [
          "id",
          "organization_id",
          "name",
          "path",
          "mime_type",
          "size",
          "storage_version",
          "checksum_etag",
          "checksum_sha256_base64",
          "checksum_sha256_hex",
          "last_modified_at",
          "upload",
          "version",
          "service",
          "size_readable"
        ],
        "title": "FileUpload"
      },
      "FileUploadCompleted": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "path": {
            "type": "string",
            "title": "Path"
          },
          "parts": {
            "items": {
              "$ref": "#/components/schemas/S3FileUploadCompletedPart"
            },
            "type": "array",
            "title": "Parts"
          }
        },
        "type": "object",
        "required": [
          "id",
          "path",
          "parts"
        ],
        "title": "FileUploadCompleted"
      },
      "Filter": {
        "properties": {
          "conjunction": {
            "$ref": "#/components/schemas/FilterConjunction"
          },
          "clauses": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/FilterClause"
                },
                {
                  "$ref": "#/components/schemas/Filter"
                }
              ]
            },
            "type": "array",
            "title": "Clauses"
          }
        },
        "type": "object",
        "required": [
          "conjunction",
          "clauses"
        ],
        "title": "Filter"
      },
      "FilterClause": {
        "properties": {
          "property": {
            "type": "string",
            "title": "Property"
          },
          "operator": {
            "$ref": "#/components/schemas/FilterOperator"
          },
          "value": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              },
              {
                "type": "boolean"
              }
            ],
            "title": "Value"
          }
        },
        "type": "object",
        "required": [
          "property",
          "operator",
          "value"
        ],
        "title": "FilterClause"
      },
      "FilterConjunction": {
        "type": "string",
        "enum": [
          "and",
          "or"
        ],
        "title": "FilterConjunction"
      },
      "FilterOperator": {
        "type": "string",
        "enum": [
          "eq",
          "ne",
          "gt",
          "gte",
          "lt",
          "lte",
          "like",
          "not_like"
        ],
        "title": "FilterOperator"
      },
      "GenericPayment": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "processor": {
            "$ref": "#/components/schemas/PaymentProcessor",
            "description": "The payment processor.",
            "examples": [
              "stripe"
            ]
          },
          "status": {
            "$ref": "#/components/schemas/PaymentStatus",
            "description": "The payment status.",
            "examples": [
              "succeeded"
            ]
          },
          "amount": {
            "type": "integer",
            "title": "Amount",
            "description": "The payment amount in cents.",
            "examples": [
              1000
            ]
          },
          "currency": {
            "type": "string",
            "title": "Currency",
            "description": "The payment currency. Currently, only `usd` is supported.",
            "examples": [
              "usd"
            ]
          },
          "method": {
            "type": "string",
            "title": "Method",
            "description": "The payment method used.",
            "examples": [
              "card"
            ]
          },
          "decline_reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Decline Reason",
            "description": "Error code, if the payment was declined.",
            "examples": [
              "insufficient_funds"
            ]
          },
          "decline_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Decline Message",
            "description": "Human-reasable error message, if the payment was declined.",
            "examples": [
              "Your card has insufficient funds."
            ]
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization that owns the payment.",
            "examples": [
              "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
            ]
          },
          "checkout_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checkout Id",
            "description": "The ID of the checkout session associated with this payment.",
            "examples": [
              "e4b478fa-cd25-4253-9f1f-8a41e6370ede"
            ]
          },
          "order_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id",
            "description": "The ID of the order associated with this payment.",
            "examples": [
              "e4b478fa-cd25-4253-9f1f-8a41e6370ede"
            ]
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "processor",
          "status",
          "amount",
          "currency",
          "method",
          "decline_reason",
          "decline_message",
          "organization_id",
          "checkout_id",
          "order_id"
        ],
        "title": "GenericPayment",
        "description": "Schema of a payment with a generic payment method."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "IntrospectTokenResponse": {
        "properties": {
          "active": {
            "type": "boolean",
            "title": "Active"
          },
          "client_id": {
            "type": "string",
            "title": "Client Id"
          },
          "token_type": {
            "type": "string",
            "enum": [
              "access_token",
              "refresh_token"
            ],
            "title": "Token Type"
          },
          "scope": {
            "type": "string",
            "title": "Scope"
          },
          "sub_type": {
            "$ref": "#/components/schemas/SubType"
          },
          "sub": {
            "type": "string",
            "title": "Sub"
          },
          "aud": {
            "type": "string",
            "title": "Aud"
          },
          "iss": {
            "type": "string",
            "title": "Iss"
          },
          "exp": {
            "type": "integer",
            "title": "Exp"
          },
          "iat": {
            "type": "integer",
            "title": "Iat"
          }
        },
        "type": "object",
        "required": [
          "active",
          "client_id",
          "token_type",
          "scope",
          "sub_type",
          "sub",
          "aud",
          "iss",
          "exp",
          "iat"
        ],
        "title": "IntrospectTokenResponse"
      },
      "InvoiceAlreadyExists": {
        "properties": {
          "error": {
            "type": "string",
            "const": "InvoiceAlreadyExists",
            "title": "Error",
            "examples": [
              "InvoiceAlreadyExists"
            ]
          },
          "detail": {
            "type": "string",
            "title": "Detail"
          }
        },
        "type": "object",
        "required": [
          "error",
          "detail"
        ],
        "title": "InvoiceAlreadyExists"
      },
      "LegacyRecurringProductPrice": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/LegacyRecurringProductPriceFixed"
          },
          {
            "$ref": "#/components/schemas/LegacyRecurringProductPriceCustom"
          },
          {
            "$ref": "#/components/schemas/LegacyRecurringProductPriceFree"
          }
        ],
        "discriminator": {
          "propertyName": "amount_type",
          "mapping": {
            "custom": "#/components/schemas/LegacyRecurringProductPriceCustom",
            "fixed": "#/components/schemas/LegacyRecurringProductPriceFixed",
            "free": "#/components/schemas/LegacyRecurringProductPriceFree"
          }
        }
      },
      "LegacyRecurringProductPriceCustom": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the price."
          },
          "amount_type": {
            "type": "string",
            "const": "custom",
            "title": "Amount Type"
          },
          "is_archived": {
            "type": "boolean",
            "title": "Is Archived",
            "description": "Whether the price is archived and no longer available."
          },
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id",
            "description": "The ID of the product owning the price."
          },
          "type": {
            "type": "string",
            "const": "recurring",
            "title": "Type",
            "description": "The type of the price."
          },
          "recurring_interval": {
            "$ref": "#/components/schemas/SubscriptionRecurringInterval",
            "description": "The recurring interval of the price."
          },
          "price_currency": {
            "type": "string",
            "title": "Price Currency",
            "description": "The currency."
          },
          "minimum_amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Minimum Amount",
            "description": "The minimum amount the customer can pay."
          },
          "maximum_amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Maximum Amount",
            "description": "The maximum amount the customer can pay."
          },
          "preset_amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Preset Amount",
            "description": "The initial amount shown to the customer."
          },
          "legacy": {
            "type": "boolean",
            "const": true,
            "title": "Legacy"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "amount_type",
          "is_archived",
          "product_id",
          "type",
          "recurring_interval",
          "price_currency",
          "minimum_amount",
          "maximum_amount",
          "preset_amount",
          "legacy"
        ],
        "title": "LegacyRecurringProductPriceCustom",
        "description": "A pay-what-you-want recurring price for a product, i.e. a subscription.\n\n**Deprecated**: The recurring interval should be set on the product itself."
      },
      "LegacyRecurringProductPriceFixed": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the price."
          },
          "amount_type": {
            "type": "string",
            "const": "fixed",
            "title": "Amount Type"
          },
          "is_archived": {
            "type": "boolean",
            "title": "Is Archived",
            "description": "Whether the price is archived and no longer available."
          },
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id",
            "description": "The ID of the product owning the price."
          },
          "type": {
            "type": "string",
            "const": "recurring",
            "title": "Type",
            "description": "The type of the price."
          },
          "recurring_interval": {
            "$ref": "#/components/schemas/SubscriptionRecurringInterval",
            "description": "The recurring interval of the price."
          },
          "price_currency": {
            "type": "string",
            "title": "Price Currency",
            "description": "The currency."
          },
          "price_amount": {
            "type": "integer",
            "title": "Price Amount",
            "description": "The price in cents."
          },
          "legacy": {
            "type": "boolean",
            "const": true,
            "title": "Legacy"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "amount_type",
          "is_archived",
          "product_id",
          "type",
          "recurring_interval",
          "price_currency",
          "price_amount",
          "legacy"
        ],
        "title": "LegacyRecurringProductPriceFixed",
        "description": "A recurring price for a product, i.e. a subscription.\n\n**Deprecated**: The recurring interval should be set on the product itself."
      },
      "LegacyRecurringProductPriceFree": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the price."
          },
          "amount_type": {
            "type": "string",
            "const": "free",
            "title": "Amount Type"
          },
          "is_archived": {
            "type": "boolean",
            "title": "Is Archived",
            "description": "Whether the price is archived and no longer available."
          },
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id",
            "description": "The ID of the product owning the price."
          },
          "type": {
            "type": "string",
            "const": "recurring",
            "title": "Type",
            "description": "The type of the price."
          },
          "recurring_interval": {
            "$ref": "#/components/schemas/SubscriptionRecurringInterval",
            "description": "The recurring interval of the price."
          },
          "legacy": {
            "type": "boolean",
            "const": true,
            "title": "Legacy"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "amount_type",
          "is_archived",
          "product_id",
          "type",
          "recurring_interval",
          "legacy"
        ],
        "title": "LegacyRecurringProductPriceFree",
        "description": "A free recurring price for a product, i.e. a subscription.\n\n**Deprecated**: The recurring interval should be set on the product itself."
      },
      "LicenseKeyActivate": {
        "properties": {
          "key": {
            "type": "string",
            "title": "Key"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id"
          },
          "label": {
            "type": "string",
            "title": "Label"
          },
          "conditions": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Conditions",
            "description": "Key-value object allowing you to set conditions that must match when validating the license key.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "meta": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Meta",
            "description": "Key-value object allowing you to store additional information about the activation\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          }
        },
        "type": "object",
        "required": [
          "key",
          "organization_id",
          "label"
        ],
        "title": "LicenseKeyActivate"
      },
      "LicenseKeyActivationBase": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "license_key_id": {
            "type": "string",
            "format": "uuid4",
            "title": "License Key Id"
          },
          "label": {
            "type": "string",
            "title": "Label"
          },
          "meta": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Meta"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "license_key_id",
          "label",
          "meta",
          "created_at",
          "modified_at"
        ],
        "title": "LicenseKeyActivationBase"
      },
      "LicenseKeyActivationRead": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "license_key_id": {
            "type": "string",
            "format": "uuid4",
            "title": "License Key Id"
          },
          "label": {
            "type": "string",
            "title": "Label"
          },
          "meta": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Meta"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At"
          },
          "license_key": {
            "$ref": "#/components/schemas/LicenseKeyRead"
          }
        },
        "type": "object",
        "required": [
          "id",
          "license_key_id",
          "label",
          "meta",
          "created_at",
          "modified_at",
          "license_key"
        ],
        "title": "LicenseKeyActivationRead"
      },
      "LicenseKeyCustomer": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the customer.",
            "examples": [
              "992fae2a-2a17-4b7a-8d9e-e287cf90131b"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "external_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "External Id",
            "description": "The ID of the customer in your system. This must be unique within the organization. Once set, it can't be updated.",
            "examples": [
              "usr_1337"
            ]
          },
          "email": {
            "type": "string",
            "title": "Email",
            "description": "The email address of the customer. This must be unique within the organization.",
            "examples": [
              "customer@example.com"
            ]
          },
          "email_verified": {
            "type": "boolean",
            "title": "Email Verified",
            "description": "Whether the customer email address is verified. The address is automatically verified when the customer accesses the customer portal using their email address.",
            "examples": [
              true
            ]
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "The name of the customer.",
            "examples": [
              "John Doe"
            ]
          },
          "billing_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address"
              },
              {
                "type": "null"
              }
            ]
          },
          "tax_id": {
            "anyOf": [
              {
                "prefixItems": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/components/schemas/TaxIDFormat"
                  }
                ],
                "type": "array",
                "maxItems": 2,
                "minItems": 2,
                "examples": [
                  [
                    "911144442",
                    "us_ein"
                  ],
                  [
                    "FR61954506077",
                    "eu_vat"
                  ]
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Id"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the customer.",
            "examples": [
              "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
            ]
          },
          "deleted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Deleted At",
            "description": "Timestamp for when the customer was soft deleted."
          },
          "avatar_url": {
            "type": "string",
            "title": "Avatar Url",
            "examples": [
              "https://www.gravatar.com/avatar/xxx?d=blank"
            ]
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "modified_at",
          "metadata",
          "external_id",
          "email",
          "email_verified",
          "name",
          "billing_address",
          "tax_id",
          "organization_id",
          "deleted_at",
          "avatar_url"
        ],
        "title": "LicenseKeyCustomer"
      },
      "LicenseKeyDeactivate": {
        "properties": {
          "key": {
            "type": "string",
            "title": "Key"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id"
          },
          "activation_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Activation Id"
          }
        },
        "type": "object",
        "required": [
          "key",
          "organization_id",
          "activation_id"
        ],
        "title": "LicenseKeyDeactivate"
      },
      "LicenseKeyRead": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id"
          },
          "customer_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Customer Id"
          },
          "customer": {
            "$ref": "#/components/schemas/LicenseKeyCustomer"
          },
          "benefit_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Benefit Id",
            "description": "The benefit ID.",
            "x-polar-selector-widget": {
              "displayProperty": "description",
              "resourceName": "Benefit",
              "resourceRoot": "/v1/benefits"
            }
          },
          "key": {
            "type": "string",
            "title": "Key"
          },
          "display_key": {
            "type": "string",
            "title": "Display Key"
          },
          "status": {
            "$ref": "#/components/schemas/LicenseKeyStatus"
          },
          "limit_activations": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit Activations"
          },
          "usage": {
            "type": "integer",
            "title": "Usage"
          },
          "limit_usage": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit Usage"
          },
          "validations": {
            "type": "integer",
            "title": "Validations"
          },
          "last_validated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Validated At"
          },
          "expires_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expires At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "modified_at",
          "organization_id",
          "customer_id",
          "customer",
          "benefit_id",
          "key",
          "display_key",
          "status",
          "limit_activations",
          "usage",
          "limit_usage",
          "validations",
          "last_validated_at",
          "expires_at"
        ],
        "title": "LicenseKeyRead"
      },
      "LicenseKeyStatus": {
        "type": "string",
        "enum": [
          "granted",
          "revoked",
          "disabled"
        ],
        "title": "LicenseKeyStatus"
      },
      "LicenseKeyUpdate": {
        "properties": {
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LicenseKeyStatus"
              },
              {
                "type": "null"
              }
            ]
          },
          "usage": {
            "type": "integer",
            "title": "Usage",
            "default": 0
          },
          "limit_activations": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 1000,
                "exclusiveMinimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit Activations"
          },
          "limit_usage": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMinimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit Usage"
          },
          "expires_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expires At"
          }
        },
        "type": "object",
        "title": "LicenseKeyUpdate"
      },
      "LicenseKeyUser": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "public_name": {
            "type": "string",
            "title": "Public Name"
          },
          "avatar_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avatar Url"
          }
        },
        "type": "object",
        "required": [
          "id",
          "email",
          "public_name"
        ],
        "title": "LicenseKeyUser"
      },
      "LicenseKeyValidate": {
        "properties": {
          "key": {
            "type": "string",
            "title": "Key"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id"
          },
          "activation_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Activation Id"
          },
          "benefit_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The benefit ID.",
                "x-polar-selector-widget": {
                  "displayProperty": "description",
                  "resourceName": "Benefit",
                  "resourceRoot": "/v1/benefits"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Benefit Id"
          },
          "customer_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Id"
          },
          "increment_usage": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Increment Usage"
          },
          "conditions": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Conditions",
            "description": "Key-value object allowing you to set conditions that must match when validating the license key.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          }
        },
        "type": "object",
        "required": [
          "key",
          "organization_id"
        ],
        "title": "LicenseKeyValidate"
      },
      "LicenseKeyWithActivations": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id"
          },
          "customer_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Customer Id"
          },
          "customer": {
            "$ref": "#/components/schemas/LicenseKeyCustomer"
          },
          "benefit_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Benefit Id",
            "description": "The benefit ID.",
            "x-polar-selector-widget": {
              "displayProperty": "description",
              "resourceName": "Benefit",
              "resourceRoot": "/v1/benefits"
            }
          },
          "key": {
            "type": "string",
            "title": "Key"
          },
          "display_key": {
            "type": "string",
            "title": "Display Key"
          },
          "status": {
            "$ref": "#/components/schemas/LicenseKeyStatus"
          },
          "limit_activations": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit Activations"
          },
          "usage": {
            "type": "integer",
            "title": "Usage"
          },
          "limit_usage": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit Usage"
          },
          "validations": {
            "type": "integer",
            "title": "Validations"
          },
          "last_validated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Validated At"
          },
          "expires_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expires At"
          },
          "activations": {
            "items": {
              "$ref": "#/components/schemas/LicenseKeyActivationBase"
            },
            "type": "array",
            "title": "Activations"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "modified_at",
          "organization_id",
          "customer_id",
          "customer",
          "benefit_id",
          "key",
          "display_key",
          "status",
          "limit_activations",
          "usage",
          "limit_usage",
          "validations",
          "last_validated_at",
          "expires_at",
          "activations"
        ],
        "title": "LicenseKeyWithActivations"
      },
      "ListResource_BenefitGrant_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/BenefitGrant"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[BenefitGrant]"
      },
      "ListResource_Benefit_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Benefit",
              "title": "Benefit"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[Benefit]"
      },
      "ListResource_CheckoutLink_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/CheckoutLink"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[CheckoutLink]"
      },
      "ListResource_Checkout_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Checkout"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[Checkout]"
      },
      "ListResource_CustomField_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/CustomField",
              "title": "CustomField"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[CustomField]"
      },
      "ListResource_CustomerBenefitGrant_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/CustomerBenefitGrant",
              "title": "CustomerBenefitGrant"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[CustomerBenefitGrant]"
      },
      "ListResource_CustomerCustomerMeter_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/CustomerCustomerMeter"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[CustomerCustomerMeter]"
      },
      "ListResource_CustomerMeter_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/CustomerMeter"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[CustomerMeter]"
      },
      "ListResource_CustomerOrder_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/CustomerOrder"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[CustomerOrder]"
      },
      "ListResource_CustomerSubscription_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/CustomerSubscription"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[CustomerSubscription]"
      },
      "ListResource_Customer_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Customer"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[Customer]"
      },
      "ListResource_Discount_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Discount",
              "title": "Discount"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[Discount]"
      },
      "ListResource_DownloadableRead_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/DownloadableRead"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[DownloadableRead]"
      },
      "ListResource_EventName_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/EventName"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[EventName]"
      },
      "ListResource_Event_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Event"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[Event]"
      },
      "ListResource_FileRead_": {
        "properties": {
          "items": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/DownloadableFileRead"
                },
                {
                  "$ref": "#/components/schemas/ProductMediaFileRead"
                },
                {
                  "$ref": "#/components/schemas/OrganizationAvatarFileRead"
                }
              ],
              "title": "FileRead",
              "discriminator": {
                "propertyName": "service",
                "mapping": {
                  "downloadable": "#/components/schemas/DownloadableFileRead",
                  "organization_avatar": "#/components/schemas/OrganizationAvatarFileRead",
                  "product_media": "#/components/schemas/ProductMediaFileRead"
                }
              }
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[FileRead]"
      },
      "ListResource_LicenseKeyRead_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/LicenseKeyRead"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[LicenseKeyRead]"
      },
      "ListResource_Meter_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Meter"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[Meter]"
      },
      "ListResource_OAuth2Client_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/OAuth2Client"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[OAuth2Client]"
      },
      "ListResource_Order_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Order"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[Order]"
      },
      "ListResource_Organization_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Organization"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[Organization]"
      },
      "ListResource_Product_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Product"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[Product]"
      },
      "ListResource_Refund_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Refund"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[Refund]"
      },
      "ListResource_Subscription_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Subscription"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[Subscription]"
      },
      "ListResource_Union_PaymentMethodCard__PaymentMethodGeneric__": {
        "properties": {
          "items": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/PaymentMethodCard"
                },
                {
                  "$ref": "#/components/schemas/PaymentMethodGeneric"
                }
              ]
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[Union[PaymentMethodCard, PaymentMethodGeneric]]"
      },
      "ListResource_WebhookDelivery_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/WebhookDelivery"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[WebhookDelivery]"
      },
      "ListResource_WebhookEndpoint_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/WebhookEndpoint"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[WebhookEndpoint]"
      },
      "ListResource__": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Payment"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[]"
      },
      "Meter": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the meter. Will be shown on customer's invoices and usage."
          },
          "filter": {
            "$ref": "#/components/schemas/Filter",
            "description": "The filter to apply on events that'll be used to calculate the meter."
          },
          "aggregation": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CountAggregation"
              },
              {
                "$ref": "#/components/schemas/PropertyAggregation"
              }
            ],
            "title": "Aggregation",
            "description": "The aggregation to apply on the filtered events to calculate the meter.",
            "discriminator": {
              "propertyName": "func",
              "mapping": {
                "avg": "#/components/schemas/PropertyAggregation",
                "count": "#/components/schemas/CountAggregation",
                "max": "#/components/schemas/PropertyAggregation",
                "min": "#/components/schemas/PropertyAggregation",
                "sum": "#/components/schemas/PropertyAggregation"
              }
            }
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the meter."
          }
        },
        "type": "object",
        "required": [
          "metadata",
          "created_at",
          "modified_at",
          "id",
          "name",
          "filter",
          "aggregation",
          "organization_id"
        ],
        "title": "Meter"
      },
      "MeterCreate": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "name": {
            "type": "string",
            "minLength": 3,
            "title": "Name",
            "description": "The name of the meter. Will be shown on customer's invoices and usage."
          },
          "filter": {
            "$ref": "#/components/schemas/Filter",
            "description": "The filter to apply on events that'll be used to calculate the meter."
          },
          "aggregation": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CountAggregation"
              },
              {
                "$ref": "#/components/schemas/PropertyAggregation"
              }
            ],
            "title": "Aggregation",
            "description": "The aggregation to apply on the filtered events to calculate the meter.",
            "discriminator": {
              "propertyName": "func",
              "mapping": {
                "avg": "#/components/schemas/PropertyAggregation",
                "count": "#/components/schemas/CountAggregation",
                "max": "#/components/schemas/PropertyAggregation",
                "min": "#/components/schemas/PropertyAggregation",
                "sum": "#/components/schemas/PropertyAggregation"
              }
            }
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "examples": [
                  "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                ],
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the meter. **Required unless you use an organization token.**"
          }
        },
        "type": "object",
        "required": [
          "name",
          "filter",
          "aggregation"
        ],
        "title": "MeterCreate"
      },
      "MeterCreditEvent": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp",
            "description": "The timestamp of the event."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the event.",
            "examples": [
              "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
            ],
            "x-polar-selector-widget": {
              "displayProperty": "name",
              "resourceName": "Organization",
              "resourceRoot": "/v1/organizations"
            }
          },
          "customer_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Id",
            "description": "ID of the customer in your Polar organization associated with the event."
          },
          "customer": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Customer"
              },
              {
                "type": "null"
              }
            ],
            "description": "The customer associated with the event."
          },
          "external_customer_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "External Customer Id",
            "description": "ID of the customer in your system associated with the event."
          },
          "source": {
            "type": "string",
            "const": "system",
            "title": "Source",
            "description": "The source of the event. `system` events are created by Polar. `user` events are the one you create through our ingestion API."
          },
          "name": {
            "type": "string",
            "const": "meter.credited",
            "title": "Name",
            "description": "The name of the event."
          },
          "metadata": {
            "$ref": "#/components/schemas/MeterCreditedMetadata"
          }
        },
        "type": "object",
        "required": [
          "id",
          "timestamp",
          "organization_id",
          "customer_id",
          "customer",
          "external_customer_id",
          "source",
          "name",
          "metadata"
        ],
        "title": "MeterCreditEvent",
        "description": "An event created by Polar when credits are added to a customer meter."
      },
      "MeterCreditedMetadata": {
        "properties": {
          "meter_id": {
            "type": "string",
            "title": "Meter Id"
          },
          "units": {
            "type": "integer",
            "title": "Units"
          },
          "rollover": {
            "type": "boolean",
            "title": "Rollover"
          }
        },
        "type": "object",
        "required": [
          "meter_id",
          "units",
          "rollover"
        ],
        "title": "MeterCreditedMetadata"
      },
      "MeterQuantities": {
        "properties": {
          "quantities": {
            "items": {
              "$ref": "#/components/schemas/MeterQuantity"
            },
            "type": "array",
            "title": "Quantities"
          },
          "total": {
            "type": "number",
            "title": "Total",
            "description": "The total quantity for the period.",
            "examples": [
              100
            ]
          }
        },
        "type": "object",
        "required": [
          "quantities",
          "total"
        ],
        "title": "MeterQuantities"
      },
      "MeterQuantity": {
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp",
            "description": "The timestamp for the current period."
          },
          "quantity": {
            "type": "number",
            "title": "Quantity",
            "description": "The quantity for the current period.",
            "examples": [
              10
            ]
          }
        },
        "type": "object",
        "required": [
          "timestamp",
          "quantity"
        ],
        "title": "MeterQuantity"
      },
      "MeterResetEvent": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp",
            "description": "The timestamp of the event."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the event.",
            "examples": [
              "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
            ],
            "x-polar-selector-widget": {
              "displayProperty": "name",
              "resourceName": "Organization",
              "resourceRoot": "/v1/organizations"
            }
          },
          "customer_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Id",
            "description": "ID of the customer in your Polar organization associated with the event."
          },
          "customer": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Customer"
              },
              {
                "type": "null"
              }
            ],
            "description": "The customer associated with the event."
          },
          "external_customer_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "External Customer Id",
            "description": "ID of the customer in your system associated with the event."
          },
          "source": {
            "type": "string",
            "const": "system",
            "title": "Source",
            "description": "The source of the event. `system` events are created by Polar. `user` events are the one you create through our ingestion API."
          },
          "name": {
            "type": "string",
            "const": "meter.reset",
            "title": "Name",
            "description": "The name of the event."
          },
          "metadata": {
            "$ref": "#/components/schemas/MeterResetMetadata"
          }
        },
        "type": "object",
        "required": [
          "id",
          "timestamp",
          "organization_id",
          "customer_id",
          "customer",
          "external_customer_id",
          "source",
          "name",
          "metadata"
        ],
        "title": "MeterResetEvent",
        "description": "An event created by Polar when a customer meter is reset."
      },
      "MeterResetMetadata": {
        "properties": {
          "meter_id": {
            "type": "string",
            "title": "Meter Id"
          }
        },
        "type": "object",
        "required": [
          "meter_id"
        ],
        "title": "MeterResetMetadata"
      },
      "MeterSortProperty": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "name",
          "-name"
        ],
        "title": "MeterSortProperty"
      },
      "MeterUpdate": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "name": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 3
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "The name of the meter. Will be shown on customer's invoices and usage."
          },
          "filter": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Filter"
              },
              {
                "type": "null"
              }
            ],
            "description": "The filter to apply on events that'll be used to calculate the meter."
          },
          "aggregation": {
            "anyOf": [
              {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CountAggregation"
                  },
                  {
                    "$ref": "#/components/schemas/PropertyAggregation"
                  }
                ],
                "discriminator": {
                  "propertyName": "func",
                  "mapping": {
                    "avg": "#/components/schemas/PropertyAggregation",
                    "count": "#/components/schemas/CountAggregation",
                    "max": "#/components/schemas/PropertyAggregation",
                    "min": "#/components/schemas/PropertyAggregation",
                    "sum": "#/components/schemas/PropertyAggregation"
                  }
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Aggregation",
            "description": "The aggregation to apply on the filtered events to calculate the meter."
          }
        },
        "type": "object",
        "title": "MeterUpdate"
      },
      "Metric": {
        "properties": {
          "slug": {
            "type": "string",
            "title": "Slug",
            "description": "Unique identifier for the metric."
          },
          "display_name": {
            "type": "string",
            "title": "Display Name",
            "description": "Human-readable name for the metric."
          },
          "type": {
            "$ref": "#/components/schemas/MetricType",
            "description": "Type of the metric, useful to know the unit or format of the value."
          }
        },
        "type": "object",
        "required": [
          "slug",
          "display_name",
          "type"
        ],
        "title": "Metric",
        "description": "Information about a metric."
      },
      "MetricPeriod": {
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp",
            "description": "Timestamp of this period data."
          },
          "orders": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              }
            ],
            "title": "Orders"
          },
          "revenue": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              }
            ],
            "title": "Revenue"
          },
          "cumulative_revenue": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              }
            ],
            "title": "Cumulative Revenue"
          },
          "average_order_value": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              }
            ],
            "title": "Average Order Value"
          },
          "one_time_products": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              }
            ],
            "title": "One Time Products"
          },
          "one_time_products_revenue": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              }
            ],
            "title": "One Time Products Revenue"
          },
          "new_subscriptions": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              }
            ],
            "title": "New Subscriptions"
          },
          "new_subscriptions_revenue": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              }
            ],
            "title": "New Subscriptions Revenue"
          },
          "renewed_subscriptions": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              }
            ],
            "title": "Renewed Subscriptions"
          },
          "renewed_subscriptions_revenue": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              }
            ],
            "title": "Renewed Subscriptions Revenue"
          },
          "active_subscriptions": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              }
            ],
            "title": "Active Subscriptions"
          },
          "monthly_recurring_revenue": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              }
            ],
            "title": "Monthly Recurring Revenue"
          },
          "checkouts": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              }
            ],
            "title": "Checkouts"
          },
          "succeeded_checkouts": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              }
            ],
            "title": "Succeeded Checkouts"
          },
          "checkouts_conversion": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              }
            ],
            "title": "Checkouts Conversion"
          }
        },
        "type": "object",
        "required": [
          "timestamp",
          "orders",
          "revenue",
          "cumulative_revenue",
          "average_order_value",
          "one_time_products",
          "one_time_products_revenue",
          "new_subscriptions",
          "new_subscriptions_revenue",
          "renewed_subscriptions",
          "renewed_subscriptions_revenue",
          "active_subscriptions",
          "monthly_recurring_revenue",
          "checkouts",
          "succeeded_checkouts",
          "checkouts_conversion"
        ],
        "title": "MetricPeriod"
      },
      "MetricType": {
        "type": "string",
        "enum": [
          "scalar",
          "currency",
          "percentage"
        ],
        "title": "MetricType"
      },
      "Metrics": {
        "properties": {
          "orders": {
            "$ref": "#/components/schemas/Metric"
          },
          "revenue": {
            "$ref": "#/components/schemas/Metric"
          },
          "cumulative_revenue": {
            "$ref": "#/components/schemas/Metric"
          },
          "average_order_value": {
            "$ref": "#/components/schemas/Metric"
          },
          "one_time_products": {
            "$ref": "#/components/schemas/Metric"
          },
          "one_time_products_revenue": {
            "$ref": "#/components/schemas/Metric"
          },
          "new_subscriptions": {
            "$ref": "#/components/schemas/Metric"
          },
          "new_subscriptions_revenue": {
            "$ref": "#/components/schemas/Metric"
          },
          "renewed_subscriptions": {
            "$ref": "#/components/schemas/Metric"
          },
          "renewed_subscriptions_revenue": {
            "$ref": "#/components/schemas/Metric"
          },
          "active_subscriptions": {
            "$ref": "#/components/schemas/Metric"
          },
          "monthly_recurring_revenue": {
            "$ref": "#/components/schemas/Metric"
          },
          "checkouts": {
            "$ref": "#/components/schemas/Metric"
          },
          "succeeded_checkouts": {
            "$ref": "#/components/schemas/Metric"
          },
          "checkouts_conversion": {
            "$ref": "#/components/schemas/Metric"
          }
        },
        "type": "object",
        "required": [
          "orders",
          "revenue",
          "cumulative_revenue",
          "average_order_value",
          "one_time_products",
          "one_time_products_revenue",
          "new_subscriptions",
          "new_subscriptions_revenue",
          "renewed_subscriptions",
          "renewed_subscriptions_revenue",
          "active_subscriptions",
          "monthly_recurring_revenue",
          "checkouts",
          "succeeded_checkouts",
          "checkouts_conversion"
        ],
        "title": "Metrics"
      },
      "MetricsIntervalLimit": {
        "properties": {
          "max_days": {
            "type": "integer",
            "title": "Max Days",
            "description": "Maximum number of days for this interval."
          }
        },
        "type": "object",
        "required": [
          "max_days"
        ],
        "title": "MetricsIntervalLimit",
        "description": "Date interval limit to get metrics for a given interval."
      },
      "MetricsIntervalsLimits": {
        "properties": {
          "hour": {
            "$ref": "#/components/schemas/MetricsIntervalLimit",
            "description": "Limits for the hour interval."
          },
          "day": {
            "$ref": "#/components/schemas/MetricsIntervalLimit",
            "description": "Limits for the day interval."
          },
          "week": {
            "$ref": "#/components/schemas/MetricsIntervalLimit",
            "description": "Limits for the week interval."
          },
          "month": {
            "$ref": "#/components/schemas/MetricsIntervalLimit",
            "description": "Limits for the month interval."
          },
          "year": {
            "$ref": "#/components/schemas/MetricsIntervalLimit",
            "description": "Limits for the year interval."
          }
        },
        "type": "object",
        "required": [
          "hour",
          "day",
          "week",
          "month",
          "year"
        ],
        "title": "MetricsIntervalsLimits",
        "description": "Date interval limits to get metrics for each interval."
      },
      "MetricsLimits": {
        "properties": {
          "min_date": {
            "type": "string",
            "format": "date",
            "title": "Min Date",
            "description": "Minimum date to get metrics."
          },
          "intervals": {
            "$ref": "#/components/schemas/MetricsIntervalsLimits",
            "description": "Limits for each interval."
          }
        },
        "type": "object",
        "required": [
          "min_date",
          "intervals"
        ],
        "title": "MetricsLimits",
        "description": "Date limits to get metrics."
      },
      "MetricsResponse": {
        "properties": {
          "periods": {
            "items": {
              "$ref": "#/components/schemas/MetricPeriod"
            },
            "type": "array",
            "title": "Periods",
            "description": "List of data for each timestamp."
          },
          "totals": {
            "$ref": "#/components/schemas/MetricsTotals",
            "description": "Totals for the whole selected period."
          },
          "metrics": {
            "$ref": "#/components/schemas/Metrics",
            "description": "Information about the returned metrics."
          }
        },
        "type": "object",
        "required": [
          "periods",
          "totals",
          "metrics"
        ],
        "title": "MetricsResponse",
        "description": "Metrics response schema."
      },
      "MetricsTotals": {
        "properties": {
          "orders": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              }
            ],
            "title": "Orders"
          },
          "revenue": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              }
            ],
            "title": "Revenue"
          },
          "cumulative_revenue": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              }
            ],
            "title": "Cumulative Revenue"
          },
          "average_order_value": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              }
            ],
            "title": "Average Order Value"
          },
          "one_time_products": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              }
            ],
            "title": "One Time Products"
          },
          "one_time_products_revenue": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              }
            ],
            "title": "One Time Products Revenue"
          },
          "new_subscriptions": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              }
            ],
            "title": "New Subscriptions"
          },
          "new_subscriptions_revenue": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              }
            ],
            "title": "New Subscriptions Revenue"
          },
          "renewed_subscriptions": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              }
            ],
            "title": "Renewed Subscriptions"
          },
          "renewed_subscriptions_revenue": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              }
            ],
            "title": "Renewed Subscriptions Revenue"
          },
          "active_subscriptions": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              }
            ],
            "title": "Active Subscriptions"
          },
          "monthly_recurring_revenue": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              }
            ],
            "title": "Monthly Recurring Revenue"
          },
          "checkouts": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              }
            ],
            "title": "Checkouts"
          },
          "succeeded_checkouts": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              }
            ],
            "title": "Succeeded Checkouts"
          },
          "checkouts_conversion": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              }
            ],
            "title": "Checkouts Conversion"
          }
        },
        "type": "object",
        "required": [
          "orders",
          "revenue",
          "cumulative_revenue",
          "average_order_value",
          "one_time_products",
          "one_time_products_revenue",
          "new_subscriptions",
          "new_subscriptions_revenue",
          "renewed_subscriptions",
          "renewed_subscriptions_revenue",
          "active_subscriptions",
          "monthly_recurring_revenue",
          "checkouts",
          "succeeded_checkouts",
          "checkouts_conversion"
        ],
        "title": "MetricsTotals"
      },
      "MissingInvoiceBillingDetails": {
        "properties": {
          "error": {
            "type": "string",
            "const": "MissingInvoiceBillingDetails",
            "title": "Error",
            "examples": [
              "MissingInvoiceBillingDetails"
            ]
          },
          "detail": {
            "type": "string",
            "title": "Detail"
          }
        },
        "type": "object",
        "required": [
          "error",
          "detail"
        ],
        "title": "MissingInvoiceBillingDetails"
      },
      "NotOpenCheckout": {
        "properties": {
          "error": {
            "type": "string",
            "const": "NotOpenCheckout",
            "title": "Error",
            "examples": [
              "NotOpenCheckout"
            ]
          },
          "detail": {
            "type": "string",
            "title": "Detail"
          }
        },
        "type": "object",
        "required": [
          "error",
          "detail"
        ],
        "title": "NotOpenCheckout"
      },
      "NotPaidOrder": {
        "properties": {
          "error": {
            "type": "string",
            "const": "NotPaidOrder",
            "title": "Error",
            "examples": [
              "NotPaidOrder"
            ]
          },
          "detail": {
            "type": "string",
            "title": "Detail"
          }
        },
        "type": "object",
        "required": [
          "error",
          "detail"
        ],
        "title": "NotPaidOrder"
      },
      "NotPermitted": {
        "properties": {
          "error": {
            "type": "string",
            "const": "NotPermitted",
            "title": "Error",
            "examples": [
              "NotPermitted"
            ]
          },
          "detail": {
            "type": "string",
            "title": "Detail"
          }
        },
        "type": "object",
        "required": [
          "error",
          "detail"
        ],
        "title": "NotPermitted"
      },
      "OAuth2Client": {
        "properties": {
          "redirect_uris": {
            "items": {
              "type": "string",
              "minLength": 1,
              "format": "uri"
            },
            "type": "array",
            "title": "Redirect Uris"
          },
          "token_endpoint_auth_method": {
            "type": "string",
            "enum": [
              "client_secret_basic",
              "client_secret_post",
              "none"
            ],
            "title": "Token Endpoint Auth Method",
            "default": "client_secret_post"
          },
          "grant_types": {
            "items": {
              "type": "string",
              "enum": [
                "authorization_code",
                "refresh_token"
              ]
            },
            "type": "array",
            "title": "Grant Types",
            "default": [
              "authorization_code",
              "refresh_token"
            ]
          },
          "response_types": {
            "items": {
              "type": "string",
              "const": "code"
            },
            "type": "array",
            "title": "Response Types",
            "default": [
              "code"
            ]
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "default": "openid profile email user:read organizations:read organizations:write custom_fields:read custom_fields:write discounts:read discounts:write checkout_links:read checkout_links:write checkouts:read checkouts:write transactions:read transactions:write payouts:read payouts:write products:read products:write benefits:read benefits:write events:read events:write meters:read meters:write files:read files:write subscriptions:read subscriptions:write customers:read customers:write customer_meters:read customer_sessions:write orders:read orders:write refunds:read refunds:write payments:read metrics:read webhooks:read webhooks:write external_organizations:read license_keys:read license_keys:write repositories:read repositories:write issues:read issues:write customer_portal:read customer_portal:write notifications:read notifications:write notification_recipients:read notification_recipients:write"
          },
          "client_name": {
            "type": "string",
            "title": "Client Name"
          },
          "client_uri": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Uri"
          },
          "logo_uri": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Logo Uri"
          },
          "tos_uri": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tos Uri"
          },
          "policy_uri": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Policy Uri"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "client_id": {
            "type": "string",
            "title": "Client Id"
          },
          "client_secret": {
            "type": "string",
            "title": "Client Secret"
          },
          "client_id_issued_at": {
            "type": "integer",
            "title": "Client Id Issued At"
          },
          "client_secret_expires_at": {
            "type": "integer",
            "title": "Client Secret Expires At"
          }
        },
        "type": "object",
        "required": [
          "redirect_uris",
          "client_name",
          "created_at",
          "modified_at",
          "client_id",
          "client_secret",
          "client_id_issued_at",
          "client_secret_expires_at"
        ],
        "title": "OAuth2Client"
      },
      "OAuth2ClientConfiguration": {
        "properties": {
          "redirect_uris": {
            "items": {
              "type": "string",
              "minLength": 1,
              "format": "uri"
            },
            "type": "array",
            "title": "Redirect Uris"
          },
          "token_endpoint_auth_method": {
            "type": "string",
            "enum": [
              "client_secret_basic",
              "client_secret_post",
              "none"
            ],
            "title": "Token Endpoint Auth Method",
            "default": "client_secret_post"
          },
          "grant_types": {
            "items": {
              "type": "string",
              "enum": [
                "authorization_code",
                "refresh_token"
              ]
            },
            "type": "array",
            "title": "Grant Types",
            "default": [
              "authorization_code",
              "refresh_token"
            ]
          },
          "response_types": {
            "items": {
              "type": "string",
              "const": "code"
            },
            "type": "array",
            "title": "Response Types",
            "default": [
              "code"
            ]
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "default": "openid profile email user:read organizations:read organizations:write custom_fields:read custom_fields:write discounts:read discounts:write checkout_links:read checkout_links:write checkouts:read checkouts:write transactions:read transactions:write payouts:read payouts:write products:read products:write benefits:read benefits:write events:read events:write meters:read meters:write files:read files:write subscriptions:read subscriptions:write customers:read customers:write customer_meters:read customer_sessions:write orders:read orders:write refunds:read refunds:write payments:read metrics:read webhooks:read webhooks:write external_organizations:read license_keys:read license_keys:write repositories:read repositories:write issues:read issues:write customer_portal:read customer_portal:write notifications:read notifications:write notification_recipients:read notification_recipients:write"
          },
          "client_name": {
            "type": "string",
            "title": "Client Name"
          },
          "client_uri": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Uri"
          },
          "logo_uri": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Logo Uri"
          },
          "tos_uri": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tos Uri"
          },
          "policy_uri": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Policy Uri"
          }
        },
        "type": "object",
        "required": [
          "redirect_uris",
          "client_name"
        ],
        "title": "OAuth2ClientConfiguration"
      },
      "OAuth2ClientConfigurationUpdate": {
        "properties": {
          "redirect_uris": {
            "items": {
              "type": "string",
              "minLength": 1,
              "format": "uri"
            },
            "type": "array",
            "title": "Redirect Uris"
          },
          "token_endpoint_auth_method": {
            "type": "string",
            "enum": [
              "client_secret_basic",
              "client_secret_post",
              "none"
            ],
            "title": "Token Endpoint Auth Method",
            "default": "client_secret_post"
          },
          "grant_types": {
            "items": {
              "type": "string",
              "enum": [
                "authorization_code",
                "refresh_token"
              ]
            },
            "type": "array",
            "title": "Grant Types",
            "default": [
              "authorization_code",
              "refresh_token"
            ]
          },
          "response_types": {
            "items": {
              "type": "string",
              "const": "code"
            },
            "type": "array",
            "title": "Response Types",
            "default": [
              "code"
            ]
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "default": "openid profile email user:read organizations:read organizations:write custom_fields:read custom_fields:write discounts:read discounts:write checkout_links:read checkout_links:write checkouts:read checkouts:write transactions:read transactions:write payouts:read payouts:write products:read products:write benefits:read benefits:write events:read events:write meters:read meters:write files:read files:write subscriptions:read subscriptions:write customers:read customers:write customer_meters:read customer_sessions:write orders:read orders:write refunds:read refunds:write payments:read metrics:read webhooks:read webhooks:write external_organizations:read license_keys:read license_keys:write repositories:read repositories:write issues:read issues:write customer_portal:read customer_portal:write notifications:read notifications:write notification_recipients:read notification_recipients:write"
          },
          "client_name": {
            "type": "string",
            "title": "Client Name"
          },
          "client_uri": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Uri"
          },
          "logo_uri": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Logo Uri"
          },
          "tos_uri": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tos Uri"
          },
          "policy_uri": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Policy Uri"
          },
          "client_id": {
            "type": "string",
            "title": "Client Id"
          }
        },
        "type": "object",
        "required": [
          "redirect_uris",
          "client_name",
          "client_id"
        ],
        "title": "OAuth2ClientConfigurationUpdate"
      },
      "OAuth2ClientPublic": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "client_id": {
            "type": "string",
            "title": "Client Id"
          },
          "client_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Name"
          },
          "client_uri": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Uri"
          },
          "logo_uri": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Logo Uri"
          },
          "tos_uri": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tos Uri"
          },
          "policy_uri": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Policy Uri"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "client_id",
          "client_name",
          "client_uri",
          "logo_uri",
          "tos_uri",
          "policy_uri"
        ],
        "title": "OAuth2ClientPublic"
      },
      "Order": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "status": {
            "$ref": "#/components/schemas/OrderStatus",
            "examples": [
              "paid"
            ]
          },
          "paid": {
            "type": "boolean",
            "title": "Paid",
            "description": "Whether the order has been paid for.",
            "examples": [
              true
            ]
          },
          "subtotal_amount": {
            "type": "integer",
            "title": "Subtotal Amount",
            "description": "Amount in cents, before discounts and taxes."
          },
          "discount_amount": {
            "type": "integer",
            "title": "Discount Amount",
            "description": "Discount amount in cents."
          },
          "net_amount": {
            "type": "integer",
            "title": "Net Amount",
            "description": "Amount in cents, after discounts but before taxes."
          },
          "amount": {
            "type": "integer",
            "title": "Amount",
            "description": "Amount in cents, after discounts but before taxes.",
            "deprecated": true
          },
          "tax_amount": {
            "type": "integer",
            "title": "Tax Amount",
            "description": "Sales tax amount in cents."
          },
          "total_amount": {
            "type": "integer",
            "title": "Total Amount",
            "description": "Amount in cents, after discounts and taxes."
          },
          "refunded_amount": {
            "type": "integer",
            "title": "Refunded Amount",
            "description": "Amount refunded in cents."
          },
          "refunded_tax_amount": {
            "type": "integer",
            "title": "Refunded Tax Amount",
            "description": "Sales tax refunded in cents."
          },
          "currency": {
            "type": "string",
            "title": "Currency"
          },
          "billing_reason": {
            "$ref": "#/components/schemas/OrderBillingReason"
          },
          "billing_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Billing Name",
            "description": "The name of the customer that should appear on the invoice. "
          },
          "billing_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address"
              },
              {
                "type": "null"
              }
            ]
          },
          "is_invoice_generated": {
            "type": "boolean",
            "title": "Is Invoice Generated",
            "description": "Whether an invoice has been generated for this order."
          },
          "customer_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Customer Id"
          },
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id"
          },
          "discount_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Id"
          },
          "subscription_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subscription Id"
          },
          "checkout_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checkout Id"
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "custom_field_data": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ]
            },
            "type": "object",
            "title": "Custom Field Data",
            "description": "Key-value object storing custom field values."
          },
          "customer": {
            "$ref": "#/components/schemas/OrderCustomer"
          },
          "user_id": {
            "type": "string",
            "format": "uuid4",
            "title": "User Id",
            "deprecated": true
          },
          "product": {
            "$ref": "#/components/schemas/OrderProduct"
          },
          "discount": {
            "anyOf": [
              {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/DiscountFixedOnceForeverDurationBase"
                  },
                  {
                    "$ref": "#/components/schemas/DiscountFixedRepeatDurationBase"
                  },
                  {
                    "$ref": "#/components/schemas/DiscountPercentageOnceForeverDurationBase"
                  },
                  {
                    "$ref": "#/components/schemas/DiscountPercentageRepeatDurationBase"
                  }
                ],
                "title": "OrderDiscount"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount"
          },
          "subscription": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OrderSubscription"
              },
              {
                "type": "null"
              }
            ]
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/OrderItemSchema"
            },
            "type": "array",
            "title": "Items",
            "description": "Line items composing the order."
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "modified_at",
          "status",
          "paid",
          "subtotal_amount",
          "discount_amount",
          "net_amount",
          "amount",
          "tax_amount",
          "total_amount",
          "refunded_amount",
          "refunded_tax_amount",
          "currency",
          "billing_reason",
          "billing_name",
          "billing_address",
          "is_invoice_generated",
          "customer_id",
          "product_id",
          "discount_id",
          "subscription_id",
          "checkout_id",
          "metadata",
          "customer",
          "user_id",
          "product",
          "discount",
          "subscription",
          "items"
        ],
        "title": "Order"
      },
      "OrderBillingReason": {
        "type": "string",
        "enum": [
          "purchase",
          "subscription_create",
          "subscription_cycle",
          "subscription_update"
        ],
        "title": "OrderBillingReason"
      },
      "OrderCustomer": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the customer.",
            "examples": [
              "992fae2a-2a17-4b7a-8d9e-e287cf90131b"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "external_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "External Id",
            "description": "The ID of the customer in your system. This must be unique within the organization. Once set, it can't be updated.",
            "examples": [
              "usr_1337"
            ]
          },
          "email": {
            "type": "string",
            "title": "Email",
            "description": "The email address of the customer. This must be unique within the organization.",
            "examples": [
              "customer@example.com"
            ]
          },
          "email_verified": {
            "type": "boolean",
            "title": "Email Verified",
            "description": "Whether the customer email address is verified. The address is automatically verified when the customer accesses the customer portal using their email address.",
            "examples": [
              true
            ]
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "The name of the customer.",
            "examples": [
              "John Doe"
            ]
          },
          "billing_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address"
              },
              {
                "type": "null"
              }
            ]
          },
          "tax_id": {
            "anyOf": [
              {
                "prefixItems": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/components/schemas/TaxIDFormat"
                  }
                ],
                "type": "array",
                "maxItems": 2,
                "minItems": 2,
                "examples": [
                  [
                    "911144442",
                    "us_ein"
                  ],
                  [
                    "FR61954506077",
                    "eu_vat"
                  ]
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Id"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the customer.",
            "examples": [
              "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
            ]
          },
          "deleted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Deleted At",
            "description": "Timestamp for when the customer was soft deleted."
          },
          "avatar_url": {
            "type": "string",
            "title": "Avatar Url",
            "examples": [
              "https://www.gravatar.com/avatar/xxx?d=blank"
            ]
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "modified_at",
          "metadata",
          "external_id",
          "email",
          "email_verified",
          "name",
          "billing_address",
          "tax_id",
          "organization_id",
          "deleted_at",
          "avatar_url"
        ],
        "title": "OrderCustomer"
      },
      "OrderInvoice": {
        "properties": {
          "url": {
            "type": "string",
            "title": "Url",
            "description": "The URL to the invoice."
          }
        },
        "type": "object",
        "required": [
          "url"
        ],
        "title": "OrderInvoice",
        "description": "Order's invoice data."
      },
      "OrderItemSchema": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "label": {
            "type": "string",
            "title": "Label",
            "description": "Description of the line item charge."
          },
          "amount": {
            "type": "integer",
            "title": "Amount",
            "description": "Amount in cents, before discounts and taxes."
          },
          "tax_amount": {
            "type": "integer",
            "title": "Tax Amount",
            "description": "Sales tax amount in cents."
          },
          "proration": {
            "type": "boolean",
            "title": "Proration",
            "description": "Whether this charge is due to a proration."
          },
          "product_price_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Product Price Id",
            "description": "Associated price ID, if any."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "label",
          "amount",
          "tax_amount",
          "proration",
          "product_price_id"
        ],
        "title": "OrderItemSchema",
        "description": "An order line item."
      },
      "OrderProduct": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the product."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the product."
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the product."
          },
          "recurring_interval": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SubscriptionRecurringInterval"
              },
              {
                "type": "null"
              }
            ],
            "description": "The recurring interval of the product. If `None`, the product is a one-time purchase."
          },
          "is_recurring": {
            "type": "boolean",
            "title": "Is Recurring",
            "description": "Whether the product is a subscription."
          },
          "is_archived": {
            "type": "boolean",
            "title": "Is Archived",
            "description": "Whether the product is archived and no longer available."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the product."
          }
        },
        "type": "object",
        "required": [
          "metadata",
          "created_at",
          "modified_at",
          "id",
          "name",
          "description",
          "recurring_interval",
          "is_recurring",
          "is_archived",
          "organization_id"
        ],
        "title": "OrderProduct"
      },
      "OrderSortProperty": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "amount",
          "-amount",
          "net_amount",
          "-net_amount",
          "customer",
          "-customer",
          "product",
          "-product",
          "discount",
          "-discount",
          "subscription",
          "-subscription"
        ],
        "title": "OrderSortProperty"
      },
      "OrderStatus": {
        "type": "string",
        "enum": [
          "pending",
          "paid",
          "refunded",
          "partially_refunded"
        ],
        "title": "OrderStatus"
      },
      "OrderSubscription": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "amount": {
            "type": "integer",
            "title": "Amount",
            "description": "The amount of the subscription."
          },
          "currency": {
            "type": "string",
            "title": "Currency",
            "description": "The currency of the subscription."
          },
          "recurring_interval": {
            "$ref": "#/components/schemas/SubscriptionRecurringInterval",
            "description": "The interval at which the subscription recurs."
          },
          "status": {
            "$ref": "#/components/schemas/SubscriptionStatus",
            "description": "The status of the subscription."
          },
          "current_period_start": {
            "type": "string",
            "format": "date-time",
            "title": "Current Period Start",
            "description": "The start timestamp of the current billing period."
          },
          "current_period_end": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Current Period End",
            "description": "The end timestamp of the current billing period."
          },
          "cancel_at_period_end": {
            "type": "boolean",
            "title": "Cancel At Period End",
            "description": "Whether the subscription will be canceled at the end of the current period."
          },
          "canceled_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Canceled At",
            "description": "The timestamp when the subscription was canceled. The subscription might still be active if `cancel_at_period_end` is `true`."
          },
          "started_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Started At",
            "description": "The timestamp when the subscription started."
          },
          "ends_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ends At",
            "description": "The timestamp when the subscription will end."
          },
          "ended_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ended At",
            "description": "The timestamp when the subscription ended."
          },
          "customer_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Customer Id",
            "description": "The ID of the subscribed customer."
          },
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id",
            "description": "The ID of the subscribed product."
          },
          "discount_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Id",
            "description": "The ID of the applied discount, if any."
          },
          "checkout_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checkout Id"
          },
          "customer_cancellation_reason": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CustomerCancellationReason"
              },
              {
                "type": "null"
              }
            ]
          },
          "customer_cancellation_comment": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Cancellation Comment"
          }
        },
        "type": "object",
        "required": [
          "metadata",
          "created_at",
          "modified_at",
          "id",
          "amount",
          "currency",
          "recurring_interval",
          "status",
          "current_period_start",
          "current_period_end",
          "cancel_at_period_end",
          "canceled_at",
          "started_at",
          "ends_at",
          "ended_at",
          "customer_id",
          "product_id",
          "discount_id",
          "checkout_id",
          "customer_cancellation_reason",
          "customer_cancellation_comment"
        ],
        "title": "OrderSubscription"
      },
      "OrderUpdate": {
        "properties": {
          "billing_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Billing Name",
            "description": "The name of the customer that should appear on the invoice. Can't be updated after the invoice is generated."
          },
          "billing_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address"
              },
              {
                "type": "null"
              }
            ],
            "description": "The address of the customer that should appear on the invoice. Can't be updated after the invoice is generated."
          }
        },
        "type": "object",
        "required": [
          "billing_name",
          "billing_address"
        ],
        "title": "OrderUpdate",
        "description": "Schema to update an order."
      },
      "OrderUser": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "public_name": {
            "type": "string",
            "title": "Public Name"
          },
          "avatar_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avatar Url"
          },
          "github_username": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Github Username"
          }
        },
        "type": "object",
        "required": [
          "id",
          "email",
          "public_name"
        ],
        "title": "OrderUser"
      },
      "Organization": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The organization ID.",
            "examples": [
              "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
            ],
            "x-polar-selector-widget": {
              "displayProperty": "name",
              "resourceName": "Organization",
              "resourceRoot": "/v1/organizations"
            }
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Organization name shown in checkout, customer portal, emails etc."
          },
          "slug": {
            "type": "string",
            "title": "Slug",
            "description": "Unique organization slug in checkout, customer portal and credit card statements."
          },
          "avatar_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avatar Url",
            "description": "Avatar URL shown in checkout, customer portal, emails etc."
          },
          "email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email",
            "description": "Public support email."
          },
          "website": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Website",
            "description": "Official website of the organization."
          },
          "socials": {
            "items": {
              "$ref": "#/components/schemas/OrganizationSocialLink"
            },
            "type": "array",
            "title": "Socials",
            "description": "Links to social profiles."
          },
          "details_submitted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Details Submitted At",
            "description": "When the business details were submitted."
          },
          "feature_settings": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OrganizationFeatureSettings"
              },
              {
                "type": "null"
              }
            ],
            "description": "Organization feature settings"
          },
          "subscription_settings": {
            "$ref": "#/components/schemas/OrganizationSubscriptionSettings",
            "description": "Settings related to subscriptions management"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "name",
          "slug",
          "avatar_url",
          "email",
          "website",
          "socials",
          "details_submitted_at",
          "feature_settings",
          "subscription_settings"
        ],
        "title": "Organization"
      },
      "OrganizationAvatarFileCreate": {
        "properties": {
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "examples": [
                  "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                ],
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "mime_type": {
            "type": "string",
            "pattern": "^image\\/(jpeg|png|gif|webp|svg\\+xml)$",
            "title": "Mime Type",
            "description": "MIME type of the file. Only images are supported for this type of file."
          },
          "size": {
            "type": "integer",
            "maximum": 1048576,
            "title": "Size",
            "description": "Size of the file. A maximum of 1 MB is allowed for this type of file."
          },
          "checksum_sha256_base64": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Base64"
          },
          "upload": {
            "$ref": "#/components/schemas/S3FileCreateMultipart"
          },
          "service": {
            "type": "string",
            "const": "organization_avatar",
            "title": "Service"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version"
          }
        },
        "type": "object",
        "required": [
          "name",
          "mime_type",
          "size",
          "upload",
          "service"
        ],
        "title": "OrganizationAvatarFileCreate",
        "description": "Schema to create a file to be used as an organization avatar."
      },
      "OrganizationAvatarFileRead": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "path": {
            "type": "string",
            "title": "Path"
          },
          "mime_type": {
            "type": "string",
            "title": "Mime Type"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "storage_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Storage Version"
          },
          "checksum_etag": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Etag"
          },
          "checksum_sha256_base64": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Base64"
          },
          "checksum_sha256_hex": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Hex"
          },
          "last_modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Modified At"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version"
          },
          "service": {
            "type": "string",
            "const": "organization_avatar",
            "title": "Service"
          },
          "is_uploaded": {
            "type": "boolean",
            "title": "Is Uploaded"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "size_readable": {
            "type": "string",
            "title": "Size Readable"
          },
          "public_url": {
            "type": "string",
            "title": "Public Url"
          }
        },
        "type": "object",
        "required": [
          "id",
          "organization_id",
          "name",
          "path",
          "mime_type",
          "size",
          "storage_version",
          "checksum_etag",
          "checksum_sha256_base64",
          "checksum_sha256_hex",
          "last_modified_at",
          "version",
          "service",
          "is_uploaded",
          "created_at",
          "size_readable",
          "public_url"
        ],
        "title": "OrganizationAvatarFileRead",
        "description": "File to be used as an organization avatar."
      },
      "OrganizationCreate": {
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "title": "Name"
          },
          "slug": {
            "type": "string",
            "minLength": 3,
            "title": "Slug"
          },
          "avatar_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avatar Url"
          },
          "email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email",
            "description": "Public support email."
          },
          "website": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Website",
            "description": "Official website of the organization."
          },
          "socials": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/OrganizationSocialLink"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Socials",
            "description": "Link to social profiles."
          },
          "details": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OrganizationDetails"
              },
              {
                "type": "null"
              }
            ],
            "description": "Additional, private, business details Polar needs about active organizations for compliance (KYC)."
          },
          "feature_settings": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OrganizationFeatureSettings"
              },
              {
                "type": "null"
              }
            ]
          },
          "subscription_settings": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OrganizationSubscriptionSettings"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "name",
          "slug"
        ],
        "title": "OrganizationCreate"
      },
      "OrganizationDetails": {
        "properties": {
          "about": {
            "type": "string",
            "title": "About",
            "description": "Brief information about you and your business."
          },
          "product_description": {
            "type": "string",
            "title": "Product Description",
            "description": "Description of digital products being sold."
          },
          "intended_use": {
            "type": "string",
            "title": "Intended Use",
            "description": "How the organization will integrate and use Polar."
          },
          "customer_acquisition": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Customer Acquisition",
            "description": "Main customer acquisition channels."
          },
          "future_annual_revenue": {
            "type": "integer",
            "title": "Future Annual Revenue",
            "description": "Estimated revenue in the next 12 months"
          },
          "switching": {
            "type": "boolean",
            "title": "Switching",
            "description": "Switching from another platform?",
            "default": true
          },
          "switching_from": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "paddle",
                  "lemon_squeezy",
                  "gumroad",
                  "stripe",
                  "other"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Switching From",
            "description": "Which platform the organization is migrating from."
          },
          "previous_annual_revenue": {
            "type": "integer",
            "title": "Previous Annual Revenue",
            "description": "Revenue from last year if applicable.",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "about",
          "product_description",
          "intended_use",
          "customer_acquisition",
          "future_annual_revenue"
        ],
        "title": "OrganizationDetails"
      },
      "OrganizationFeatureSettings": {
        "properties": {
          "issue_funding_enabled": {
            "type": "boolean",
            "title": "Issue Funding Enabled",
            "description": "If this organization has issue funding enabled",
            "default": false
          },
          "usage_based_billing_enabled": {
            "type": "boolean",
            "title": "Usage Based Billing Enabled",
            "description": "If this organization has usage-based billing enabled",
            "default": false
          }
        },
        "type": "object",
        "title": "OrganizationFeatureSettings"
      },
      "OrganizationProfileSettings": {
        "properties": {
          "enabled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Enabled",
            "description": "If this organization has a profile enabled"
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 160
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "A description of the organization"
          },
          "featured_projects": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "format": "uuid4"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Featured Projects",
            "description": "A list of featured projects"
          },
          "featured_organizations": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "format": "uuid4"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Featured Organizations",
            "description": "A list of featured organizations"
          },
          "links": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "maxLength": 2083,
                  "minLength": 1,
                  "format": "uri"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Links",
            "description": "A list of links associated with the organization"
          },
          "subscribe": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OrganizationSubscribePromoteSettings"
              },
              {
                "type": "null"
              }
            ],
            "description": "Subscription promotion settings",
            "default": {
              "promote": true,
              "show_count": true,
              "count_free": true
            }
          },
          "accent_color": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Accent Color",
            "description": "Accent color for the organization"
          }
        },
        "type": "object",
        "title": "OrganizationProfileSettings"
      },
      "OrganizationSocialLink": {
        "properties": {
          "platform": {
            "$ref": "#/components/schemas/OrganizationSocialPlatforms",
            "description": "The social platform of the URL"
          },
          "url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "Url",
            "description": "The URL to the organization profile"
          }
        },
        "type": "object",
        "required": [
          "platform",
          "url"
        ],
        "title": "OrganizationSocialLink"
      },
      "OrganizationSocialPlatforms": {
        "type": "string",
        "enum": [
          "x",
          "github",
          "facebook",
          "instagram",
          "youtube",
          "tiktok",
          "linkedin",
          "other"
        ],
        "title": "OrganizationSocialPlatforms"
      },
      "OrganizationSortProperty": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "slug",
          "-slug",
          "name",
          "-name"
        ],
        "title": "OrganizationSortProperty"
      },
      "OrganizationSubscribePromoteSettings": {
        "properties": {
          "promote": {
            "type": "boolean",
            "title": "Promote",
            "description": "Promote email subscription (free)",
            "default": true
          },
          "show_count": {
            "type": "boolean",
            "title": "Show Count",
            "description": "Show subscription count publicly",
            "default": true
          },
          "count_free": {
            "type": "boolean",
            "title": "Count Free",
            "description": "Include free subscribers in total count",
            "default": true
          }
        },
        "type": "object",
        "title": "OrganizationSubscribePromoteSettings"
      },
      "OrganizationSubscriptionSettings": {
        "properties": {
          "allow_multiple_subscriptions": {
            "type": "boolean",
            "title": "Allow Multiple Subscriptions"
          },
          "allow_customer_updates": {
            "type": "boolean",
            "title": "Allow Customer Updates"
          },
          "proration_behavior": {
            "$ref": "#/components/schemas/SubscriptionProrationBehavior"
          }
        },
        "type": "object",
        "required": [
          "allow_multiple_subscriptions",
          "allow_customer_updates",
          "proration_behavior"
        ],
        "title": "OrganizationSubscriptionSettings"
      },
      "OrganizationUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 3
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "avatar_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avatar Url"
          },
          "email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email",
            "description": "Public support email."
          },
          "website": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Website",
            "description": "Official website of the organization."
          },
          "socials": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/OrganizationSocialLink"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Socials",
            "description": "Links to social profiles."
          },
          "details": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OrganizationDetails"
              },
              {
                "type": "null"
              }
            ],
            "description": "Additional, private, business details Polar needs about active organizations for compliance (KYC)."
          },
          "feature_settings": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OrganizationFeatureSettings"
              },
              {
                "type": "null"
              }
            ]
          },
          "subscription_settings": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OrganizationSubscriptionSettings"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "title": "OrganizationUpdate"
      },
      "Pagination": {
        "properties": {
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          },
          "max_page": {
            "type": "integer",
            "title": "Max Page"
          }
        },
        "type": "object",
        "required": [
          "total_count",
          "max_page"
        ],
        "title": "Pagination"
      },
      "Payment": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/CardPayment"
          },
          {
            "$ref": "#/components/schemas/GenericPayment"
          }
        ]
      },
      "PaymentError": {
        "properties": {
          "error": {
            "type": "string",
            "const": "PaymentError",
            "title": "Error",
            "examples": [
              "PaymentError"
            ]
          },
          "detail": {
            "type": "string",
            "title": "Detail"
          }
        },
        "type": "object",
        "required": [
          "error",
          "detail"
        ],
        "title": "PaymentError"
      },
      "PaymentMethodCard": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "type": {
            "type": "string",
            "const": "card",
            "title": "Type"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "default": {
            "type": "boolean",
            "title": "Default"
          },
          "card": {
            "$ref": "#/components/schemas/PaymentMethodCardData"
          }
        },
        "type": "object",
        "required": [
          "id",
          "type",
          "created_at",
          "default",
          "card"
        ],
        "title": "PaymentMethodCard"
      },
      "PaymentMethodCardData": {
        "properties": {
          "brand": {
            "type": "string",
            "title": "Brand"
          },
          "last4": {
            "type": "string",
            "title": "Last4"
          },
          "exp_month": {
            "type": "integer",
            "title": "Exp Month"
          },
          "exp_year": {
            "type": "integer",
            "title": "Exp Year"
          },
          "wallet": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Wallet"
          }
        },
        "type": "object",
        "required": [
          "brand",
          "last4",
          "exp_month",
          "exp_year"
        ],
        "title": "PaymentMethodCardData"
      },
      "PaymentMethodGeneric": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "default": {
            "type": "boolean",
            "title": "Default"
          }
        },
        "type": "object",
        "required": [
          "id",
          "type",
          "created_at",
          "default"
        ],
        "title": "PaymentMethodGeneric"
      },
      "PaymentProcessor": {
        "type": "string",
        "enum": [
          "stripe"
        ],
        "title": "PaymentProcessor"
      },
      "PaymentSortProperty": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "status",
          "-status",
          "amount",
          "-amount",
          "method",
          "-method"
        ],
        "title": "PaymentSortProperty"
      },
      "PaymentStatus": {
        "type": "string",
        "enum": [
          "pending",
          "succeeded",
          "failed"
        ],
        "title": "PaymentStatus"
      },
      "Product": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the product."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the product."
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the product."
          },
          "recurring_interval": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SubscriptionRecurringInterval"
              },
              {
                "type": "null"
              }
            ],
            "description": "The recurring interval of the product. If `None`, the product is a one-time purchase."
          },
          "is_recurring": {
            "type": "boolean",
            "title": "Is Recurring",
            "description": "Whether the product is a subscription."
          },
          "is_archived": {
            "type": "boolean",
            "title": "Is Archived",
            "description": "Whether the product is archived and no longer available."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the product."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "prices": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/LegacyRecurringProductPrice"
                },
                {
                  "$ref": "#/components/schemas/ProductPrice"
                }
              ]
            },
            "type": "array",
            "title": "Prices",
            "description": "List of prices for this product."
          },
          "benefits": {
            "items": {
              "$ref": "#/components/schemas/Benefit",
              "title": "Benefit"
            },
            "type": "array",
            "title": "Benefits",
            "description": "List of benefits granted by the product."
          },
          "medias": {
            "items": {
              "$ref": "#/components/schemas/ProductMediaFileRead"
            },
            "type": "array",
            "title": "Medias",
            "description": "List of medias associated to the product."
          },
          "attached_custom_fields": {
            "items": {
              "$ref": "#/components/schemas/AttachedCustomField"
            },
            "type": "array",
            "title": "Attached Custom Fields",
            "description": "List of custom fields attached to the product."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "name",
          "description",
          "recurring_interval",
          "is_recurring",
          "is_archived",
          "organization_id",
          "metadata",
          "prices",
          "benefits",
          "medias",
          "attached_custom_fields"
        ],
        "title": "Product",
        "description": "A product."
      },
      "ProductBenefitsUpdate": {
        "properties": {
          "benefits": {
            "items": {
              "type": "string",
              "format": "uuid4",
              "description": "The benefit ID.",
              "x-polar-selector-widget": {
                "displayProperty": "description",
                "resourceName": "Benefit",
                "resourceRoot": "/v1/benefits"
              }
            },
            "type": "array",
            "title": "Benefits",
            "description": "List of benefit IDs. Each one must be on the same organization as the product."
          }
        },
        "type": "object",
        "required": [
          "benefits"
        ],
        "title": "ProductBenefitsUpdate",
        "description": "Schema to update the benefits granted by a product."
      },
      "ProductBillingType": {
        "type": "string",
        "enum": [
          "one_time",
          "recurring"
        ],
        "title": "ProductBillingType"
      },
      "ProductCreate": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "name": {
            "type": "string",
            "minLength": 3,
            "title": "Name",
            "description": "The name of the product."
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the product."
          },
          "recurring_interval": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SubscriptionRecurringInterval"
              },
              {
                "type": "null"
              }
            ],
            "description": "The recurring interval of the product. If `None`, the product is a one-time purchase."
          },
          "prices": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ProductPriceFixedCreate"
                },
                {
                  "$ref": "#/components/schemas/ProductPriceCustomCreate"
                },
                {
                  "$ref": "#/components/schemas/ProductPriceFreeCreate"
                },
                {
                  "$ref": "#/components/schemas/ProductPriceMeteredUnitCreate"
                }
              ]
            },
            "type": "array",
            "minItems": 1,
            "title": "ProductPriceCreateList",
            "description": "List of available prices for this product. It should contain at most one static price (fixed, custom or free), and any number of metered prices. Metered prices are not supported on one-time purchase products."
          },
          "medias": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "format": "uuid4"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Medias",
            "description": "List of file IDs. Each one must be on the same organization as the product, of type `product_media` and correctly uploaded."
          },
          "attached_custom_fields": {
            "items": {
              "$ref": "#/components/schemas/AttachedCustomFieldCreate"
            },
            "type": "array",
            "title": "Attached Custom Fields",
            "description": "List of custom fields to attach."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "examples": [
                  "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                ],
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the product. **Required unless you use an organization token.**"
          }
        },
        "type": "object",
        "required": [
          "name",
          "recurring_interval",
          "prices"
        ],
        "title": "ProductCreate",
        "description": "Schema to create a product."
      },
      "ProductMediaFileCreate": {
        "properties": {
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "examples": [
                  "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                ],
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "mime_type": {
            "type": "string",
            "pattern": "^image\\/(jpeg|png|gif|webp|svg\\+xml)$",
            "title": "Mime Type",
            "description": "MIME type of the file. Only images are supported for this type of file."
          },
          "size": {
            "type": "integer",
            "maximum": 10485760,
            "title": "Size",
            "description": "Size of the file. A maximum of 10 MB is allowed for this type of file."
          },
          "checksum_sha256_base64": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Base64"
          },
          "upload": {
            "$ref": "#/components/schemas/S3FileCreateMultipart"
          },
          "service": {
            "type": "string",
            "const": "product_media",
            "title": "Service"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version"
          }
        },
        "type": "object",
        "required": [
          "name",
          "mime_type",
          "size",
          "upload",
          "service"
        ],
        "title": "ProductMediaFileCreate",
        "description": "Schema to create a file to be used as a product media file."
      },
      "ProductMediaFileRead": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "path": {
            "type": "string",
            "title": "Path"
          },
          "mime_type": {
            "type": "string",
            "title": "Mime Type"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "storage_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Storage Version"
          },
          "checksum_etag": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Etag"
          },
          "checksum_sha256_base64": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Base64"
          },
          "checksum_sha256_hex": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Hex"
          },
          "last_modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Modified At"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version"
          },
          "service": {
            "type": "string",
            "const": "product_media",
            "title": "Service"
          },
          "is_uploaded": {
            "type": "boolean",
            "title": "Is Uploaded"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "size_readable": {
            "type": "string",
            "title": "Size Readable"
          },
          "public_url": {
            "type": "string",
            "title": "Public Url"
          }
        },
        "type": "object",
        "required": [
          "id",
          "organization_id",
          "name",
          "path",
          "mime_type",
          "size",
          "storage_version",
          "checksum_etag",
          "checksum_sha256_base64",
          "checksum_sha256_hex",
          "last_modified_at",
          "version",
          "service",
          "is_uploaded",
          "created_at",
          "size_readable",
          "public_url"
        ],
        "title": "ProductMediaFileRead",
        "description": "File to be used as a product media file."
      },
      "ProductPrice": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ProductPriceFixed"
          },
          {
            "$ref": "#/components/schemas/ProductPriceCustom"
          },
          {
            "$ref": "#/components/schemas/ProductPriceFree"
          },
          {
            "$ref": "#/components/schemas/ProductPriceMeteredUnit"
          }
        ],
        "discriminator": {
          "propertyName": "amount_type",
          "mapping": {
            "custom": "#/components/schemas/ProductPriceCustom",
            "fixed": "#/components/schemas/ProductPriceFixed",
            "free": "#/components/schemas/ProductPriceFree",
            "metered_unit": "#/components/schemas/ProductPriceMeteredUnit"
          }
        }
      },
      "ProductPriceCustom": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the price."
          },
          "amount_type": {
            "type": "string",
            "const": "custom",
            "title": "Amount Type"
          },
          "is_archived": {
            "type": "boolean",
            "title": "Is Archived",
            "description": "Whether the price is archived and no longer available."
          },
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id",
            "description": "The ID of the product owning the price."
          },
          "type": {
            "$ref": "#/components/schemas/ProductPriceType",
            "deprecated": true
          },
          "recurring_interval": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SubscriptionRecurringInterval"
              },
              {
                "type": "null"
              }
            ],
            "deprecated": true
          },
          "price_currency": {
            "type": "string",
            "title": "Price Currency",
            "description": "The currency."
          },
          "minimum_amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Minimum Amount",
            "description": "The minimum amount the customer can pay."
          },
          "maximum_amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Maximum Amount",
            "description": "The maximum amount the customer can pay."
          },
          "preset_amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Preset Amount",
            "description": "The initial amount shown to the customer."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "amount_type",
          "is_archived",
          "product_id",
          "type",
          "recurring_interval",
          "price_currency",
          "minimum_amount",
          "maximum_amount",
          "preset_amount"
        ],
        "title": "ProductPriceCustom",
        "description": "A pay-what-you-want price for a product."
      },
      "ProductPriceCustomCreate": {
        "properties": {
          "amount_type": {
            "type": "string",
            "const": "custom",
            "title": "Amount Type"
          },
          "price_currency": {
            "type": "string",
            "pattern": "usd",
            "title": "Price Currency",
            "description": "The currency. Currently, only `usd` is supported.",
            "default": "usd"
          },
          "minimum_amount": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 99999999,
                "minimum": 50,
                "description": "The price in cents."
              },
              {
                "type": "null"
              }
            ],
            "title": "Minimum Amount",
            "description": "The minimum amount the customer can pay."
          },
          "maximum_amount": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 1000000,
                "minimum": 50,
                "description": "The price in cents."
              },
              {
                "type": "null"
              }
            ],
            "title": "Maximum Amount",
            "description": "The maximum amount the customer can pay."
          },
          "preset_amount": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 1000000,
                "minimum": 50,
                "description": "The price in cents."
              },
              {
                "type": "null"
              }
            ],
            "title": "Preset Amount",
            "description": "The initial amount shown to the customer."
          }
        },
        "type": "object",
        "required": [
          "amount_type"
        ],
        "title": "ProductPriceCustomCreate",
        "description": "Schema to create a pay-what-you-want price."
      },
      "ProductPriceFixed": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the price."
          },
          "amount_type": {
            "type": "string",
            "const": "fixed",
            "title": "Amount Type"
          },
          "is_archived": {
            "type": "boolean",
            "title": "Is Archived",
            "description": "Whether the price is archived and no longer available."
          },
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id",
            "description": "The ID of the product owning the price."
          },
          "type": {
            "$ref": "#/components/schemas/ProductPriceType",
            "deprecated": true
          },
          "recurring_interval": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SubscriptionRecurringInterval"
              },
              {
                "type": "null"
              }
            ],
            "deprecated": true
          },
          "price_currency": {
            "type": "string",
            "title": "Price Currency",
            "description": "The currency."
          },
          "price_amount": {
            "type": "integer",
            "title": "Price Amount",
            "description": "The price in cents."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "amount_type",
          "is_archived",
          "product_id",
          "type",
          "recurring_interval",
          "price_currency",
          "price_amount"
        ],
        "title": "ProductPriceFixed",
        "description": "A fixed price for a product."
      },
      "ProductPriceFixedCreate": {
        "properties": {
          "amount_type": {
            "type": "string",
            "const": "fixed",
            "title": "Amount Type"
          },
          "price_amount": {
            "type": "integer",
            "maximum": 99999999,
            "minimum": 50,
            "title": "Price Amount",
            "description": "The price in cents."
          },
          "price_currency": {
            "type": "string",
            "pattern": "usd",
            "title": "Price Currency",
            "description": "The currency. Currently, only `usd` is supported.",
            "default": "usd"
          }
        },
        "type": "object",
        "required": [
          "amount_type",
          "price_amount"
        ],
        "title": "ProductPriceFixedCreate",
        "description": "Schema to create a fixed price."
      },
      "ProductPriceFree": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the price."
          },
          "amount_type": {
            "type": "string",
            "const": "free",
            "title": "Amount Type"
          },
          "is_archived": {
            "type": "boolean",
            "title": "Is Archived",
            "description": "Whether the price is archived and no longer available."
          },
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id",
            "description": "The ID of the product owning the price."
          },
          "type": {
            "$ref": "#/components/schemas/ProductPriceType",
            "deprecated": true
          },
          "recurring_interval": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SubscriptionRecurringInterval"
              },
              {
                "type": "null"
              }
            ],
            "deprecated": true
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "amount_type",
          "is_archived",
          "product_id",
          "type",
          "recurring_interval"
        ],
        "title": "ProductPriceFree",
        "description": "A free price for a product."
      },
      "ProductPriceFreeCreate": {
        "properties": {
          "amount_type": {
            "type": "string",
            "const": "free",
            "title": "Amount Type"
          }
        },
        "type": "object",
        "required": [
          "amount_type"
        ],
        "title": "ProductPriceFreeCreate",
        "description": "Schema to create a free price."
      },
      "ProductPriceMeter": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the meter."
          }
        },
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "title": "ProductPriceMeter",
        "description": "A meter associated to a metered price."
      },
      "ProductPriceMeteredUnit": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the price."
          },
          "amount_type": {
            "type": "string",
            "const": "metered_unit",
            "title": "Amount Type"
          },
          "is_archived": {
            "type": "boolean",
            "title": "Is Archived",
            "description": "Whether the price is archived and no longer available."
          },
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id",
            "description": "The ID of the product owning the price."
          },
          "type": {
            "$ref": "#/components/schemas/ProductPriceType",
            "deprecated": true
          },
          "recurring_interval": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SubscriptionRecurringInterval"
              },
              {
                "type": "null"
              }
            ],
            "deprecated": true
          },
          "price_currency": {
            "type": "string",
            "title": "Price Currency",
            "description": "The currency."
          },
          "unit_amount": {
            "type": "string",
            "title": "Unit Amount",
            "description": "The price per unit in cents."
          },
          "cap_amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cap Amount",
            "description": "The maximum amount in cents that can be charged, regardless of the number of units consumed."
          },
          "meter_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Meter Id",
            "description": "The ID of the meter associated to the price."
          },
          "meter": {
            "$ref": "#/components/schemas/ProductPriceMeter",
            "description": "The meter associated to the price."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "amount_type",
          "is_archived",
          "product_id",
          "type",
          "recurring_interval",
          "price_currency",
          "unit_amount",
          "cap_amount",
          "meter_id",
          "meter"
        ],
        "title": "ProductPriceMeteredUnit",
        "description": "A metered, usage-based, price for a product, with a fixed unit price."
      },
      "ProductPriceMeteredUnitCreate": {
        "properties": {
          "amount_type": {
            "type": "string",
            "const": "metered_unit",
            "title": "Amount Type"
          },
          "meter_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Meter Id",
            "description": "The ID of the meter associated to the price."
          },
          "price_currency": {
            "type": "string",
            "pattern": "usd",
            "title": "Price Currency",
            "description": "The currency. Currently, only `usd` is supported.",
            "default": "usd"
          },
          "unit_amount": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0
              },
              {
                "type": "string"
              }
            ],
            "title": "Unit Amount",
            "description": "The price per unit in cents. Supports up to 12 decimal places."
          },
          "cap_amount": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Cap Amount",
            "description": "Optional maximum amount in cents that can be charged, regardless of the number of units consumed."
          }
        },
        "type": "object",
        "required": [
          "amount_type",
          "meter_id",
          "unit_amount"
        ],
        "title": "ProductPriceMeteredUnitCreate",
        "description": "Schema to create a metered price with a fixed unit price."
      },
      "ProductPriceType": {
        "type": "string",
        "enum": [
          "one_time",
          "recurring"
        ],
        "title": "ProductPriceType"
      },
      "ProductSortProperty": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "name",
          "-name",
          "price_amount_type",
          "-price_amount_type",
          "price_amount",
          "-price_amount"
        ],
        "title": "ProductSortProperty"
      },
      "ProductUpdate": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "name": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 3,
                "description": "The name of the product."
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the product."
          },
          "recurring_interval": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SubscriptionRecurringInterval"
              },
              {
                "type": "null"
              }
            ],
            "description": "The recurring interval of the product. If `None`, the product is a one-time purchase. **Can only be set on legacy recurring products. Once set, it can't be changed.**"
          },
          "is_archived": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Archived",
            "description": "Whether the product is archived. If `true`, the product won't be available for purchase anymore. Existing customers will still have access to their benefits, and subscriptions will continue normally."
          },
          "prices": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ExistingProductPrice"
                    },
                    {
                      "$ref": "#/components/schemas/ProductPriceFixedCreate"
                    },
                    {
                      "$ref": "#/components/schemas/ProductPriceCustomCreate"
                    },
                    {
                      "$ref": "#/components/schemas/ProductPriceFreeCreate"
                    },
                    {
                      "$ref": "#/components/schemas/ProductPriceMeteredUnitCreate"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prices",
            "description": "List of available prices for this product. If you want to keep existing prices, include them in the list as an `ExistingProductPrice` object."
          },
          "medias": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "format": "uuid4"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Medias",
            "description": "List of file IDs. Each one must be on the same organization as the product, of type `product_media` and correctly uploaded."
          },
          "attached_custom_fields": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/AttachedCustomFieldCreate"
                },
                "type": "array",
                "description": "List of custom fields to attach."
              },
              {
                "type": "null"
              }
            ],
            "title": "Attached Custom Fields"
          }
        },
        "type": "object",
        "title": "ProductUpdate",
        "description": "Schema to update a product."
      },
      "PropertyAggregation": {
        "properties": {
          "func": {
            "type": "string",
            "enum": [
              "sum",
              "max",
              "min",
              "avg"
            ],
            "title": "Func"
          },
          "property": {
            "type": "string",
            "title": "Property"
          }
        },
        "type": "object",
        "required": [
          "func",
          "property"
        ],
        "title": "PropertyAggregation"
      },
      "Refund": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "status": {
            "$ref": "#/components/schemas/RefundStatus"
          },
          "reason": {
            "$ref": "#/components/schemas/RefundReason"
          },
          "amount": {
            "type": "integer",
            "title": "Amount"
          },
          "tax_amount": {
            "type": "integer",
            "title": "Tax Amount"
          },
          "currency": {
            "type": "string",
            "title": "Currency"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id"
          },
          "order_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Order Id"
          },
          "subscription_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subscription Id"
          },
          "customer_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Customer Id"
          },
          "revoke_benefits": {
            "type": "boolean",
            "title": "Revoke Benefits"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "metadata",
          "status",
          "reason",
          "amount",
          "tax_amount",
          "currency",
          "organization_id",
          "order_id",
          "subscription_id",
          "customer_id",
          "revoke_benefits"
        ],
        "title": "Refund"
      },
      "RefundAmountTooHigh": {
        "properties": {
          "error": {
            "type": "string",
            "const": "RefundAmountTooHigh",
            "title": "Error",
            "examples": [
              "RefundAmountTooHigh"
            ]
          },
          "detail": {
            "type": "string",
            "title": "Detail"
          }
        },
        "type": "object",
        "required": [
          "error",
          "detail"
        ],
        "title": "RefundAmountTooHigh"
      },
      "RefundCreate": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A floating-point number\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "order_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Order Id"
          },
          "reason": {
            "$ref": "#/components/schemas/RefundReason"
          },
          "amount": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "Amount",
            "description": "Amount to refund in cents. Minimum is 1."
          },
          "comment": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Comment",
            "description": "An internal comment about the refund."
          },
          "revoke_benefits": {
            "type": "boolean",
            "title": "Revoke Benefits",
            "description": "Should this refund trigger the associated customer benefits to be revoked?\n\n**Note:**\nOnly allowed in case the `order` is a one-time purchase.\nSubscriptions automatically revoke customer benefits once the\nsubscription itself is revoked, i.e fully canceled.",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "order_id",
          "reason",
          "amount"
        ],
        "title": "RefundCreate"
      },
      "RefundReason": {
        "type": "string",
        "enum": [
          "duplicate",
          "fraudulent",
          "customer_request",
          "service_disruption",
          "satisfaction_guarantee",
          "other"
        ],
        "title": "RefundReason"
      },
      "RefundSortProperty": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "amount",
          "-amount"
        ],
        "title": "RefundSortProperty"
      },
      "RefundStatus": {
        "type": "string",
        "enum": [
          "pending",
          "succeeded",
          "failed",
          "canceled"
        ],
        "title": "RefundStatus"
      },
      "RefundedAlready": {
        "properties": {
          "error": {
            "type": "string",
            "const": "RefundedAlready",
            "title": "Error",
            "examples": [
              "RefundedAlready"
            ]
          },
          "detail": {
            "type": "string",
            "title": "Detail"
          }
        },
        "type": "object",
        "required": [
          "error",
          "detail"
        ],
        "title": "RefundedAlready"
      },
      "ResourceNotFound": {
        "properties": {
          "error": {
            "type": "string",
            "const": "ResourceNotFound",
            "title": "Error",
            "examples": [
              "ResourceNotFound"
            ]
          },
          "detail": {
            "type": "string",
            "title": "Detail"
          }
        },
        "type": "object",
        "required": [
          "error",
          "detail"
        ],
        "title": "ResourceNotFound"
      },
      "RevokeTokenResponse": {
        "properties": {},
        "type": "object",
        "title": "RevokeTokenResponse"
      },
      "S3DownloadURL": {
        "properties": {
          "url": {
            "type": "string",
            "title": "Url"
          },
          "headers": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Headers",
            "default": {}
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "title": "Expires At"
          }
        },
        "type": "object",
        "required": [
          "url",
          "expires_at"
        ],
        "title": "S3DownloadURL"
      },
      "S3FileCreateMultipart": {
        "properties": {
          "parts": {
            "items": {
              "$ref": "#/components/schemas/S3FileCreatePart"
            },
            "type": "array",
            "title": "Parts"
          }
        },
        "type": "object",
        "required": [
          "parts"
        ],
        "title": "S3FileCreateMultipart"
      },
      "S3FileCreatePart": {
        "properties": {
          "number": {
            "type": "integer",
            "title": "Number"
          },
          "chunk_start": {
            "type": "integer",
            "title": "Chunk Start"
          },
          "chunk_end": {
            "type": "integer",
            "title": "Chunk End"
          },
          "checksum_sha256_base64": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Base64"
          }
        },
        "type": "object",
        "required": [
          "number",
          "chunk_start",
          "chunk_end"
        ],
        "title": "S3FileCreatePart"
      },
      "S3FileUploadCompletedPart": {
        "properties": {
          "number": {
            "type": "integer",
            "title": "Number"
          },
          "checksum_etag": {
            "type": "string",
            "title": "Checksum Etag"
          },
          "checksum_sha256_base64": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Base64"
          }
        },
        "type": "object",
        "required": [
          "number",
          "checksum_etag",
          "checksum_sha256_base64"
        ],
        "title": "S3FileUploadCompletedPart"
      },
      "S3FileUploadMultipart": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "path": {
            "type": "string",
            "title": "Path"
          },
          "parts": {
            "items": {
              "$ref": "#/components/schemas/S3FileUploadPart"
            },
            "type": "array",
            "title": "Parts"
          }
        },
        "type": "object",
        "required": [
          "id",
          "path",
          "parts"
        ],
        "title": "S3FileUploadMultipart"
      },
      "S3FileUploadPart": {
        "properties": {
          "number": {
            "type": "integer",
            "title": "Number"
          },
          "chunk_start": {
            "type": "integer",
            "title": "Chunk Start"
          },
          "chunk_end": {
            "type": "integer",
            "title": "Chunk End"
          },
          "checksum_sha256_base64": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Base64"
          },
          "url": {
            "type": "string",
            "title": "Url"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "title": "Expires At"
          },
          "headers": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Headers",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "number",
          "chunk_start",
          "chunk_end",
          "url",
          "expires_at"
        ],
        "title": "S3FileUploadPart"
      },
      "Scope": {
        "type": "string",
        "enum": [
          "openid",
          "profile",
          "email",
          "user:read",
          "admin",
          "web_default",
          "organizations:read",
          "organizations:write",
          "custom_fields:read",
          "custom_fields:write",
          "discounts:read",
          "discounts:write",
          "checkout_links:read",
          "checkout_links:write",
          "checkouts:read",
          "checkouts:write",
          "transactions:read",
          "transactions:write",
          "payouts:read",
          "payouts:write",
          "products:read",
          "products:write",
          "benefits:read",
          "benefits:write",
          "events:read",
          "events:write",
          "meters:read",
          "meters:write",
          "files:read",
          "files:write",
          "subscriptions:read",
          "subscriptions:write",
          "customers:read",
          "customers:write",
          "customer_meters:read",
          "customer_sessions:write",
          "orders:read",
          "orders:write",
          "refunds:read",
          "refunds:write",
          "payments:read",
          "metrics:read",
          "webhooks:read",
          "webhooks:write",
          "external_organizations:read",
          "license_keys:read",
          "license_keys:write",
          "repositories:read",
          "repositories:write",
          "issues:read",
          "issues:write",
          "customer_portal:read",
          "customer_portal:write",
          "notifications:read",
          "notifications:write",
          "notification_recipients:read",
          "notification_recipients:write"
        ],
        "title": "Scope",
        "enumNames": {
          "benefits:read": "Read benefits",
          "benefits:write": "Create or modify benefits",
          "checkout_links:read": "Read checkout links",
          "checkout_links:write": "Create or modify checkout links",
          "checkouts:read": "Read checkout sessions",
          "checkouts:write": "Create or modify checkout sessions",
          "custom_fields:read": "Read custom fields",
          "custom_fields:write": "Create or modify custom fields",
          "customer_meters:read": "Read customer meters",
          "customer_portal:read": "Read your orders, subscriptions and benefits",
          "customer_portal:write": "Create or modify your orders, subscriptions and benefits",
          "customer_sessions:write": "Create or modify customer sessions",
          "customers:read": "Read customers",
          "customers:write": "Create or modify customers",
          "discounts:read": "Read discounts",
          "discounts:write": "Create or modify discounts",
          "email": "Read your email address",
          "events:read": "Read events",
          "events:write": "Create events",
          "external_organizations:read": "Read external organizations",
          "files:read": "Read file uploads",
          "files:write": "Create or modify file uploads",
          "license_keys:read": "Read license keys",
          "license_keys:write": "Modify license keys",
          "meters:read": "Read meters",
          "meters:write": "Create or modify meters",
          "metrics:read": "Read metrics",
          "notification_recipients:read": "Read notification recipients",
          "notification_recipients:write": "Create or modify notification recipients",
          "notifications:read": "Read notifications",
          "notifications:write": "Mark notifications as read",
          "openid": "OpenID",
          "orders:read": "Read orders made on your organizations",
          "orders:write": "Modify orders made on your organizations",
          "organizations:read": "Read your organizations",
          "organizations:write": "Create or modify organizations",
          "payments:read": "Read payments made on your organizations",
          "payouts:read": "Read payouts",
          "payouts:write": "Create or modify payouts",
          "products:read": "Read products",
          "products:write": "Create or modify products",
          "profile": "Read your profile",
          "refunds:read": "Read refunds made on your organizations",
          "refunds:write": "Create or modify refunds",
          "subscriptions:read": "Read subscriptions made on your organizations",
          "subscriptions:write": "Create or modify subscriptions made on your organizations",
          "transactions:read": "Read transactions",
          "transactions:write": "Create or modify transactions",
          "user:read": "User Read",
          "web_default": "Web Default",
          "webhooks:read": "Read webhooks",
          "webhooks:write": "Create or modify webhooks"
        }
      },
      "SubType": {
        "type": "string",
        "enum": [
          "user",
          "organization"
        ],
        "title": "SubType"
      },
      "Subscription": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "amount": {
            "type": "integer",
            "title": "Amount",
            "description": "The amount of the subscription."
          },
          "currency": {
            "type": "string",
            "title": "Currency",
            "description": "The currency of the subscription."
          },
          "recurring_interval": {
            "$ref": "#/components/schemas/SubscriptionRecurringInterval",
            "description": "The interval at which the subscription recurs."
          },
          "status": {
            "$ref": "#/components/schemas/SubscriptionStatus",
            "description": "The status of the subscription."
          },
          "current_period_start": {
            "type": "string",
            "format": "date-time",
            "title": "Current Period Start",
            "description": "The start timestamp of the current billing period."
          },
          "current_period_end": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Current Period End",
            "description": "The end timestamp of the current billing period."
          },
          "cancel_at_period_end": {
            "type": "boolean",
            "title": "Cancel At Period End",
            "description": "Whether the subscription will be canceled at the end of the current period."
          },
          "canceled_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Canceled At",
            "description": "The timestamp when the subscription was canceled. The subscription might still be active if `cancel_at_period_end` is `true`."
          },
          "started_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Started At",
            "description": "The timestamp when the subscription started."
          },
          "ends_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ends At",
            "description": "The timestamp when the subscription will end."
          },
          "ended_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ended At",
            "description": "The timestamp when the subscription ended."
          },
          "customer_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Customer Id",
            "description": "The ID of the subscribed customer."
          },
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id",
            "description": "The ID of the subscribed product."
          },
          "discount_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Id",
            "description": "The ID of the applied discount, if any."
          },
          "checkout_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checkout Id"
          },
          "customer_cancellation_reason": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CustomerCancellationReason"
              },
              {
                "type": "null"
              }
            ]
          },
          "customer_cancellation_comment": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Cancellation Comment"
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "custom_field_data": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ]
            },
            "type": "object",
            "title": "Custom Field Data",
            "description": "Key-value object storing custom field values."
          },
          "customer": {
            "$ref": "#/components/schemas/SubscriptionCustomer"
          },
          "product": {
            "$ref": "#/components/schemas/Product"
          },
          "discount": {
            "anyOf": [
              {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/DiscountFixedOnceForeverDurationBase"
                  },
                  {
                    "$ref": "#/components/schemas/DiscountFixedRepeatDurationBase"
                  },
                  {
                    "$ref": "#/components/schemas/DiscountPercentageOnceForeverDurationBase"
                  },
                  {
                    "$ref": "#/components/schemas/DiscountPercentageRepeatDurationBase"
                  }
                ],
                "title": "SubscriptionDiscount"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount"
          },
          "prices": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/LegacyRecurringProductPrice"
                },
                {
                  "$ref": "#/components/schemas/ProductPrice"
                }
              ]
            },
            "type": "array",
            "title": "Prices",
            "description": "List of enabled prices for the subscription."
          },
          "meters": {
            "items": {
              "$ref": "#/components/schemas/SubscriptionMeter"
            },
            "type": "array",
            "title": "Meters",
            "description": "List of meters associated with the subscription."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "amount",
          "currency",
          "recurring_interval",
          "status",
          "current_period_start",
          "current_period_end",
          "cancel_at_period_end",
          "canceled_at",
          "started_at",
          "ends_at",
          "ended_at",
          "customer_id",
          "product_id",
          "discount_id",
          "checkout_id",
          "customer_cancellation_reason",
          "customer_cancellation_comment",
          "metadata",
          "customer",
          "product",
          "discount",
          "prices",
          "meters"
        ],
        "title": "Subscription"
      },
      "SubscriptionCancel": {
        "properties": {
          "customer_cancellation_reason": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CustomerCancellationReason"
              },
              {
                "type": "null"
              }
            ],
            "description": "Customer reason for cancellation.\n\nHelpful to monitor reasons behind churn for future improvements.\n\nOnly set this in case your own service is requesting the reason from the\ncustomer. Or you know based on direct conversations, i.e support, with\nthe customer.\n\n* `too_expensive`: Too expensive for the customer.\n* `missing_features`: Customer is missing certain features.\n* `switched_service`: Customer switched to another service.\n* `unused`: Customer is not using it enough.\n* `customer_service`: Customer is not satisfied with the customer service.\n* `low_quality`: Customer is unhappy with the quality.\n* `too_complex`: Customer considers the service too complicated.\n* `other`: Other reason(s)."
          },
          "customer_cancellation_comment": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Cancellation Comment",
            "description": "Customer feedback and why they decided to cancel.\n\n**IMPORTANT:**\nDo not use this to store internal notes! It's intended to be input\nfrom the customer and is therefore also available in their Polar\npurchases library.\n\nOnly set this in case your own service is requesting the reason from the\ncustomer. Or you copy a message directly from a customer\nconversation, i.e support."
          },
          "cancel_at_period_end": {
            "type": "boolean",
            "title": "Cancel At Period End",
            "description": "Cancel an active subscription once the current period ends.\n\nOr uncancel a subscription currently set to be revoked at period end."
          }
        },
        "type": "object",
        "required": [
          "cancel_at_period_end"
        ],
        "title": "SubscriptionCancel"
      },
      "SubscriptionCustomer": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the customer.",
            "examples": [
              "992fae2a-2a17-4b7a-8d9e-e287cf90131b"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "external_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "External Id",
            "description": "The ID of the customer in your system. This must be unique within the organization. Once set, it can't be updated.",
            "examples": [
              "usr_1337"
            ]
          },
          "email": {
            "type": "string",
            "title": "Email",
            "description": "The email address of the customer. This must be unique within the organization.",
            "examples": [
              "customer@example.com"
            ]
          },
          "email_verified": {
            "type": "boolean",
            "title": "Email Verified",
            "description": "Whether the customer email address is verified. The address is automatically verified when the customer accesses the customer portal using their email address.",
            "examples": [
              true
            ]
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "The name of the customer.",
            "examples": [
              "John Doe"
            ]
          },
          "billing_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address"
              },
              {
                "type": "null"
              }
            ]
          },
          "tax_id": {
            "anyOf": [
              {
                "prefixItems": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/components/schemas/TaxIDFormat"
                  }
                ],
                "type": "array",
                "maxItems": 2,
                "minItems": 2,
                "examples": [
                  [
                    "911144442",
                    "us_ein"
                  ],
                  [
                    "FR61954506077",
                    "eu_vat"
                  ]
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Id"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the customer.",
            "examples": [
              "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
            ]
          },
          "deleted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Deleted At",
            "description": "Timestamp for when the customer was soft deleted."
          },
          "avatar_url": {
            "type": "string",
            "title": "Avatar Url",
            "examples": [
              "https://www.gravatar.com/avatar/xxx?d=blank"
            ]
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "modified_at",
          "metadata",
          "external_id",
          "email",
          "email_verified",
          "name",
          "billing_address",
          "tax_id",
          "organization_id",
          "deleted_at",
          "avatar_url"
        ],
        "title": "SubscriptionCustomer"
      },
      "SubscriptionMeter": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "consumed_units": {
            "type": "number",
            "title": "Consumed Units",
            "description": "The number of consumed units so far in this billing period.",
            "examples": [
              25
            ]
          },
          "credited_units": {
            "type": "integer",
            "title": "Credited Units",
            "description": "The number of credited units so far in this billing period.",
            "examples": [
              100
            ]
          },
          "amount": {
            "type": "integer",
            "title": "Amount",
            "description": "The amount due in cents so far in this billing period.",
            "examples": [
              0
            ]
          },
          "meter_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Meter Id",
            "description": "The ID of the meter.",
            "examples": [
              "d498a884-e2cd-4d3e-8002-f536468a8b22"
            ]
          },
          "meter": {
            "$ref": "#/components/schemas/Meter",
            "description": "The meter associated with this subscription."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "consumed_units",
          "credited_units",
          "amount",
          "meter_id",
          "meter"
        ],
        "title": "SubscriptionMeter",
        "description": "Current consumption and spending for a subscription meter."
      },
      "SubscriptionProrationBehavior": {
        "type": "string",
        "enum": [
          "invoice",
          "prorate"
        ],
        "title": "SubscriptionProrationBehavior"
      },
      "SubscriptionRecurringInterval": {
        "type": "string",
        "enum": [
          "month",
          "year"
        ],
        "title": "SubscriptionRecurringInterval"
      },
      "SubscriptionRevoke": {
        "properties": {
          "customer_cancellation_reason": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CustomerCancellationReason"
              },
              {
                "type": "null"
              }
            ],
            "description": "Customer reason for cancellation.\n\nHelpful to monitor reasons behind churn for future improvements.\n\nOnly set this in case your own service is requesting the reason from the\ncustomer. Or you know based on direct conversations, i.e support, with\nthe customer.\n\n* `too_expensive`: Too expensive for the customer.\n* `missing_features`: Customer is missing certain features.\n* `switched_service`: Customer switched to another service.\n* `unused`: Customer is not using it enough.\n* `customer_service`: Customer is not satisfied with the customer service.\n* `low_quality`: Customer is unhappy with the quality.\n* `too_complex`: Customer considers the service too complicated.\n* `other`: Other reason(s)."
          },
          "customer_cancellation_comment": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Cancellation Comment",
            "description": "Customer feedback and why they decided to cancel.\n\n**IMPORTANT:**\nDo not use this to store internal notes! It's intended to be input\nfrom the customer and is therefore also available in their Polar\npurchases library.\n\nOnly set this in case your own service is requesting the reason from the\ncustomer. Or you copy a message directly from a customer\nconversation, i.e support."
          },
          "revoke": {
            "type": "boolean",
            "const": true,
            "title": "Revoke",
            "description": "Cancel and revoke an active subscription immediately"
          }
        },
        "type": "object",
        "required": [
          "revoke"
        ],
        "title": "SubscriptionRevoke"
      },
      "SubscriptionSortProperty": {
        "type": "string",
        "enum": [
          "customer",
          "-customer",
          "status",
          "-status",
          "started_at",
          "-started_at",
          "current_period_end",
          "-current_period_end",
          "amount",
          "-amount",
          "product",
          "-product",
          "discount",
          "-discount"
        ],
        "title": "SubscriptionSortProperty"
      },
      "SubscriptionStatus": {
        "type": "string",
        "enum": [
          "incomplete",
          "incomplete_expired",
          "trialing",
          "active",
          "past_due",
          "canceled",
          "unpaid"
        ],
        "title": "SubscriptionStatus"
      },
      "SubscriptionUpdate": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/SubscriptionUpdateProduct"
          },
          {
            "$ref": "#/components/schemas/SubscriptionUpdateDiscount"
          },
          {
            "$ref": "#/components/schemas/SubscriptionCancel"
          },
          {
            "$ref": "#/components/schemas/SubscriptionRevoke"
          }
        ]
      },
      "SubscriptionUpdateDiscount": {
        "properties": {
          "discount_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Id",
            "description": "Update the subscription to apply a new discount. If set to `null`, the discount will be removed. The change will be applied on the next billing cycle."
          }
        },
        "type": "object",
        "required": [
          "discount_id"
        ],
        "title": "SubscriptionUpdateDiscount"
      },
      "SubscriptionUpdateProduct": {
        "properties": {
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id",
            "description": "Update subscription to another product."
          },
          "proration_behavior": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SubscriptionProrationBehavior"
              },
              {
                "type": "null"
              }
            ],
            "description": "Determine how to handle the proration billing. If not provided, will use the default organization setting."
          }
        },
        "type": "object",
        "required": [
          "product_id"
        ],
        "title": "SubscriptionUpdateProduct"
      },
      "SubscriptionUser": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "public_name": {
            "type": "string",
            "title": "Public Name"
          },
          "avatar_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avatar Url"
          },
          "github_username": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Github Username"
          }
        },
        "type": "object",
        "required": [
          "id",
          "email",
          "public_name"
        ],
        "title": "SubscriptionUser"
      },
      "SystemEvent": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/MeterCreditEvent"
          },
          {
            "$ref": "#/components/schemas/MeterResetEvent"
          },
          {
            "$ref": "#/components/schemas/BenefitGrantedEvent"
          },
          {
            "$ref": "#/components/schemas/BenefitCycledEvent"
          },
          {
            "$ref": "#/components/schemas/BenefitUpdatedEvent"
          },
          {
            "$ref": "#/components/schemas/BenefitRevokedEvent"
          }
        ],
        "discriminator": {
          "propertyName": "name",
          "mapping": {
            "benefit.cycled": "#/components/schemas/BenefitCycledEvent",
            "benefit.granted": "#/components/schemas/BenefitGrantedEvent",
            "benefit.revoked": "#/components/schemas/BenefitRevokedEvent",
            "benefit.updated": "#/components/schemas/BenefitUpdatedEvent",
            "meter.credited": "#/components/schemas/MeterCreditEvent",
            "meter.reset": "#/components/schemas/MeterResetEvent"
          }
        }
      },
      "TaxIDFormat": {
        "type": "string",
        "enum": [
          "ad_nrt",
          "ae_trn",
          "ar_cuit",
          "au_abn",
          "au_arn",
          "bg_uic",
          "bh_vat",
          "bo_tin",
          "br_cnpj",
          "br_cpf",
          "ca_bn",
          "ca_gst_hst",
          "ca_pst_bc",
          "ca_pst_mb",
          "ca_pst_sk",
          "ca_qst",
          "ch_uid",
          "ch_vat",
          "cl_tin",
          "cn_tin",
          "co_nit",
          "cr_tin",
          "de_stn",
          "do_rcn",
          "ec_ruc",
          "eg_tin",
          "es_cif",
          "eu_oss_vat",
          "eu_vat",
          "gb_vat",
          "ge_vat",
          "hk_br",
          "hr_oib",
          "hu_tin",
          "id_npwp",
          "il_vat",
          "in_gst",
          "is_vat",
          "jp_cn",
          "jp_rn",
          "jp_trn",
          "ke_pin",
          "kr_brn",
          "kz_bin",
          "li_uid",
          "mx_rfc",
          "my_frp",
          "my_itn",
          "my_sst",
          "ng_tin",
          "no_vat",
          "no_voec",
          "nz_gst",
          "om_vat",
          "pe_ruc",
          "ph_tin",
          "ro_tin",
          "rs_pib",
          "ru_inn",
          "ru_kpp",
          "sa_vat",
          "sg_gst",
          "sg_uen",
          "si_tin",
          "sv_nit",
          "th_vat",
          "tr_tin",
          "tw_vat",
          "ua_vat",
          "us_ein",
          "uy_ruc",
          "ve_rif",
          "vn_tin",
          "za_vat"
        ],
        "title": "TaxIDFormat",
        "description": "List of supported tax ID formats.\n\nRef: https://docs.stripe.com/billing/customer/tax-ids#supported-tax-id"
      },
      "TimeInterval": {
        "type": "string",
        "enum": [
          "year",
          "month",
          "week",
          "day",
          "hour"
        ],
        "title": "TimeInterval"
      },
      "TokenResponse": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token"
          },
          "token_type": {
            "type": "string",
            "const": "Bearer",
            "title": "Token Type"
          },
          "expires_in": {
            "type": "integer",
            "title": "Expires In"
          },
          "refresh_token": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Refresh Token"
          },
          "scope": {
            "type": "string",
            "title": "Scope"
          },
          "id_token": {
            "type": "string",
            "title": "Id Token"
          }
        },
        "type": "object",
        "required": [
          "access_token",
          "token_type",
          "expires_in",
          "refresh_token",
          "scope",
          "id_token"
        ],
        "title": "TokenResponse"
      },
      "Unauthorized": {
        "properties": {
          "error": {
            "type": "string",
            "const": "Unauthorized",
            "title": "Error",
            "examples": [
              "Unauthorized"
            ]
          },
          "detail": {
            "type": "string",
            "title": "Detail"
          }
        },
        "type": "object",
        "required": [
          "error",
          "detail"
        ],
        "title": "Unauthorized"
      },
      "UserEvent": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp",
            "description": "The timestamp of the event."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the event.",
            "examples": [
              "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
            ],
            "x-polar-selector-widget": {
              "displayProperty": "name",
              "resourceName": "Organization",
              "resourceRoot": "/v1/organizations"
            }
          },
          "customer_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Id",
            "description": "ID of the customer in your Polar organization associated with the event."
          },
          "customer": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Customer"
              },
              {
                "type": "null"
              }
            ],
            "description": "The customer associated with the event."
          },
          "external_customer_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "External Customer Id",
            "description": "ID of the customer in your system associated with the event."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the event."
          },
          "source": {
            "type": "string",
            "const": "user",
            "title": "Source",
            "description": "The source of the event. `system` events are created by Polar. `user` events are the one you create through our ingestion API."
          }
        },
        "type": "object",
        "required": [
          "metadata",
          "id",
          "timestamp",
          "organization_id",
          "customer_id",
          "customer",
          "external_customer_id",
          "name",
          "source"
        ],
        "title": "UserEvent",
        "description": "An event you created through the ingestion API."
      },
      "UserInfoOrganization": {
        "properties": {
          "sub": {
            "type": "string",
            "title": "Sub"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          }
        },
        "type": "object",
        "required": [
          "sub"
        ],
        "title": "UserInfoOrganization"
      },
      "UserInfoUser": {
        "properties": {
          "sub": {
            "type": "string",
            "title": "Sub"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email"
          },
          "email_verified": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email Verified"
          }
        },
        "type": "object",
        "required": [
          "sub"
        ],
        "title": "UserInfoUser"
      },
      "ValidatedLicenseKey": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id"
          },
          "customer_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Customer Id"
          },
          "customer": {
            "$ref": "#/components/schemas/LicenseKeyCustomer"
          },
          "benefit_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Benefit Id",
            "description": "The benefit ID.",
            "x-polar-selector-widget": {
              "displayProperty": "description",
              "resourceName": "Benefit",
              "resourceRoot": "/v1/benefits"
            }
          },
          "key": {
            "type": "string",
            "title": "Key"
          },
          "display_key": {
            "type": "string",
            "title": "Display Key"
          },
          "status": {
            "$ref": "#/components/schemas/LicenseKeyStatus"
          },
          "limit_activations": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit Activations"
          },
          "usage": {
            "type": "integer",
            "title": "Usage"
          },
          "limit_usage": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit Usage"
          },
          "validations": {
            "type": "integer",
            "title": "Validations"
          },
          "last_validated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Validated At"
          },
          "expires_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expires At"
          },
          "activation": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LicenseKeyActivationBase"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "modified_at",
          "organization_id",
          "customer_id",
          "customer",
          "benefit_id",
          "key",
          "display_key",
          "status",
          "limit_activations",
          "usage",
          "limit_usage",
          "validations",
          "last_validated_at",
          "expires_at"
        ],
        "title": "ValidatedLicenseKey"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "WebhookBenefitCreatedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "benefit.created",
            "title": "Type",
            "examples": [
              "benefit.created"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/Benefit",
            "title": "Benefit"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookBenefitCreatedPayload",
        "description": "Sent when a new benefit is created.\n\n**Discord & Slack support:** Basic"
      },
      "WebhookBenefitGrantCreatedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "benefit_grant.created",
            "title": "Type",
            "examples": [
              "benefit_grant.created"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/BenefitGrantWebhook"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookBenefitGrantCreatedPayload",
        "description": "Sent when a new benefit grant is created.\n\n**Discord & Slack support:** Basic"
      },
      "WebhookBenefitGrantCycledPayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "benefit_grant.cycled",
            "title": "Type",
            "examples": [
              "benefit_grant.cycled"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/BenefitGrantWebhook"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookBenefitGrantCycledPayload",
        "description": "Sent when a benefit grant is cycled,\nmeaning the related subscription has been renewed for another period.\n\n**Discord & Slack support:** Basic"
      },
      "WebhookBenefitGrantRevokedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "benefit_grant.revoked",
            "title": "Type",
            "examples": [
              "benefit_grant.revoked"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/BenefitGrantWebhook"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookBenefitGrantRevokedPayload",
        "description": "Sent when a benefit grant is revoked.\n\n**Discord & Slack support:** Basic"
      },
      "WebhookBenefitGrantUpdatedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "benefit_grant.updated",
            "title": "Type",
            "examples": [
              "benefit_grant.updated"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/BenefitGrantWebhook"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookBenefitGrantUpdatedPayload",
        "description": "Sent when a benefit grant is updated.\n\n**Discord & Slack support:** Basic"
      },
      "WebhookBenefitUpdatedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "benefit.updated",
            "title": "Type",
            "examples": [
              "benefit.updated"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/Benefit",
            "title": "Benefit"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookBenefitUpdatedPayload",
        "description": "Sent when a benefit is updated.\n\n**Discord & Slack support:** Basic"
      },
      "WebhookCheckoutCreatedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "checkout.created",
            "title": "Type",
            "examples": [
              "checkout.created"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/Checkout"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookCheckoutCreatedPayload",
        "description": "Sent when a new checkout is created.\n\n**Discord & Slack support:** Basic"
      },
      "WebhookCheckoutUpdatedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "checkout.updated",
            "title": "Type",
            "examples": [
              "checkout.updated"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/Checkout"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookCheckoutUpdatedPayload",
        "description": "Sent when a checkout is updated.\n\n**Discord & Slack support:** Basic"
      },
      "WebhookCustomerCreatedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "customer.created",
            "title": "Type",
            "examples": [
              "customer.created"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/Customer"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookCustomerCreatedPayload",
        "description": "Sent when a new customer is created.\n\nA customer can be created:\n\n* After a successful checkout.\n* Programmatically via the API.\n\n**Discord & Slack support:** Basic"
      },
      "WebhookCustomerDeletedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "customer.deleted",
            "title": "Type",
            "examples": [
              "customer.deleted"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/Customer"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookCustomerDeletedPayload",
        "description": "Sent when a customer is deleted.\n\n**Discord & Slack support:** Basic"
      },
      "WebhookCustomerStateChangedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "customer.state_changed",
            "title": "Type",
            "examples": [
              "customer.state_changed"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/CustomerState"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookCustomerStateChangedPayload",
        "description": "Sent when a customer state has changed.\n\nIt's triggered when:\n\n* Customer is created, updated or deleted.\n* A subscription is created or updated.\n* A benefit is granted or revoked.\n\n**Discord & Slack support:** Basic"
      },
      "WebhookCustomerUpdatedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "customer.updated",
            "title": "Type",
            "examples": [
              "customer.updated"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/Customer"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookCustomerUpdatedPayload",
        "description": "Sent when a customer is updated.\n\nThis event is fired when the customer details are updated.\n\nIf you want to be notified when a customer subscription or benefit state changes, you should listen to the `customer_state_changed` event.\n\n**Discord & Slack support:** Basic"
      },
      "WebhookDelivery": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "http_code": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Http Code",
            "description": "The HTTP code returned by the URL. `null` if the endpoint was unreachable."
          },
          "succeeded": {
            "type": "boolean",
            "title": "Succeeded",
            "description": "Whether the delivery was successful."
          },
          "webhook_event": {
            "$ref": "#/components/schemas/WebhookEvent",
            "description": "The webhook event sent by this delivery."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "succeeded",
          "webhook_event"
        ],
        "title": "WebhookDelivery",
        "description": "A webhook delivery for a webhook event."
      },
      "WebhookEndpoint": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "Url",
            "description": "The URL where the webhook events will be sent.",
            "examples": [
              "https://webhook.site/cb791d80-f26e-4f8c-be88-6e56054192b0"
            ]
          },
          "format": {
            "$ref": "#/components/schemas/WebhookFormat",
            "description": "The format of the webhook payload."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The organization ID associated with the webhook endpoint."
          },
          "events": {
            "items": {
              "$ref": "#/components/schemas/WebhookEventType"
            },
            "type": "array",
            "title": "Events",
            "description": "The events that will trigger the webhook."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "url",
          "format",
          "organization_id",
          "events"
        ],
        "title": "WebhookEndpoint",
        "description": "A webhook endpoint."
      },
      "WebhookEndpointCreate": {
        "properties": {
          "url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "Url",
            "description": "The URL where the webhook events will be sent.",
            "examples": [
              "https://webhook.site/cb791d80-f26e-4f8c-be88-6e56054192b0"
            ]
          },
          "format": {
            "$ref": "#/components/schemas/WebhookFormat",
            "description": "The format of the webhook payload."
          },
          "secret": {
            "type": "string",
            "minLength": 1,
            "title": "Secret",
            "description": "The secret used to sign the webhook events.",
            "examples": [
              "f_z6mfSpxkjogyw3FkA2aH2gYE5huxruNf34MpdWMcA"
            ]
          },
          "events": {
            "items": {
              "$ref": "#/components/schemas/WebhookEventType"
            },
            "type": "array",
            "title": "Events",
            "description": "The events that will trigger the webhook."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "examples": [
                  "1dbfc517-0bbf-4301-9ba8-555ca42b9737"
                ],
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The organization ID associated with the webhook endpoint. **Required unless you use an organization token.**"
          }
        },
        "type": "object",
        "required": [
          "url",
          "format",
          "secret",
          "events"
        ],
        "title": "WebhookEndpointCreate",
        "description": "Schema to create a webhook endpoint."
      },
      "WebhookEndpointUpdate": {
        "properties": {
          "url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri",
                "description": "The URL where the webhook events will be sent.",
                "examples": [
                  "https://webhook.site/cb791d80-f26e-4f8c-be88-6e56054192b0"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Url"
          },
          "format": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/WebhookFormat",
                "description": "The format of the webhook payload."
              },
              {
                "type": "null"
              }
            ]
          },
          "secret": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 1,
                "description": "The secret used to sign the webhook events.",
                "examples": [
                  "f_z6mfSpxkjogyw3FkA2aH2gYE5huxruNf34MpdWMcA"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Secret"
          },
          "events": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/WebhookEventType"
                },
                "type": "array",
                "description": "The events that will trigger the webhook."
              },
              {
                "type": "null"
              }
            ],
            "title": "Events"
          }
        },
        "type": "object",
        "title": "WebhookEndpointUpdate",
        "description": "Schema to update a webhook endpoint."
      },
      "WebhookEvent": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "last_http_code": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Http Code",
            "description": "Last HTTP code returned by the URL. `null` if no delviery has been attempted or if the endpoint was unreachable."
          },
          "succeeded": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Succeeded",
            "description": "Whether this event was successfully delivered. `null` if no delivery has been attempted."
          },
          "payload": {
            "type": "string",
            "title": "Payload",
            "description": "The payload of the webhook event."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "payload"
        ],
        "title": "WebhookEvent",
        "description": "A webhook event.\n\nAn event represent something that happened in the system\nthat should be sent to the webhook endpoint.\n\nIt can be delivered multiple times until it's marked as succeeded,\neach one creating a new delivery."
      },
      "WebhookEventType": {
        "type": "string",
        "enum": [
          "checkout.created",
          "checkout.updated",
          "customer.created",
          "customer.updated",
          "customer.deleted",
          "customer.state_changed",
          "order.created",
          "order.updated",
          "order.paid",
          "order.refunded",
          "subscription.created",
          "subscription.updated",
          "subscription.active",
          "subscription.canceled",
          "subscription.uncanceled",
          "subscription.revoked",
          "refund.created",
          "refund.updated",
          "product.created",
          "product.updated",
          "benefit.created",
          "benefit.updated",
          "benefit_grant.created",
          "benefit_grant.cycled",
          "benefit_grant.updated",
          "benefit_grant.revoked",
          "organization.updated"
        ],
        "title": "WebhookEventType"
      },
      "WebhookFormat": {
        "type": "string",
        "enum": [
          "raw",
          "discord",
          "slack"
        ],
        "title": "WebhookFormat"
      },
      "WebhookOrderCreatedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "order.created",
            "title": "Type",
            "examples": [
              "order.created"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/Order"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookOrderCreatedPayload",
        "description": "Sent when a new order is created.\n\nA new order is created when:\n\n* A customer purchases a one-time product. In this case, `billing_reason` is set to `purchase`.\n* A customer starts a subscription. In this case, `billing_reason` is set to `subscription_create`.\n* A subscription is renewed. In this case, `billing_reason` is set to `subscription_cycle`.\n* A subscription is upgraded or downgraded with an immediate proration invoice. In this case, `billing_reason` is set to `subscription_update`.\n\n<Warning>The order might not be paid yet, so the `status` field might be `pending`.</Warning>\n\n**Discord & Slack support:** Full"
      },
      "WebhookOrderPaidPayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "order.paid",
            "title": "Type",
            "examples": [
              "order.paid"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/Order"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookOrderPaidPayload",
        "description": "Sent when an order is paid.\n\nWhen you receive this event, the order is fully processed and payment has been received.\n\n**Discord & Slack support:** Full"
      },
      "WebhookOrderRefundedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "order.refunded",
            "title": "Type",
            "examples": [
              "order.refunded"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/Order"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookOrderRefundedPayload",
        "description": "Sent when an order is fully or partially refunded.\n\n**Discord & Slack support:** Full"
      },
      "WebhookOrderUpdatedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "order.updated",
            "title": "Type",
            "examples": [
              "order.updated"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/Order"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookOrderUpdatedPayload",
        "description": "Sent when an order is updated.\n\nAn order is updated when:\n\n* Its status changes, e.g. from `pending` to `paid`.\n* It's refunded, partially or fully.\n\n**Discord & Slack support:** Full"
      },
      "WebhookOrganizationUpdatedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "organization.updated",
            "title": "Type",
            "examples": [
              "organization.updated"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/Organization"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookOrganizationUpdatedPayload",
        "description": "Sent when a organization is updated.\n\n**Discord & Slack support:** Basic"
      },
      "WebhookProductCreatedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "product.created",
            "title": "Type",
            "examples": [
              "product.created"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/Product"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookProductCreatedPayload",
        "description": "Sent when a new product is created.\n\n**Discord & Slack support:** Basic"
      },
      "WebhookProductUpdatedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "product.updated",
            "title": "Type",
            "examples": [
              "product.updated"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/Product"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookProductUpdatedPayload",
        "description": "Sent when a product is updated.\n\n**Discord & Slack support:** Basic"
      },
      "WebhookRefundCreatedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "refund.created",
            "title": "Type",
            "examples": [
              "refund.created"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/Refund"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookRefundCreatedPayload",
        "description": "Sent when a refund is created regardless of status.\n\n**Discord & Slack support:** Full"
      },
      "WebhookRefundUpdatedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "refund.updated",
            "title": "Type",
            "examples": [
              "refund.updated"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/Refund"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookRefundUpdatedPayload",
        "description": "Sent when a refund is updated.\n\n**Discord & Slack support:** Full"
      },
      "WebhookSubscriptionActivePayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "subscription.active",
            "title": "Type",
            "examples": [
              "subscription.active"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/Subscription"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookSubscriptionActivePayload",
        "description": "Sent when a subscription becomes active,\nwhether because it's a new paid subscription or because payment was recovered.\n\n**Discord & Slack support:** Full"
      },
      "WebhookSubscriptionCanceledPayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "subscription.canceled",
            "title": "Type",
            "examples": [
              "subscription.canceled"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/Subscription"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookSubscriptionCanceledPayload",
        "description": "Sent when a subscription is canceled.\nCustomers might still have access until the end of the current period.\n\n**Discord & Slack support:** Full"
      },
      "WebhookSubscriptionCreatedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "subscription.created",
            "title": "Type",
            "examples": [
              "subscription.created"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/Subscription"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookSubscriptionCreatedPayload",
        "description": "Sent when a new subscription is created.\n\nWhen this event occurs, the subscription `status` might not be `active` yet, as we can still have to wait for the first payment to be processed.\n\n**Discord & Slack support:** Full"
      },
      "WebhookSubscriptionRevokedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "subscription.revoked",
            "title": "Type",
            "examples": [
              "subscription.revoked"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/Subscription"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookSubscriptionRevokedPayload",
        "description": "Sent when a subscription is revoked, the user loses access immediately.\nHappens when the subscription is canceled, or payment is past due.\n\n**Discord & Slack support:** Full"
      },
      "WebhookSubscriptionUncanceledPayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "subscription.uncanceled",
            "title": "Type",
            "examples": [
              "subscription.uncanceled"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/Subscription"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookSubscriptionUncanceledPayload",
        "description": "Sent when a subscription is uncanceled.\n\n**Discord & Slack support:** Full"
      },
      "WebhookSubscriptionUpdatedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "subscription.updated",
            "title": "Type",
            "examples": [
              "subscription.updated"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/Subscription"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookSubscriptionUpdatedPayload",
        "description": "Sent when a subscription is updated. This event fires for all changes to the subscription, including renewals.\n\nIf you want more specific events, you can listen to `subscription.active`, `subscription.canceled`, and `subscription.revoked`.\n\nTo listen specifically for renewals, you can listen to `order.created` events and check the `billing_reason` field.\n\n**Discord & Slack support:** On cancellation and revocation. Renewals are skipped."
      },
      "MetadataQuery": {
        "anyOf": [
          {
            "type": "object",
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "boolean"
                  }
                }
              ]
            }
          },
          {
            "type": "null"
          }
        ],
        "title": "MetadataQuery"
      },
      "AuthorizationCodeTokenRequest": {
        "properties": {
          "grant_type": {
            "const": "authorization_code",
            "title": "Grant Type",
            "type": "string"
          },
          "client_id": {
            "title": "Client Id",
            "type": "string"
          },
          "client_secret": {
            "title": "Client Secret",
            "type": "string"
          },
          "code": {
            "title": "Code",
            "type": "string"
          },
          "redirect_uri": {
            "format": "uri",
            "maxLength": 2083,
            "minLength": 1,
            "title": "Redirect Uri",
            "type": "string"
          }
        },
        "required": [
          "grant_type",
          "client_id",
          "client_secret",
          "code",
          "redirect_uri"
        ],
        "title": "AuthorizationCodeTokenRequest",
        "type": "object"
      },
      "RefreshTokenRequest": {
        "properties": {
          "grant_type": {
            "const": "refresh_token",
            "title": "Grant Type",
            "type": "string"
          },
          "client_id": {
            "title": "Client Id",
            "type": "string"
          },
          "client_secret": {
            "title": "Client Secret",
            "type": "string"
          },
          "refresh_token": {
            "title": "Refresh Token",
            "type": "string"
          }
        },
        "required": [
          "grant_type",
          "client_id",
          "client_secret",
          "refresh_token"
        ],
        "title": "RefreshTokenRequest",
        "type": "object"
      },
      "RevokeTokenRequest": {
        "properties": {
          "token": {
            "title": "Token",
            "type": "string"
          },
          "token_type_hint": {
            "anyOf": [
              {
                "enum": [
                  "access_token",
                  "refresh_token"
                ],
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Token Type Hint"
          },
          "client_id": {
            "title": "Client Id",
            "type": "string"
          },
          "client_secret": {
            "title": "Client Secret",
            "type": "string"
          }
        },
        "required": [
          "token",
          "client_id",
          "client_secret"
        ],
        "title": "RevokeTokenRequest",
        "type": "object"
      },
      "IntrospectTokenRequest": {
        "properties": {
          "token": {
            "title": "Token",
            "type": "string"
          },
          "token_type_hint": {
            "anyOf": [
              {
                "enum": [
                  "access_token",
                  "refresh_token"
                ],
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Token Type Hint"
          },
          "client_id": {
            "title": "Client Id",
            "type": "string"
          },
          "client_secret": {
            "title": "Client Secret",
            "type": "string"
          }
        },
        "required": [
          "token",
          "client_id",
          "client_secret"
        ],
        "title": "IntrospectTokenRequest",
        "type": "object"
      }
    },
    "securitySchemes": {
      "oidc": {
        "type": "openIdConnect",
        "openIdConnectUrl": "/.well-known/openid-configuration"
      },
      "pat": {
        "type": "http",
        "description": "You can generate a **Personal Access Token** from your [settings](https://polar.sh/settings).",
        "scheme": "bearer"
      },
      "oat": {
        "type": "http",
        "description": "You can generate an **Organization Access Token** from your organization's settings.",
        "scheme": "bearer"
      },
      "customer_session": {
        "type": "http",
        "description": "Customer session tokens are specific tokens that are used to authenticate customers on your organization. You can create those sessions programmatically using the [Create Customer Session endpoint](/api-reference/customer-portal/sessions/create).",
        "scheme": "bearer"
      },
      "access_token": {
        "type": "http",
        "scheme": "bearer",
        "description": "You can generate an **Organization Access Token** from your organization's settings."
      }
    }
  },
  "tags": [
    {
      "name": "private",
      "description": "Endpoints that should appear in the schema only in development to generate our internal JS SDK."
    },
    {
      "name": "documented",
      "description": "Endpoints shown and documented in the Polar API documentation."
    },
    {
      "name": "featured",
      "description": "Endpoints featured in the Polar API documentation for their interest in common use-cases."
    },
    {
      "name": "mcp",
      "description": "Endpoints enabled in the MCP server."
    },
    {
      "name": "issue_funding",
      "description": "Endpoints related to issue funding and rewards in the Polar API."
    }
  ],
  "security": [
    {
      "access_token": []
    }
  ]
}
