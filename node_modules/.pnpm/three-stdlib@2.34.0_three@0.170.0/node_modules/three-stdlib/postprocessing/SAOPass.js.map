{"version":3,"file":"SAOPass.js","sources":["../../src/postprocessing/SAOPass.js"],"sourcesContent":["import {\n  AddEquation,\n  Color,\n  CustomBlending,\n  DepthTexture,\n  DstAlphaFactor,\n  DstColorFactor,\n  HalfFloatType,\n  MeshDepthMaterial,\n  MeshNormalMaterial,\n  NearestFilter,\n  NoBlending,\n  RGBADepthPacking,\n  ShaderMaterial,\n  UniformsUtils,\n  UnsignedShortType,\n  Vector2,\n  WebGLRenderTarget,\n  ZeroFactor,\n} from 'three'\nimport { Pass, FullScreenQuad } from './Pass'\nimport { SAOShader } from '../shaders/SAOShader'\nimport { DepthLimitedBlurShader } from '../shaders/DepthLimitedBlurShader'\nimport { BlurShaderUtils } from '../shaders/DepthLimitedBlurShader'\nimport { CopyShader } from '../shaders/CopyShader'\nimport { UnpackDepthRGBAShader } from '../shaders/UnpackDepthRGBAShader'\n\n/**\n * SAO implementation inspired from bhouston previous SAO work\n */\nclass SAOPass extends Pass {\n  static OUTPUT = {\n    Beauty: 1,\n    Default: 0,\n    SAO: 2,\n    Depth: 3,\n    Normal: 4,\n  }\n\n  constructor(scene, camera, useDepthTexture = false, useNormals = false, resolution = new Vector2(256, 256)) {\n    super()\n\n    this.scene = scene\n    this.camera = camera\n\n    this.clear = true\n    this.needsSwap = false\n\n    this.supportsDepthTextureExtension = useDepthTexture\n    this.supportsNormalTexture = useNormals\n\n    this.originalClearColor = new Color()\n    this._oldClearColor = new Color()\n    this.oldClearAlpha = 1\n\n    this.params = {\n      output: 0,\n      saoBias: 0.5,\n      saoIntensity: 0.18,\n      saoScale: 1,\n      saoKernelRadius: 100,\n      saoMinResolution: 0,\n      saoBlur: true,\n      saoBlurRadius: 8,\n      saoBlurStdDev: 4,\n      saoBlurDepthCutoff: 0.01,\n    }\n\n    this.resolution = new Vector2(resolution.x, resolution.y)\n\n    this.saoRenderTarget = new WebGLRenderTarget(this.resolution.x, this.resolution.y, { type: HalfFloatType })\n    this.blurIntermediateRenderTarget = this.saoRenderTarget.clone()\n    this.beautyRenderTarget = this.saoRenderTarget.clone()\n\n    this.normalRenderTarget = new WebGLRenderTarget(this.resolution.x, this.resolution.y, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType,\n    })\n    this.depthRenderTarget = this.normalRenderTarget.clone()\n\n    let depthTexture\n\n    if (this.supportsDepthTextureExtension) {\n      depthTexture = new DepthTexture()\n      depthTexture.type = UnsignedShortType\n\n      this.beautyRenderTarget.depthTexture = depthTexture\n      this.beautyRenderTarget.depthBuffer = true\n    }\n\n    this.depthMaterial = new MeshDepthMaterial()\n    this.depthMaterial.depthPacking = RGBADepthPacking\n    this.depthMaterial.blending = NoBlending\n\n    this.normalMaterial = new MeshNormalMaterial()\n    this.normalMaterial.blending = NoBlending\n\n    this.saoMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SAOShader.defines),\n      fragmentShader: SAOShader.fragmentShader,\n      vertexShader: SAOShader.vertexShader,\n      uniforms: UniformsUtils.clone(SAOShader.uniforms),\n    })\n    this.saoMaterial.extensions.derivatives = true\n    this.saoMaterial.defines['DEPTH_PACKING'] = this.supportsDepthTextureExtension ? 0 : 1\n    this.saoMaterial.defines['NORMAL_TEXTURE'] = this.supportsNormalTexture ? 1 : 0\n    this.saoMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0\n    this.saoMaterial.uniforms['tDepth'].value = this.supportsDepthTextureExtension\n      ? depthTexture\n      : this.depthRenderTarget.texture\n    this.saoMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture\n    this.saoMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y)\n    this.saoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse)\n    this.saoMaterial.uniforms['cameraProjectionMatrix'].value = this.camera.projectionMatrix\n    this.saoMaterial.blending = NoBlending\n\n    this.vBlurMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n      defines: Object.assign({}, DepthLimitedBlurShader.defines),\n      vertexShader: DepthLimitedBlurShader.vertexShader,\n      fragmentShader: DepthLimitedBlurShader.fragmentShader,\n    })\n    this.vBlurMaterial.defines['DEPTH_PACKING'] = this.supportsDepthTextureExtension ? 0 : 1\n    this.vBlurMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0\n    this.vBlurMaterial.uniforms['tDiffuse'].value = this.saoRenderTarget.texture\n    this.vBlurMaterial.uniforms['tDepth'].value = this.supportsDepthTextureExtension\n      ? depthTexture\n      : this.depthRenderTarget.texture\n    this.vBlurMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y)\n    this.vBlurMaterial.blending = NoBlending\n\n    this.hBlurMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n      defines: Object.assign({}, DepthLimitedBlurShader.defines),\n      vertexShader: DepthLimitedBlurShader.vertexShader,\n      fragmentShader: DepthLimitedBlurShader.fragmentShader,\n    })\n    this.hBlurMaterial.defines['DEPTH_PACKING'] = this.supportsDepthTextureExtension ? 0 : 1\n    this.hBlurMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0\n    this.hBlurMaterial.uniforms['tDiffuse'].value = this.blurIntermediateRenderTarget.texture\n    this.hBlurMaterial.uniforms['tDepth'].value = this.supportsDepthTextureExtension\n      ? depthTexture\n      : this.depthRenderTarget.texture\n    this.hBlurMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y)\n    this.hBlurMaterial.blending = NoBlending\n\n    this.materialCopy = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      blending: NoBlending,\n    })\n    this.materialCopy.transparent = true\n    this.materialCopy.depthTest = false\n    this.materialCopy.depthWrite = false\n    this.materialCopy.blending = CustomBlending\n    this.materialCopy.blendSrc = DstColorFactor\n    this.materialCopy.blendDst = ZeroFactor\n    this.materialCopy.blendEquation = AddEquation\n    this.materialCopy.blendSrcAlpha = DstAlphaFactor\n    this.materialCopy.blendDstAlpha = ZeroFactor\n    this.materialCopy.blendEquationAlpha = AddEquation\n\n    this.depthCopy = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(UnpackDepthRGBAShader.uniforms),\n      vertexShader: UnpackDepthRGBAShader.vertexShader,\n      fragmentShader: UnpackDepthRGBAShader.fragmentShader,\n      blending: NoBlending,\n    })\n\n    this.fsQuad = new FullScreenQuad(null)\n  }\n\n  render(renderer, writeBuffer, readBuffer /*, deltaTime, maskActive*/) {\n    // Rendering readBuffer first when rendering to screen\n    if (this.renderToScreen) {\n      this.materialCopy.blending = NoBlending\n      this.materialCopy.uniforms['tDiffuse'].value = readBuffer.texture\n      this.materialCopy.needsUpdate = true\n      this.renderPass(renderer, this.materialCopy, null)\n    }\n\n    if (this.params.output === 1) {\n      return\n    }\n\n    renderer.getClearColor(this._oldClearColor)\n    this.oldClearAlpha = renderer.getClearAlpha()\n    const oldAutoClear = renderer.autoClear\n    renderer.autoClear = false\n\n    renderer.setRenderTarget(this.depthRenderTarget)\n    renderer.clear()\n\n    this.saoMaterial.uniforms['bias'].value = this.params.saoBias\n    this.saoMaterial.uniforms['intensity'].value = this.params.saoIntensity\n    this.saoMaterial.uniforms['scale'].value = this.params.saoScale\n    this.saoMaterial.uniforms['kernelRadius'].value = this.params.saoKernelRadius\n    this.saoMaterial.uniforms['minResolution'].value = this.params.saoMinResolution\n    this.saoMaterial.uniforms['cameraNear'].value = this.camera.near\n    this.saoMaterial.uniforms['cameraFar'].value = this.camera.far\n    // this.saoMaterial.uniforms['randomSeed'].value = Math.random();\n\n    const depthCutoff = this.params.saoBlurDepthCutoff * (this.camera.far - this.camera.near)\n    this.vBlurMaterial.uniforms['depthCutoff'].value = depthCutoff\n    this.hBlurMaterial.uniforms['depthCutoff'].value = depthCutoff\n\n    this.vBlurMaterial.uniforms['cameraNear'].value = this.camera.near\n    this.vBlurMaterial.uniforms['cameraFar'].value = this.camera.far\n    this.hBlurMaterial.uniforms['cameraNear'].value = this.camera.near\n    this.hBlurMaterial.uniforms['cameraFar'].value = this.camera.far\n\n    this.params.saoBlurRadius = Math.floor(this.params.saoBlurRadius)\n    if (this.prevStdDev !== this.params.saoBlurStdDev || this.prevNumSamples !== this.params.saoBlurRadius) {\n      BlurShaderUtils.configure(\n        this.vBlurMaterial,\n        this.params.saoBlurRadius,\n        this.params.saoBlurStdDev,\n        new Vector2(0, 1),\n      )\n      BlurShaderUtils.configure(\n        this.hBlurMaterial,\n        this.params.saoBlurRadius,\n        this.params.saoBlurStdDev,\n        new Vector2(1, 0),\n      )\n      this.prevStdDev = this.params.saoBlurStdDev\n      this.prevNumSamples = this.params.saoBlurRadius\n    }\n\n    // Rendering scene to depth texture\n    renderer.setClearColor(0x000000)\n    renderer.setRenderTarget(this.beautyRenderTarget)\n    renderer.clear()\n    renderer.render(this.scene, this.camera)\n\n    // Re-render scene if depth texture extension is not supported\n    if (!this.supportsDepthTextureExtension) {\n      // Clear rule : far clipping plane in both RGBA and Basic encoding\n      this.renderOverride(renderer, this.depthMaterial, this.depthRenderTarget, 0x000000, 1.0)\n    }\n\n    if (this.supportsNormalTexture) {\n      // Clear rule : default normal is facing the camera\n      this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0)\n    }\n\n    // Rendering SAO texture\n    this.renderPass(renderer, this.saoMaterial, this.saoRenderTarget, 0xffffff, 1.0)\n\n    // Blurring SAO texture\n    if (this.params.saoBlur) {\n      this.renderPass(renderer, this.vBlurMaterial, this.blurIntermediateRenderTarget, 0xffffff, 1.0)\n      this.renderPass(renderer, this.hBlurMaterial, this.saoRenderTarget, 0xffffff, 1.0)\n    }\n\n    let outputMaterial = this.materialCopy\n    // Setting up SAO rendering\n    if (this.params.output === 3) {\n      if (this.supportsDepthTextureExtension) {\n        this.materialCopy.uniforms['tDiffuse'].value = this.beautyRenderTarget.depthTexture\n        this.materialCopy.needsUpdate = true\n      } else {\n        this.depthCopy.uniforms['tDiffuse'].value = this.depthRenderTarget.texture\n        this.depthCopy.needsUpdate = true\n        outputMaterial = this.depthCopy\n      }\n    } else if (this.params.output === 4) {\n      this.materialCopy.uniforms['tDiffuse'].value = this.normalRenderTarget.texture\n      this.materialCopy.needsUpdate = true\n    } else {\n      this.materialCopy.uniforms['tDiffuse'].value = this.saoRenderTarget.texture\n      this.materialCopy.needsUpdate = true\n    }\n\n    // Blending depends on output, only want a CustomBlending when showing SAO\n    if (this.params.output === 0) {\n      outputMaterial.blending = CustomBlending\n    } else {\n      outputMaterial.blending = NoBlending\n    }\n\n    // Rendering SAOPass result on top of previous pass\n    this.renderPass(renderer, outputMaterial, this.renderToScreen ? null : readBuffer)\n\n    renderer.setClearColor(this._oldClearColor, this.oldClearAlpha)\n    renderer.autoClear = oldAutoClear\n  }\n\n  renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    // save original state\n    renderer.getClearColor(this.originalClearColor)\n    const originalClearAlpha = renderer.getClearAlpha()\n    const originalAutoClear = renderer.autoClear\n\n    renderer.setRenderTarget(renderTarget)\n\n    // setup pass state\n    renderer.autoClear = false\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor)\n      renderer.setClearAlpha(clearAlpha || 0.0)\n      renderer.clear()\n    }\n\n    this.fsQuad.material = passMaterial\n    this.fsQuad.render(renderer)\n\n    // restore original state\n    renderer.autoClear = originalAutoClear\n    renderer.setClearColor(this.originalClearColor)\n    renderer.setClearAlpha(originalClearAlpha)\n  }\n\n  renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor)\n    const originalClearAlpha = renderer.getClearAlpha()\n    const originalAutoClear = renderer.autoClear\n\n    renderer.setRenderTarget(renderTarget)\n    renderer.autoClear = false\n\n    clearColor = overrideMaterial.clearColor || clearColor\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor)\n      renderer.setClearAlpha(clearAlpha || 0.0)\n      renderer.clear()\n    }\n\n    this.scene.overrideMaterial = overrideMaterial\n    renderer.render(this.scene, this.camera)\n    this.scene.overrideMaterial = null\n\n    // restore original state\n    renderer.autoClear = originalAutoClear\n    renderer.setClearColor(this.originalClearColor)\n    renderer.setClearAlpha(originalClearAlpha)\n  }\n\n  setSize(width, height) {\n    this.beautyRenderTarget.setSize(width, height)\n    this.saoRenderTarget.setSize(width, height)\n    this.blurIntermediateRenderTarget.setSize(width, height)\n    this.normalRenderTarget.setSize(width, height)\n    this.depthRenderTarget.setSize(width, height)\n\n    this.saoMaterial.uniforms['size'].value.set(width, height)\n    this.saoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse)\n    this.saoMaterial.uniforms['cameraProjectionMatrix'].value = this.camera.projectionMatrix\n    this.saoMaterial.needsUpdate = true\n\n    this.vBlurMaterial.uniforms['size'].value.set(width, height)\n    this.vBlurMaterial.needsUpdate = true\n\n    this.hBlurMaterial.uniforms['size'].value.set(width, height)\n    this.hBlurMaterial.needsUpdate = true\n  }\n\n  dispose() {\n    this.saoRenderTarget.dispose()\n    this.blurIntermediateRenderTarget.dispose()\n    this.beautyRenderTarget.dispose()\n    this.normalRenderTarget.dispose()\n    this.depthRenderTarget.dispose()\n\n    this.depthMaterial.dispose()\n    this.normalMaterial.dispose()\n    this.saoMaterial.dispose()\n    this.vBlurMaterial.dispose()\n    this.hBlurMaterial.dispose()\n    this.materialCopy.dispose()\n    this.depthCopy.dispose()\n\n    this.fsQuad.dispose()\n  }\n}\n\nexport { SAOPass }\n"],"names":[],"mappings":";;;;;;;;;;;;AA8BA,MAAM,gBAAgB,KAAK;AAAA,EASzB,YAAY,OAAO,QAAQ,kBAAkB,OAAO,aAAa,OAAO,aAAa,IAAI,QAAQ,KAAK,GAAG,GAAG;AAC1G,UAAO;AAEP,SAAK,QAAQ;AACb,SAAK,SAAS;AAEd,SAAK,QAAQ;AACb,SAAK,YAAY;AAEjB,SAAK,gCAAgC;AACrC,SAAK,wBAAwB;AAE7B,SAAK,qBAAqB,IAAI,MAAO;AACrC,SAAK,iBAAiB,IAAI,MAAO;AACjC,SAAK,gBAAgB;AAErB,SAAK,SAAS;AAAA,MACZ,QAAQ;AAAA,MACR,SAAS;AAAA,MACT,cAAc;AAAA,MACd,UAAU;AAAA,MACV,iBAAiB;AAAA,MACjB,kBAAkB;AAAA,MAClB,SAAS;AAAA,MACT,eAAe;AAAA,MACf,eAAe;AAAA,MACf,oBAAoB;AAAA,IACrB;AAED,SAAK,aAAa,IAAI,QAAQ,WAAW,GAAG,WAAW,CAAC;AAExD,SAAK,kBAAkB,IAAI,kBAAkB,KAAK,WAAW,GAAG,KAAK,WAAW,GAAG,EAAE,MAAM,cAAa,CAAE;AAC1G,SAAK,+BAA+B,KAAK,gBAAgB,MAAO;AAChE,SAAK,qBAAqB,KAAK,gBAAgB,MAAO;AAEtD,SAAK,qBAAqB,IAAI,kBAAkB,KAAK,WAAW,GAAG,KAAK,WAAW,GAAG;AAAA,MACpF,WAAW;AAAA,MACX,WAAW;AAAA,MACX,MAAM;AAAA,IACZ,CAAK;AACD,SAAK,oBAAoB,KAAK,mBAAmB,MAAO;AAExD,QAAI;AAEJ,QAAI,KAAK,+BAA+B;AACtC,qBAAe,IAAI,aAAc;AACjC,mBAAa,OAAO;AAEpB,WAAK,mBAAmB,eAAe;AACvC,WAAK,mBAAmB,cAAc;AAAA,IACvC;AAED,SAAK,gBAAgB,IAAI,kBAAmB;AAC5C,SAAK,cAAc,eAAe;AAClC,SAAK,cAAc,WAAW;AAE9B,SAAK,iBAAiB,IAAI,mBAAoB;AAC9C,SAAK,eAAe,WAAW;AAE/B,SAAK,cAAc,IAAI,eAAe;AAAA,MACpC,SAAS,OAAO,OAAO,CAAA,GAAI,UAAU,OAAO;AAAA,MAC5C,gBAAgB,UAAU;AAAA,MAC1B,cAAc,UAAU;AAAA,MACxB,UAAU,cAAc,MAAM,UAAU,QAAQ;AAAA,IACtD,CAAK;AACD,SAAK,YAAY,WAAW,cAAc;AAC1C,SAAK,YAAY,QAAQ,eAAe,IAAI,KAAK,gCAAgC,IAAI;AACrF,SAAK,YAAY,QAAQ,gBAAgB,IAAI,KAAK,wBAAwB,IAAI;AAC9E,SAAK,YAAY,QAAQ,oBAAoB,IAAI,KAAK,OAAO,sBAAsB,IAAI;AACvF,SAAK,YAAY,SAAS,QAAQ,EAAE,QAAQ,KAAK,gCAC7C,eACA,KAAK,kBAAkB;AAC3B,SAAK,YAAY,SAAS,SAAS,EAAE,QAAQ,KAAK,mBAAmB;AACrE,SAAK,YAAY,SAAS,MAAM,EAAE,MAAM,IAAI,KAAK,WAAW,GAAG,KAAK,WAAW,CAAC;AAChF,SAAK,YAAY,SAAS,+BAA+B,EAAE,MAAM,KAAK,KAAK,OAAO,uBAAuB;AACzG,SAAK,YAAY,SAAS,wBAAwB,EAAE,QAAQ,KAAK,OAAO;AACxE,SAAK,YAAY,WAAW;AAE5B,SAAK,gBAAgB,IAAI,eAAe;AAAA,MACtC,UAAU,cAAc,MAAM,uBAAuB,QAAQ;AAAA,MAC7D,SAAS,OAAO,OAAO,CAAA,GAAI,uBAAuB,OAAO;AAAA,MACzD,cAAc,uBAAuB;AAAA,MACrC,gBAAgB,uBAAuB;AAAA,IAC7C,CAAK;AACD,SAAK,cAAc,QAAQ,eAAe,IAAI,KAAK,gCAAgC,IAAI;AACvF,SAAK,cAAc,QAAQ,oBAAoB,IAAI,KAAK,OAAO,sBAAsB,IAAI;AACzF,SAAK,cAAc,SAAS,UAAU,EAAE,QAAQ,KAAK,gBAAgB;AACrE,SAAK,cAAc,SAAS,QAAQ,EAAE,QAAQ,KAAK,gCAC/C,eACA,KAAK,kBAAkB;AAC3B,SAAK,cAAc,SAAS,MAAM,EAAE,MAAM,IAAI,KAAK,WAAW,GAAG,KAAK,WAAW,CAAC;AAClF,SAAK,cAAc,WAAW;AAE9B,SAAK,gBAAgB,IAAI,eAAe;AAAA,MACtC,UAAU,cAAc,MAAM,uBAAuB,QAAQ;AAAA,MAC7D,SAAS,OAAO,OAAO,CAAA,GAAI,uBAAuB,OAAO;AAAA,MACzD,cAAc,uBAAuB;AAAA,MACrC,gBAAgB,uBAAuB;AAAA,IAC7C,CAAK;AACD,SAAK,cAAc,QAAQ,eAAe,IAAI,KAAK,gCAAgC,IAAI;AACvF,SAAK,cAAc,QAAQ,oBAAoB,IAAI,KAAK,OAAO,sBAAsB,IAAI;AACzF,SAAK,cAAc,SAAS,UAAU,EAAE,QAAQ,KAAK,6BAA6B;AAClF,SAAK,cAAc,SAAS,QAAQ,EAAE,QAAQ,KAAK,gCAC/C,eACA,KAAK,kBAAkB;AAC3B,SAAK,cAAc,SAAS,MAAM,EAAE,MAAM,IAAI,KAAK,WAAW,GAAG,KAAK,WAAW,CAAC;AAClF,SAAK,cAAc,WAAW;AAE9B,SAAK,eAAe,IAAI,eAAe;AAAA,MACrC,UAAU,cAAc,MAAM,WAAW,QAAQ;AAAA,MACjD,cAAc,WAAW;AAAA,MACzB,gBAAgB,WAAW;AAAA,MAC3B,UAAU;AAAA,IAChB,CAAK;AACD,SAAK,aAAa,cAAc;AAChC,SAAK,aAAa,YAAY;AAC9B,SAAK,aAAa,aAAa;AAC/B,SAAK,aAAa,WAAW;AAC7B,SAAK,aAAa,WAAW;AAC7B,SAAK,aAAa,WAAW;AAC7B,SAAK,aAAa,gBAAgB;AAClC,SAAK,aAAa,gBAAgB;AAClC,SAAK,aAAa,gBAAgB;AAClC,SAAK,aAAa,qBAAqB;AAEvC,SAAK,YAAY,IAAI,eAAe;AAAA,MAClC,UAAU,cAAc,MAAM,sBAAsB,QAAQ;AAAA,MAC5D,cAAc,sBAAsB;AAAA,MACpC,gBAAgB,sBAAsB;AAAA,MACtC,UAAU;AAAA,IAChB,CAAK;AAED,SAAK,SAAS,IAAI,eAAe,IAAI;AAAA,EACtC;AAAA,EAED,OAAO,UAAU,aAAa,YAAwC;AAEpE,QAAI,KAAK,gBAAgB;AACvB,WAAK,aAAa,WAAW;AAC7B,WAAK,aAAa,SAAS,UAAU,EAAE,QAAQ,WAAW;AAC1D,WAAK,aAAa,cAAc;AAChC,WAAK,WAAW,UAAU,KAAK,cAAc,IAAI;AAAA,IAClD;AAED,QAAI,KAAK,OAAO,WAAW,GAAG;AAC5B;AAAA,IACD;AAED,aAAS,cAAc,KAAK,cAAc;AAC1C,SAAK,gBAAgB,SAAS,cAAe;AAC7C,UAAM,eAAe,SAAS;AAC9B,aAAS,YAAY;AAErB,aAAS,gBAAgB,KAAK,iBAAiB;AAC/C,aAAS,MAAO;AAEhB,SAAK,YAAY,SAAS,MAAM,EAAE,QAAQ,KAAK,OAAO;AACtD,SAAK,YAAY,SAAS,WAAW,EAAE,QAAQ,KAAK,OAAO;AAC3D,SAAK,YAAY,SAAS,OAAO,EAAE,QAAQ,KAAK,OAAO;AACvD,SAAK,YAAY,SAAS,cAAc,EAAE,QAAQ,KAAK,OAAO;AAC9D,SAAK,YAAY,SAAS,eAAe,EAAE,QAAQ,KAAK,OAAO;AAC/D,SAAK,YAAY,SAAS,YAAY,EAAE,QAAQ,KAAK,OAAO;AAC5D,SAAK,YAAY,SAAS,WAAW,EAAE,QAAQ,KAAK,OAAO;AAG3D,UAAM,cAAc,KAAK,OAAO,sBAAsB,KAAK,OAAO,MAAM,KAAK,OAAO;AACpF,SAAK,cAAc,SAAS,aAAa,EAAE,QAAQ;AACnD,SAAK,cAAc,SAAS,aAAa,EAAE,QAAQ;AAEnD,SAAK,cAAc,SAAS,YAAY,EAAE,QAAQ,KAAK,OAAO;AAC9D,SAAK,cAAc,SAAS,WAAW,EAAE,QAAQ,KAAK,OAAO;AAC7D,SAAK,cAAc,SAAS,YAAY,EAAE,QAAQ,KAAK,OAAO;AAC9D,SAAK,cAAc,SAAS,WAAW,EAAE,QAAQ,KAAK,OAAO;AAE7D,SAAK,OAAO,gBAAgB,KAAK,MAAM,KAAK,OAAO,aAAa;AAChE,QAAI,KAAK,eAAe,KAAK,OAAO,iBAAiB,KAAK,mBAAmB,KAAK,OAAO,eAAe;AACtG,sBAAgB;AAAA,QACd,KAAK;AAAA,QACL,KAAK,OAAO;AAAA,QACZ,KAAK,OAAO;AAAA,QACZ,IAAI,QAAQ,GAAG,CAAC;AAAA,MACjB;AACD,sBAAgB;AAAA,QACd,KAAK;AAAA,QACL,KAAK,OAAO;AAAA,QACZ,KAAK,OAAO;AAAA,QACZ,IAAI,QAAQ,GAAG,CAAC;AAAA,MACjB;AACD,WAAK,aAAa,KAAK,OAAO;AAC9B,WAAK,iBAAiB,KAAK,OAAO;AAAA,IACnC;AAGD,aAAS,cAAc,CAAQ;AAC/B,aAAS,gBAAgB,KAAK,kBAAkB;AAChD,aAAS,MAAO;AAChB,aAAS,OAAO,KAAK,OAAO,KAAK,MAAM;AAGvC,QAAI,CAAC,KAAK,+BAA+B;AAEvC,WAAK,eAAe,UAAU,KAAK,eAAe,KAAK,mBAAmB,GAAU,CAAG;AAAA,IACxF;AAED,QAAI,KAAK,uBAAuB;AAE9B,WAAK,eAAe,UAAU,KAAK,gBAAgB,KAAK,oBAAoB,SAAU,CAAG;AAAA,IAC1F;AAGD,SAAK,WAAW,UAAU,KAAK,aAAa,KAAK,iBAAiB,UAAU,CAAG;AAG/E,QAAI,KAAK,OAAO,SAAS;AACvB,WAAK,WAAW,UAAU,KAAK,eAAe,KAAK,8BAA8B,UAAU,CAAG;AAC9F,WAAK,WAAW,UAAU,KAAK,eAAe,KAAK,iBAAiB,UAAU,CAAG;AAAA,IAClF;AAED,QAAI,iBAAiB,KAAK;AAE1B,QAAI,KAAK,OAAO,WAAW,GAAG;AAC5B,UAAI,KAAK,+BAA+B;AACtC,aAAK,aAAa,SAAS,UAAU,EAAE,QAAQ,KAAK,mBAAmB;AACvE,aAAK,aAAa,cAAc;AAAA,MACxC,OAAa;AACL,aAAK,UAAU,SAAS,UAAU,EAAE,QAAQ,KAAK,kBAAkB;AACnE,aAAK,UAAU,cAAc;AAC7B,yBAAiB,KAAK;AAAA,MACvB;AAAA,IACF,WAAU,KAAK,OAAO,WAAW,GAAG;AACnC,WAAK,aAAa,SAAS,UAAU,EAAE,QAAQ,KAAK,mBAAmB;AACvE,WAAK,aAAa,cAAc;AAAA,IACtC,OAAW;AACL,WAAK,aAAa,SAAS,UAAU,EAAE,QAAQ,KAAK,gBAAgB;AACpE,WAAK,aAAa,cAAc;AAAA,IACjC;AAGD,QAAI,KAAK,OAAO,WAAW,GAAG;AAC5B,qBAAe,WAAW;AAAA,IAChC,OAAW;AACL,qBAAe,WAAW;AAAA,IAC3B;AAGD,SAAK,WAAW,UAAU,gBAAgB,KAAK,iBAAiB,OAAO,UAAU;AAEjF,aAAS,cAAc,KAAK,gBAAgB,KAAK,aAAa;AAC9D,aAAS,YAAY;AAAA,EACtB;AAAA,EAED,WAAW,UAAU,cAAc,cAAc,YAAY,YAAY;AAEvE,aAAS,cAAc,KAAK,kBAAkB;AAC9C,UAAM,qBAAqB,SAAS,cAAe;AACnD,UAAM,oBAAoB,SAAS;AAEnC,aAAS,gBAAgB,YAAY;AAGrC,aAAS,YAAY;AACrB,QAAI,eAAe,UAAa,eAAe,MAAM;AACnD,eAAS,cAAc,UAAU;AACjC,eAAS,cAAc,cAAc,CAAG;AACxC,eAAS,MAAO;AAAA,IACjB;AAED,SAAK,OAAO,WAAW;AACvB,SAAK,OAAO,OAAO,QAAQ;AAG3B,aAAS,YAAY;AACrB,aAAS,cAAc,KAAK,kBAAkB;AAC9C,aAAS,cAAc,kBAAkB;AAAA,EAC1C;AAAA,EAED,eAAe,UAAU,kBAAkB,cAAc,YAAY,YAAY;AAC/E,aAAS,cAAc,KAAK,kBAAkB;AAC9C,UAAM,qBAAqB,SAAS,cAAe;AACnD,UAAM,oBAAoB,SAAS;AAEnC,aAAS,gBAAgB,YAAY;AACrC,aAAS,YAAY;AAErB,iBAAa,iBAAiB,cAAc;AAC5C,iBAAa,iBAAiB,cAAc;AAC5C,QAAI,eAAe,UAAa,eAAe,MAAM;AACnD,eAAS,cAAc,UAAU;AACjC,eAAS,cAAc,cAAc,CAAG;AACxC,eAAS,MAAO;AAAA,IACjB;AAED,SAAK,MAAM,mBAAmB;AAC9B,aAAS,OAAO,KAAK,OAAO,KAAK,MAAM;AACvC,SAAK,MAAM,mBAAmB;AAG9B,aAAS,YAAY;AACrB,aAAS,cAAc,KAAK,kBAAkB;AAC9C,aAAS,cAAc,kBAAkB;AAAA,EAC1C;AAAA,EAED,QAAQ,OAAO,QAAQ;AACrB,SAAK,mBAAmB,QAAQ,OAAO,MAAM;AAC7C,SAAK,gBAAgB,QAAQ,OAAO,MAAM;AAC1C,SAAK,6BAA6B,QAAQ,OAAO,MAAM;AACvD,SAAK,mBAAmB,QAAQ,OAAO,MAAM;AAC7C,SAAK,kBAAkB,QAAQ,OAAO,MAAM;AAE5C,SAAK,YAAY,SAAS,MAAM,EAAE,MAAM,IAAI,OAAO,MAAM;AACzD,SAAK,YAAY,SAAS,+BAA+B,EAAE,MAAM,KAAK,KAAK,OAAO,uBAAuB;AACzG,SAAK,YAAY,SAAS,wBAAwB,EAAE,QAAQ,KAAK,OAAO;AACxE,SAAK,YAAY,cAAc;AAE/B,SAAK,cAAc,SAAS,MAAM,EAAE,MAAM,IAAI,OAAO,MAAM;AAC3D,SAAK,cAAc,cAAc;AAEjC,SAAK,cAAc,SAAS,MAAM,EAAE,MAAM,IAAI,OAAO,MAAM;AAC3D,SAAK,cAAc,cAAc;AAAA,EAClC;AAAA,EAED,UAAU;AACR,SAAK,gBAAgB,QAAS;AAC9B,SAAK,6BAA6B,QAAS;AAC3C,SAAK,mBAAmB,QAAS;AACjC,SAAK,mBAAmB,QAAS;AACjC,SAAK,kBAAkB,QAAS;AAEhC,SAAK,cAAc,QAAS;AAC5B,SAAK,eAAe,QAAS;AAC7B,SAAK,YAAY,QAAS;AAC1B,SAAK,cAAc,QAAS;AAC5B,SAAK,cAAc,QAAS;AAC5B,SAAK,aAAa,QAAS;AAC3B,SAAK,UAAU,QAAS;AAExB,SAAK,OAAO,QAAS;AAAA,EACtB;AACH;AA1VE,cADI,SACG,UAAS;AAAA,EACd,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,KAAK;AAAA,EACL,OAAO;AAAA,EACP,QAAQ;AACT;"}