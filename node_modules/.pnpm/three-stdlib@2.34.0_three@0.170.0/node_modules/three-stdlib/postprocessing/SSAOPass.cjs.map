{"version":3,"file":"SSAOPass.cjs","sources":["../../src/postprocessing/SSAOPass.js"],"sourcesContent":["import {\n  AddEquation,\n  Color,\n  CustomBlending,\n  DataTexture,\n  DepthTexture,\n  DstAlphaFactor,\n  DstColorFactor,\n  FloatType,\n  MathUtils,\n  MeshNormalMaterial,\n  NearestFilter,\n  NoBlending,\n  RedFormat,\n  LuminanceFormat,\n  DepthStencilFormat,\n  UnsignedInt248Type,\n  RepeatWrapping,\n  ShaderMaterial,\n  UniformsUtils,\n  Vector3,\n  WebGLRenderTarget,\n  ZeroFactor,\n} from 'three'\nimport { Pass, FullScreenQuad } from './Pass'\nimport { SimplexNoise } from '../math/SimplexNoise'\nimport { SSAOShader, SSAOBlurShader, SSAODepthShader } from '../shaders/SSAOShader'\n\nimport { CopyShader } from '../shaders/CopyShader'\n\nclass SSAOPass extends Pass {\n  static OUTPUT = {\n    Default: 0,\n    SSAO: 1,\n    Blur: 2,\n    Beauty: 3,\n    Depth: 4,\n    Normal: 5,\n  }\n\n  constructor(scene, camera, width, height) {\n    super()\n\n    this.width = width !== undefined ? width : 512\n    this.height = height !== undefined ? height : 512\n\n    this.clear = true\n\n    this.camera = camera\n    this.scene = scene\n\n    this.kernelRadius = 8\n    this.kernelSize = 32\n    this.kernel = []\n    this.noiseTexture = null\n    this.output = 0\n\n    this.minDistance = 0.005\n    this.maxDistance = 0.1\n\n    this._visibilityCache = new Map()\n\n    //\n\n    this.generateSampleKernel()\n    this.generateRandomKernelRotations()\n\n    // beauty render target\n\n    const depthTexture = new DepthTexture()\n    depthTexture.format = DepthStencilFormat\n    depthTexture.type = UnsignedInt248Type\n\n    this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height)\n\n    // normal render target with depth buffer\n\n    this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      depthTexture: depthTexture,\n    })\n\n    // ssao render target\n\n    this.ssaoRenderTarget = new WebGLRenderTarget(this.width, this.height)\n\n    this.blurRenderTarget = this.ssaoRenderTarget.clone()\n\n    // ssao material\n\n    if (SSAOShader === undefined) {\n      console.error('THREE.SSAOPass: The pass relies on SSAOShader.')\n    }\n\n    this.ssaoMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOShader.defines),\n      uniforms: UniformsUtils.clone(SSAOShader.uniforms),\n      vertexShader: SSAOShader.vertexShader,\n      fragmentShader: SSAOShader.fragmentShader,\n      blending: NoBlending,\n    })\n\n    this.ssaoMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture\n    this.ssaoMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture\n    this.ssaoMaterial.uniforms['tDepth'].value = this.normalRenderTarget.depthTexture\n    this.ssaoMaterial.uniforms['tNoise'].value = this.noiseTexture\n    this.ssaoMaterial.uniforms['kernel'].value = this.kernel\n    this.ssaoMaterial.uniforms['cameraNear'].value = this.camera.near\n    this.ssaoMaterial.uniforms['cameraFar'].value = this.camera.far\n    this.ssaoMaterial.uniforms['resolution'].value.set(this.width, this.height)\n    this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix)\n    this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse)\n\n    // normal material\n\n    this.normalMaterial = new MeshNormalMaterial()\n    this.normalMaterial.blending = NoBlending\n\n    // blur material\n\n    this.blurMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSAOBlurShader.uniforms),\n      vertexShader: SSAOBlurShader.vertexShader,\n      fragmentShader: SSAOBlurShader.fragmentShader,\n    })\n    this.blurMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture\n    this.blurMaterial.uniforms['resolution'].value.set(this.width, this.height)\n\n    // material for rendering the depth\n\n    this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAODepthShader.defines),\n      uniforms: UniformsUtils.clone(SSAODepthShader.uniforms),\n      vertexShader: SSAODepthShader.vertexShader,\n      fragmentShader: SSAODepthShader.fragmentShader,\n      blending: NoBlending,\n    })\n    this.depthRenderMaterial.uniforms['tDepth'].value = this.normalRenderTarget.depthTexture\n    this.depthRenderMaterial.uniforms['cameraNear'].value = this.camera.near\n    this.depthRenderMaterial.uniforms['cameraFar'].value = this.camera.far\n\n    // material for rendering the content of a render target\n\n    this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: DstColorFactor,\n      blendDst: ZeroFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: DstAlphaFactor,\n      blendDstAlpha: ZeroFactor,\n      blendEquationAlpha: AddEquation,\n    })\n\n    this.fsQuad = new FullScreenQuad(null)\n\n    this.originalClearColor = new Color()\n  }\n\n  dispose() {\n    // dispose render targets\n\n    this.beautyRenderTarget.dispose()\n    this.normalRenderTarget.dispose()\n    this.ssaoRenderTarget.dispose()\n    this.blurRenderTarget.dispose()\n\n    // dispose materials\n\n    this.normalMaterial.dispose()\n    this.blurMaterial.dispose()\n    this.copyMaterial.dispose()\n    this.depthRenderMaterial.dispose()\n\n    // dipsose full screen quad\n\n    this.fsQuad.dispose()\n  }\n\n  render(renderer, writeBuffer /*, readBuffer, deltaTime, maskActive */) {\n    if (renderer.capabilities.isWebGL2 === false) this.noiseTexture.format = LuminanceFormat\n\n    // render beauty\n\n    renderer.setRenderTarget(this.beautyRenderTarget)\n    renderer.clear()\n    renderer.render(this.scene, this.camera)\n\n    // render normals and depth (honor only meshes, points and lines do not contribute to SSAO)\n\n    this.overrideVisibility()\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0)\n    this.restoreVisibility()\n\n    // render SSAO\n\n    this.ssaoMaterial.uniforms['kernelRadius'].value = this.kernelRadius\n    this.ssaoMaterial.uniforms['minDistance'].value = this.minDistance\n    this.ssaoMaterial.uniforms['maxDistance'].value = this.maxDistance\n    this.renderPass(renderer, this.ssaoMaterial, this.ssaoRenderTarget)\n\n    // render blur\n\n    this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget)\n\n    // output result to screen\n\n    switch (this.output) {\n      case SSAOPass.OUTPUT.SSAO:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture\n        this.copyMaterial.blending = NoBlending\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n\n        break\n\n      case SSAOPass.OUTPUT.Blur:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture\n        this.copyMaterial.blending = NoBlending\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n\n        break\n\n      case SSAOPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture\n        this.copyMaterial.blending = NoBlending\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n\n        break\n\n      case SSAOPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer)\n\n        break\n\n      case SSAOPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.normalRenderTarget.texture\n        this.copyMaterial.blending = NoBlending\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n\n        break\n\n      case SSAOPass.OUTPUT.Default:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture\n        this.copyMaterial.blending = NoBlending\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture\n        this.copyMaterial.blending = CustomBlending\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n\n        break\n\n      default:\n        console.warn('THREE.SSAOPass: Unknown output type.')\n    }\n  }\n\n  renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    // save original state\n    renderer.getClearColor(this.originalClearColor)\n    const originalClearAlpha = renderer.getClearAlpha()\n    const originalAutoClear = renderer.autoClear\n\n    renderer.setRenderTarget(renderTarget)\n\n    // setup pass state\n    renderer.autoClear = false\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor)\n      renderer.setClearAlpha(clearAlpha || 0.0)\n      renderer.clear()\n    }\n\n    this.fsQuad.material = passMaterial\n    this.fsQuad.render(renderer)\n\n    // restore original state\n    renderer.autoClear = originalAutoClear\n    renderer.setClearColor(this.originalClearColor)\n    renderer.setClearAlpha(originalClearAlpha)\n  }\n\n  renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor)\n    const originalClearAlpha = renderer.getClearAlpha()\n    const originalAutoClear = renderer.autoClear\n\n    renderer.setRenderTarget(renderTarget)\n    renderer.autoClear = false\n\n    clearColor = overrideMaterial.clearColor || clearColor\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor)\n      renderer.setClearAlpha(clearAlpha || 0.0)\n      renderer.clear()\n    }\n\n    this.scene.overrideMaterial = overrideMaterial\n    renderer.render(this.scene, this.camera)\n    this.scene.overrideMaterial = null\n\n    // restore original state\n\n    renderer.autoClear = originalAutoClear\n    renderer.setClearColor(this.originalClearColor)\n    renderer.setClearAlpha(originalClearAlpha)\n  }\n\n  setSize(width, height) {\n    this.width = width\n    this.height = height\n\n    this.beautyRenderTarget.setSize(width, height)\n    this.ssaoRenderTarget.setSize(width, height)\n    this.normalRenderTarget.setSize(width, height)\n    this.blurRenderTarget.setSize(width, height)\n\n    this.ssaoMaterial.uniforms['resolution'].value.set(width, height)\n    this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix)\n    this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse)\n\n    this.blurMaterial.uniforms['resolution'].value.set(width, height)\n  }\n\n  generateSampleKernel() {\n    const kernelSize = this.kernelSize\n    const kernel = this.kernel\n\n    for (let i = 0; i < kernelSize; i++) {\n      const sample = new Vector3()\n      sample.x = Math.random() * 2 - 1\n      sample.y = Math.random() * 2 - 1\n      sample.z = Math.random()\n\n      sample.normalize()\n\n      let scale = i / kernelSize\n      scale = MathUtils.lerp(0.1, 1, scale * scale)\n      sample.multiplyScalar(scale)\n\n      kernel.push(sample)\n    }\n  }\n\n  generateRandomKernelRotations() {\n    const width = 4,\n      height = 4\n\n    if (SimplexNoise === undefined) {\n      console.error('THREE.SSAOPass: The pass relies on SimplexNoise.')\n    }\n\n    const simplex = new SimplexNoise()\n\n    const size = width * height\n    const data = new Float32Array(size)\n\n    for (let i = 0; i < size; i++) {\n      const x = Math.random() * 2 - 1\n      const y = Math.random() * 2 - 1\n      const z = 0\n\n      data[i] = simplex.noise3d(x, y, z)\n    }\n\n    this.noiseTexture = new DataTexture(data, width, height, RedFormat, FloatType)\n    this.noiseTexture.wrapS = RepeatWrapping\n    this.noiseTexture.wrapT = RepeatWrapping\n    this.noiseTexture.needsUpdate = true\n  }\n\n  overrideVisibility() {\n    const scene = this.scene\n    const cache = this._visibilityCache\n\n    scene.traverse(function (object) {\n      cache.set(object, object.visible)\n\n      if (object.isPoints || object.isLine) object.visible = false\n    })\n  }\n\n  restoreVisibility() {\n    const scene = this.scene\n    const cache = this._visibilityCache\n\n    scene.traverse(function (object) {\n      const visible = cache.get(object)\n      object.visible = visible\n    })\n\n    cache.clear()\n  }\n}\n\nexport { SSAOPass }\n"],"names":["Pass","DepthTexture","DepthStencilFormat","UnsignedInt248Type","WebGLRenderTarget","NearestFilter","SSAOShader","ShaderMaterial","UniformsUtils","NoBlending","MeshNormalMaterial","SSAOBlurShader","SSAODepthShader","CopyShader","DstColorFactor","ZeroFactor","AddEquation","DstAlphaFactor","FullScreenQuad","Color","LuminanceFormat","CustomBlending","Vector3","MathUtils","SimplexNoise","DataTexture","RedFormat","FloatType","RepeatWrapping"],"mappings":"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"}