{"version":3,"file":"UnrealBloomPass.js","sources":["../../src/postprocessing/UnrealBloomPass.js"],"sourcesContent":["import {\n  AdditiveBlending,\n  Color,\n  HalfFloatType,\n  MeshBasicMaterial,\n  ShaderMaterial,\n  UniformsUtils,\n  Vector2,\n  Vector3,\n  WebGLRenderTarget,\n} from 'three'\nimport { Pass, FullScreenQuad } from './Pass'\nimport { CopyShader } from '../shaders/CopyShader'\nimport { LuminosityHighPassShader } from '../shaders/LuminosityHighPassShader'\n\n/**\n * UnrealBloomPass is inspired by the bloom pass of Unreal Engine. It creates a\n * mip map chain of bloom textures and blurs them with different radii. Because\n * of the weighted combination of mips, and because larger blurs are done on\n * higher mips, this effect provides good quality and performance.\n *\n * Reference:\n * - https://docs.unrealengine.com/latest/INT/Engine/Rendering/PostProcessEffects/Bloom/\n */\nclass UnrealBloomPass extends Pass {\n  static BlurDirectionX = new Vector2(1.0, 0.0)\n  static BlurDirectionY = new Vector2(0.0, 1.0)\n\n  constructor(resolution, strength, radius, threshold) {\n    super()\n\n    this.strength = strength !== undefined ? strength : 1\n    this.radius = radius\n    this.threshold = threshold\n    this.resolution = resolution !== undefined ? new Vector2(resolution.x, resolution.y) : new Vector2(256, 256)\n\n    // create color only once here, reuse it later inside the render function\n    this.clearColor = new Color(0, 0, 0)\n\n    // render targets\n    this.renderTargetsHorizontal = []\n    this.renderTargetsVertical = []\n    this.nMips = 5\n    let resx = Math.round(this.resolution.x / 2)\n    let resy = Math.round(this.resolution.y / 2)\n\n    this.renderTargetBright = new WebGLRenderTarget(resx, resy, { type: HalfFloatType })\n    this.renderTargetBright.texture.name = 'UnrealBloomPass.bright'\n    this.renderTargetBright.texture.generateMipmaps = false\n\n    for (let i = 0; i < this.nMips; i++) {\n      const renderTargetHorizonal = new WebGLRenderTarget(resx, resy, { type: HalfFloatType })\n\n      renderTargetHorizonal.texture.name = 'UnrealBloomPass.h' + i\n      renderTargetHorizonal.texture.generateMipmaps = false\n\n      this.renderTargetsHorizontal.push(renderTargetHorizonal)\n\n      const renderTargetVertical = new WebGLRenderTarget(resx, resy, { type: HalfFloatType })\n\n      renderTargetVertical.texture.name = 'UnrealBloomPass.v' + i\n      renderTargetVertical.texture.generateMipmaps = false\n\n      this.renderTargetsVertical.push(renderTargetVertical)\n\n      resx = Math.round(resx / 2)\n\n      resy = Math.round(resy / 2)\n    }\n\n    // luminosity high pass material\n\n    const highPassShader = LuminosityHighPassShader\n    this.highPassUniforms = UniformsUtils.clone(highPassShader.uniforms)\n\n    this.highPassUniforms['luminosityThreshold'].value = threshold\n    this.highPassUniforms['smoothWidth'].value = 0.01\n\n    this.materialHighPassFilter = new ShaderMaterial({\n      uniforms: this.highPassUniforms,\n      vertexShader: highPassShader.vertexShader,\n      fragmentShader: highPassShader.fragmentShader,\n      defines: {},\n    })\n\n    // Gaussian Blur Materials\n    this.separableBlurMaterials = []\n    const kernelSizeArray = [3, 5, 7, 9, 11]\n    resx = Math.round(this.resolution.x / 2)\n    resy = Math.round(this.resolution.y / 2)\n\n    for (let i = 0; i < this.nMips; i++) {\n      this.separableBlurMaterials.push(this.getSeperableBlurMaterial(kernelSizeArray[i]))\n\n      this.separableBlurMaterials[i].uniforms['texSize'].value = new Vector2(resx, resy)\n\n      resx = Math.round(resx / 2)\n\n      resy = Math.round(resy / 2)\n    }\n\n    // Composite material\n    this.compositeMaterial = this.getCompositeMaterial(this.nMips)\n    this.compositeMaterial.uniforms['blurTexture1'].value = this.renderTargetsVertical[0].texture\n    this.compositeMaterial.uniforms['blurTexture2'].value = this.renderTargetsVertical[1].texture\n    this.compositeMaterial.uniforms['blurTexture3'].value = this.renderTargetsVertical[2].texture\n    this.compositeMaterial.uniforms['blurTexture4'].value = this.renderTargetsVertical[3].texture\n    this.compositeMaterial.uniforms['blurTexture5'].value = this.renderTargetsVertical[4].texture\n    this.compositeMaterial.uniforms['bloomStrength'].value = strength\n    this.compositeMaterial.uniforms['bloomRadius'].value = 0.1\n    this.compositeMaterial.needsUpdate = true\n\n    const bloomFactors = [1.0, 0.8, 0.6, 0.4, 0.2]\n    this.compositeMaterial.uniforms['bloomFactors'].value = bloomFactors\n    this.bloomTintColors = [\n      new Vector3(1, 1, 1),\n      new Vector3(1, 1, 1),\n      new Vector3(1, 1, 1),\n      new Vector3(1, 1, 1),\n      new Vector3(1, 1, 1),\n    ]\n    this.compositeMaterial.uniforms['bloomTintColors'].value = this.bloomTintColors\n\n    // copy material\n\n    const copyShader = CopyShader\n\n    this.copyUniforms = UniformsUtils.clone(copyShader.uniforms)\n    this.copyUniforms['opacity'].value = 1.0\n\n    this.materialCopy = new ShaderMaterial({\n      uniforms: this.copyUniforms,\n      vertexShader: copyShader.vertexShader,\n      fragmentShader: copyShader.fragmentShader,\n      blending: AdditiveBlending,\n      depthTest: false,\n      depthWrite: false,\n      transparent: true,\n    })\n\n    this.enabled = true\n    this.needsSwap = false\n\n    this._oldClearColor = new Color()\n    this.oldClearAlpha = 1\n\n    this.basic = new MeshBasicMaterial()\n\n    this.fsQuad = new FullScreenQuad(null)\n  }\n\n  dispose() {\n    for (let i = 0; i < this.renderTargetsHorizontal.length; i++) {\n      this.renderTargetsHorizontal[i].dispose()\n    }\n\n    for (let i = 0; i < this.renderTargetsVertical.length; i++) {\n      this.renderTargetsVertical[i].dispose()\n    }\n\n    this.renderTargetBright.dispose()\n\n    //\n\n    for (let i = 0; i < this.separableBlurMaterials.length; i++) {\n      this.separableBlurMaterials[i].dispose()\n    }\n\n    this.compositeMaterial.dispose()\n    this.materialCopy.dispose()\n    this.basic.dispose()\n\n    //\n\n    this.fsQuad.dispose()\n  }\n\n  setSize(width, height) {\n    let resx = Math.round(width / 2)\n    let resy = Math.round(height / 2)\n\n    this.renderTargetBright.setSize(resx, resy)\n\n    for (let i = 0; i < this.nMips; i++) {\n      this.renderTargetsHorizontal[i].setSize(resx, resy)\n      this.renderTargetsVertical[i].setSize(resx, resy)\n\n      this.separableBlurMaterials[i].uniforms['texSize'].value = new Vector2(resx, resy)\n\n      resx = Math.round(resx / 2)\n      resy = Math.round(resy / 2)\n    }\n  }\n\n  render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    renderer.getClearColor(this._oldClearColor)\n    this.oldClearAlpha = renderer.getClearAlpha()\n    const oldAutoClear = renderer.autoClear\n    renderer.autoClear = false\n\n    renderer.setClearColor(this.clearColor, 0)\n\n    if (maskActive) renderer.state.buffers.stencil.setTest(false)\n\n    // Render input to screen\n\n    if (this.renderToScreen) {\n      this.fsQuad.material = this.basic\n      this.basic.map = readBuffer.texture\n\n      renderer.setRenderTarget(null)\n      renderer.clear()\n      this.fsQuad.render(renderer)\n    }\n\n    // 1. Extract Bright Areas\n\n    this.highPassUniforms['tDiffuse'].value = readBuffer.texture\n    this.highPassUniforms['luminosityThreshold'].value = this.threshold\n    this.fsQuad.material = this.materialHighPassFilter\n\n    renderer.setRenderTarget(this.renderTargetBright)\n    renderer.clear()\n    this.fsQuad.render(renderer)\n\n    // 2. Blur All the mips progressively\n\n    let inputRenderTarget = this.renderTargetBright\n\n    for (let i = 0; i < this.nMips; i++) {\n      this.fsQuad.material = this.separableBlurMaterials[i]\n\n      this.separableBlurMaterials[i].uniforms['colorTexture'].value = inputRenderTarget.texture\n      this.separableBlurMaterials[i].uniforms['direction'].value = UnrealBloomPass.BlurDirectionX\n      renderer.setRenderTarget(this.renderTargetsHorizontal[i])\n      renderer.clear()\n      this.fsQuad.render(renderer)\n\n      this.separableBlurMaterials[i].uniforms['colorTexture'].value = this.renderTargetsHorizontal[i].texture\n      this.separableBlurMaterials[i].uniforms['direction'].value = UnrealBloomPass.BlurDirectionY\n      renderer.setRenderTarget(this.renderTargetsVertical[i])\n      renderer.clear()\n      this.fsQuad.render(renderer)\n\n      inputRenderTarget = this.renderTargetsVertical[i]\n    }\n\n    // Composite All the mips\n\n    this.fsQuad.material = this.compositeMaterial\n    this.compositeMaterial.uniforms['bloomStrength'].value = this.strength\n    this.compositeMaterial.uniforms['bloomRadius'].value = this.radius\n    this.compositeMaterial.uniforms['bloomTintColors'].value = this.bloomTintColors\n\n    renderer.setRenderTarget(this.renderTargetsHorizontal[0])\n    renderer.clear()\n    this.fsQuad.render(renderer)\n\n    // Blend it additively over the input texture\n\n    this.fsQuad.material = this.materialCopy\n    this.copyUniforms['tDiffuse'].value = this.renderTargetsHorizontal[0].texture\n\n    if (maskActive) renderer.state.buffers.stencil.setTest(true)\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null)\n      this.fsQuad.render(renderer)\n    } else {\n      renderer.setRenderTarget(readBuffer)\n      this.fsQuad.render(renderer)\n    }\n\n    // Restore renderer settings\n\n    renderer.setClearColor(this._oldClearColor, this.oldClearAlpha)\n    renderer.autoClear = oldAutoClear\n  }\n\n  getSeperableBlurMaterial(kernelRadius) {\n    return new ShaderMaterial({\n      defines: {\n        KERNEL_RADIUS: kernelRadius,\n        SIGMA: kernelRadius,\n      },\n\n      uniforms: {\n        colorTexture: { value: null },\n        texSize: { value: new Vector2(0.5, 0.5) },\n        direction: { value: new Vector2(0.5, 0.5) },\n      },\n\n      vertexShader: `varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n\n      fragmentShader: `#include <common>\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\tuniform vec2 texSize;\n\t\t\t\tuniform vec2 direction;\n\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\n\t\t\t\t}\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\t\t\tfloat fSigma = float(SIGMA);\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, fSigma);\n\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\n\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\n\t\t\t\t\t\tfloat x = float(i);\n\t\t\t\t\t\tfloat w = gaussianPdf(x, fSigma);\n\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\n\t\t\t\t\t\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\n\t\t\t\t\t\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\n\t\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\n\t\t\t\t\t\tweightSum += 2.0 * w;\n\t\t\t\t\t}\n\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\n\t\t\t\t}`,\n    })\n  }\n\n  getCompositeMaterial(nMips) {\n    return new ShaderMaterial({\n      defines: {\n        NUM_MIPS: nMips,\n      },\n\n      uniforms: {\n        blurTexture1: { value: null },\n        blurTexture2: { value: null },\n        blurTexture3: { value: null },\n        blurTexture4: { value: null },\n        blurTexture5: { value: null },\n        bloomStrength: { value: 1.0 },\n        bloomFactors: { value: null },\n        bloomTintColors: { value: null },\n        bloomRadius: { value: 0.0 },\n      },\n\n      vertexShader: `varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n\n      fragmentShader: `varying vec2 vUv;\n\t\t\t\tuniform sampler2D blurTexture1;\n\t\t\t\tuniform sampler2D blurTexture2;\n\t\t\t\tuniform sampler2D blurTexture3;\n\t\t\t\tuniform sampler2D blurTexture4;\n\t\t\t\tuniform sampler2D blurTexture5;\n\t\t\t\tuniform float bloomStrength;\n\t\t\t\tuniform float bloomRadius;\n\t\t\t\tuniform float bloomFactors[NUM_MIPS];\n\t\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\n\n\t\t\t\tfloat lerpBloomFactor(const in float factor) {\n\t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\n\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\n\t\t\t\t}`,\n    })\n  }\n}\n\nexport { UnrealBloomPass }\n"],"names":[],"mappings":"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"}