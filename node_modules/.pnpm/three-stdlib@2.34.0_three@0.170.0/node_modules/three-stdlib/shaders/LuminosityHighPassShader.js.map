{"version":3,"file":"LuminosityHighPassShader.js","sources":["../../src/shaders/LuminosityHighPassShader.ts"],"sourcesContent":["import { Color } from 'three'\n\n/**\n * Luminosity\n * http://en.wikipedia.org/wiki/Luminosity\n */\n\nexport const LuminosityHighPassShader = {\n  shaderID: 'luminosityHighPass',\n\n  uniforms: {\n    tDiffuse: { value: null },\n    luminosityThreshold: { value: 1.0 },\n    smoothWidth: { value: 1.0 },\n    defaultColor: { value: new Color(0x000000) },\n    defaultOpacity: { value: 0.0 },\n  },\n\n  vertexShader: [\n    'varying vec2 vUv;',\n\n    'void main() {',\n\n    '\tvUv = uv;',\n\n    '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n\n    '}',\n  ].join('\\n'),\n\n  fragmentShader: [\n    'uniform sampler2D tDiffuse;',\n    'uniform vec3 defaultColor;',\n    'uniform float defaultOpacity;',\n    'uniform float luminosityThreshold;',\n    'uniform float smoothWidth;',\n\n    'varying vec2 vUv;',\n\n    'void main() {',\n\n    '\tvec4 texel = texture2D( tDiffuse, vUv );',\n\n    '\tvec3 luma = vec3( 0.299, 0.587, 0.114 );',\n\n    '\tfloat v = dot( texel.xyz, luma );',\n\n    '\tvec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );',\n\n    '\tfloat alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );',\n\n    '\tgl_FragColor = mix( outputColor, texel, alpha );',\n\n    '}',\n  ].join('\\n'),\n}\n"],"names":[],"mappings":";AAOO,MAAM,2BAA2B;AAAA,EACtC,UAAU;AAAA,EAEV,UAAU;AAAA,IACR,UAAU,EAAE,OAAO,KAAK;AAAA,IACxB,qBAAqB,EAAE,OAAO,EAAI;AAAA,IAClC,aAAa,EAAE,OAAO,EAAI;AAAA,IAC1B,cAAc,EAAE,OAAO,IAAI,MAAM,CAAQ,EAAE;AAAA,IAC3C,gBAAgB,EAAE,OAAO,EAAI;AAAA,EAC/B;AAAA,EAEA,cAAc;AAAA,IACZ;AAAA,IAEA;AAAA,IAEA;AAAA,IAEA;AAAA,IAEA;AAAA,EAAA,EACA,KAAK,IAAI;AAAA,EAEX,gBAAgB;AAAA,IACd;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IAEA;AAAA,IAEA;AAAA,IAEA;AAAA,IAEA;AAAA,IAEA;AAAA,IAEA;AAAA,IAEA;AAAA,IAEA;AAAA,IAEA;AAAA,EAAA,EACA,KAAK,IAAI;AACb;"}