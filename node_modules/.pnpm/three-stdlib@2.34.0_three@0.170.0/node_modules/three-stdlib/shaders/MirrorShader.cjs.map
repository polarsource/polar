{"version":3,"file":"MirrorShader.cjs","sources":["../../src/shaders/MirrorShader.ts"],"sourcesContent":["/**\n * Mirror Shader\n * Copies half the input to the other half\n *\n * side: side of input to mirror (0 = left, 1 = right, 2 = top, 3 = bottom)\n */\n\nexport const MirrorShader = {\n  uniforms: {\n    tDiffuse: { value: null },\n    side: { value: 1 },\n  },\n\n  vertexShader: [\n    'varying vec2 vUv;',\n\n    'void main() {',\n\n    '\tvUv = uv;',\n    '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n\n    '}',\n  ].join('\\n'),\n\n  fragmentShader: [\n    'uniform sampler2D tDiffuse;',\n    'uniform int side;',\n\n    'varying vec2 vUv;',\n\n    'void main() {',\n\n    '\tvec2 p = vUv;',\n    '\tif (side == 0){',\n    '\t\tif (p.x > 0.5) p.x = 1.0 - p.x;',\n    '\t}else if (side == 1){',\n    '\t\tif (p.x < 0.5) p.x = 1.0 - p.x;',\n    '\t}else if (side == 2){',\n    '\t\tif (p.y < 0.5) p.y = 1.0 - p.y;',\n    '\t}else if (side == 3){',\n    '\t\tif (p.y > 0.5) p.y = 1.0 - p.y;',\n    '\t} ',\n    '\tvec4 color = texture2D(tDiffuse, p);',\n    '\tgl_FragColor = color;',\n\n    '}',\n  ].join('\\n'),\n}\n"],"names":[],"mappings":";;AAOO,MAAM,eAAe;AAAA,EAC1B,UAAU;AAAA,IACR,UAAU,EAAE,OAAO,KAAK;AAAA,IACxB,MAAM,EAAE,OAAO,EAAE;AAAA,EACnB;AAAA,EAEA,cAAc;AAAA,IACZ;AAAA,IAEA;AAAA,IAEA;AAAA,IACA;AAAA,IAEA;AAAA,EAAA,EACA,KAAK,IAAI;AAAA,EAEX,gBAAgB;AAAA,IACd;AAAA,IACA;AAAA,IAEA;AAAA,IAEA;AAAA,IAEA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IAEA;AAAA,EAAA,EACA,KAAK,IAAI;AACb;;"}