{
  "openapi": "3.1.0",
  "info": {
    "title": "Polar API",
    "summary": "Polar HTTP and Webhooks API",
    "description": "Read the docs at https://docs.polar.sh/api",
    "version": "0.1.0"
  },
  "servers": [
    {
      "url": "https://api.polar.sh",
      "description": "Production environment",
      "x-speakeasy-server-id": "production"
    },
    {
      "url": "https://sandbox-api.polar.sh",
      "description": "Sandbox environment",
      "x-speakeasy-server-id": "sandbox"
    }
  ],
  "paths": {
    "/v1/users/benefits/": {
      "get": {
        "tags": [
          "users",
          "benefits",
          "documented",
          "featured"
        ],
        "summary": "List Benefits",
        "description": "List my granted benefits.",
        "operationId": "users:benefits:list",
        "security": [
          {
            "oidc": [
              "user:benefits:read"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/BenefitType"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BenefitType"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "BenefitType Filter",
              "description": "Filter by benefit type."
            },
            "description": "Filter by benefit type."
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "order_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrderID Filter",
              "description": "Filter by order ID."
            },
            "description": "Filter by order ID."
          },
          {
            "name": "subscription_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "SubscriptionID Filter",
              "description": "Filter by subscription ID."
            },
            "description": "Filter by subscription ID."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserBenefitSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "-granted_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_UserBenefit_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "users.benefits",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "list",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.users.benefits.list({});\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "list",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.users.benefits.list()\n\nif res is not None:\n    while True:\n        # handle items\n\n        res = res.next()\n        if res is None:\n            break"
          }
        ]
      }
    },
    "/v1/users/benefits/{id}": {
      "get": {
        "tags": [
          "users",
          "benefits",
          "documented",
          "featured"
        ],
        "summary": "Get Benefit",
        "description": "Get a granted benefit by ID.",
        "operationId": "users:benefits:get",
        "security": [
          {
            "oidc": [
              "user:benefits:read"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The benefit ID.",
              "title": "Id"
            },
            "description": "The benefit ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BenefitArticlesSubscriber"
                    },
                    {
                      "$ref": "#/components/schemas/BenefitAdsSubscriber"
                    },
                    {
                      "$ref": "#/components/schemas/BenefitDiscordSubscriber"
                    },
                    {
                      "$ref": "#/components/schemas/BenefitCustomSubscriber"
                    },
                    {
                      "$ref": "#/components/schemas/BenefitGitHubRepositorySubscriber"
                    },
                    {
                      "$ref": "#/components/schemas/BenefitDownloadablesSubscriber"
                    },
                    {
                      "$ref": "#/components/schemas/BenefitLicenseKeysSubscriber"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "articles": "#/components/schemas/BenefitArticlesSubscriber",
                      "ads": "#/components/schemas/BenefitAdsSubscriber",
                      "discord": "#/components/schemas/BenefitDiscordSubscriber",
                      "custom": "#/components/schemas/BenefitCustomSubscriber",
                      "github_repository": "#/components/schemas/BenefitGitHubRepositorySubscriber",
                      "downloadables": "#/components/schemas/BenefitDownloadablesSubscriber",
                      "license_keys": "#/components/schemas/BenefitLicenseKeysSubscriber"
                    }
                  },
                  "title": "Response Users:Benefits:Get"
                }
              }
            }
          },
          "404": {
            "description": "Benefit not found or not granted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-group": "users.benefits",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "get",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.users.benefits.get({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "get",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.users.benefits.get(id=\"<value>\")\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      }
    },
    "/v1/users/orders/": {
      "get": {
        "tags": [
          "users",
          "orders",
          "documented",
          "featured"
        ],
        "summary": "List Orders",
        "description": "List my orders.",
        "operationId": "users:orders:list",
        "security": [
          {
            "oidc": [
              "user:orders:read"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "product_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The product ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/products",
                    "resourceName": "Product",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The product ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/products",
                      "resourceName": "Product",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "ProductID Filter",
              "description": "Filter by product ID."
            },
            "description": "Filter by product ID."
          },
          {
            "name": "product_price_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ProductPriceType"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductPriceType"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "ProductPriceType Filter",
              "description": "Filter by product price type. `recurring` will return orders corresponding to subscriptions creations or renewals. `one_time` will return orders corresponding to one-time purchases."
            },
            "description": "Filter by product price type. `recurring` will return orders corresponding to subscriptions creations or renewals. `one_time` will return orders corresponding to one-time purchases."
          },
          {
            "name": "subscription_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "SubscriptionID Filter",
              "description": "Filter by subscription ID."
            },
            "description": "Filter by subscription ID."
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Search by product or organization name.",
              "title": "Query"
            },
            "description": "Search by product or organization name."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserOrderSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "-created_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_UserOrder_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "users.orders",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "list",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.users.orders.list({});\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "list",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.users.orders.list()\n\nif res is not None:\n    while True:\n        # handle items\n\n        res = res.next()\n        if res is None:\n            break"
          }
        ]
      }
    },
    "/v1/users/orders/{id}": {
      "get": {
        "tags": [
          "users",
          "orders",
          "documented",
          "featured"
        ],
        "summary": "Get Order",
        "description": "Get an order by ID.",
        "operationId": "users:orders:get",
        "security": [
          {
            "oidc": [
              "user:orders:read"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The order ID.",
              "title": "Id"
            },
            "description": "The order ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserOrder"
                }
              }
            }
          },
          "404": {
            "description": "Order not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-group": "users.orders",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "get",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.users.orders.get({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "get",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.users.orders.get(id=\"<value>\")\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      }
    },
    "/v1/users/orders/{id}/invoice": {
      "get": {
        "tags": [
          "users",
          "orders",
          "documented",
          "featured"
        ],
        "summary": "Get Order Invoice",
        "description": "Get an order's invoice data.",
        "operationId": "users:orders:invoice",
        "security": [
          {
            "oidc": [
              "user:orders:read"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The order ID.",
              "title": "Id"
            },
            "description": "The order ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserOrderInvoice"
                }
              }
            }
          },
          "404": {
            "description": "Order not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-group": "users.orders",
        "x-speakeasy-name-override": "invoice",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "invoice",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.users.orders.invoice({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "invoice",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.users.orders.invoice(id=\"<value>\")\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      }
    },
    "/v1/users/subscriptions/": {
      "get": {
        "tags": [
          "users",
          "subscriptions",
          "documented",
          "featured"
        ],
        "summary": "List Subscriptions",
        "description": "List my subscriptions.",
        "operationId": "users:subscriptions:list",
        "security": [
          {
            "oidc": [
              "user:subscriptions:read"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "product_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The product ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/products",
                    "resourceName": "Product",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The product ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/products",
                      "resourceName": "Product",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "ProductID Filter",
              "description": "Filter by product ID."
            },
            "description": "Filter by product ID."
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by active or cancelled subscription.",
              "title": "Active"
            },
            "description": "Filter by active or cancelled subscription."
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Search by product or organization name.",
              "title": "Query"
            },
            "description": "Search by product or organization name."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSubscriptionSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "-started_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_UserSubscription_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "users.subscriptions",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "list",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.users.subscriptions.list({});\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "list",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.users.subscriptions.list()\n\nif res is not None:\n    while True:\n        # handle items\n\n        res = res.next()\n        if res is None:\n            break"
          }
        ]
      }
    },
    "/v1/users/subscriptions/{id}": {
      "get": {
        "tags": [
          "users",
          "subscriptions",
          "documented",
          "featured"
        ],
        "summary": "Get Subscription",
        "description": "Get a subscription by ID.",
        "operationId": "users:subscriptions:get",
        "security": [
          {
            "oidc": [
              "user:subscriptions:read"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The subscription ID.",
              "title": "Id"
            },
            "description": "The subscription ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSubscription"
                }
              }
            }
          },
          "404": {
            "description": "Subscription not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-group": "users.subscriptions",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "get",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.users.subscriptions.get({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "get",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.users.subscriptions.get(id=\"<value>\")\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      },
      "patch": {
        "tags": [
          "users",
          "subscriptions",
          "documented",
          "featured"
        ],
        "summary": "Update Subscription",
        "description": "Update a subscription.",
        "operationId": "users:subscriptions:update",
        "security": [
          {
            "oidc": [
              "user:subscriptions:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The subscription ID.",
              "title": "Id"
            },
            "description": "The subscription ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSubscriptionUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscription updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSubscription"
                }
              }
            }
          },
          "404": {
            "description": "Subscription not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-group": "users.subscriptions",
        "x-speakeasy-name-override": "update",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "update",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.users.subscriptions.update({\n    id: \"<value>\",\n    userSubscriptionUpdate: {\n      productPriceId: \"<value>\",\n    },\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "update",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.users.subscriptions.update(id=\"<value>\", user_subscription_update={\n    \"product_price_id\": \"<value>\",\n})\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      },
      "delete": {
        "tags": [
          "users",
          "subscriptions",
          "documented",
          "featured"
        ],
        "summary": "Cancel Subscription",
        "description": "Cancel a subscription.",
        "operationId": "users:subscriptions:cancel",
        "security": [
          {
            "oidc": [
              "user:subscriptions:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The subscription ID.",
              "title": "Id"
            },
            "description": "The subscription ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription canceled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSubscription"
                }
              }
            }
          },
          "403": {
            "description": "This subscription is already canceled or will be at the end of the period.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlreadyCanceledSubscription"
                }
              }
            }
          },
          "404": {
            "description": "Subscription not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-group": "users.subscriptions",
        "x-speakeasy-name-override": "cancel",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "cancel",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.users.subscriptions.cancel({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "cancel",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.users.subscriptions.cancel(id=\"<value>\")\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      }
    },
    "/v1/users/advertisements/": {
      "get": {
        "tags": [
          "users",
          "advertisements",
          "documented"
        ],
        "summary": "List Advertisements",
        "description": "List advertisement campaigns.",
        "operationId": "users:advertisements:list",
        "security": [
          {
            "oidc": [
              "user:advertisement_campaigns:read"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserAdvertisementSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "-created_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_UserAdvertisementCampaign_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "users.advertisements",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "list",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.users.advertisements.list({});\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "list",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.users.advertisements.list()\n\nif res is not None:\n    while True:\n        # handle items\n\n        res = res.next()\n        if res is None:\n            break"
          }
        ]
      },
      "post": {
        "tags": [
          "users",
          "advertisements",
          "documented"
        ],
        "summary": "Create Advertisement",
        "description": "Create an advertisement campaign.",
        "operationId": "users:advertisements:create",
        "security": [
          {
            "oidc": [
              "user:advertisement_campaigns:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAdvertisementCampaignCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Advertisement campaign created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAdvertisementCampaign"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-group": "users.advertisements",
        "x-speakeasy-name-override": "create",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "create",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.users.advertisements.create({\n    imageUrl: \"https://probable-heating.com/\",\n    text: \"<value>\",\n    linkUrl: \"https://standard-utilization.com/\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "create",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.users.advertisements.create(request={\n    \"image_url\": \"https://probable-heating.com/\",\n    \"text\": \"<value>\",\n    \"link_url\": \"https://standard-utilization.com/\",\n})\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      }
    },
    "/v1/users/advertisements/{id}": {
      "get": {
        "tags": [
          "users",
          "advertisements",
          "documented"
        ],
        "summary": "Get Advertisement",
        "description": "Get an advertisement campaign by ID.",
        "operationId": "users:advertisements:get",
        "security": [
          {
            "oidc": [
              "user:advertisement_campaigns:read"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The advertisement campaign ID.",
              "title": "Id"
            },
            "description": "The advertisement campaign ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAdvertisementCampaign"
                }
              }
            }
          },
          "404": {
            "description": "Advertisement campaign not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-group": "users.advertisements",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "get",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.users.advertisements.get({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "get",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.users.advertisements.get(id=\"<value>\")\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      },
      "patch": {
        "tags": [
          "users",
          "advertisements",
          "documented"
        ],
        "summary": "Update Advertisement",
        "description": "Update an advertisement campaign.",
        "operationId": "users:advertisements:update",
        "security": [
          {
            "oidc": [
              "user:advertisement_campaigns:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The advertisement campaign ID.",
              "title": "Id"
            },
            "description": "The advertisement campaign ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAdvertisementCampaignUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Advertisement campaign updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAdvertisementCampaign"
                }
              }
            }
          },
          "404": {
            "description": "Advertisement campaign not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-group": "users.advertisements",
        "x-speakeasy-name-override": "update",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "update",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.users.advertisements.update({\n    id: \"<value>\",\n    userAdvertisementCampaignUpdate: {},\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "update",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.users.advertisements.update(id=\"<value>\", user_advertisement_campaign_update={})\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      },
      "delete": {
        "tags": [
          "users",
          "advertisements",
          "documented"
        ],
        "summary": "Delete Advertisement",
        "description": "Delete an advertisement campaign.\n\nIt'll be automatically disabled on all granted benefits.",
        "operationId": "users:advertisements:delete",
        "security": [
          {
            "oidc": [
              "user:advertisement_campaigns:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The advertisement campaign ID.",
              "title": "Id"
            },
            "description": "The advertisement campaign ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "204": {
            "description": "Advertisement campaign deleted."
          },
          "404": {
            "description": "Advertisement campaign not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-group": "users.advertisements",
        "x-speakeasy-name-override": "delete",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "delete",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.users.advertisements.delete({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "delete",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.users.advertisements.delete(id=\"<value>\")\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      }
    },
    "/v1/users/advertisements/{id}/enable": {
      "post": {
        "tags": [
          "users",
          "advertisements",
          "documented"
        ],
        "summary": "Enable Advertisement",
        "description": "Enable an advertisement campaign on a granted benefit.",
        "operationId": "users:advertisements:enable",
        "security": [
          {
            "oidc": [
              "user:advertisement_campaigns:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The advertisement campaign ID.",
              "title": "Id"
            },
            "description": "The advertisement campaign ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAdvertisementCampaignEnable"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Advertisement campaign enabled on benefit."
          },
          "404": {
            "description": "Advertisement campaign not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-group": "users.advertisements",
        "x-speakeasy-name-override": "enable",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "enable",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  await polar.users.advertisements.enable({\n    id: \"<value>\",\n    userAdvertisementCampaignEnable: {\n      benefitId: \"<value>\",\n    },\n  });\n\n\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "enable",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\ns.users.advertisements.enable(id=\"<value>\", user_advertisement_campaign_enable={\n    \"benefit_id\": \"<value>\",\n})\n\n# Use the SDK ..."
          }
        ]
      }
    },
    "/v1/users/downloadables/": {
      "get": {
        "tags": [
          "users",
          "downloadables",
          "documented",
          "featured"
        ],
        "summary": "List Downloadables",
        "operationId": "users:downloadables:list",
        "security": [
          {
            "oidc": [
              "user:downloadables:read"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "benefit_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The benefit ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/benefits",
                    "resourceName": "Benefit",
                    "displayProperty": "description"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The benefit ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/benefits",
                      "resourceName": "Benefit",
                      "displayProperty": "description"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "BenefitID Filter",
              "description": "Filter by given benefit ID. "
            },
            "description": "Filter by given benefit ID. "
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_DownloadableRead_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "users.downloadables",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "list",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.users.downloadables.list({});\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "list",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.users.downloadables.list()\n\nif res is not None:\n    while True:\n        # handle items\n\n        res = res.next()\n        if res is None:\n            break"
          }
        ]
      }
    },
    "/v1/users/downloadables/{token}": {
      "get": {
        "tags": [
          "users",
          "downloadables",
          "documented",
          "featured"
        ],
        "summary": "Get Downloadable",
        "operationId": "users:downloadables:get",
        "security": [
          {
            "oidc": [
              "user:downloadables:read"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "302": {
            "description": "Redirected to download"
          },
          "400": {
            "description": "Invalid signature"
          },
          "404": {
            "description": "Downloadable not found"
          },
          "410": {
            "description": "Expired signature"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-group": "users.downloadables",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "get",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.users.downloadables.get({\n    token: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "get",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.users.downloadables.get(token=\"<value>\")\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      }
    },
    "/v1/users/license-keys/": {
      "get": {
        "tags": [
          "users",
          "license_keys",
          "documented",
          "featured"
        ],
        "summary": "List License Keys",
        "operationId": "users:license_keys:list",
        "security": [
          {
            "oidc": [
              "user:license_keys:read"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "benefit_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The benefit ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/benefits",
                    "resourceName": "Benefit",
                    "displayProperty": "description"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by a specific benefit",
              "title": "Benefit Id"
            },
            "description": "Filter by a specific benefit"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_LicenseKeyRead_"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized to manage license key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "License key not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "users.license_keys",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "list",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.users.licenseKeys.list({});\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "list",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.users.license_keys.list()\n\nif res is not None:\n    while True:\n        # handle items\n\n        res = res.next()\n        if res is None:\n            break"
          }
        ]
      }
    },
    "/v1/users/license-keys/{id}": {
      "get": {
        "tags": [
          "users",
          "license_keys",
          "documented",
          "featured"
        ],
        "summary": "Get License Key",
        "description": "Get a license key.",
        "operationId": "users:license_keys:get",
        "security": [
          {
            "oidc": [
              "user:license_keys:read"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseKeyWithActivations"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized to manage license key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "License key not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-group": "users.license_keys",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "get",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.users.licenseKeys.get({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "get",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.users.license_keys.get(id=\"<value>\")\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      }
    },
    "/v1/users/license-keys/validate": {
      "post": {
        "tags": [
          "users",
          "license_keys",
          "documented",
          "featured"
        ],
        "summary": "Validate License Key",
        "description": "Validate a license key.",
        "operationId": "users:license_keys:validate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LicenseKeyValidate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidatedLicenseKey"
                }
              }
            }
          },
          "404": {
            "description": "License key not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-group": "users.license_keys",
        "x-speakeasy-name-override": "validate",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "validate",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.users.licenseKeys.validate({\n    key: \"<key>\",\n    organizationId: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "validate",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.users.license_keys.validate(request={\n    \"key\": \"<key>\",\n    \"organization_id\": \"<value>\",\n})\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      }
    },
    "/v1/users/license-keys/activate": {
      "post": {
        "tags": [
          "users",
          "license_keys",
          "documented",
          "featured"
        ],
        "summary": "Activate License Key",
        "description": "Activate a license key instance.",
        "operationId": "users:license_keys:activate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LicenseKeyActivate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseKeyActivationRead"
                }
              }
            }
          },
          "403": {
            "description": "License key activation not required or permitted (limit reached).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotPermitted"
                }
              }
            }
          },
          "404": {
            "description": "License key not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-group": "users.license_keys",
        "x-speakeasy-name-override": "activate",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "activate",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.users.licenseKeys.activate({\n    key: \"<key>\",\n    organizationId: \"<value>\",\n    label: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "activate",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.users.license_keys.activate(request={\n    \"key\": \"<key>\",\n    \"organization_id\": \"<value>\",\n    \"label\": \"<value>\",\n})\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      }
    },
    "/v1/users/license-keys/deactivate": {
      "post": {
        "tags": [
          "users",
          "license_keys",
          "documented",
          "featured"
        ],
        "summary": "Deactivate License Key",
        "description": "Deactivate a license key instance.",
        "operationId": "users:license_keys:deactivate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LicenseKeyDeactivate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "License key activation deactivated."
          },
          "404": {
            "description": "License key not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-group": "users.license_keys",
        "x-speakeasy-name-override": "deactivate",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "deactivate",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  await polar.users.licenseKeys.deactivate({\n    key: \"<key>\",\n    organizationId: \"<value>\",\n    activationId: \"<value>\",\n  });\n\n\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "deactivate",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\ns.users.license_keys.deactivate(request={\n    \"key\": \"<key>\",\n    \"organization_id\": \"<value>\",\n    \"activation_id\": \"<value>\",\n})\n\n# Use the SDK ..."
          }
        ]
      }
    },
    "/v1/funding/search": {
      "get": {
        "tags": [
          "funding"
        ],
        "summary": "Search",
        "operationId": "funding:search",
        "security": [
          {
            "oidc": []
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The organization ID.",
              "x-polar-selector-widget": {
                "resourceRoot": "/v1/organizations",
                "resourceName": "Organization",
                "displayProperty": "name"
              },
              "title": "Organization Id"
            }
          },
          {
            "name": "repository_name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "minLength": 1
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by repository name.",
              "examples": [
                "my-repo"
              ],
              "title": "Repository Name"
            },
            "description": "Filter by repository name."
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Query"
            }
          },
          {
            "name": "badged",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Badged"
            }
          },
          {
            "name": "closed",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Closed"
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ListFundingSortBy"
              },
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order.",
              "default": [
                "newest"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_IssueFunding_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Anonymous",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "funding",
        "x-speakeasy-name-override": "search",
        "x-speakeasy-ignore": true
      }
    },
    "/v1/funding/lookup": {
      "get": {
        "tags": [
          "funding"
        ],
        "summary": "Lookup",
        "operationId": "funding:lookup",
        "security": [
          {
            "oidc": []
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "issue_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Issue Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueFunding"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Anonymous",
          "User"
        ],
        "x-speakeasy-group": "funding",
        "x-speakeasy-name-override": "lookup",
        "x-speakeasy-ignore": true
      }
    },
    "/v1/external_organizations/": {
      "get": {
        "tags": [
          "external_organizations",
          "documented",
          "issue_funding"
        ],
        "summary": "List External Organizations",
        "description": "List external organizations.",
        "operationId": "external_organizations:list",
        "security": [
          {
            "oidc": [
              "external_organizations:read"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "platform",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Platforms"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Platforms"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Platform Filter",
              "description": "Filter by platform."
            },
            "description": "Filter by platform."
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "RepositoryName Filter",
              "description": "Filter by name."
            },
            "description": "Filter by name."
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalOrganizationSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "-created_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_ExternalOrganization_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Anonymous",
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "external_organizations",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "list",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.externalOrganizations.list({});\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "list",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.external_organizations.list()\n\nif res is not None:\n    while True:\n        # handle items\n\n        res = res.next()\n        if res is None:\n            break"
          }
        ]
      }
    },
    "/v1/repositories/": {
      "get": {
        "tags": [
          "repositories",
          "documented",
          "issue_funding"
        ],
        "summary": "List Repositories",
        "description": "List repositories.",
        "operationId": "repositories:list",
        "security": [
          {
            "oidc": [
              "repositories:read",
              "repositories:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "platform",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Platforms"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Platforms"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Platform Filter",
              "description": "Filter by platform."
            },
            "description": "Filter by platform."
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "RepositoryName Filter",
              "description": "Filter by name."
            },
            "description": "Filter by name."
          },
          {
            "name": "external_organization_name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "ExternalOrganizationName Filter",
              "description": "Filter by external organization name."
            },
            "description": "Filter by external organization name."
          },
          {
            "name": "is_private",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by private status.",
              "title": "Is Private"
            },
            "description": "Filter by private status."
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RepositorySortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "-created_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_Repository_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Anonymous",
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "repositories",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "list",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.repositories.list({});\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "list",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.repositories.list()\n\nif res is not None:\n    while True:\n        # handle items\n\n        res = res.next()\n        if res is None:\n            break"
          }
        ]
      }
    },
    "/v1/repositories/{id}": {
      "get": {
        "tags": [
          "repositories",
          "documented",
          "issue_funding"
        ],
        "summary": "Get Repository",
        "description": "Get a repository by ID.",
        "operationId": "repositories:get",
        "security": [
          {
            "oidc": [
              "repositories:read",
              "repositories:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The repository ID.",
              "x-polar-selector-widget": {
                "resourceRoot": "/v1/repositories",
                "resourceName": "Repository",
                "displayProperty": "name"
              },
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Repository-Output"
                }
              }
            }
          },
          "404": {
            "description": "Repository not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Anonymous",
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "repositories",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "get",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.repositories.get({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "get",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.repositories.get(id=\"<value>\")\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      },
      "patch": {
        "tags": [
          "repositories",
          "documented",
          "issue_funding"
        ],
        "summary": "Update Repository",
        "description": "Update a repository.",
        "operationId": "repositories:update",
        "security": [
          {
            "oidc": [
              "repositories:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The repository ID.",
              "x-polar-selector-widget": {
                "resourceRoot": "/v1/repositories",
                "resourceName": "Repository",
                "displayProperty": "name"
              },
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RepositoryUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Repository updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Repository-Output"
                }
              }
            }
          },
          "403": {
            "description": "You don't have the permission to update this repository.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotPermitted"
                }
              }
            }
          },
          "404": {
            "description": "Repository not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "repositories",
        "x-speakeasy-name-override": "update",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "update",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.repositories.update({\n    id: \"<value>\",\n    repositoryUpdate: {},\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "update",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.repositories.update(id=\"<value>\", repository_update={})\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      }
    },
    "/v1/rewards/search": {
      "get": {
        "tags": [
          "rewards"
        ],
        "summary": "Search rewards",
        "description": "Search rewards.",
        "operationId": "rewards:search",
        "security": [
          {
            "oidc": []
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "pledges_to_organization",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Search rewards for pledges in this organization.",
              "title": "Pledges To Organization"
            },
            "description": "Search rewards for pledges in this organization."
          },
          {
            "name": "rewards_to_user",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Search rewards to user.",
              "title": "Rewards To User"
            },
            "description": "Search rewards to user."
          },
          {
            "name": "rewards_to_org",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Search rewards to organization.",
              "title": "Rewards To Org"
            },
            "description": "Search rewards to organization."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_Reward_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "rewards",
        "x-speakeasy-name-override": "search",
        "x-speakeasy-ignore": true
      }
    },
    "/v1/rewards/summary": {
      "get": {
        "tags": [
          "rewards"
        ],
        "summary": "Get rewards summary",
        "description": "Get summary of rewards for resource.",
        "operationId": "rewards:summary",
        "security": [
          {
            "oidc": []
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "issue_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Issue Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RewardsSummary"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Anonymous",
          "User"
        ],
        "x-speakeasy-group": "rewards",
        "x-speakeasy-name-override": "summary",
        "x-speakeasy-ignore": true
      }
    },
    "/v1/pull_requests/search": {
      "get": {
        "tags": [
          "pull_requests"
        ],
        "summary": "Search pull requests",
        "description": "Search pull requests.",
        "operationId": "pull_requests:search",
        "security": [
          {
            "oidc": []
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "references_issue_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Search pull requests that are mentioning this issue",
              "title": "References Issue Id"
            },
            "description": "Search pull requests that are mentioning this issue"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_PullRequest_"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Anonymous",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "pull_requests",
        "x-speakeasy-name-override": "search",
        "x-speakeasy-ignore": true
      }
    },
    "/v1/accounts/search": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Search",
        "operationId": "accounts:search",
        "security": [
          {
            "oidc": []
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_Account_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "accounts",
        "x-speakeasy-name-override": "search",
        "x-speakeasy-ignore": true
      }
    },
    "/v1/accounts/{id}": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Get",
        "operationId": "accounts:get",
        "security": [
          {
            "oidc": []
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-group": "accounts",
        "x-speakeasy-name-override": "get",
        "x-speakeasy-ignore": true
      }
    },
    "/v1/accounts/{id}/onboarding_link": {
      "post": {
        "tags": [
          "accounts"
        ],
        "summary": "Onboarding Link",
        "operationId": "accounts:onboarding_link",
        "security": [
          {
            "oidc": []
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "return_path",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Return Path"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountLink"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-group": "accounts",
        "x-speakeasy-name-override": "onboarding_link",
        "x-speakeasy-ignore": true
      }
    },
    "/v1/accounts/{id}/dashboard_link": {
      "post": {
        "tags": [
          "accounts"
        ],
        "summary": "Dashboard Link",
        "operationId": "accounts:dashboard_link",
        "security": [
          {
            "oidc": []
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountLink"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-group": "accounts",
        "x-speakeasy-name-override": "dashboard_link",
        "x-speakeasy-ignore": true
      }
    },
    "/v1/accounts": {
      "post": {
        "tags": [
          "accounts"
        ],
        "summary": "Create",
        "operationId": "accounts:create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oidc": []
          },
          {
            "pat": []
          }
        ],
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-group": "accounts",
        "x-speakeasy-name-override": "create",
        "x-speakeasy-ignore": true
      }
    },
    "/v1/issues/": {
      "get": {
        "tags": [
          "issues"
        ],
        "summary": "List Issues",
        "description": "List issues.",
        "operationId": "issues:list",
        "security": [
          {
            "oidc": [
              "issues:read",
              "issues:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "platform",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Platforms"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Platforms"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Platform Filter",
              "description": "Filter by platform."
            },
            "description": "Filter by platform."
          },
          {
            "name": "external_organization_name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "ExternalOrganizationName Filter",
              "description": "Filter by external organization name."
            },
            "description": "Filter by external organization name."
          },
          {
            "name": "repository_name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "RepositoryName Filter",
              "description": "Filter by repository name."
            },
            "description": "Filter by repository name."
          },
          {
            "name": "number",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "IssueNumber Filter",
              "description": "Filter by issue number."
            },
            "description": "Filter by issue number."
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "is_badged",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by badged status.",
              "title": "Is Badged"
            },
            "description": "Filter by badged status."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IssueSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "-modified_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_Issue_"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Anonymous",
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "issues",
        "x-speakeasy-name-override": "list",
        "x-speakeasy-ignore": true
      }
    },
    "/v1/issues/lookup": {
      "get": {
        "tags": [
          "issues"
        ],
        "summary": "Lookup",
        "operationId": "issues:lookup",
        "security": [
          {
            "oidc": []
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "external_url",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "URL to issue on external source",
              "examples": [
                "https://github.com/polarsource/polar/issues/897"
              ],
              "title": "External Url"
            },
            "description": "URL to issue on external source"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Anonymous",
          "User"
        ],
        "x-speakeasy-group": "issues",
        "x-speakeasy-name-override": "lookup",
        "x-speakeasy-ignore": true
      }
    },
    "/v1/issues/{id}/body": {
      "get": {
        "tags": [
          "issues"
        ],
        "summary": "Get Body",
        "operationId": "issues:get_body",
        "security": [
          {
            "oidc": []
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Anonymous",
          "User"
        ],
        "x-speakeasy-group": "issues",
        "x-speakeasy-name-override": "get_body",
        "x-speakeasy-ignore": true
      }
    },
    "/v1/issues/{id}": {
      "get": {
        "tags": [
          "issues"
        ],
        "summary": "Get issue",
        "description": "Get issue",
        "operationId": "issues:get",
        "security": [
          {
            "oidc": []
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Anonymous",
          "User"
        ],
        "x-speakeasy-group": "issues",
        "x-speakeasy-name-override": "get",
        "x-speakeasy-ignore": true
      },
      "post": {
        "tags": [
          "issues"
        ],
        "summary": "Update issue.",
        "description": "Update issue. Requires authentication.",
        "operationId": "issues:update",
        "security": [
          {
            "oidc": []
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIssue"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-group": "issues",
        "x-speakeasy-name-override": "update",
        "x-speakeasy-ignore": true
      }
    },
    "/v1/issues/{id}/confirm_solved": {
      "post": {
        "tags": [
          "issues"
        ],
        "summary": "Mark an issue as confirmed solved.",
        "description": "Mark an issue as confirmed solved, and configure issue reward splits. Enables payouts of pledges. Can only be done once per issue. Requires authentication.",
        "operationId": "issues:confirm",
        "security": [
          {
            "oidc": []
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmIssue"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-group": "issues",
        "x-speakeasy-name-override": "confirm",
        "x-speakeasy-ignore": true
      }
    },
    "/v1/pledges/search": {
      "get": {
        "tags": [
          "pledges"
        ],
        "summary": "Search pledges",
        "description": "Search pledges. Requires authentication. The user can only read pledges that they have made (personally or via an organization) or received (to organizations that they are a member of).",
        "operationId": "pledges:search",
        "security": [
          {
            "oidc": []
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Search pledges to this organization",
              "title": "Organization Id"
            },
            "description": "Search pledges to this organization"
          },
          {
            "name": "repository_name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "minLength": 1
                },
                {
                  "type": "null"
                }
              ],
              "description": "Search pledges in the repository with this name. Can only be used if organization_name is set.",
              "examples": [
                "my-repo"
              ],
              "title": "Repository Name"
            },
            "description": "Search pledges in the repository with this name. Can only be used if organization_name is set."
          },
          {
            "name": "issue_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Search pledges to this issue",
              "title": "Issue Id"
            },
            "description": "Search pledges to this issue"
          },
          {
            "name": "by_organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Search pledges made by this organization.",
              "title": "By Organization Id"
            },
            "description": "Search pledges made by this organization."
          },
          {
            "name": "by_user_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Search pledges made by this user.",
              "title": "By User Id"
            },
            "description": "Search pledges made by this user."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_Pledge_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Anonymous",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "pledges",
        "x-speakeasy-name-override": "search",
        "x-speakeasy-ignore": true
      }
    },
    "/v1/pledges/summary": {
      "get": {
        "tags": [
          "pledges"
        ],
        "summary": "Get pledges summary",
        "description": "Get summary of pledges for resource.",
        "operationId": "pledges:summary",
        "security": [
          {
            "oidc": []
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "issue_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Issue Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PledgePledgesSummary"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Anonymous",
          "User"
        ],
        "x-speakeasy-group": "pledges",
        "x-speakeasy-name-override": "summary",
        "x-speakeasy-ignore": true
      }
    },
    "/v1/pledges/spending": {
      "get": {
        "tags": [
          "pledges"
        ],
        "summary": "Get user spending",
        "description": "Get current user spending in the current period. Used together with spending limits.",
        "operationId": "pledges:spending",
        "security": [
          {
            "oidc": []
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Spending in this organization. Required.",
              "title": "Organization Id"
            },
            "description": "Spending in this organization. Required."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PledgeSpending"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-group": "pledges",
        "x-speakeasy-name-override": "spending",
        "x-speakeasy-ignore": true
      }
    },
    "/v1/pledges/{id}": {
      "get": {
        "tags": [
          "pledges"
        ],
        "summary": "Get pledge",
        "description": "Get a pledge. Requires authentication.",
        "operationId": "pledges:get",
        "security": [
          {
            "oidc": []
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pledge"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-group": "pledges",
        "x-speakeasy-name-override": "get",
        "x-speakeasy-ignore": true
      }
    },
    "/v1/organizations/": {
      "get": {
        "tags": [
          "organizations",
          "documented",
          "featured"
        ],
        "summary": "List Organizations",
        "description": "List organizations.",
        "operationId": "organizations:list",
        "security": [
          {
            "oidc": [
              "organizations:read",
              "organizations:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "slug",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by slug.",
              "title": "Slug"
            },
            "description": "Filter by slug."
          },
          {
            "name": "is_member",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by membership. If `true`, only organizations the user is a member of are returned. If `false`, only organizations the user is not a member of are returned.",
              "title": "Is Member"
            },
            "description": "Filter by membership. If `true`, only organizations the user is a member of are returned. If `false`, only organizations the user is not a member of are returned."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "created_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_Organization_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "organizations",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "list",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.organizations.list({});\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "list",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.organizations.list()\n\nif res is not None:\n    while True:\n        # handle items\n\n        res = res.next()\n        if res is None:\n            break"
          }
        ]
      },
      "post": {
        "tags": [
          "organizations",
          "documented",
          "featured"
        ],
        "summary": "Create Organization",
        "description": "Create an organization.",
        "operationId": "organizations:create",
        "security": [
          {
            "oidc": [
              "organizations:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Organization created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-group": "organizations",
        "x-speakeasy-name-override": "create",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "create",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.organizations.create({\n    name: \"<value>\",\n    slug: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "create",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.organizations.create(request={\n    \"name\": \"<value>\",\n    \"slug\": \"<value>\",\n})\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      }
    },
    "/v1/organizations/{id}": {
      "get": {
        "tags": [
          "organizations",
          "documented",
          "featured"
        ],
        "summary": "Get Organization",
        "description": "Get an organization by ID.",
        "operationId": "organizations:get",
        "security": [
          {
            "oidc": [
              "organizations:read",
              "organizations:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The organization ID.",
              "x-polar-selector-widget": {
                "resourceRoot": "/v1/organizations",
                "resourceName": "Organization",
                "displayProperty": "name"
              },
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "organizations",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "get",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.organizations.get({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "get",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.organizations.get(id=\"<value>\")\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      },
      "patch": {
        "tags": [
          "organizations",
          "documented",
          "featured"
        ],
        "summary": "Update Organization",
        "description": "Update an organization.",
        "operationId": "organizations:update",
        "security": [
          {
            "oidc": [
              "organizations:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The organization ID.",
              "x-polar-selector-widget": {
                "resourceRoot": "/v1/organizations",
                "resourceName": "Organization",
                "displayProperty": "name"
              },
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organization updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "403": {
            "description": "You don't have the permission to update this organization.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotPermitted"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "organizations",
        "x-speakeasy-name-override": "update",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "update",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.organizations.update({\n    id: \"<value>\",\n    organizationUpdate: {},\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "update",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.organizations.update(id=\"<value>\", organization_update={})\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      }
    },
    "/v1/subscriptions/": {
      "get": {
        "tags": [
          "subscriptions",
          "documented"
        ],
        "summary": "List Subscriptions",
        "description": "List subscriptions.",
        "operationId": "subscriptions:list",
        "security": [
          {
            "oidc": [
              "subscriptions:read",
              "subscriptions:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "product_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The product ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/products",
                    "resourceName": "Product",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The product ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/products",
                      "resourceName": "Product",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "ProductID Filter",
              "description": "Filter by product ID."
            },
            "description": "Filter by product ID."
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by active or inactive subscription.",
              "title": "Active"
            },
            "description": "Filter by active or inactive subscription."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubscriptionSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "-started_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_Subscription_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "subscriptions",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "list",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.subscriptions.list({});\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "list",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.subscriptions.list()\n\nif res is not None:\n    while True:\n        # handle items\n\n        res = res.next()\n        if res is None:\n            break"
          }
        ]
      }
    },
    "/v1/subscriptions/export": {
      "get": {
        "tags": [
          "subscriptions",
          "documented"
        ],
        "summary": "Export Subscriptions",
        "description": "Export subscriptions as a CSV file.",
        "operationId": "subscriptions:export",
        "security": [
          {
            "oidc": [
              "subscriptions:read",
              "subscriptions:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by organization ID.",
              "title": "Organization Id"
            },
            "description": "Filter by organization ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "subscriptions",
        "x-speakeasy-name-override": "export",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "export",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.subscriptions.export({});\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "export",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.subscriptions.export()\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      }
    },
    "/v1/articles/": {
      "get": {
        "tags": [
          "articles",
          "documented",
          "featured"
        ],
        "summary": "List Articles",
        "description": "List articles.",
        "operationId": "articles:list",
        "security": [
          {
            "oidc": [
              "articles:read"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "slug",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by slug.",
              "title": "Slug"
            },
            "description": "Filter by slug."
          },
          {
            "name": "visibility",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ArticleVisibility"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ArticleVisibility"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "ArticleVisibility Filter",
              "description": "Filter by visibility."
            },
            "description": "Filter by visibility."
          },
          {
            "name": "is_subscribed",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by subscription status.",
              "title": "Is Subscribed"
            },
            "description": "Filter by subscription status."
          },
          {
            "name": "is_published",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by published status.",
              "title": "Is Published"
            },
            "description": "Filter by published status."
          },
          {
            "name": "is_pinned",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by pinned status.",
              "title": "Is Pinned"
            },
            "description": "Filter by pinned status."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_Article_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Anonymous",
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "articles",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "list",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.articles.list({});\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "list",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.articles.list()\n\nif res is not None:\n    while True:\n        # handle items\n\n        res = res.next()\n        if res is None:\n            break"
          }
        ]
      },
      "post": {
        "tags": [
          "articles",
          "documented",
          "featured"
        ],
        "summary": "Create Article",
        "description": "Create an article.",
        "operationId": "articles:create",
        "security": [
          {
            "oidc": [
              "articles:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArticleCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Article created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Article"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "articles",
        "x-speakeasy-name-override": "create",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "create",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.articles.create({\n    title: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "create",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.articles.create(request={\n    \"title\": \"<value>\",\n})\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      }
    },
    "/v1/articles/{id}": {
      "get": {
        "tags": [
          "articles",
          "documented",
          "featured"
        ],
        "summary": "Get Article",
        "description": "Get an article by ID.",
        "operationId": "articles:get",
        "security": [
          {
            "oidc": [
              "articles:read"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The article ID.",
              "x-polar-selector-widget": {
                "resourceRoot": "/v1/articles",
                "resourceName": "Article",
                "displayProperty": "title"
              },
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Article"
                }
              }
            }
          },
          "404": {
            "description": "Article not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Anonymous",
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "articles",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "get",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.articles.get({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "get",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.articles.get(id=\"<value>\")\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      },
      "patch": {
        "tags": [
          "articles",
          "documented",
          "featured"
        ],
        "summary": "Update Article",
        "description": "Update an article.",
        "operationId": "articles:update",
        "security": [
          {
            "oidc": [
              "articles:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The article ID.",
              "x-polar-selector-widget": {
                "resourceRoot": "/v1/articles",
                "resourceName": "Article",
                "displayProperty": "title"
              },
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArticleUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Article updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Article"
                }
              }
            }
          },
          "403": {
            "description": "You don't have the permission to update this article.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotPermitted"
                }
              }
            }
          },
          "404": {
            "description": "Article not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "articles",
        "x-speakeasy-name-override": "update",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "update",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.articles.update({\n    id: \"<value>\",\n    articleUpdate: {},\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "update",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.articles.update(id=\"<value>\", article_update={})\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      },
      "delete": {
        "tags": [
          "articles",
          "documented",
          "featured"
        ],
        "summary": "Delete Article",
        "description": "Delete an article.",
        "operationId": "articles:delete",
        "security": [
          {
            "oidc": [
              "articles:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The article ID.",
              "x-polar-selector-widget": {
                "resourceRoot": "/v1/articles",
                "resourceName": "Article",
                "displayProperty": "title"
              },
              "title": "Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Article deleted."
          },
          "403": {
            "description": "You don't have the permission to delete this article.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotPermitted"
                }
              }
            }
          },
          "404": {
            "description": "Article not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "articles",
        "x-speakeasy-name-override": "delete",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "delete",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  await polar.articles.delete({\n    id: \"<value>\",\n  });\n\n\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "delete",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\ns.articles.delete(id=\"<value>\")\n\n# Use the SDK ..."
          }
        ]
      }
    },
    "/v1/articles/{id}/receivers": {
      "get": {
        "tags": [
          "articles",
          "documented",
          "featured"
        ],
        "summary": "Get Article Receivers Count",
        "description": "Get number of potential receivers for an article.",
        "operationId": "articles:receivers",
        "security": [
          {
            "oidc": [
              "articles:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The article ID.",
              "x-polar-selector-widget": {
                "resourceRoot": "/v1/articles",
                "resourceName": "Article",
                "displayProperty": "title"
              },
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArticleReceivers"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "articles",
        "x-speakeasy-name-override": "receivers",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "receivers",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.articles.receivers({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "receivers",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.articles.receivers(id=\"<value>\")\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      }
    },
    "/v1/articles/{id}/preview": {
      "post": {
        "tags": [
          "articles",
          "documented",
          "featured"
        ],
        "summary": "Send Article Preview",
        "description": "Send an article preview by email.",
        "operationId": "articles:preview",
        "security": [
          {
            "oidc": [
              "articles:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The article ID.",
              "x-polar-selector-widget": {
                "resourceRoot": "/v1/articles",
                "resourceName": "Article",
                "displayProperty": "title"
              },
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArticlePreview"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Article preview sent.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "You don't have the permission to manage this article.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotPermitted"
                }
              }
            }
          },
          "404": {
            "description": "Article not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "articles",
        "x-speakeasy-name-override": "preview",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "preview",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.articles.preview({\n    id: \"<value>\",\n    articlePreview: {\n      email: \"Carmine84@yahoo.com\",\n    },\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "preview",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.articles.preview(id=\"<value>\", article_preview={\n    \"email\": \"Carmine84@yahoo.com\",\n})\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      }
    },
    "/v1/articles/{id}/send": {
      "post": {
        "tags": [
          "articles",
          "documented",
          "featured"
        ],
        "summary": "Send Article",
        "description": "Send an article by email to all subscribers.",
        "operationId": "articles:send",
        "security": [
          {
            "oidc": [
              "articles:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The article ID.",
              "x-polar-selector-widget": {
                "resourceRoot": "/v1/articles",
                "resourceName": "Article",
                "displayProperty": "title"
              },
              "title": "Id"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Article sent to subscribers.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Article is either not published, already sent or not ready to be sent."
          },
          "403": {
            "description": "You don't have the permission to manage this article.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotPermitted"
                }
              }
            }
          },
          "404": {
            "description": "Article not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "articles",
        "x-speakeasy-name-override": "send",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "send",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.articles.send({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "send",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.articles.send(id=\"<value>\")\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      }
    },
    "/v1/transactions/search": {
      "get": {
        "tags": [
          "transactions"
        ],
        "summary": "Search Transactions",
        "operationId": "transactions:search_transactions",
        "security": [
          {
            "oidc": []
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TransactionType"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Type"
            }
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "payment_user_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Payment User Id"
            }
          },
          {
            "name": "payment_organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Payment Organization Id"
            }
          },
          {
            "name": "exclude_platform_fees",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Exclude Platform Fees"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransactionSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "-created_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_Transaction_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "transactions",
        "x-speakeasy-name-override": "search_transactions",
        "x-speakeasy-ignore": true
      }
    },
    "/v1/transactions/lookup": {
      "get": {
        "tags": [
          "transactions"
        ],
        "summary": "Lookup Transaction",
        "operationId": "transactions:lookup_transaction",
        "security": [
          {
            "oidc": []
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "transaction_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "title": "Transaction Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionDetails"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-group": "transactions",
        "x-speakeasy-name-override": "lookup_transaction",
        "x-speakeasy-ignore": true
      }
    },
    "/v1/transactions/summary": {
      "get": {
        "tags": [
          "transactions"
        ],
        "summary": "Get Summary",
        "operationId": "transactions:get_summary",
        "security": [
          {
            "oidc": []
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "title": "Account Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsSummary"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-group": "transactions",
        "x-speakeasy-name-override": "get_summary",
        "x-speakeasy-ignore": true
      }
    },
    "/v1/transactions/payouts": {
      "get": {
        "tags": [
          "transactions"
        ],
        "summary": "Get Payout Estimate",
        "operationId": "transactions:get_payout_estimate",
        "security": [
          {
            "oidc": []
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "title": "Account Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayoutEstimate"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-group": "transactions",
        "x-speakeasy-name-override": "get_payout_estimate",
        "x-speakeasy-ignore": true
      },
      "post": {
        "tags": [
          "transactions"
        ],
        "summary": "Create Payout",
        "operationId": "transactions:create_payout",
        "security": [
          {
            "oidc": []
          },
          {
            "pat": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayoutCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-group": "transactions",
        "x-speakeasy-name-override": "create_payout",
        "x-speakeasy-ignore": true
      }
    },
    "/v1/transactions/payouts/{id}/csv": {
      "get": {
        "tags": [
          "transactions"
        ],
        "summary": "Get Payout Csv",
        "operationId": "transactions:get_payout_csv",
        "security": [
          {
            "oidc": []
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-group": "transactions",
        "x-speakeasy-name-override": "get_payout_csv",
        "x-speakeasy-ignore": true
      }
    },
    "/v1/advertisements/": {
      "get": {
        "tags": [
          "advertisements",
          "documented"
        ],
        "summary": "List Campaigns",
        "description": "List active advertisement campaigns for a benefit.",
        "operationId": "advertisements:list",
        "parameters": [
          {
            "name": "benefit_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The benefit ID.",
              "x-polar-selector-widget": {
                "resourceRoot": "/v1/benefits",
                "resourceName": "Benefit",
                "displayProperty": "description"
              },
              "title": "Benefit Id"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdvertisementSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "granted_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdvertisementCampaignListResource"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "advertisements",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "list",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.advertisements.list({\n    benefitId: \"<value>\",\n  });\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "list",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.advertisements.list(benefit_id=\"<value>\")\n\nif res is not None:\n    while True:\n        # handle items\n\n        res = res.next()\n        if res is None:\n            break"
          }
        ]
      }
    },
    "/v1/advertisements/{id}": {
      "get": {
        "tags": [
          "advertisements",
          "documented"
        ],
        "summary": "Get Campaign",
        "description": "Get an advertisement campaign by ID.",
        "operationId": "advertisements:get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The advertisement campaign ID.",
              "title": "Id"
            },
            "description": "The advertisement campaign ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdvertisementCampaign"
                }
              }
            }
          },
          "404": {
            "description": "Advertisement campaign not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-group": "advertisements",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "get",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.advertisements.get({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "get",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.advertisements.get(id=\"<value>\")\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      }
    },
    "/v1/donations/search": {
      "get": {
        "tags": [
          "donations"
        ],
        "summary": "Search Donations",
        "operationId": "donations:search_donations",
        "security": [
          {
            "oidc": []
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "to_organization_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "title": "To Organization Id"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DonationSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "-created_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_Donation_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "donations",
        "x-speakeasy-name-override": "search_donations",
        "x-speakeasy-ignore": true
      }
    },
    "/v1/donations/payment_intent": {
      "post": {
        "tags": [
          "donations"
        ],
        "summary": "Create Payment Intent",
        "operationId": "donations:create_payment_intent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DonationCreateStripePaymentIntent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DonationStripePaymentIntentMutationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oidc": []
          },
          {
            "pat": []
          }
        ],
        "x-polar-allowed-subjects": [
          "Anonymous",
          "User"
        ],
        "x-speakeasy-group": "donations",
        "x-speakeasy-name-override": "create_payment_intent",
        "x-speakeasy-ignore": true
      }
    },
    "/v1/donations/payment_intent/{id}": {
      "patch": {
        "tags": [
          "donations"
        ],
        "summary": "Update Payment Intent",
        "operationId": "donations:update_payment_intent",
        "security": [
          {
            "oidc": []
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DonationUpdateStripePaymentIntent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DonationStripePaymentIntentMutationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Anonymous",
          "User"
        ],
        "x-speakeasy-group": "donations",
        "x-speakeasy-name-override": "update_payment_intent",
        "x-speakeasy-ignore": true
      }
    },
    "/v1/donations/statistics": {
      "get": {
        "tags": [
          "donations"
        ],
        "summary": "Statistics",
        "operationId": "donations:statistics",
        "security": [
          {
            "oidc": []
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "to_organization_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "title": "To Organization Id"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "title": "Start Date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "title": "End Date"
            }
          },
          {
            "name": "donationsInterval",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "month",
                "week",
                "day"
              ],
              "type": "string",
              "title": "Donationsinterval"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DonationStatistics"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-group": "donations",
        "x-speakeasy-name-override": "statistics",
        "x-speakeasy-ignore": true
      }
    },
    "/v1/donations/public/search": {
      "get": {
        "tags": [
          "donations"
        ],
        "summary": "Donations Public Search",
        "operationId": "donations:donations_public_search",
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The organization ID.",
              "x-polar-selector-widget": {
                "resourceRoot": "/v1/organizations",
                "resourceName": "Organization",
                "displayProperty": "name"
              },
              "title": "Organization Id"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DonationSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "-created_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_PublicDonation_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "donations",
        "x-speakeasy-name-override": "donations_public_search",
        "x-speakeasy-ignore": true
      }
    },
    "/v1/oauth2/": {
      "get": {
        "tags": [
          "oauth2",
          "clients",
          "documented"
        ],
        "summary": "List Clients",
        "description": "List OAuth2 clients.",
        "operationId": "oauth2:clients:list",
        "security": [
          {
            "oidc": []
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_OAuth2Client_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "oauth2.clients",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "list",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.oauth2.clients.list({});\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "list",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.oauth2.clients.list()\n\nif res is not None:\n    while True:\n        # handle items\n\n        res = res.next()\n        if res is None:\n            break"
          }
        ]
      }
    },
    "/v1/oauth2/register": {
      "post": {
        "tags": [
          "oauth2",
          "clients",
          "documented"
        ],
        "summary": "Create Client",
        "description": "Create an OAuth2 client.",
        "operationId": "oauth2:clients:oauth2:create_client",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OAuth2ClientConfiguration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oidc": []
          },
          {
            "pat": []
          }
        ],
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-group": "oauth2.clients",
        "x-speakeasy-name-override": "create",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "create_client",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.oauth2.clients.create({\n    redirectUris: [\n      \"https://inferior-chainstay.com\",\n    ],\n    clientName: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "create_client",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.oauth2.clients.create(request={\n    \"redirect_uris\": [\n        \"https://inferior-chainstay.com\",\n    ],\n    \"client_name\": \"<value>\",\n})\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      }
    },
    "/v1/oauth2/register/{client_id}": {
      "get": {
        "tags": [
          "oauth2",
          "clients",
          "documented"
        ],
        "summary": "Get Client",
        "description": "Get an OAuth2 client by Client ID.",
        "operationId": "oauth2:clients:oauth2:get_client",
        "security": [
          {
            "oidc": []
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Client Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Anonymous",
          "User"
        ],
        "x-speakeasy-group": "oauth2.clients",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "get_client",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.oauth2.clients.get({\n    clientId: \"<id>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "get_client",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.oauth2.clients.get(client_id=\"<id>\")\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      },
      "put": {
        "tags": [
          "oauth2",
          "clients",
          "documented"
        ],
        "summary": "Update Client",
        "description": "Update an OAuth2 client.",
        "operationId": "oauth2:clients:oauth2:update_client",
        "security": [
          {
            "oidc": []
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Client Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OAuth2ClientConfigurationUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Anonymous",
          "User"
        ],
        "x-speakeasy-group": "oauth2.clients",
        "x-speakeasy-name-override": "update",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "update_client",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.oauth2.clients.update({\n    clientId: \"<id>\",\n    oAuth2ClientConfigurationUpdate: {\n      redirectUris: [\n        \"https://grown-worth.name\",\n        \"https://worthwhile-avalanche.org/\",\n        \"https://general-digit.com/\",\n      ],\n      clientName: \"<value>\",\n      clientId: \"<id>\",\n    },\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "update_client",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.oauth2.clients.update(client_id=\"<id>\", o_auth2_client_configuration_update={\n    \"redirect_uris\": [\n        \"https://grown-worth.name\",\n        \"https://worthwhile-avalanche.org/\",\n        \"https://general-digit.com/\",\n    ],\n    \"client_name\": \"<value>\",\n    \"client_id\": \"<id>\",\n})\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      },
      "delete": {
        "tags": [
          "oauth2",
          "clients",
          "documented"
        ],
        "summary": "Delete Client",
        "description": "Delete an OAuth2 client.",
        "operationId": "oauth2:clients:oauth2:delete_client",
        "security": [
          {
            "oidc": []
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Client Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Anonymous",
          "User"
        ],
        "x-speakeasy-group": "oauth2.clients",
        "x-speakeasy-name-override": "delete",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "delete_client",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.oauth2.clients.delete({\n    clientId: \"<id>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "delete_client",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.oauth2.clients.delete(client_id=\"<id>\")\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      }
    },
    "/v1/oauth2/authorize": {
      "get": {
        "tags": [
          "oauth2"
        ],
        "summary": "Authorize",
        "operationId": "oauth2:authorize",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AuthorizeResponseUser"
                    },
                    {
                      "$ref": "#/components/schemas/AuthorizeResponseOrganization"
                    }
                  ],
                  "title": "Response Oauth2:Authorize",
                  "discriminator": {
                    "propertyName": "sub_type",
                    "mapping": {
                      "user": "#/components/schemas/AuthorizeResponseUser",
                      "organization": "#/components/schemas/AuthorizeResponseOrganization"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oidc": []
          },
          {
            "pat": []
          }
        ],
        "x-polar-allowed-subjects": [
          "Anonymous",
          "User"
        ],
        "x-speakeasy-group": "oauth2",
        "x-speakeasy-name-override": "authorize",
        "x-speakeasy-ignore": true
      }
    },
    "/v1/oauth2/token": {
      "post": {
        "tags": [
          "oauth2",
          "featured",
          "documented"
        ],
        "summary": "Request Token",
        "description": "Request an access token using a valid grant.",
        "operationId": "oauth2:request_token",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/paths/~1v1~1oauth2~1token/post/x-components/AuthorizationCodeTokenRequest"
                  },
                  {
                    "$ref": "#/paths/~1v1~1oauth2~1token/post/x-components/RefreshTokenRequest"
                  }
                ],
                "discriminator": {
                  "propertyName": "grant_type",
                  "mapping": {
                    "authorization_code": "#/paths/~1v1~1oauth2~1token/post/x-components/AuthorizationCodeTokenRequest",
                    "refresh_token": "#/paths/~1v1~1oauth2~1token/post/x-components/RefreshTokenRequest"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          }
        },
        "x-components": {
          "AuthorizationCodeTokenRequest": {
            "properties": {
              "grant_type": {
                "const": "authorization_code",
                "enum": [
                  "authorization_code"
                ],
                "title": "Grant Type",
                "type": "string"
              },
              "client_id": {
                "title": "Client Id",
                "type": "string"
              },
              "client_secret": {
                "title": "Client Secret",
                "type": "string"
              },
              "code": {
                "title": "Code",
                "type": "string"
              },
              "redirect_uri": {
                "format": "uri",
                "maxLength": 2083,
                "minLength": 1,
                "title": "Redirect Uri",
                "type": "string"
              }
            },
            "required": [
              "grant_type",
              "client_id",
              "client_secret",
              "code",
              "redirect_uri"
            ],
            "title": "AuthorizationCodeTokenRequest",
            "type": "object"
          },
          "RefreshTokenRequest": {
            "properties": {
              "grant_type": {
                "const": "refresh_token",
                "enum": [
                  "refresh_token"
                ],
                "title": "Grant Type",
                "type": "string"
              },
              "client_id": {
                "title": "Client Id",
                "type": "string"
              },
              "client_secret": {
                "title": "Client Secret",
                "type": "string"
              },
              "refresh_token": {
                "title": "Refresh Token",
                "type": "string"
              }
            },
            "required": [
              "grant_type",
              "client_id",
              "client_secret",
              "refresh_token"
            ],
            "title": "RefreshTokenRequest",
            "type": "object"
          }
        },
        "x-speakeasy-group": "oauth2",
        "x-speakeasy-name-override": "token",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "request_token",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.oauth2.token({\n    clientId: \"<id>\",\n    clientSecret: \"<value>\",\n    code: \"<value>\",\n    redirectUri: \"https://old-fort.name\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "request_token",
            "source": "import polar_sdk\nfrom polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.oauth2.token(request={\n    \"grant_type\": polar_sdk.GrantType.AUTHORIZATION_CODE,\n    \"client_id\": \"<id>\",\n    \"client_secret\": \"<value>\",\n    \"code\": \"<value>\",\n    \"redirect_uri\": \"https://old-fort.name\",\n})\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      }
    },
    "/v1/oauth2/revoke": {
      "post": {
        "tags": [
          "oauth2",
          "featured",
          "documented"
        ],
        "summary": "Revoke Token",
        "description": "Revoke an access token or a refresh token.",
        "operationId": "oauth2:revoke_token",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "token": {
                    "type": "string",
                    "title": "Token"
                  },
                  "token_type_hint": {
                    "anyOf": [
                      {
                        "type": "string",
                        "enum": [
                          "access_token",
                          "refresh_token"
                        ]
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Token Type Hint"
                  },
                  "client_id": {
                    "type": "string",
                    "title": "Client Id"
                  },
                  "client_secret": {
                    "type": "string",
                    "title": "Client Secret"
                  }
                },
                "type": "object",
                "required": [
                  "token",
                  "client_id",
                  "client_secret"
                ],
                "title": "RevokeTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RevokeTokenResponse"
                }
              }
            }
          }
        },
        "x-speakeasy-group": "oauth2",
        "x-speakeasy-name-override": "revoke",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "revoke_token",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.oauth2.revoke({\n    token: \"<value>\",\n    clientId: \"<id>\",\n    clientSecret: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "revoke_token",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.oauth2.revoke(request={\n    \"token\": \"<value>\",\n    \"client_id\": \"<id>\",\n    \"client_secret\": \"<value>\",\n})\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      }
    },
    "/v1/oauth2/introspect": {
      "post": {
        "tags": [
          "oauth2",
          "featured",
          "documented"
        ],
        "summary": "Introspect Token",
        "description": "Get information about an access token.",
        "operationId": "oauth2:introspect_token",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "token": {
                    "type": "string",
                    "title": "Token"
                  },
                  "token_type_hint": {
                    "anyOf": [
                      {
                        "type": "string",
                        "enum": [
                          "access_token",
                          "refresh_token"
                        ]
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Token Type Hint"
                  },
                  "client_id": {
                    "type": "string",
                    "title": "Client Id"
                  },
                  "client_secret": {
                    "type": "string",
                    "title": "Client Secret"
                  }
                },
                "type": "object",
                "required": [
                  "token",
                  "client_id",
                  "client_secret"
                ],
                "title": "IntrospectTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntrospectTokenResponse"
                }
              }
            }
          }
        },
        "x-speakeasy-group": "oauth2",
        "x-speakeasy-name-override": "introspect",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "introspect_token",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.oauth2.introspect({\n    token: \"<value>\",\n    clientId: \"<id>\",\n    clientSecret: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "introspect_token",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.oauth2.introspect(request={\n    \"token\": \"<value>\",\n    \"client_id\": \"<id>\",\n    \"client_secret\": \"<value>\",\n})\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      }
    },
    "/v1/oauth2/userinfo": {
      "get": {
        "tags": [
          "oauth2",
          "featured",
          "documented"
        ],
        "summary": "Get User Info",
        "description": "Get information about the authenticated user.",
        "operationId": "oauth2:userinfo",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/UserInfoUser"
                    },
                    {
                      "$ref": "#/components/schemas/UserInfoOrganization"
                    }
                  ],
                  "title": "Response Oauth2:Userinfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "oidc": []
          }
        ],
        "x-speakeasy-name-override": "userinfo",
        "x-speakeasy-group": "oauth2",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "userinfo",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.oauth2.userinfo();\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "userinfo",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.oauth2.userinfo()\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      }
    },
    "/v1/benefits/": {
      "get": {
        "tags": [
          "benefits",
          "documented"
        ],
        "summary": "List Benefits",
        "description": "List benefits.",
        "operationId": "benefits:list",
        "security": [
          {
            "oidc": [
              "benefits:read",
              "benefits:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/BenefitType"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BenefitType"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "BenefitType Filter",
              "description": "Filter by benefit type."
            },
            "description": "Filter by benefit type."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_Benefit_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "benefits",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "list",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.benefits.list({});\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "list",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.benefits.list()\n\nif res is not None:\n    while True:\n        # handle items\n\n        res = res.next()\n        if res is None:\n            break"
          }
        ]
      },
      "post": {
        "tags": [
          "benefits",
          "documented"
        ],
        "summary": "Create Benefit",
        "description": "Create a benefit.",
        "operationId": "benefits:create",
        "security": [
          {
            "oidc": [
              "benefits:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BenefitCustomCreate"
                  },
                  {
                    "$ref": "#/components/schemas/BenefitAdsCreate"
                  },
                  {
                    "$ref": "#/components/schemas/BenefitDiscordCreate"
                  },
                  {
                    "$ref": "#/components/schemas/BenefitGitHubRepositoryCreate"
                  },
                  {
                    "$ref": "#/components/schemas/BenefitDownloadablesCreate"
                  },
                  {
                    "$ref": "#/components/schemas/BenefitLicenseKeysCreate"
                  }
                ],
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "custom": "#/components/schemas/BenefitCustomCreate",
                    "ads": "#/components/schemas/BenefitAdsCreate",
                    "discord": "#/components/schemas/BenefitDiscordCreate",
                    "github_repository": "#/components/schemas/BenefitGitHubRepositoryCreate",
                    "downloadables": "#/components/schemas/BenefitDownloadablesCreate",
                    "license_keys": "#/components/schemas/BenefitLicenseKeysCreate"
                  }
                },
                "title": "Benefit Create"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Benefit created.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Benefit"
                    }
                  ],
                  "title": "Response Benefits:Create"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "benefits",
        "x-speakeasy-name-override": "create",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "create",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.benefits.create({\n    description: \"delightfully fumigate convection though zowie up bulky electronics\",\n    properties: {\n      guildToken: \"<value>\",\n      roleId: \"<id>\",\n    },\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "create",
            "source": "import polar_sdk\nfrom polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.benefits.create(request={\n    \"type\": polar_sdk.BenefitDiscordCreateType.DISCORD,\n    \"description\": \"delightfully fumigate convection though zowie up bulky electronics\",\n    \"properties\": {\n        \"guild_token\": \"<value>\",\n        \"role_id\": \"<id>\",\n    },\n})\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      }
    },
    "/v1/benefits/{id}": {
      "get": {
        "tags": [
          "benefits",
          "documented"
        ],
        "summary": "Get Benefit",
        "description": "Get a benefit by ID.",
        "operationId": "benefits:get",
        "security": [
          {
            "oidc": [
              "benefits:read",
              "benefits:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The benefit ID.",
              "x-polar-selector-widget": {
                "resourceRoot": "/v1/benefits",
                "resourceName": "Benefit",
                "displayProperty": "description"
              },
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Benefit"
                    }
                  ],
                  "title": "Response Benefits:Get"
                }
              }
            }
          },
          "404": {
            "description": "Benefit not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "benefits",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "get",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.benefits.get({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "get",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.benefits.get(id=\"<value>\")\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      },
      "patch": {
        "tags": [
          "benefits",
          "documented"
        ],
        "summary": "Update Benefit",
        "description": "Update a benefit.",
        "operationId": "benefits:update",
        "security": [
          {
            "oidc": [
              "benefits:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The benefit ID.",
              "x-polar-selector-widget": {
                "resourceRoot": "/v1/benefits",
                "resourceName": "Benefit",
                "displayProperty": "description"
              },
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/BenefitArticlesUpdate"
                  },
                  {
                    "$ref": "#/components/schemas/BenefitAdsUpdate"
                  },
                  {
                    "$ref": "#/components/schemas/BenefitCustomUpdate"
                  },
                  {
                    "$ref": "#/components/schemas/BenefitDiscordUpdate"
                  },
                  {
                    "$ref": "#/components/schemas/BenefitGitHubRepositoryUpdate"
                  },
                  {
                    "$ref": "#/components/schemas/BenefitDownloadablesUpdate"
                  },
                  {
                    "$ref": "#/components/schemas/BenefitLicenseKeysUpdate"
                  }
                ],
                "title": "Benefit Update"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Benefit updated.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Benefit"
                    }
                  ],
                  "title": "Response Benefits:Update"
                }
              }
            }
          },
          "403": {
            "description": "You don't have the permission to update this benefit.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotPermitted"
                }
              }
            }
          },
          "404": {
            "description": "Benefit not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "benefits",
        "x-speakeasy-name-override": "update",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "update",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.benefits.update({\n    id: \"<value>\",\n    requestBody: {},\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "update",
            "source": "import polar_sdk\nfrom polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.benefits.update(id=\"<value>\", request_body={\n    \"type\": polar_sdk.BenefitLicenseKeysUpdateType.LICENSE_KEYS,\n})\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      },
      "delete": {
        "tags": [
          "benefits",
          "documented"
        ],
        "summary": "Delete Benefit",
        "description": "Delete a benefit.\n\n> [!WARNING]\n> Every grants associated with the benefit will be revoked.\n> Users will lose access to the benefit.",
        "operationId": "benefits:delete",
        "security": [
          {
            "oidc": [
              "benefits:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The benefit ID.",
              "x-polar-selector-widget": {
                "resourceRoot": "/v1/benefits",
                "resourceName": "Benefit",
                "displayProperty": "description"
              },
              "title": "Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Benefit deleted."
          },
          "403": {
            "description": "You don't have the permission to update this benefit or it's not deletable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotPermitted"
                }
              }
            }
          },
          "404": {
            "description": "Benefit not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "benefits",
        "x-speakeasy-name-override": "delete",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "delete",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  await polar.benefits.delete({\n    id: \"<value>\",\n  });\n\n\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "delete",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\ns.benefits.delete(id=\"<value>\")\n\n# Use the SDK ..."
          }
        ]
      }
    },
    "/v1/benefits/{id}/grants": {
      "get": {
        "tags": [
          "benefits",
          "documented"
        ],
        "summary": "List Benefit Grants",
        "description": "List the individual grants for a benefit.\n\nIt's especially useful to check if a user has been granted a benefit.",
        "operationId": "benefits:grants",
        "security": [
          {
            "oidc": [
              "benefits:read",
              "benefits:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The benefit ID.",
              "x-polar-selector-widget": {
                "resourceRoot": "/v1/benefits",
                "resourceName": "Benefit",
                "displayProperty": "description"
              },
              "title": "Id"
            }
          },
          {
            "name": "is_granted",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by granted status. If `true`, only granted benefits will be returned. If `false`, only revoked benefits will be returned. ",
              "title": "Is Granted"
            },
            "description": "Filter by granted status. If `true`, only granted benefits will be returned. If `false`, only revoked benefits will be returned. "
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by user ID.",
              "title": "User Id"
            },
            "description": "Filter by user ID."
          },
          {
            "name": "github_user_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by GitHub user ID. Only available for users who have linked their GitHub account on Polar.",
              "title": "Github User Id"
            },
            "description": "Filter by GitHub user ID. Only available for users who have linked their GitHub account on Polar."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_BenefitGrant_"
                }
              }
            }
          },
          "404": {
            "description": "Benefit not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "benefits",
        "x-speakeasy-name-override": "grants",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "grants",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.benefits.grants({\n    id: \"<value>\",\n  });\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "grants",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.benefits.grants(id=\"<value>\")\n\nif res is not None:\n    while True:\n        # handle items\n\n        res = res.next()\n        if res is None:\n            break"
          }
        ]
      }
    },
    "/v1/webhooks/endpoints": {
      "get": {
        "tags": [
          "webhooks"
        ],
        "summary": "List Webhook Endpoints",
        "description": "List webhook endpoints.",
        "operationId": "webhooks:list_webhook_endpoints",
        "security": [
          {
            "oidc": [
              "webhooks:read",
              "webhooks:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by organization ID.",
              "title": "Organization Id"
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by user ID.",
              "title": "User Id"
            },
            "description": "Filter by user ID."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_WebhookEndpoint_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "webhooks",
        "x-speakeasy-name-override": "list_webhook_endpoints",
        "x-speakeasy-ignore": true
      },
      "post": {
        "tags": [
          "webhooks"
        ],
        "summary": "Create Webhook Endpoint",
        "description": "Create a webhook endpoint.",
        "operationId": "webhooks:create_webhook_endpoint",
        "security": [
          {
            "oidc": [
              "webhooks:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookEndpointCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Webhook endpoint created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookEndpoint"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "webhooks",
        "x-speakeasy-name-override": "create_webhook_endpoint",
        "x-speakeasy-ignore": true
      }
    },
    "/v1/webhooks/endpoints/{id}": {
      "get": {
        "tags": [
          "webhooks"
        ],
        "summary": "Get Webhook Endpoint",
        "description": "Get a webhook endpoint by ID.",
        "operationId": "webhooks:get_webhook_endpoint",
        "security": [
          {
            "oidc": [
              "webhooks:read",
              "webhooks:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The webhook endpoint ID.",
              "title": "Id"
            },
            "description": "The webhook endpoint ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookEndpoint"
                }
              }
            }
          },
          "404": {
            "description": "Webhook endpoint not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "webhooks",
        "x-speakeasy-name-override": "get_webhook_endpoint",
        "x-speakeasy-ignore": true
      },
      "patch": {
        "tags": [
          "webhooks"
        ],
        "summary": "Update Webhook Endpoint",
        "description": "Update a webhook endpoint.",
        "operationId": "webhooks:update_webhook_endpoint",
        "security": [
          {
            "oidc": [
              "webhooks:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The webhook endpoint ID.",
              "title": "Id"
            },
            "description": "The webhook endpoint ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookEndpointUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook endpoint updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookEndpoint"
                }
              }
            }
          },
          "403": {
            "description": "You don't have the permission to update this webhook endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotPermitted"
                }
              }
            }
          },
          "404": {
            "description": "Webhook endpoint not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "webhooks",
        "x-speakeasy-name-override": "update_webhook_endpoint",
        "x-speakeasy-ignore": true
      },
      "delete": {
        "tags": [
          "webhooks"
        ],
        "summary": "Delete Webhook Endpoint",
        "description": "Delete a webhook endpoint.",
        "operationId": "webhooks:delete_webhook_endpoint",
        "security": [
          {
            "oidc": [
              "webhooks:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The webhook endpoint ID.",
              "title": "Id"
            },
            "description": "The webhook endpoint ID."
          }
        ],
        "responses": {
          "204": {
            "description": "Webhook endpoint deleted."
          },
          "403": {
            "description": "You don't have the permission to delete this webhook endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotPermitted"
                }
              }
            }
          },
          "404": {
            "description": "Webhook endpoint not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "webhooks",
        "x-speakeasy-name-override": "delete_webhook_endpoint",
        "x-speakeasy-ignore": true
      }
    },
    "/v1/webhooks/deliveries": {
      "get": {
        "tags": [
          "webhooks"
        ],
        "summary": "List Webhook Deliveries",
        "description": "List webhook deliveries.\n\nDeliveries are all the attempts to deliver a webhook event to an endpoint.",
        "operationId": "webhooks:list_webhook_deliveries",
        "security": [
          {
            "oidc": [
              "webhooks:read",
              "webhooks:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "endpoint_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by webhook endpoint ID.",
              "title": "Endpoint Id"
            },
            "description": "Filter by webhook endpoint ID."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_WebhookDelivery_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "webhooks",
        "x-speakeasy-name-override": "list_webhook_deliveries",
        "x-speakeasy-ignore": true
      }
    },
    "/v1/webhooks/events/{id}/redeliver": {
      "post": {
        "tags": [
          "webhooks"
        ],
        "summary": "Redeliver Webhook Event",
        "description": "Schedule the re-delivery of a webhook event.",
        "operationId": "webhooks:redeliver_webhook_event",
        "security": [
          {
            "oidc": [
              "webhooks:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The webhook event ID.",
              "title": "Id"
            },
            "description": "The webhook event ID."
          }
        ],
        "responses": {
          "202": {
            "description": "Webhook event re-delivery scheduled.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Webhook event not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "webhooks",
        "x-speakeasy-name-override": "redeliver_webhook_event",
        "x-speakeasy-ignore": true
      }
    },
    "/v1/products/": {
      "get": {
        "tags": [
          "products",
          "documented",
          "featured"
        ],
        "summary": "List Products",
        "description": "List products.",
        "operationId": "products:list",
        "security": [
          {
            "oidc": [
              "products:read",
              "products:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "is_archived",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter on archived products.",
              "title": "Is Archived"
            },
            "description": "Filter on archived products."
          },
          {
            "name": "is_recurring",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter on recurring products. If `true`, only subscriptions tiers are returned. If `false`, only one-time purchase products are returned. ",
              "title": "Is Recurring"
            },
            "description": "Filter on recurring products. If `true`, only subscriptions tiers are returned. If `false`, only one-time purchase products are returned. "
          },
          {
            "name": "benefit_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The benefit ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/benefits",
                    "resourceName": "Benefit",
                    "displayProperty": "description"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The benefit ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/benefits",
                      "resourceName": "Benefit",
                      "displayProperty": "description"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "BenefitID Filter",
              "description": "Filter products granting specific benefit."
            },
            "description": "Filter products granting specific benefit."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_Product_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Anonymous",
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "products",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "list",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.products.list({\n    organizationId: [\n      \"<value>\",\n      \"<value>\",\n    ],\n  });\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "list",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.products.list(organization_id=[\n    \"<value>\",\n    \"<value>\",\n])\n\nif res is not None:\n    while True:\n        # handle items\n\n        res = res.next()\n        if res is None:\n            break"
          }
        ]
      },
      "post": {
        "tags": [
          "products",
          "documented",
          "featured"
        ],
        "summary": "Create Product",
        "description": "Create a product.",
        "operationId": "products:create",
        "security": [
          {
            "oidc": [
              "products:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ProductRecurringCreate"
                  },
                  {
                    "$ref": "#/components/schemas/ProductOneTimeCreate"
                  }
                ],
                "title": "Product Create"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "products",
        "x-speakeasy-name-override": "create",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "create",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.products.create({\n    name: \"<value>\",\n    prices: [\n      {\n        recurringInterval: \"month\",\n      },\n    ],\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "create",
            "source": "import polar_sdk\nfrom polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.products.create(request={\n    \"name\": \"<value>\",\n    \"prices\": [\n        {\n            \"type\": polar_sdk.ProductPriceRecurringFreeCreateType.RECURRING,\n            \"amount_type\": polar_sdk.ProductPriceRecurringFreeCreateAmountType.FREE,\n            \"recurring_interval\": polar_sdk.SubscriptionRecurringInterval.MONTH,\n        },\n    ],\n})\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      }
    },
    "/v1/products/{id}": {
      "get": {
        "tags": [
          "products",
          "documented",
          "featured"
        ],
        "summary": "Get Product",
        "description": "Get a product by ID.",
        "operationId": "products:get",
        "security": [
          {
            "oidc": [
              "products:read",
              "products:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The product ID.",
              "x-polar-selector-widget": {
                "resourceRoot": "/v1/products",
                "resourceName": "Product",
                "displayProperty": "name"
              },
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "404": {
            "description": "Product not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Anonymous",
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "products",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "get",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.products.get({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "get",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.products.get(id=\"<value>\")\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      },
      "patch": {
        "tags": [
          "products",
          "documented",
          "featured"
        ],
        "summary": "Update Product",
        "description": "Update a product.",
        "operationId": "products:update",
        "security": [
          {
            "oidc": [
              "products:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The product ID.",
              "x-polar-selector-widget": {
                "resourceRoot": "/v1/products",
                "resourceName": "Product",
                "displayProperty": "name"
              },
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "403": {
            "description": "You don't have the permission to update this product.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotPermitted"
                }
              }
            }
          },
          "404": {
            "description": "Product not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "products",
        "x-speakeasy-name-override": "update",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "update",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.products.update({\n    id: \"<value>\",\n    productUpdate: {},\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "update",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.products.update(id=\"<value>\", product_update={})\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      }
    },
    "/v1/products/{id}/benefits": {
      "post": {
        "tags": [
          "products",
          "documented",
          "featured"
        ],
        "summary": "Update Product Benefits",
        "description": "Update benefits granted by a product.",
        "operationId": "products:update_benefits",
        "security": [
          {
            "oidc": [
              "products:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The product ID.",
              "x-polar-selector-widget": {
                "resourceRoot": "/v1/products",
                "resourceName": "Product",
                "displayProperty": "name"
              },
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductBenefitsUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product benefits updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "403": {
            "description": "You don't have the permission to update this product.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotPermitted"
                }
              }
            }
          },
          "404": {
            "description": "Product not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "products",
        "x-speakeasy-name-override": "update_benefits",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "update_benefits",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.products.updateBenefits({\n    id: \"<value>\",\n    productBenefitsUpdate: {\n      benefits: [\n        \"<value>\",\n      ],\n    },\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "update_benefits",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.products.update_benefits(id=\"<value>\", product_benefits_update={\n    \"benefits\": [\n        \"<value>\",\n    ],\n})\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      }
    },
    "/v1/orders/": {
      "get": {
        "tags": [
          "orders",
          "documented"
        ],
        "summary": "List Orders",
        "description": "List orders.",
        "operationId": "orders:list",
        "security": [
          {
            "oidc": [
              "orders:read"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "product_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The product ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/products",
                    "resourceName": "Product",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The product ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/products",
                      "resourceName": "Product",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "ProductID Filter",
              "description": "Filter by product ID."
            },
            "description": "Filter by product ID."
          },
          {
            "name": "product_price_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ProductPriceType"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductPriceType"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "ProductPriceType Filter",
              "description": "Filter by product price type. `recurring` will return orders corresponding to subscriptions creations or renewals. `one_time` will return orders corresponding to one-time purchases."
            },
            "description": "Filter by product price type. `recurring` will return orders corresponding to subscriptions creations or renewals. `one_time` will return orders corresponding to one-time purchases."
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "UserID Filter",
              "description": "Filter by customer's user ID."
            },
            "description": "Filter by customer's user ID."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "-created_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_Order_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "orders",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "list",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.orders.list({});\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "list",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.orders.list()\n\nif res is not None:\n    while True:\n        # handle items\n\n        res = res.next()\n        if res is None:\n            break"
          }
        ]
      }
    },
    "/v1/orders/{id}": {
      "get": {
        "tags": [
          "orders",
          "documented"
        ],
        "summary": "Get Order",
        "description": "Get an order by ID.",
        "operationId": "orders:get",
        "security": [
          {
            "oidc": [
              "orders:read"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The order ID.",
              "title": "Id"
            },
            "description": "The order ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "404": {
            "description": "Order not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "orders",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "get",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.orders.get({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "get",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.orders.get(id=\"<value>\")\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      }
    },
    "/v1/orders/{id}/invoice": {
      "get": {
        "tags": [
          "orders",
          "documented"
        ],
        "summary": "Get Order Invoice",
        "description": "Get an order's invoice data.",
        "operationId": "orders:invoice",
        "security": [
          {
            "oidc": [
              "orders:read"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The order ID.",
              "title": "Id"
            },
            "description": "The order ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderInvoice"
                }
              }
            }
          },
          "404": {
            "description": "Order not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "orders",
        "x-speakeasy-name-override": "invoice",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "invoice",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.orders.invoice({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "invoice",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.orders.invoice(id=\"<value>\")\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      }
    },
    "/v1/checkouts/": {
      "post": {
        "tags": [
          "checkouts",
          "documented",
          "featured"
        ],
        "summary": "Create Checkout",
        "description": "Create a checkout session.",
        "operationId": "checkouts:create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckoutCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oidc": []
          },
          {
            "pat": []
          }
        ],
        "x-polar-allowed-subjects": [
          "Anonymous",
          "User"
        ],
        "x-speakeasy-group": "checkouts",
        "x-speakeasy-name-override": "create",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "create",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.checkouts.create({\n    productPriceId: \"<value>\",\n    successUrl: \"https://probable-heating.com/\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "create",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.checkouts.create(request={\n    \"product_price_id\": \"<value>\",\n    \"success_url\": \"https://probable-heating.com/\",\n})\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      }
    },
    "/v1/checkouts/{id}": {
      "get": {
        "tags": [
          "checkouts",
          "documented",
          "featured"
        ],
        "summary": "Get Checkout",
        "description": "Get an active checkout session by ID.",
        "operationId": "checkouts:get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-group": "checkouts",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "get",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.checkouts.get({\n    id: \"<id>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "get",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.checkouts.get(id=\"<id>\")\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      }
    },
    "/v1/files/": {
      "get": {
        "tags": [
          "files",
          "documented"
        ],
        "summary": "List Files",
        "description": "List files.",
        "operationId": "files:list",
        "security": [
          {
            "oidc": [
              "files:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "List of file IDs to get. ",
              "title": "Ids"
            },
            "description": "List of file IDs to get. "
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_FileRead_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "files",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "list",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.files.list({});\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "list",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.files.list()\n\nif res is not None:\n    while True:\n        # handle items\n\n        res = res.next()\n        if res is None:\n            break"
          }
        ]
      },
      "post": {
        "tags": [
          "files",
          "documented"
        ],
        "summary": "Create File",
        "description": "Create a file.",
        "operationId": "files:create",
        "security": [
          {
            "oidc": [
              "files:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/DownloadableFileCreate"
                  },
                  {
                    "$ref": "#/components/schemas/ProductMediaFileCreate"
                  },
                  {
                    "$ref": "#/components/schemas/OrganizationAvatarFileCreate"
                  }
                ],
                "discriminator": {
                  "propertyName": "service",
                  "mapping": {
                    "downloadable": "#/components/schemas/DownloadableFileCreate",
                    "product_media": "#/components/schemas/ProductMediaFileCreate",
                    "organization_avatar": "#/components/schemas/OrganizationAvatarFileCreate"
                  }
                },
                "title": "File Create"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileUpload"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "files",
        "x-speakeasy-name-override": "create",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "create",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.files.create({\n    name: \"<value>\",\n    mimeType: \"<value>\",\n    size: 638424,\n    upload: {\n      parts: [\n        {\n          number: 417458,\n          chunkStart: 134365,\n          chunkEnd: 69025,\n        },\n      ],\n    },\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "create",
            "source": "import polar_sdk\nfrom polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.files.create(request={\n    \"name\": \"<value>\",\n    \"mime_type\": \"<value>\",\n    \"size\": 638424,\n    \"upload\": {\n        \"parts\": [\n            {\n                \"number\": 417458,\n                \"chunk_start\": 134365,\n                \"chunk_end\": 69025,\n            },\n        ],\n    },\n    \"service\": polar_sdk.ProductMediaFileCreateService.PRODUCT_MEDIA,\n})\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      }
    },
    "/v1/files/{id}/uploaded": {
      "post": {
        "tags": [
          "files",
          "documented"
        ],
        "summary": "Complete File Upload",
        "description": "Complete a file upload.",
        "operationId": "files:uploaded",
        "security": [
          {
            "oidc": [
              "files:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The file ID.",
              "title": "Id"
            },
            "description": "The file ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileUploadCompleted"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DownloadableFileRead"
                    },
                    {
                      "$ref": "#/components/schemas/ProductMediaFileRead"
                    },
                    {
                      "$ref": "#/components/schemas/OrganizationAvatarFileRead"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "service",
                    "mapping": {
                      "downloadable": "#/components/schemas/DownloadableFileRead",
                      "product_media": "#/components/schemas/ProductMediaFileRead",
                      "organization_avatar": "#/components/schemas/OrganizationAvatarFileRead"
                    }
                  },
                  "title": "Response Files:Uploaded"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "files",
        "x-speakeasy-name-override": "uploaded",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "uploaded",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.files.uploaded({\n    id: \"<value>\",\n    fileUploadCompleted: {\n      id: \"<id>\",\n      path: \"/sys\",\n      parts: [\n        {\n          number: 173116,\n          checksumEtag: \"<value>\",\n          checksumSha256Base64: \"<value>\",\n        },\n        {\n          number: 894030,\n          checksumEtag: \"<value>\",\n          checksumSha256Base64: \"<value>\",\n        },\n        {\n          number: 673715,\n          checksumEtag: \"<value>\",\n          checksumSha256Base64: \"<value>\",\n        },\n      ],\n    },\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "uploaded",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.files.uploaded(id=\"<value>\", file_upload_completed={\n    \"id\": \"<id>\",\n    \"path\": \"/sys\",\n    \"parts\": [\n        {\n            \"number\": 173116,\n            \"checksum_etag\": \"<value>\",\n            \"checksum_sha256_base64\": \"<value>\",\n        },\n        {\n            \"number\": 894030,\n            \"checksum_etag\": \"<value>\",\n            \"checksum_sha256_base64\": \"<value>\",\n        },\n        {\n            \"number\": 673715,\n            \"checksum_etag\": \"<value>\",\n            \"checksum_sha256_base64\": \"<value>\",\n        },\n    ],\n})\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      }
    },
    "/v1/files/{id}": {
      "patch": {
        "tags": [
          "files",
          "documented"
        ],
        "summary": "Update File",
        "description": "Update a file.",
        "operationId": "files:update",
        "security": [
          {
            "oidc": [
              "files:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The file ID.",
              "title": "Id"
            },
            "description": "The file ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilePatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DownloadableFileRead"
                    },
                    {
                      "$ref": "#/components/schemas/ProductMediaFileRead"
                    },
                    {
                      "$ref": "#/components/schemas/OrganizationAvatarFileRead"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "service",
                    "mapping": {
                      "downloadable": "#/components/schemas/DownloadableFileRead",
                      "product_media": "#/components/schemas/ProductMediaFileRead",
                      "organization_avatar": "#/components/schemas/OrganizationAvatarFileRead"
                    }
                  },
                  "title": "Response Files:Update"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "files",
        "x-speakeasy-name-override": "update",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "update",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.files.update({\n    id: \"<value>\",\n    filePatch: {},\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "update",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.files.update(id=\"<value>\", file_patch={})\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      },
      "delete": {
        "tags": [
          "files",
          "documented"
        ],
        "summary": "Delete File",
        "description": "Delete a file.",
        "operationId": "files:delete",
        "security": [
          {
            "oidc": [
              "files:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "File deleted."
          },
          "403": {
            "description": "You don't have the permission to update this file or it's not deletable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotPermitted"
                }
              }
            }
          },
          "404": {
            "description": "File not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "files",
        "x-speakeasy-name-override": "delete",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "delete",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  await polar.files.delete({\n    id: \"<value>\",\n  });\n\n\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "delete",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\ns.files.delete(id=\"<value>\")\n\n# Use the SDK ..."
          }
        ]
      }
    },
    "/v1/metrics/": {
      "get": {
        "tags": [
          "metrics",
          "documented"
        ],
        "summary": "Get Metrics",
        "description": "Get metrics about your orders and subscriptions.",
        "operationId": "metrics:get",
        "security": [
          {
            "oidc": [
              "metrics:read"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "minimum": "2023-01-01",
              "description": "Start date.",
              "title": "Start Date"
            },
            "description": "Start date."
          },
          {
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "description": "End date.",
              "title": "End Date"
            },
            "description": "End date."
          },
          {
            "name": "interval",
            "in": "query",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Interval"
                }
              ],
              "description": "Interval between two timestamps.",
              "title": "Interval"
            },
            "description": "Interval between two timestamps."
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "product_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The product ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/products",
                    "resourceName": "Product",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The product ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/products",
                      "resourceName": "Product",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "ProductID Filter",
              "description": "Filter by product ID."
            },
            "description": "Filter by product ID."
          },
          {
            "name": "product_price_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ProductPriceType"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductPriceType"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "ProductPriceType Filter",
              "description": "Filter by product price type. `recurring` will filter data corresponding to subscriptions creations or renewals. `one_time` will filter data corresponding to one-time purchases."
            },
            "description": "Filter by product price type. `recurring` will filter data corresponding to subscriptions creations or renewals. `one_time` will filter data corresponding to one-time purchases."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "metrics",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "get",
            "source": "import { Polar } from \"@polar-sh/sdk\";\nimport { RFCDate } from \"@polar-sh/sdk/types\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.metrics.get({\n    startDate: new RFCDate(\"2024-02-07\"),\n    endDate: new RFCDate(\"2023-09-05\"),\n    interval: \"week\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "get",
            "source": "import dateutil.parser\nimport polar_sdk\nfrom polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.metrics.get(start_date=dateutil.parser.parse(\"2024-02-07\").date(), end_date=dateutil.parser.parse(\"2023-09-05\").date(), interval=polar_sdk.Interval.WEEK)\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      }
    },
    "/v1/metrics/limits": {
      "get": {
        "tags": [
          "metrics",
          "documented"
        ],
        "summary": "Get Metrics Limits",
        "description": "Get the interval limits for the metrics endpoint.",
        "operationId": "metrics:limits",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsLimits"
                }
              }
            }
          }
        },
        "security": [
          {
            "oidc": [
              "metrics:read"
            ]
          },
          {
            "pat": []
          }
        ],
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "metrics",
        "x-speakeasy-name-override": "limits",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "limits",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.metrics.limits();\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "limits",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.metrics.limits()\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      }
    },
    "/v1/license-keys": {
      "get": {
        "tags": [
          "license_keys",
          "documented",
          "featured"
        ],
        "summary": "List License Keys",
        "description": "Get license keys connected to the given organization & filters.",
        "operationId": "license_keys:list",
        "security": [
          {
            "oidc": [
              "license_keys:read",
              "license_keys:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_LicenseKeyRead_"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized to manage license key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "License key not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "license_keys",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "list",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.licenseKeys.list({});\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "list",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.license_keys.list()\n\nif res is not None:\n    while True:\n        # handle items\n\n        res = res.next()\n        if res is None:\n            break"
          }
        ]
      }
    },
    "/v1/license-keys/{id}": {
      "get": {
        "tags": [
          "license_keys",
          "documented",
          "featured"
        ],
        "summary": "Get License Key",
        "description": "Get a license key.",
        "operationId": "license_keys:get",
        "security": [
          {
            "oidc": [
              "license_keys:read",
              "license_keys:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseKeyWithActivations"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized to manage license key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "License key not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "license_keys",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "get",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.licenseKeys.get({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "get",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.license_keys.get(id=\"<value>\")\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      },
      "patch": {
        "tags": [
          "license_keys",
          "documented",
          "featured"
        ],
        "summary": "Update License Key",
        "description": "Update a license key.",
        "operationId": "license_keys:update",
        "security": [
          {
            "oidc": [
              "license_keys:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LicenseKeyUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseKeyRead"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized to manage license key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "License key not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "license_keys",
        "x-speakeasy-name-override": "update",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "update",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.licenseKeys.update({\n    id: \"<value>\",\n    licenseKeyUpdate: {},\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "update",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.license_keys.update(id=\"<value>\", license_key_update={})\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      }
    },
    "/v1/license-keys/{id}/activations/{activation_id}": {
      "get": {
        "tags": [
          "license_keys",
          "documented",
          "featured"
        ],
        "summary": "Get Activation",
        "description": "Get a license key activation.",
        "operationId": "license_keys:get_activation",
        "security": [
          {
            "oidc": [
              "license_keys:read",
              "license_keys:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            }
          },
          {
            "name": "activation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "title": "Activation Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseKeyActivationRead"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized to manage license key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "License key not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "license_keys",
        "x-speakeasy-name-override": "get_activation",
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "get_activation",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.licenseKeys.getActivation({\n    id: \"<value>\",\n    activationId: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "get_activation",
            "source": "from polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\nres = s.license_keys.get_activation(id=\"<value>\", activation_id=\"<value>\")\n\nif res is not None:\n    # handle response\n    pass"
          }
        ]
      }
    }
  },
  "webhooks": {
    "order.created": {
      "post": {
        "summary": "order.created",
        "description": "Sent when a new order is created.\n\n**Discord & Slack support:** Full",
        "operationId": "_endpointorder_created_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookOrderCreatedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "subscription.created": {
      "post": {
        "summary": "subscription.created",
        "description": "Sent when a new subscription is created.\n\n**Discord & Slack support:** Full",
        "operationId": "_endpointsubscription_created_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookSubscriptionCreatedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "subscription.updated": {
      "post": {
        "summary": "subscription.updated",
        "description": "Sent when a new subscription is updated. This event fires if the subscription is cancelled, both immediately and if the subscription is cancelled at the end of the current period.\n\n**Discord & Slack support:** On cancellation",
        "operationId": "_endpointsubscription_updated_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookSubscriptionUpdatedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "product.created": {
      "post": {
        "summary": "product.created",
        "description": "Sent when a new product is created.\n\n**Discord & Slack support:** Basic",
        "operationId": "_endpointproduct_created_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookProductCreatedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "product.updated": {
      "post": {
        "summary": "product.updated",
        "description": "Sent when a product is updated.\n\n**Discord & Slack support:** Basic",
        "operationId": "_endpointproduct_updated_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookProductUpdatedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "pledge.created": {
      "post": {
        "summary": "pledge.created",
        "description": "Sent when a new pledge is created. Note that this does mean that the pledge has been paid yet.\n\n**Discord & Slack support:** Full",
        "operationId": "_endpointpledge_created_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookPledgeCreatedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "pledge.updated": {
      "post": {
        "summary": "pledge.updated",
        "description": "Sent when a pledge is updated.\n\n**Discord & Slack support:** Basic",
        "operationId": "_endpointpledge_updated_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookPledgeUpdatedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "donation.created": {
      "post": {
        "summary": "donation.created",
        "description": "Sent when a new donation is created.\n\n**Discord & Slack support:** Full",
        "operationId": "_endpointdonation_created_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookDonationCreatedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "organization.updated": {
      "post": {
        "summary": "organization.updated",
        "description": "Sent when a organization is updated.\n\n**Discord & Slack support:** Basic",
        "operationId": "_endpointorganization_updated_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookOrganizationUpdatedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "benefit.created": {
      "post": {
        "summary": "benefit.created",
        "description": "Sent when a new benefit is created.\n\n**Discord & Slack support:** Basic",
        "operationId": "_endpointbenefit_created_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookBenefitCreatedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "benefit.updated": {
      "post": {
        "summary": "benefit.updated",
        "description": "Sent when a benefit is updated.\n\n**Discord & Slack support:** Basic",
        "operationId": "_endpointbenefit_updated_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookBenefitUpdatedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "benefit_grant.created": {
      "post": {
        "summary": "benefit_grant.created",
        "description": "Sent when a new benefit grant is created.\n\n**Discord & Slack support:** Basic",
        "operationId": "_endpointbenefit_grant_created_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookBenefitGrantCreatedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "benefit_grant.updated": {
      "post": {
        "summary": "benefit_grant.updated",
        "description": "Sent when a new benefit grant is updated.\n\n**Discord & Slack support:** Basic",
        "operationId": "_endpointbenefit_grant_updated_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookBenefitGrantUpdatedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "benefit_grant.revoked": {
      "post": {
        "summary": "benefit_grant.revoked",
        "description": "Sent when a new benefit grant is revoked.\n\n**Discord & Slack support:** Basic",
        "operationId": "_endpointbenefit_grant_revoked_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookBenefitGrantRevokedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Account": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "account_type": {
            "$ref": "#/components/schemas/AccountType"
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "stripe_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stripe Id"
          },
          "open_collective_slug": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Open Collective Slug"
          },
          "is_details_submitted": {
            "type": "boolean",
            "title": "Is Details Submitted"
          },
          "is_charges_enabled": {
            "type": "boolean",
            "title": "Is Charges Enabled"
          },
          "is_payouts_enabled": {
            "type": "boolean",
            "title": "Is Payouts Enabled"
          },
          "country": {
            "type": "string",
            "maxLength": 2,
            "minLength": 2,
            "title": "Country"
          },
          "users": {
            "items": {
              "$ref": "#/components/schemas/UserBase"
            },
            "type": "array",
            "title": "Users"
          },
          "organizations": {
            "items": {
              "$ref": "#/components/schemas/Organization"
            },
            "type": "array",
            "title": "Organizations"
          }
        },
        "type": "object",
        "required": [
          "id",
          "account_type",
          "status",
          "stripe_id",
          "open_collective_slug",
          "is_details_submitted",
          "is_charges_enabled",
          "is_payouts_enabled",
          "country",
          "users",
          "organizations"
        ],
        "title": "Account"
      },
      "AccountCreate": {
        "properties": {
          "account_type": {
            "$ref": "#/components/schemas/AccountType"
          },
          "open_collective_slug": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Open Collective Slug"
          },
          "country": {
            "type": "string",
            "maxLength": 2,
            "minLength": 2,
            "title": "Country",
            "description": "Two letter uppercase country code"
          }
        },
        "type": "object",
        "required": [
          "account_type",
          "country"
        ],
        "title": "AccountCreate"
      },
      "AccountLink": {
        "properties": {
          "url": {
            "type": "string",
            "title": "Url"
          }
        },
        "type": "object",
        "required": [
          "url"
        ],
        "title": "AccountLink"
      },
      "AccountType": {
        "type": "string",
        "enum": [
          "stripe",
          "open_collective"
        ],
        "title": "AccountType"
      },
      "AdvertisementCampaign": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "image_url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "Image Url"
          },
          "image_url_dark": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Image Url Dark"
          },
          "text": {
            "type": "string",
            "title": "Text"
          },
          "link_url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "Link Url"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "image_url",
          "image_url_dark",
          "text",
          "link_url"
        ],
        "title": "AdvertisementCampaign"
      },
      "AdvertisementCampaignListResource": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/AdvertisementCampaign"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "dimensions": {
            "prefixItems": [
              {
                "type": "integer"
              },
              {
                "type": "integer"
              }
            ],
            "items": {
              "type": "integer"
            },
            "type": "array",
            "maxItems": 2,
            "minItems": 2,
            "title": "Dimensions",
            "description": "The dimensions (width, height) in pixels of the advertisement images."
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination",
          "dimensions"
        ],
        "title": "AdvertisementCampaignListResource"
      },
      "AdvertisementSortProperty": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "granted_at",
          "-granted_at",
          "views",
          "-views",
          "clicks",
          "-clicks"
        ],
        "title": "AdvertisementSortProperty"
      },
      "AlreadyCanceledSubscription": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "AlreadyCanceledSubscription"
            ],
            "const": "AlreadyCanceledSubscription",
            "title": "Type"
          },
          "detail": {
            "type": "string",
            "title": "Detail"
          }
        },
        "type": "object",
        "required": [
          "type",
          "detail"
        ],
        "title": "AlreadyCanceledSubscription"
      },
      "Article": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "slug": {
            "type": "string",
            "title": "Slug"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "body": {
            "type": "string",
            "title": "Body"
          },
          "byline": {
            "$ref": "#/components/schemas/BylineProfile"
          },
          "visibility": {
            "$ref": "#/components/schemas/ArticleVisibility"
          },
          "user_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id"
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          },
          "published_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Published At"
          },
          "paid_subscribers_only": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Paid Subscribers Only"
          },
          "paid_subscribers_only_ends_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Paid Subscribers Only Ends At"
          },
          "is_preview": {
            "type": "boolean",
            "title": "Is Preview"
          },
          "is_pinned": {
            "type": "boolean",
            "title": "Is Pinned"
          },
          "notify_subscribers": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notify Subscribers"
          },
          "notifications_sent_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notifications Sent At"
          },
          "email_sent_to_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email Sent To Count"
          },
          "og_image_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Og Image Url"
          },
          "og_description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Og Description"
          }
        },
        "type": "object",
        "required": [
          "id",
          "slug",
          "title",
          "body",
          "byline",
          "visibility",
          "user_id",
          "organization_id",
          "organization",
          "published_at",
          "paid_subscribers_only",
          "paid_subscribers_only_ends_at",
          "is_preview",
          "is_pinned",
          "notify_subscribers",
          "notifications_sent_at",
          "email_sent_to_count",
          "og_image_url",
          "og_description"
        ],
        "title": "Article"
      },
      "ArticleByline": {
        "type": "string",
        "enum": [
          "user",
          "organization"
        ],
        "title": "ArticleByline"
      },
      "ArticleCreate": {
        "properties": {
          "title": {
            "type": "string",
            "minLength": 1,
            "title": "Title",
            "description": "Title of the article."
          },
          "slug": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Slug",
            "description": "Slug of the article to be used in URLs. If no slug is provided one will be generated from the title."
          },
          "body": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Body",
            "description": "Body in string format. Either one of body or body_base64 is required."
          },
          "body_base64": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Body Base64",
            "description": "Body in base64-encoded format. Can be helpful to bypass Web Application Firewalls (WAF). Either one of body or body_base64 is required."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the article. **Required unless you use an organization token.**"
          },
          "byline": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ArticleByline"
              }
            ],
            "description": "If the user or organization should be credited in the byline.",
            "default": "organization"
          },
          "visibility": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ArticleVisibility"
              }
            ],
            "default": "private"
          },
          "paid_subscribers_only": {
            "type": "boolean",
            "title": "Paid Subscribers Only",
            "description": "Set to true to only make this article available for subscribers to a paid subscription tier in the organization.",
            "default": false
          },
          "paid_subscribers_only_ends_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Paid Subscribers Only Ends At",
            "description": "If specified, time at which the article should no longer be restricted to paid subscribers. Only relevant if `paid_subscribers_only` is true."
          },
          "published_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Published At",
            "description": "Time of publishing. If this date is in the future, the post will be scheduled to publish at this time. If visibility is 'public', published_at will default to the current time."
          },
          "notify_subscribers": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notify Subscribers",
            "description": "Set to true to deliver this article via email and/or notifications to subscribers."
          },
          "is_pinned": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Pinned",
            "description": "If the article should be pinned"
          },
          "og_image_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Og Image Url",
            "description": "Custom og:image URL value"
          },
          "og_description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Og Description",
            "description": "Custom og:description value"
          }
        },
        "type": "object",
        "required": [
          "title"
        ],
        "title": "ArticleCreate"
      },
      "ArticlePreview": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email",
            "description": "Email address to send the preview to. The user must be registered on Polar."
          }
        },
        "type": "object",
        "required": [
          "email"
        ],
        "title": "ArticlePreview"
      },
      "ArticleReceivers": {
        "properties": {
          "free_subscribers": {
            "type": "integer",
            "title": "Free Subscribers"
          },
          "premium_subscribers": {
            "type": "integer",
            "title": "Premium Subscribers"
          },
          "organization_members": {
            "type": "integer",
            "title": "Organization Members"
          }
        },
        "type": "object",
        "required": [
          "free_subscribers",
          "premium_subscribers",
          "organization_members"
        ],
        "title": "ArticleReceivers"
      },
      "ArticleUpdate": {
        "properties": {
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "body": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Body",
            "description": "Body in string format. body and body_base64 are mutually exclusive."
          },
          "body_base64": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Body Base64",
            "description": "Body in base64-encoded format. Can be helpful to bypass Web Application Firewalls (WAF). body and body_base64 are mutually exclusive."
          },
          "slug": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Slug"
          },
          "byline": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ArticleByline"
              },
              {
                "type": "null"
              }
            ],
            "description": "If the user or organization should be credited in the byline."
          },
          "visibility": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ArticleVisibility"
              },
              {
                "type": "null"
              }
            ]
          },
          "paid_subscribers_only": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Paid Subscribers Only",
            "description": "Set to true to only make this article available for subscribers to a paid subscription tier in the organization."
          },
          "paid_subscribers_only_ends_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Paid Subscribers Only Ends At",
            "description": "If specified, time at which the article should no longer be restricted to paid subscribers. Only relevant if `paid_subscribers_only` is true."
          },
          "published_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Published At",
            "description": "Time of publishing. If this date is in the future, the post will be scheduled to publish at this time."
          },
          "notify_subscribers": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notify Subscribers",
            "description": "Set to true to deliver this article via email and/or notifications to subscribers."
          },
          "is_pinned": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Pinned",
            "description": "If the article should be pinned"
          },
          "og_image_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Og Image Url",
            "description": "Custom og:image URL value"
          },
          "og_description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Og Description",
            "description": "Custom og:description value"
          }
        },
        "type": "object",
        "title": "ArticleUpdate"
      },
      "ArticleVisibility": {
        "type": "string",
        "enum": [
          "public",
          "hidden",
          "private"
        ],
        "title": "ArticleVisibility"
      },
      "Assignee": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "login": {
            "type": "string",
            "title": "Login"
          },
          "html_url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "Html Url"
          },
          "avatar_url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "Avatar Url"
          }
        },
        "type": "object",
        "required": [
          "id",
          "login",
          "html_url",
          "avatar_url"
        ],
        "title": "Assignee"
      },
      "Author": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "login": {
            "type": "string",
            "title": "Login"
          },
          "html_url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "Html Url"
          },
          "avatar_url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "Avatar Url"
          }
        },
        "type": "object",
        "required": [
          "id",
          "login",
          "html_url",
          "avatar_url"
        ],
        "title": "Author"
      },
      "AuthorizeOrganization": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "slug": {
            "type": "string",
            "title": "Slug"
          },
          "avatar_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avatar Url"
          }
        },
        "type": "object",
        "required": [
          "id",
          "slug",
          "avatar_url"
        ],
        "title": "AuthorizeOrganization"
      },
      "AuthorizeResponseOrganization": {
        "properties": {
          "client": {
            "$ref": "#/components/schemas/OAuth2ClientPublic"
          },
          "sub_type": {
            "type": "string",
            "enum": [
              "organization"
            ],
            "const": "organization",
            "title": "Sub Type"
          },
          "sub": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AuthorizeOrganization"
              },
              {
                "type": "null"
              }
            ]
          },
          "scopes": {
            "items": {
              "$ref": "#/components/schemas/Scope"
            },
            "type": "array",
            "title": "Scopes"
          },
          "organizations": {
            "items": {
              "$ref": "#/components/schemas/AuthorizeOrganization"
            },
            "type": "array",
            "title": "Organizations"
          }
        },
        "type": "object",
        "required": [
          "client",
          "sub_type",
          "sub",
          "scopes",
          "organizations"
        ],
        "title": "AuthorizeResponseOrganization"
      },
      "AuthorizeResponseUser": {
        "properties": {
          "client": {
            "$ref": "#/components/schemas/OAuth2ClientPublic"
          },
          "sub_type": {
            "type": "string",
            "enum": [
              "user"
            ],
            "const": "user",
            "title": "Sub Type"
          },
          "sub": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AuthorizeUser"
              },
              {
                "type": "null"
              }
            ]
          },
          "scopes": {
            "items": {
              "$ref": "#/components/schemas/Scope"
            },
            "type": "array",
            "title": "Scopes"
          }
        },
        "type": "object",
        "required": [
          "client",
          "sub_type",
          "sub",
          "scopes"
        ],
        "title": "AuthorizeResponseUser"
      },
      "AuthorizeUser": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "avatar_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avatar Url"
          }
        },
        "type": "object",
        "required": [
          "id",
          "username",
          "email",
          "avatar_url"
        ],
        "title": "AuthorizeUser"
      },
      "Benefit": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/BenefitArticles"
          },
          {
            "$ref": "#/components/schemas/BenefitAds"
          },
          {
            "$ref": "#/components/schemas/BenefitCustom"
          },
          {
            "$ref": "#/components/schemas/BenefitDiscord"
          },
          {
            "$ref": "#/components/schemas/BenefitGitHubRepository"
          },
          {
            "$ref": "#/components/schemas/BenefitDownloadables"
          },
          {
            "$ref": "#/components/schemas/BenefitLicenseKeys"
          }
        ]
      },
      "BenefitAds": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the benefit."
          },
          "type": {
            "type": "string",
            "enum": [
              "ads"
            ],
            "const": "ads",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the benefit."
          },
          "selectable": {
            "type": "boolean",
            "title": "Selectable",
            "description": "Whether the benefit is selectable when creating a product."
          },
          "deletable": {
            "type": "boolean",
            "title": "Deletable",
            "description": "Whether the benefit is deletable."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit."
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitAdsProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "type",
          "description",
          "selectable",
          "deletable",
          "organization_id",
          "properties"
        ],
        "title": "BenefitAds",
        "description": "A benefit of type `ads`.\n\nUse it so your backers can display ads on your README, website, etc."
      },
      "BenefitAdsCreate": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ads"
            ],
            "const": "ads",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "maxLength": 42,
            "minLength": 3,
            "title": "Description",
            "description": "The description of the benefit. Will be displayed on products having this benefit."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit. **Required unless you use an organization token.**"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitAdsProperties"
          }
        },
        "type": "object",
        "required": [
          "type",
          "description",
          "properties"
        ],
        "title": "BenefitAdsCreate"
      },
      "BenefitAdsProperties": {
        "properties": {
          "image_height": {
            "type": "integer",
            "title": "Image Height",
            "description": "The height of the displayed ad.",
            "default": 400
          },
          "image_width": {
            "type": "integer",
            "title": "Image Width",
            "description": "The width of the displayed ad.",
            "default": 400
          }
        },
        "type": "object",
        "title": "BenefitAdsProperties",
        "description": "Properties for a benefit of type `ads`."
      },
      "BenefitAdsSubscriber": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the benefit."
          },
          "type": {
            "type": "string",
            "enum": [
              "ads"
            ],
            "const": "ads",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the benefit."
          },
          "selectable": {
            "type": "boolean",
            "title": "Selectable",
            "description": "Whether the benefit is selectable when creating a product."
          },
          "deletable": {
            "type": "boolean",
            "title": "Deletable",
            "description": "Whether the benefit is deletable."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit."
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitAdsProperties"
          },
          "grants": {
            "items": {
              "$ref": "#/components/schemas/BenefitGrantAds"
            },
            "type": "array",
            "title": "Grants"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "type",
          "description",
          "selectable",
          "deletable",
          "organization_id",
          "properties",
          "grants"
        ],
        "title": "BenefitAdsSubscriber"
      },
      "BenefitAdsUpdate": {
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 42,
                "minLength": 3
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the benefit. Will be displayed on products having this benefit."
          },
          "type": {
            "type": "string",
            "enum": [
              "ads"
            ],
            "const": "ads",
            "title": "Type"
          },
          "properties": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitAdsProperties"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "type"
        ],
        "title": "BenefitAdsUpdate"
      },
      "BenefitArticles": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the benefit."
          },
          "type": {
            "type": "string",
            "enum": [
              "articles"
            ],
            "const": "articles",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the benefit."
          },
          "selectable": {
            "type": "boolean",
            "title": "Selectable",
            "description": "Whether the benefit is selectable when creating a product."
          },
          "deletable": {
            "type": "boolean",
            "title": "Deletable",
            "description": "Whether the benefit is deletable."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit."
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitArticlesProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "type",
          "description",
          "selectable",
          "deletable",
          "organization_id",
          "properties"
        ],
        "title": "BenefitArticles",
        "description": "A benefit of type `articles`.\n\nUse it to grant access to posts."
      },
      "BenefitArticlesProperties": {
        "properties": {
          "paid_articles": {
            "type": "boolean",
            "title": "Paid Articles",
            "description": "Whether the user can access paid articles."
          }
        },
        "type": "object",
        "required": [
          "paid_articles"
        ],
        "title": "BenefitArticlesProperties",
        "description": "Properties for a benefit of type `articles`."
      },
      "BenefitArticlesSubscriber": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the benefit."
          },
          "type": {
            "type": "string",
            "enum": [
              "articles"
            ],
            "const": "articles",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the benefit."
          },
          "selectable": {
            "type": "boolean",
            "title": "Selectable",
            "description": "Whether the benefit is selectable when creating a product."
          },
          "deletable": {
            "type": "boolean",
            "title": "Deletable",
            "description": "Whether the benefit is deletable."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit."
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitArticlesSubscriberProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "type",
          "description",
          "selectable",
          "deletable",
          "organization_id",
          "properties"
        ],
        "title": "BenefitArticlesSubscriber"
      },
      "BenefitArticlesSubscriberProperties": {
        "properties": {
          "paid_articles": {
            "type": "boolean",
            "title": "Paid Articles",
            "description": "Whether the user can access paid articles."
          }
        },
        "type": "object",
        "required": [
          "paid_articles"
        ],
        "title": "BenefitArticlesSubscriberProperties",
        "description": "Properties available to subscribers for a benefit of type `articles`."
      },
      "BenefitArticlesUpdate": {
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 42,
                "minLength": 3
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the benefit. Will be displayed on products having this benefit."
          },
          "type": {
            "type": "string",
            "enum": [
              "articles"
            ],
            "const": "articles",
            "title": "Type"
          }
        },
        "type": "object",
        "required": [
          "type"
        ],
        "title": "BenefitArticlesUpdate"
      },
      "BenefitBase": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the benefit."
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BenefitType"
              }
            ],
            "description": "The type of the benefit."
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the benefit."
          },
          "selectable": {
            "type": "boolean",
            "title": "Selectable",
            "description": "Whether the benefit is selectable when creating a product."
          },
          "deletable": {
            "type": "boolean",
            "title": "Deletable",
            "description": "Whether the benefit is deletable."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "type",
          "description",
          "selectable",
          "deletable",
          "organization_id"
        ],
        "title": "BenefitBase"
      },
      "BenefitCustom": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the benefit."
          },
          "type": {
            "type": "string",
            "enum": [
              "custom"
            ],
            "const": "custom",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the benefit."
          },
          "selectable": {
            "type": "boolean",
            "title": "Selectable",
            "description": "Whether the benefit is selectable when creating a product."
          },
          "deletable": {
            "type": "boolean",
            "title": "Deletable",
            "description": "Whether the benefit is deletable."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit."
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitCustomProperties"
          },
          "is_tax_applicable": {
            "type": "boolean",
            "title": "Is Tax Applicable",
            "description": "Whether the benefit is taxable."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "type",
          "description",
          "selectable",
          "deletable",
          "organization_id",
          "properties",
          "is_tax_applicable"
        ],
        "title": "BenefitCustom",
        "description": "A benefit of type `custom`.\n\nUse it to grant any kind of benefit that doesn't fit in the other types."
      },
      "BenefitCustomCreate": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "custom"
            ],
            "const": "custom",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "maxLength": 42,
            "minLength": 3,
            "title": "Description",
            "description": "The description of the benefit. Will be displayed on products having this benefit."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit. **Required unless you use an organization token.**"
          },
          "is_tax_applicable": {
            "type": "boolean",
            "title": "Is Tax Applicable",
            "description": "Whether the benefit is taxable."
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitCustomProperties"
          }
        },
        "type": "object",
        "required": [
          "type",
          "description",
          "is_tax_applicable",
          "properties"
        ],
        "title": "BenefitCustomCreate",
        "description": "Schema to create a benefit of type `custom`."
      },
      "BenefitCustomProperties": {
        "properties": {
          "note": {
            "anyOf": [
              {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Private note to be shared with users who have this benefit granted."
              },
              {
                "type": "null"
              }
            ],
            "title": "Note"
          }
        },
        "type": "object",
        "required": [
          "note"
        ],
        "title": "BenefitCustomProperties",
        "description": "Properties for a benefit of type `custom`."
      },
      "BenefitCustomSubscriber": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the benefit."
          },
          "type": {
            "type": "string",
            "enum": [
              "custom"
            ],
            "const": "custom",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the benefit."
          },
          "selectable": {
            "type": "boolean",
            "title": "Selectable",
            "description": "Whether the benefit is selectable when creating a product."
          },
          "deletable": {
            "type": "boolean",
            "title": "Deletable",
            "description": "Whether the benefit is deletable."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit."
          },
          "grants": {
            "items": {
              "$ref": "#/components/schemas/BenefitGrantSubscriber"
            },
            "type": "array",
            "title": "Grants"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitCustomSubscriberProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "type",
          "description",
          "selectable",
          "deletable",
          "organization_id",
          "grants",
          "properties"
        ],
        "title": "BenefitCustomSubscriber"
      },
      "BenefitCustomSubscriberProperties": {
        "properties": {
          "note": {
            "anyOf": [
              {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Private note to be shared with users who have this benefit granted."
              },
              {
                "type": "null"
              }
            ],
            "title": "Note"
          }
        },
        "type": "object",
        "required": [
          "note"
        ],
        "title": "BenefitCustomSubscriberProperties",
        "description": "Properties available to subscribers for a benefit of type `custom`."
      },
      "BenefitCustomUpdate": {
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 42,
                "minLength": 3
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the benefit. Will be displayed on products having this benefit."
          },
          "type": {
            "type": "string",
            "enum": [
              "custom"
            ],
            "const": "custom",
            "title": "Type"
          },
          "properties": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitCustomProperties"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "type"
        ],
        "title": "BenefitCustomUpdate"
      },
      "BenefitDiscord": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the benefit."
          },
          "type": {
            "type": "string",
            "enum": [
              "discord"
            ],
            "const": "discord",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the benefit."
          },
          "selectable": {
            "type": "boolean",
            "title": "Selectable",
            "description": "Whether the benefit is selectable when creating a product."
          },
          "deletable": {
            "type": "boolean",
            "title": "Deletable",
            "description": "Whether the benefit is deletable."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit."
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitDiscordProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "type",
          "description",
          "selectable",
          "deletable",
          "organization_id",
          "properties"
        ],
        "title": "BenefitDiscord",
        "description": "A benefit of type `discord`.\n\nUse it to automatically invite your backers to a Discord server."
      },
      "BenefitDiscordCreate": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "discord"
            ],
            "const": "discord",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "maxLength": 42,
            "minLength": 3,
            "title": "Description",
            "description": "The description of the benefit. Will be displayed on products having this benefit."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit. **Required unless you use an organization token.**"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitDiscordCreateProperties"
          }
        },
        "type": "object",
        "required": [
          "type",
          "description",
          "properties"
        ],
        "title": "BenefitDiscordCreate"
      },
      "BenefitDiscordCreateProperties": {
        "properties": {
          "guild_token": {
            "type": "string",
            "title": "Guild Token"
          },
          "role_id": {
            "type": "string",
            "title": "Role Id",
            "description": "The ID of the Discord role to grant."
          }
        },
        "type": "object",
        "required": [
          "guild_token",
          "role_id"
        ],
        "title": "BenefitDiscordCreateProperties",
        "description": "Properties to create a benefit of type `discord`."
      },
      "BenefitDiscordProperties": {
        "properties": {
          "guild_id": {
            "type": "string",
            "title": "Guild Id",
            "description": "The ID of the Discord server."
          },
          "role_id": {
            "type": "string",
            "title": "Role Id",
            "description": "The ID of the Discord role to grant."
          },
          "guild_token": {
            "type": "string",
            "title": "Guild Token",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "guild_id",
          "role_id",
          "guild_token"
        ],
        "title": "BenefitDiscordProperties",
        "description": "Properties for a benefit of type `discord`."
      },
      "BenefitDiscordSubscriber": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the benefit."
          },
          "type": {
            "type": "string",
            "enum": [
              "discord"
            ],
            "const": "discord",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the benefit."
          },
          "selectable": {
            "type": "boolean",
            "title": "Selectable",
            "description": "Whether the benefit is selectable when creating a product."
          },
          "deletable": {
            "type": "boolean",
            "title": "Deletable",
            "description": "Whether the benefit is deletable."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit."
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitDiscordSubscriberProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "type",
          "description",
          "selectable",
          "deletable",
          "organization_id",
          "properties"
        ],
        "title": "BenefitDiscordSubscriber"
      },
      "BenefitDiscordSubscriberProperties": {
        "properties": {
          "guild_id": {
            "type": "string",
            "title": "Guild Id",
            "description": "The ID of the Discord server."
          }
        },
        "type": "object",
        "required": [
          "guild_id"
        ],
        "title": "BenefitDiscordSubscriberProperties",
        "description": "Properties available to subscribers for a benefit of type `discord`."
      },
      "BenefitDiscordUpdate": {
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 42,
                "minLength": 3
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the benefit. Will be displayed on products having this benefit."
          },
          "type": {
            "type": "string",
            "enum": [
              "discord"
            ],
            "const": "discord",
            "title": "Type"
          },
          "properties": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitDiscordCreateProperties"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "type"
        ],
        "title": "BenefitDiscordUpdate"
      },
      "BenefitDownloadables": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the benefit."
          },
          "type": {
            "type": "string",
            "enum": [
              "downloadables"
            ],
            "const": "downloadables",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the benefit."
          },
          "selectable": {
            "type": "boolean",
            "title": "Selectable",
            "description": "Whether the benefit is selectable when creating a product."
          },
          "deletable": {
            "type": "boolean",
            "title": "Deletable",
            "description": "Whether the benefit is deletable."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit."
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitDownloadablesProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "type",
          "description",
          "selectable",
          "deletable",
          "organization_id",
          "properties"
        ],
        "title": "BenefitDownloadables"
      },
      "BenefitDownloadablesCreate": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "downloadables"
            ],
            "const": "downloadables",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "maxLength": 42,
            "minLength": 3,
            "title": "Description",
            "description": "The description of the benefit. Will be displayed on products having this benefit."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit. **Required unless you use an organization token.**"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitDownloadablesCreateProperties"
          }
        },
        "type": "object",
        "required": [
          "type",
          "description",
          "properties"
        ],
        "title": "BenefitDownloadablesCreate"
      },
      "BenefitDownloadablesCreateProperties": {
        "properties": {
          "archived": {
            "additionalProperties": {
              "type": "boolean"
            },
            "type": "object",
            "title": "Archived",
            "default": {}
          },
          "files": {
            "items": {
              "type": "string",
              "format": "uuid4"
            },
            "type": "array",
            "title": "Files"
          }
        },
        "type": "object",
        "required": [
          "files"
        ],
        "title": "BenefitDownloadablesCreateProperties"
      },
      "BenefitDownloadablesProperties": {
        "properties": {
          "archived": {
            "additionalProperties": {
              "type": "boolean"
            },
            "type": "object",
            "title": "Archived"
          },
          "files": {
            "items": {
              "type": "string",
              "format": "uuid4"
            },
            "type": "array",
            "title": "Files"
          }
        },
        "type": "object",
        "required": [
          "archived",
          "files"
        ],
        "title": "BenefitDownloadablesProperties"
      },
      "BenefitDownloadablesSubscriber": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the benefit."
          },
          "type": {
            "type": "string",
            "enum": [
              "downloadables"
            ],
            "const": "downloadables",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the benefit."
          },
          "selectable": {
            "type": "boolean",
            "title": "Selectable",
            "description": "Whether the benefit is selectable when creating a product."
          },
          "deletable": {
            "type": "boolean",
            "title": "Deletable",
            "description": "Whether the benefit is deletable."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit."
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitDownloadablesSubscriberProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "type",
          "description",
          "selectable",
          "deletable",
          "organization_id",
          "properties"
        ],
        "title": "BenefitDownloadablesSubscriber"
      },
      "BenefitDownloadablesSubscriberProperties": {
        "properties": {
          "active_files": {
            "items": {
              "type": "string",
              "format": "uuid4"
            },
            "type": "array",
            "title": "Active Files"
          }
        },
        "type": "object",
        "required": [
          "active_files"
        ],
        "title": "BenefitDownloadablesSubscriberProperties"
      },
      "BenefitDownloadablesUpdate": {
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 42,
                "minLength": 3
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the benefit. Will be displayed on products having this benefit."
          },
          "type": {
            "type": "string",
            "enum": [
              "downloadables"
            ],
            "const": "downloadables",
            "title": "Type"
          },
          "properties": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitDownloadablesCreateProperties"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "type"
        ],
        "title": "BenefitDownloadablesUpdate"
      },
      "BenefitGitHubRepository": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the benefit."
          },
          "type": {
            "type": "string",
            "enum": [
              "github_repository"
            ],
            "const": "github_repository",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the benefit."
          },
          "selectable": {
            "type": "boolean",
            "title": "Selectable",
            "description": "Whether the benefit is selectable when creating a product."
          },
          "deletable": {
            "type": "boolean",
            "title": "Deletable",
            "description": "Whether the benefit is deletable."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit."
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitGitHubRepositoryProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "type",
          "description",
          "selectable",
          "deletable",
          "organization_id",
          "properties"
        ],
        "title": "BenefitGitHubRepository",
        "description": "A benefit of type `github_repository`.\n\nUse it to automatically invite your backers to a private GitHub repository."
      },
      "BenefitGitHubRepositoryCreate": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "github_repository"
            ],
            "const": "github_repository",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "maxLength": 42,
            "minLength": 3,
            "title": "Description",
            "description": "The description of the benefit. Will be displayed on products having this benefit."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit. **Required unless you use an organization token.**"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitGitHubRepositoryCreateProperties"
          }
        },
        "type": "object",
        "required": [
          "type",
          "description",
          "properties"
        ],
        "title": "BenefitGitHubRepositoryCreate"
      },
      "BenefitGitHubRepositoryCreateProperties": {
        "properties": {
          "repository_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Repository Id"
          },
          "repository_owner": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Repository Owner",
            "description": "The owner of the repository.",
            "examples": [
              "polarsource"
            ]
          },
          "repository_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Repository Name",
            "description": "The name of the repository.",
            "examples": [
              "private_repo"
            ]
          },
          "permission": {
            "type": "string",
            "enum": [
              "pull",
              "triage",
              "push",
              "maintain",
              "admin"
            ],
            "title": "Permission",
            "description": "The permission level to grant. Read more about roles and their permissions on [GitHub documentation](https://docs.github.com/en/organizations/managing-user-access-to-your-organizations-repositories/managing-repository-roles/repository-roles-for-an-organization#permissions-for-each-role)."
          }
        },
        "type": "object",
        "required": [
          "permission"
        ],
        "title": "BenefitGitHubRepositoryCreateProperties",
        "description": "Properties to create a benefit of type `github_repository`."
      },
      "BenefitGitHubRepositoryProperties": {
        "properties": {
          "repository_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Repository Id"
          },
          "repository_owner": {
            "type": "string",
            "title": "Repository Owner",
            "description": "The owner of the repository.",
            "examples": [
              "polarsource"
            ]
          },
          "repository_name": {
            "type": "string",
            "title": "Repository Name",
            "description": "The name of the repository.",
            "examples": [
              "private_repo"
            ]
          },
          "permission": {
            "type": "string",
            "enum": [
              "pull",
              "triage",
              "push",
              "maintain",
              "admin"
            ],
            "title": "Permission",
            "description": "The permission level to grant. Read more about roles and their permissions on [GitHub documentation](https://docs.github.com/en/organizations/managing-user-access-to-your-organizations-repositories/managing-repository-roles/repository-roles-for-an-organization#permissions-for-each-role)."
          }
        },
        "type": "object",
        "required": [
          "repository_id",
          "repository_owner",
          "repository_name",
          "permission"
        ],
        "title": "BenefitGitHubRepositoryProperties",
        "description": "Properties for a benefit of type `github_repository`."
      },
      "BenefitGitHubRepositorySubscriber": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the benefit."
          },
          "type": {
            "type": "string",
            "enum": [
              "github_repository"
            ],
            "const": "github_repository",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the benefit."
          },
          "selectable": {
            "type": "boolean",
            "title": "Selectable",
            "description": "Whether the benefit is selectable when creating a product."
          },
          "deletable": {
            "type": "boolean",
            "title": "Deletable",
            "description": "Whether the benefit is deletable."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit."
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitGitHubRepositorySubscriberProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "type",
          "description",
          "selectable",
          "deletable",
          "organization_id",
          "properties"
        ],
        "title": "BenefitGitHubRepositorySubscriber"
      },
      "BenefitGitHubRepositorySubscriberProperties": {
        "properties": {
          "repository_owner": {
            "type": "string",
            "title": "Repository Owner",
            "description": "The owner of the repository.",
            "examples": [
              "polarsource"
            ]
          },
          "repository_name": {
            "type": "string",
            "title": "Repository Name",
            "description": "The name of the repository.",
            "examples": [
              "private_repo"
            ]
          }
        },
        "type": "object",
        "required": [
          "repository_owner",
          "repository_name"
        ],
        "title": "BenefitGitHubRepositorySubscriberProperties",
        "description": "Properties available to subscribers for a benefit of type `github_repository`."
      },
      "BenefitGitHubRepositoryUpdate": {
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 42,
                "minLength": 3
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the benefit. Will be displayed on products having this benefit."
          },
          "type": {
            "type": "string",
            "enum": [
              "github_repository"
            ],
            "const": "github_repository",
            "title": "Type"
          },
          "properties": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitGitHubRepositoryCreateProperties"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "type"
        ],
        "title": "BenefitGitHubRepositoryUpdate"
      },
      "BenefitGrant": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the grant."
          },
          "granted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Granted At",
            "description": "The timestamp when the benefit was granted. If `None`, the benefit is not granted."
          },
          "is_granted": {
            "type": "boolean",
            "title": "Is Granted",
            "description": "Whether the benefit is granted."
          },
          "revoked_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Revoked At",
            "description": "The timestamp when the benefit was revoked. If `None`, the benefit is not revoked."
          },
          "is_revoked": {
            "type": "boolean",
            "title": "Is Revoked",
            "description": "Whether the benefit is revoked."
          },
          "subscription_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subscription Id",
            "description": "The ID of the subscription that granted this benefit."
          },
          "order_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id",
            "description": "The ID of the order that granted this benefit."
          },
          "user_id": {
            "type": "string",
            "format": "uuid4",
            "title": "User Id",
            "description": "The ID of the user concerned by this grant."
          },
          "benefit_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Benefit Id",
            "description": "The ID of the benefit concerned by this grant."
          },
          "properties": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitGrantDiscordProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantGitHubRepositoryProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantDownloadablesProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantLicenseKeysProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantAdsProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantCustomProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantArticlesProperties"
              }
            ],
            "title": "Properties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "is_granted",
          "is_revoked",
          "subscription_id",
          "order_id",
          "user_id",
          "benefit_id",
          "properties"
        ],
        "title": "BenefitGrant"
      },
      "BenefitGrantAds": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the grant."
          },
          "granted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Granted At",
            "description": "The timestamp when the benefit was granted. If `None`, the benefit is not granted."
          },
          "is_granted": {
            "type": "boolean",
            "title": "Is Granted",
            "description": "Whether the benefit is granted."
          },
          "revoked_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Revoked At",
            "description": "The timestamp when the benefit was revoked. If `None`, the benefit is not revoked."
          },
          "is_revoked": {
            "type": "boolean",
            "title": "Is Revoked",
            "description": "Whether the benefit is revoked."
          },
          "subscription_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subscription Id",
            "description": "The ID of the subscription that granted this benefit."
          },
          "order_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id",
            "description": "The ID of the order that granted this benefit."
          },
          "user_id": {
            "type": "string",
            "format": "uuid4",
            "title": "User Id",
            "description": "The ID of the user concerned by this grant."
          },
          "benefit_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Benefit Id",
            "description": "The ID of the benefit concerned by this grant."
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitGrantAdsSubscriberProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "is_granted",
          "is_revoked",
          "subscription_id",
          "order_id",
          "user_id",
          "benefit_id",
          "properties"
        ],
        "title": "BenefitGrantAds"
      },
      "BenefitGrantAdsProperties": {
        "properties": {
          "advertisement_campaign_id": {
            "type": "string",
            "title": "Advertisement Campaign Id"
          }
        },
        "type": "object",
        "required": [
          "advertisement_campaign_id"
        ],
        "title": "BenefitGrantAdsProperties"
      },
      "BenefitGrantAdsSubscriberProperties": {
        "properties": {
          "advertisement_campaign_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Advertisement Campaign Id",
            "description": "The ID of the enabled advertisement campaign for this benefit grant."
          }
        },
        "type": "object",
        "title": "BenefitGrantAdsSubscriberProperties"
      },
      "BenefitGrantArticlesProperties": {
        "properties": {},
        "type": "object",
        "title": "BenefitGrantArticlesProperties"
      },
      "BenefitGrantCustomProperties": {
        "properties": {},
        "type": "object",
        "title": "BenefitGrantCustomProperties"
      },
      "BenefitGrantDiscordProperties": {
        "properties": {
          "guild_id": {
            "type": "string",
            "title": "Guild Id"
          },
          "role_id": {
            "type": "string",
            "title": "Role Id"
          },
          "account_id": {
            "type": "string",
            "title": "Account Id"
          }
        },
        "type": "object",
        "title": "BenefitGrantDiscordProperties"
      },
      "BenefitGrantDownloadablesProperties": {
        "properties": {
          "files": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Files"
          }
        },
        "type": "object",
        "title": "BenefitGrantDownloadablesProperties"
      },
      "BenefitGrantGitHubRepositoryProperties": {
        "properties": {
          "repository_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Repository Id"
          },
          "repository_owner": {
            "type": "string",
            "title": "Repository Owner"
          },
          "repository_name": {
            "type": "string",
            "title": "Repository Name"
          },
          "permission": {
            "type": "string",
            "enum": [
              "pull",
              "triage",
              "push",
              "maintain",
              "admin"
            ],
            "title": "Permission"
          }
        },
        "type": "object",
        "title": "BenefitGrantGitHubRepositoryProperties"
      },
      "BenefitGrantLicenseKeys": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the grant."
          },
          "granted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Granted At",
            "description": "The timestamp when the benefit was granted. If `None`, the benefit is not granted."
          },
          "is_granted": {
            "type": "boolean",
            "title": "Is Granted",
            "description": "Whether the benefit is granted."
          },
          "revoked_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Revoked At",
            "description": "The timestamp when the benefit was revoked. If `None`, the benefit is not revoked."
          },
          "is_revoked": {
            "type": "boolean",
            "title": "Is Revoked",
            "description": "Whether the benefit is revoked."
          },
          "subscription_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subscription Id",
            "description": "The ID of the subscription that granted this benefit."
          },
          "order_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id",
            "description": "The ID of the order that granted this benefit."
          },
          "user_id": {
            "type": "string",
            "format": "uuid4",
            "title": "User Id",
            "description": "The ID of the user concerned by this grant."
          },
          "benefit_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Benefit Id",
            "description": "The ID of the benefit concerned by this grant."
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitGrantLicenseKeysProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "is_granted",
          "is_revoked",
          "subscription_id",
          "order_id",
          "user_id",
          "benefit_id",
          "properties"
        ],
        "title": "BenefitGrantLicenseKeys"
      },
      "BenefitGrantLicenseKeysProperties": {
        "properties": {
          "license_key_id": {
            "type": "string",
            "title": "License Key Id"
          },
          "display_key": {
            "type": "string",
            "title": "Display Key"
          }
        },
        "type": "object",
        "title": "BenefitGrantLicenseKeysProperties"
      },
      "BenefitGrantSubscriber": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the grant."
          },
          "granted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Granted At",
            "description": "The timestamp when the benefit was granted. If `None`, the benefit is not granted."
          },
          "is_granted": {
            "type": "boolean",
            "title": "Is Granted",
            "description": "Whether the benefit is granted."
          },
          "revoked_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Revoked At",
            "description": "The timestamp when the benefit was revoked. If `None`, the benefit is not revoked."
          },
          "is_revoked": {
            "type": "boolean",
            "title": "Is Revoked",
            "description": "Whether the benefit is revoked."
          },
          "subscription_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subscription Id",
            "description": "The ID of the subscription that granted this benefit."
          },
          "order_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id",
            "description": "The ID of the order that granted this benefit."
          },
          "user_id": {
            "type": "string",
            "format": "uuid4",
            "title": "User Id",
            "description": "The ID of the user concerned by this grant."
          },
          "benefit_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Benefit Id",
            "description": "The ID of the benefit concerned by this grant."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "is_granted",
          "is_revoked",
          "subscription_id",
          "order_id",
          "user_id",
          "benefit_id"
        ],
        "title": "BenefitGrantSubscriber"
      },
      "BenefitGrantWebhook": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the grant."
          },
          "granted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Granted At",
            "description": "The timestamp when the benefit was granted. If `None`, the benefit is not granted."
          },
          "is_granted": {
            "type": "boolean",
            "title": "Is Granted",
            "description": "Whether the benefit is granted."
          },
          "revoked_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Revoked At",
            "description": "The timestamp when the benefit was revoked. If `None`, the benefit is not revoked."
          },
          "is_revoked": {
            "type": "boolean",
            "title": "Is Revoked",
            "description": "Whether the benefit is revoked."
          },
          "subscription_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subscription Id",
            "description": "The ID of the subscription that granted this benefit."
          },
          "order_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id",
            "description": "The ID of the order that granted this benefit."
          },
          "user_id": {
            "type": "string",
            "format": "uuid4",
            "title": "User Id",
            "description": "The ID of the user concerned by this grant."
          },
          "benefit_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Benefit Id",
            "description": "The ID of the benefit concerned by this grant."
          },
          "properties": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitGrantDiscordProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantGitHubRepositoryProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantDownloadablesProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantLicenseKeysProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantAdsProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantCustomProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantArticlesProperties"
              }
            ],
            "title": "Properties"
          },
          "benefit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Benefit"
              }
            ],
            "title": "Benefit"
          },
          "previous_properties": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitGrantDiscordProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantGitHubRepositoryProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantDownloadablesProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantLicenseKeysProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantAdsProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantCustomProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantArticlesProperties"
              },
              {
                "type": "null"
              }
            ],
            "title": "Previous Properties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "is_granted",
          "is_revoked",
          "subscription_id",
          "order_id",
          "user_id",
          "benefit_id",
          "properties",
          "benefit"
        ],
        "title": "BenefitGrantWebhook"
      },
      "BenefitLicenseKeyActivationProperties": {
        "properties": {
          "limit": {
            "type": "integer",
            "maximum": 50,
            "exclusiveMinimum": 0,
            "title": "Limit"
          },
          "enable_user_admin": {
            "type": "boolean",
            "title": "Enable User Admin"
          }
        },
        "type": "object",
        "required": [
          "limit",
          "enable_user_admin"
        ],
        "title": "BenefitLicenseKeyActivationProperties"
      },
      "BenefitLicenseKeyExpirationProperties": {
        "properties": {
          "ttl": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "Ttl"
          },
          "timeframe": {
            "type": "string",
            "enum": [
              "year",
              "month",
              "day"
            ],
            "title": "Timeframe"
          }
        },
        "type": "object",
        "required": [
          "ttl",
          "timeframe"
        ],
        "title": "BenefitLicenseKeyExpirationProperties"
      },
      "BenefitLicenseKeys": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the benefit."
          },
          "type": {
            "type": "string",
            "enum": [
              "license_keys"
            ],
            "const": "license_keys",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the benefit."
          },
          "selectable": {
            "type": "boolean",
            "title": "Selectable",
            "description": "Whether the benefit is selectable when creating a product."
          },
          "deletable": {
            "type": "boolean",
            "title": "Deletable",
            "description": "Whether the benefit is deletable."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit."
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitLicenseKeysProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "type",
          "description",
          "selectable",
          "deletable",
          "organization_id",
          "properties"
        ],
        "title": "BenefitLicenseKeys"
      },
      "BenefitLicenseKeysCreate": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "license_keys"
            ],
            "const": "license_keys",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "maxLength": 42,
            "minLength": 3,
            "title": "Description",
            "description": "The description of the benefit. Will be displayed on products having this benefit."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit. **Required unless you use an organization token.**"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitLicenseKeysCreateProperties"
          }
        },
        "type": "object",
        "required": [
          "type",
          "description",
          "properties"
        ],
        "title": "BenefitLicenseKeysCreate"
      },
      "BenefitLicenseKeysCreateProperties": {
        "properties": {
          "prefix": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prefix"
          },
          "expires": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitLicenseKeyExpirationProperties"
              },
              {
                "type": "null"
              }
            ]
          },
          "activations": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitLicenseKeyActivationProperties"
              },
              {
                "type": "null"
              }
            ]
          },
          "limit_usage": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMinimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit Usage"
          }
        },
        "type": "object",
        "title": "BenefitLicenseKeysCreateProperties"
      },
      "BenefitLicenseKeysProperties": {
        "properties": {
          "prefix": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prefix"
          },
          "expires": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitLicenseKeyExpirationProperties"
              },
              {
                "type": "null"
              }
            ]
          },
          "activations": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitLicenseKeyActivationProperties"
              },
              {
                "type": "null"
              }
            ]
          },
          "limit_usage": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit Usage"
          }
        },
        "type": "object",
        "required": [
          "prefix",
          "expires",
          "activations",
          "limit_usage"
        ],
        "title": "BenefitLicenseKeysProperties"
      },
      "BenefitLicenseKeysSubscriber": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the benefit."
          },
          "type": {
            "type": "string",
            "enum": [
              "license_keys"
            ],
            "const": "license_keys",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the benefit."
          },
          "selectable": {
            "type": "boolean",
            "title": "Selectable",
            "description": "Whether the benefit is selectable when creating a product."
          },
          "deletable": {
            "type": "boolean",
            "title": "Deletable",
            "description": "Whether the benefit is deletable."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit."
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitLicenseKeysSubscriberProperties"
          },
          "grants": {
            "items": {
              "$ref": "#/components/schemas/BenefitGrantLicenseKeys"
            },
            "type": "array",
            "title": "Grants"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "type",
          "description",
          "selectable",
          "deletable",
          "organization_id",
          "properties",
          "grants"
        ],
        "title": "BenefitLicenseKeysSubscriber"
      },
      "BenefitLicenseKeysSubscriberProperties": {
        "properties": {
          "prefix": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prefix"
          },
          "expires": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitLicenseKeyExpirationProperties"
              },
              {
                "type": "null"
              }
            ]
          },
          "activations": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitLicenseKeyActivationProperties"
              },
              {
                "type": "null"
              }
            ]
          },
          "limit_usage": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit Usage"
          }
        },
        "type": "object",
        "required": [
          "prefix",
          "expires",
          "activations",
          "limit_usage"
        ],
        "title": "BenefitLicenseKeysSubscriberProperties"
      },
      "BenefitLicenseKeysUpdate": {
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 42,
                "minLength": 3
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the benefit. Will be displayed on products having this benefit."
          },
          "type": {
            "type": "string",
            "enum": [
              "license_keys"
            ],
            "const": "license_keys",
            "title": "Type"
          },
          "properties": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitLicenseKeysCreateProperties"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "type"
        ],
        "title": "BenefitLicenseKeysUpdate"
      },
      "BenefitType": {
        "type": "string",
        "enum": [
          "custom",
          "articles",
          "ads",
          "discord",
          "github_repository",
          "downloadables",
          "license_keys"
        ],
        "title": "BenefitType"
      },
      "BylineProfile": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "avatar_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avatar Url"
          }
        },
        "type": "object",
        "required": [
          "name",
          "avatar_url"
        ],
        "title": "BylineProfile"
      },
      "Checkout": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The ID of the checkout."
          },
          "url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Url",
            "description": "URL the customer should be redirected to complete the purchase."
          },
          "customer_email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Email"
          },
          "customer_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Name"
          },
          "product": {
            "$ref": "#/components/schemas/Product"
          },
          "product_price": {
            "$ref": "#/components/schemas/ProductPrice"
          }
        },
        "type": "object",
        "required": [
          "id",
          "customer_email",
          "customer_name",
          "product",
          "product_price"
        ],
        "title": "Checkout",
        "description": "A checkout session."
      },
      "CheckoutCreate": {
        "properties": {
          "product_price_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Price Id",
            "description": "ID of the product price to subscribe to."
          },
          "success_url": {
            "type": "string",
            "minLength": 1,
            "format": "uri",
            "title": "Success Url",
            "description": "URL where the customer will be redirected after a successful subscription. You can add the `session_id={CHECKOUT_SESSION_ID}` query parameter to retrieve the checkout session id."
          },
          "customer_email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Email",
            "description": "If you already know the email of your customer, you can set it. It'll be pre-filled on the checkout page."
          },
          "subscription_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subscription Id",
            "description": "ID of the subscription to update. If not provided, a new subscription will be created."
          }
        },
        "type": "object",
        "required": [
          "product_price_id",
          "success_url"
        ],
        "title": "CheckoutCreate"
      },
      "ConfirmIssue": {
        "properties": {
          "splits": {
            "items": {
              "$ref": "#/components/schemas/ConfirmIssueSplit"
            },
            "type": "array",
            "title": "Splits"
          }
        },
        "type": "object",
        "required": [
          "splits"
        ],
        "title": "ConfirmIssue"
      },
      "ConfirmIssueSplit": {
        "properties": {
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id"
          },
          "github_username": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Github Username"
          },
          "share_thousands": {
            "type": "integer",
            "title": "Share Thousands"
          }
        },
        "type": "object",
        "required": [
          "share_thousands"
        ],
        "title": "ConfirmIssueSplit"
      },
      "CurrencyAmount": {
        "properties": {
          "currency": {
            "type": "string",
            "title": "Currency",
            "description": "Three letter currency code (eg: USD)"
          },
          "amount": {
            "type": "integer",
            "title": "Amount",
            "description": "Amount in the currencies smallest unit (cents if currency is USD)"
          }
        },
        "type": "object",
        "required": [
          "currency",
          "amount"
        ],
        "title": "CurrencyAmount"
      },
      "Donation": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "amount": {
            "type": "integer",
            "title": "Amount"
          },
          "currency": {
            "type": "string",
            "title": "Currency"
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message"
          },
          "donor": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DonationOrganization"
              },
              {
                "$ref": "#/components/schemas/DonationUser"
              },
              {
                "type": "null"
              }
            ],
            "title": "Donor"
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "issue": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Issue"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "amount",
          "currency",
          "message",
          "donor",
          "email",
          "issue"
        ],
        "title": "Donation"
      },
      "DonationCreateStripePaymentIntent": {
        "properties": {
          "to_organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "To Organization Id"
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email",
            "description": "The donators email address. Receipts will be sent to this address."
          },
          "amount": {
            "type": "integer",
            "maximum": 99999999,
            "exclusiveMinimum": 0,
            "title": "Amount",
            "description": "The amount in cents."
          },
          "currency": {
            "type": "string",
            "pattern": "usd",
            "title": "Currency",
            "description": "The currency. Currently, only `usd` is supported.",
            "default": "usd"
          },
          "setup_future_usage": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "on_session"
                ],
                "const": "on_session"
              },
              {
                "type": "null"
              }
            ],
            "title": "Setup Future Usage",
            "description": "If the payment method should be saved for future usage."
          },
          "on_behalf_of_organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "On Behalf Of Organization Id",
            "description": "The organization to give credit to. The pledge will be paid by the authenticated user."
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message",
            "description": "Message included with the donation"
          },
          "issue_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Issue Id"
          }
        },
        "type": "object",
        "required": [
          "to_organization_id",
          "email",
          "amount"
        ],
        "title": "DonationCreateStripePaymentIntent"
      },
      "DonationOrganization": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "platform": {
            "$ref": "#/components/schemas/Platforms"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "avatar_url": {
            "type": "string",
            "title": "Avatar Url"
          },
          "is_personal": {
            "type": "boolean",
            "title": "Is Personal"
          }
        },
        "type": "object",
        "required": [
          "id",
          "platform",
          "name",
          "avatar_url",
          "is_personal"
        ],
        "title": "DonationOrganization"
      },
      "DonationSortProperty": {
        "type": "string",
        "enum": [
          "amount",
          "-amount",
          "created_at",
          "-created_at"
        ],
        "title": "DonationSortProperty"
      },
      "DonationStatistics": {
        "properties": {
          "periods": {
            "items": {
              "$ref": "#/components/schemas/DonationStatisticsPeriod"
            },
            "type": "array",
            "title": "Periods"
          }
        },
        "type": "object",
        "required": [
          "periods"
        ],
        "title": "DonationStatistics"
      },
      "DonationStatisticsPeriod": {
        "properties": {
          "start_date": {
            "type": "string",
            "format": "date",
            "title": "Start Date"
          },
          "end_date": {
            "type": "string",
            "format": "date",
            "title": "End Date"
          },
          "sum": {
            "type": "integer",
            "title": "Sum"
          }
        },
        "type": "object",
        "required": [
          "start_date",
          "end_date",
          "sum"
        ],
        "title": "DonationStatisticsPeriod"
      },
      "DonationStripePaymentIntentMutationResponse": {
        "properties": {
          "payment_intent_id": {
            "type": "string",
            "title": "Payment Intent Id"
          },
          "amount": {
            "type": "integer",
            "title": "Amount"
          },
          "currency": {
            "type": "string",
            "title": "Currency"
          },
          "client_secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Secret"
          }
        },
        "type": "object",
        "required": [
          "payment_intent_id",
          "amount",
          "currency",
          "client_secret"
        ],
        "title": "DonationStripePaymentIntentMutationResponse"
      },
      "DonationUpdateStripePaymentIntent": {
        "properties": {
          "email": {
            "type": "string",
            "title": "Email",
            "description": "The donators email address. Receipts will be sent to this address."
          },
          "amount": {
            "type": "integer",
            "maximum": 99999999,
            "exclusiveMinimum": 0,
            "title": "Amount",
            "description": "The amount in cents."
          },
          "currency": {
            "type": "string",
            "pattern": "usd",
            "title": "Currency",
            "description": "The currency. Currently, only `usd` is supported.",
            "default": "usd"
          },
          "setup_future_usage": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "on_session"
                ],
                "const": "on_session"
              },
              {
                "type": "null"
              }
            ],
            "title": "Setup Future Usage",
            "description": "If the payment method should be saved for future usage."
          },
          "on_behalf_of_organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "On Behalf Of Organization Id",
            "description": "The organization to give credit to. The pledge will be paid by the authenticated user."
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message",
            "description": "Message included with the donation"
          },
          "issue_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Issue Id"
          }
        },
        "type": "object",
        "required": [
          "email",
          "amount"
        ],
        "title": "DonationUpdateStripePaymentIntent"
      },
      "DonationUser": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "public_name": {
            "type": "string",
            "title": "Public Name"
          },
          "avatar_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avatar Url"
          }
        },
        "type": "object",
        "required": [
          "id",
          "public_name",
          "avatar_url"
        ],
        "title": "DonationUser"
      },
      "DownloadableFileCreate": {
        "properties": {
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "mime_type": {
            "type": "string",
            "title": "Mime Type"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "checksum_sha256_base64": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Base64"
          },
          "upload": {
            "$ref": "#/components/schemas/S3FileCreateMultipart"
          },
          "service": {
            "type": "string",
            "enum": [
              "downloadable"
            ],
            "const": "downloadable",
            "title": "Service"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version"
          }
        },
        "type": "object",
        "required": [
          "name",
          "mime_type",
          "size",
          "upload",
          "service"
        ],
        "title": "DownloadableFileCreate",
        "description": "Schema to create a file to be associated with the downloadables benefit."
      },
      "DownloadableFileRead": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "path": {
            "type": "string",
            "title": "Path"
          },
          "mime_type": {
            "type": "string",
            "title": "Mime Type"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "storage_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Storage Version"
          },
          "checksum_etag": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Etag"
          },
          "checksum_sha256_base64": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Base64"
          },
          "checksum_sha256_hex": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Hex"
          },
          "last_modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Modified At"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version"
          },
          "service": {
            "type": "string",
            "enum": [
              "downloadable"
            ],
            "const": "downloadable",
            "title": "Service"
          },
          "is_uploaded": {
            "type": "boolean",
            "title": "Is Uploaded"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "size_readable": {
            "type": "string",
            "title": "Size Readable",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "id",
          "organization_id",
          "name",
          "path",
          "mime_type",
          "size",
          "storage_version",
          "checksum_etag",
          "checksum_sha256_base64",
          "checksum_sha256_hex",
          "last_modified_at",
          "version",
          "service",
          "is_uploaded",
          "created_at",
          "size_readable"
        ],
        "title": "DownloadableFileRead",
        "description": "File to be associated with the downloadables benefit."
      },
      "DownloadableRead": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "benefit_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Benefit Id"
          },
          "file": {
            "$ref": "#/components/schemas/FileDownload"
          }
        },
        "type": "object",
        "required": [
          "id",
          "benefit_id",
          "file"
        ],
        "title": "DownloadableRead"
      },
      "ExistingProductPrice": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          }
        },
        "type": "object",
        "required": [
          "id"
        ],
        "title": "ExistingProductPrice",
        "description": "A price that already exists for this product.\n\nUseful when updating a product if you want to keep an existing price."
      },
      "ExternalOrganization": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "platform": {
            "$ref": "#/components/schemas/Platforms"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "avatar_url": {
            "type": "string",
            "title": "Avatar Url"
          },
          "is_personal": {
            "type": "boolean",
            "title": "Is Personal"
          },
          "bio": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Bio"
          },
          "pretty_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Pretty Name"
          },
          "company": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Company"
          },
          "blog": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Blog"
          },
          "location": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Location"
          },
          "email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email"
          },
          "twitter_username": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Twitter Username"
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id"
          }
        },
        "type": "object",
        "required": [
          "id",
          "platform",
          "name",
          "avatar_url",
          "is_personal",
          "bio",
          "pretty_name",
          "company",
          "blog",
          "location",
          "email",
          "twitter_username",
          "organization_id"
        ],
        "title": "ExternalOrganization"
      },
      "ExternalOrganizationSortProperty": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "name",
          "-name"
        ],
        "title": "ExternalOrganizationSortProperty"
      },
      "FileDownload": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "path": {
            "type": "string",
            "title": "Path"
          },
          "mime_type": {
            "type": "string",
            "title": "Mime Type"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "storage_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Storage Version"
          },
          "checksum_etag": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Etag"
          },
          "checksum_sha256_base64": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Base64"
          },
          "checksum_sha256_hex": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Hex"
          },
          "last_modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Modified At"
          },
          "download": {
            "$ref": "#/components/schemas/S3DownloadURL"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version"
          },
          "is_uploaded": {
            "type": "boolean",
            "title": "Is Uploaded"
          },
          "service": {
            "$ref": "#/components/schemas/FileServiceTypes"
          },
          "size_readable": {
            "type": "string",
            "title": "Size Readable",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "id",
          "organization_id",
          "name",
          "path",
          "mime_type",
          "size",
          "storage_version",
          "checksum_etag",
          "checksum_sha256_base64",
          "checksum_sha256_hex",
          "last_modified_at",
          "download",
          "version",
          "is_uploaded",
          "service",
          "size_readable"
        ],
        "title": "FileDownload"
      },
      "FileNotFound": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "FileNotFound"
            ],
            "const": "FileNotFound",
            "title": "Type"
          },
          "detail": {
            "type": "string",
            "title": "Detail"
          }
        },
        "type": "object",
        "required": [
          "type",
          "detail"
        ],
        "title": "FileNotFound"
      },
      "FilePatch": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version"
          }
        },
        "type": "object",
        "title": "FilePatch"
      },
      "FileServiceTypes": {
        "type": "string",
        "enum": [
          "downloadable",
          "product_media",
          "organization_avatar"
        ],
        "title": "FileServiceTypes"
      },
      "FileUpload": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "path": {
            "type": "string",
            "title": "Path"
          },
          "mime_type": {
            "type": "string",
            "title": "Mime Type"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "storage_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Storage Version"
          },
          "checksum_etag": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Etag"
          },
          "checksum_sha256_base64": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Base64"
          },
          "checksum_sha256_hex": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Hex"
          },
          "last_modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Modified At"
          },
          "upload": {
            "$ref": "#/components/schemas/S3FileUploadMultipart"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version"
          },
          "is_uploaded": {
            "type": "boolean",
            "title": "Is Uploaded",
            "default": false
          },
          "service": {
            "$ref": "#/components/schemas/FileServiceTypes"
          },
          "size_readable": {
            "type": "string",
            "title": "Size Readable",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "id",
          "organization_id",
          "name",
          "path",
          "mime_type",
          "size",
          "storage_version",
          "checksum_etag",
          "checksum_sha256_base64",
          "checksum_sha256_hex",
          "last_modified_at",
          "upload",
          "version",
          "service",
          "size_readable"
        ],
        "title": "FileUpload"
      },
      "FileUploadCompleted": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "path": {
            "type": "string",
            "title": "Path"
          },
          "parts": {
            "items": {
              "$ref": "#/components/schemas/S3FileUploadCompletedPart"
            },
            "type": "array",
            "title": "Parts"
          }
        },
        "type": "object",
        "required": [
          "id",
          "path",
          "parts"
        ],
        "title": "FileUploadCompleted"
      },
      "Funding": {
        "properties": {
          "funding_goal": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              },
              {
                "type": "null"
              }
            ]
          },
          "pledges_sum": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              },
              {
                "type": "null"
              }
            ],
            "description": "Sum of pledges to this isuse (including currently open pledges and pledges that have been paid out). Always in USD."
          }
        },
        "type": "object",
        "title": "Funding"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "Interval": {
        "type": "string",
        "enum": [
          "year",
          "month",
          "week",
          "day",
          "hour"
        ],
        "title": "Interval"
      },
      "IntrospectTokenResponse": {
        "properties": {
          "active": {
            "type": "boolean",
            "title": "Active"
          },
          "client_id": {
            "type": "string",
            "title": "Client Id"
          },
          "token_type": {
            "type": "string",
            "enum": [
              "access_token",
              "refresh_token"
            ],
            "title": "Token Type"
          },
          "scope": {
            "type": "string",
            "title": "Scope"
          },
          "sub_type": {
            "$ref": "#/components/schemas/SubType"
          },
          "sub": {
            "type": "string",
            "title": "Sub"
          },
          "aud": {
            "type": "string",
            "title": "Aud"
          },
          "iss": {
            "type": "string",
            "title": "Iss"
          },
          "exp": {
            "type": "integer",
            "title": "Exp"
          },
          "iat": {
            "type": "integer",
            "title": "Iat"
          }
        },
        "type": "object",
        "required": [
          "active",
          "client_id",
          "token_type",
          "scope",
          "sub_type",
          "sub",
          "aud",
          "iss",
          "exp",
          "iat"
        ],
        "title": "IntrospectTokenResponse"
      },
      "Issue": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "platform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Platforms"
              }
            ],
            "description": "Issue platform (currently always GitHub)"
          },
          "number": {
            "type": "integer",
            "title": "Number",
            "description": "GitHub #number"
          },
          "title": {
            "type": "string",
            "title": "Title",
            "description": "GitHub issue title"
          },
          "body": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Body",
            "description": "GitHub issue body"
          },
          "comments": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Comments",
            "description": "Number of GitHub comments made on the issue"
          },
          "labels": {
            "items": {
              "$ref": "#/components/schemas/Label"
            },
            "type": "array",
            "title": "Labels",
            "default": []
          },
          "author": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Author"
              },
              {
                "type": "null"
              }
            ],
            "description": "GitHub author"
          },
          "assignees": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/Assignee"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Assignees",
            "description": "GitHub assignees"
          },
          "reactions": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Reactions"
              },
              {
                "type": "null"
              }
            ],
            "description": "GitHub reactions"
          },
          "state": {
            "$ref": "#/components/schemas/State"
          },
          "issue_closed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Issue Closed At"
          },
          "issue_modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Issue Modified At"
          },
          "issue_created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Issue Created At"
          },
          "needs_confirmation_solved": {
            "type": "boolean",
            "title": "Needs Confirmation Solved",
            "description": "If a maintainer needs to mark this issue as solved"
          },
          "confirmed_solved_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Confirmed Solved At",
            "description": "If this issue has been marked as confirmed solved through Polar"
          },
          "funding": {
            "$ref": "#/components/schemas/Funding"
          },
          "repository": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Repository-Input"
              }
            ],
            "description": "The repository that the issue is in"
          },
          "upfront_split_to_contributors": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Upfront Split To Contributors",
            "description": "Share of rewrads that will be rewarded to contributors of this issue. A number between 0 and 100 (inclusive)."
          },
          "pledge_badge_currently_embedded": {
            "type": "boolean",
            "title": "Pledge Badge Currently Embedded",
            "description": "If this issue currently has the Polar badge SVG embedded"
          },
          "badge_custom_content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Badge Custom Content",
            "description": "Optional custom badge SVG promotional content"
          }
        },
        "type": "object",
        "required": [
          "id",
          "platform",
          "number",
          "title",
          "state",
          "issue_created_at",
          "needs_confirmation_solved",
          "funding",
          "repository",
          "pledge_badge_currently_embedded"
        ],
        "title": "Issue"
      },
      "IssueFunding": {
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/Issue"
          },
          "funding_goal": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              },
              {
                "type": "null"
              }
            ]
          },
          "total": {
            "$ref": "#/components/schemas/CurrencyAmount"
          },
          "pledges_summaries": {
            "$ref": "#/components/schemas/PledgesTypeSummaries"
          }
        },
        "type": "object",
        "required": [
          "issue",
          "funding_goal",
          "total",
          "pledges_summaries"
        ],
        "title": "IssueFunding"
      },
      "IssueSortProperty": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "modified_at",
          "-modified_at",
          "engagement",
          "-engagement",
          "positive_reactions",
          "-positive_reactions",
          "funding_goal",
          "-funding_goal"
        ],
        "title": "IssueSortProperty"
      },
      "Label": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "color": {
            "type": "string",
            "title": "Color"
          }
        },
        "type": "object",
        "required": [
          "name",
          "color"
        ],
        "title": "Label"
      },
      "LicenseKeyActivate": {
        "properties": {
          "key": {
            "type": "string",
            "title": "Key"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id"
          },
          "label": {
            "type": "string",
            "title": "Label"
          },
          "conditions": {
            "type": "object",
            "title": "Conditions",
            "default": {}
          },
          "meta": {
            "type": "object",
            "title": "Meta",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "key",
          "organization_id",
          "label"
        ],
        "title": "LicenseKeyActivate"
      },
      "LicenseKeyActivationBase": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "license_key_id": {
            "type": "string",
            "format": "uuid4",
            "title": "License Key Id"
          },
          "label": {
            "type": "string",
            "title": "Label"
          },
          "meta": {
            "type": "object",
            "title": "Meta"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "license_key_id",
          "label",
          "meta",
          "created_at",
          "modified_at"
        ],
        "title": "LicenseKeyActivationBase"
      },
      "LicenseKeyActivationRead": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "license_key_id": {
            "type": "string",
            "format": "uuid4",
            "title": "License Key Id"
          },
          "label": {
            "type": "string",
            "title": "Label"
          },
          "meta": {
            "type": "object",
            "title": "Meta"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At"
          },
          "license_key": {
            "$ref": "#/components/schemas/LicenseKeyRead"
          }
        },
        "type": "object",
        "required": [
          "id",
          "license_key_id",
          "label",
          "meta",
          "created_at",
          "modified_at",
          "license_key"
        ],
        "title": "LicenseKeyActivationRead"
      },
      "LicenseKeyDeactivate": {
        "properties": {
          "key": {
            "type": "string",
            "title": "Key"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id"
          },
          "activation_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Activation Id"
          }
        },
        "type": "object",
        "required": [
          "key",
          "organization_id",
          "activation_id"
        ],
        "title": "LicenseKeyDeactivate"
      },
      "LicenseKeyRead": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id"
          },
          "user_id": {
            "type": "string",
            "format": "uuid4",
            "title": "User Id"
          },
          "benefit_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Benefit Id",
            "description": "The benefit ID.",
            "x-polar-selector-widget": {
              "displayProperty": "description",
              "resourceName": "Benefit",
              "resourceRoot": "/v1/benefits"
            }
          },
          "key": {
            "type": "string",
            "title": "Key"
          },
          "display_key": {
            "type": "string",
            "title": "Display Key"
          },
          "status": {
            "$ref": "#/components/schemas/LicenseKeyStatus"
          },
          "limit_activations": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit Activations"
          },
          "usage": {
            "type": "integer",
            "title": "Usage"
          },
          "limit_usage": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit Usage"
          },
          "validations": {
            "type": "integer",
            "title": "Validations"
          },
          "last_validated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Validated At"
          },
          "expires_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expires At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "organization_id",
          "user_id",
          "benefit_id",
          "key",
          "display_key",
          "status",
          "limit_activations",
          "usage",
          "limit_usage",
          "validations",
          "last_validated_at",
          "expires_at"
        ],
        "title": "LicenseKeyRead"
      },
      "LicenseKeyStatus": {
        "type": "string",
        "enum": [
          "granted",
          "revoked",
          "disabled"
        ],
        "title": "LicenseKeyStatus"
      },
      "LicenseKeyUpdate": {
        "properties": {
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LicenseKeyStatus"
              },
              {
                "type": "null"
              }
            ]
          },
          "usage": {
            "type": "integer",
            "title": "Usage",
            "default": 0
          },
          "limit_activations": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 50,
                "exclusiveMinimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit Activations"
          },
          "limit_usage": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMinimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit Usage"
          },
          "expires_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expires At"
          }
        },
        "type": "object",
        "title": "LicenseKeyUpdate"
      },
      "LicenseKeyValidate": {
        "properties": {
          "key": {
            "type": "string",
            "title": "Key"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id"
          },
          "activation_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Activation Id"
          },
          "benefit_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The benefit ID.",
                "x-polar-selector-widget": {
                  "displayProperty": "description",
                  "resourceName": "Benefit",
                  "resourceRoot": "/v1/benefits"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Benefit Id"
          },
          "user_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "increment_usage": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Increment Usage"
          },
          "conditions": {
            "type": "object",
            "title": "Conditions",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "key",
          "organization_id"
        ],
        "title": "LicenseKeyValidate"
      },
      "LicenseKeyWithActivations": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id"
          },
          "user_id": {
            "type": "string",
            "format": "uuid4",
            "title": "User Id"
          },
          "benefit_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Benefit Id",
            "description": "The benefit ID.",
            "x-polar-selector-widget": {
              "displayProperty": "description",
              "resourceName": "Benefit",
              "resourceRoot": "/v1/benefits"
            }
          },
          "key": {
            "type": "string",
            "title": "Key"
          },
          "display_key": {
            "type": "string",
            "title": "Display Key"
          },
          "status": {
            "$ref": "#/components/schemas/LicenseKeyStatus"
          },
          "limit_activations": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit Activations"
          },
          "usage": {
            "type": "integer",
            "title": "Usage"
          },
          "limit_usage": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit Usage"
          },
          "validations": {
            "type": "integer",
            "title": "Validations"
          },
          "last_validated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Validated At"
          },
          "expires_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expires At"
          },
          "activations": {
            "items": {
              "$ref": "#/components/schemas/LicenseKeyActivationBase"
            },
            "type": "array",
            "title": "Activations"
          }
        },
        "type": "object",
        "required": [
          "id",
          "organization_id",
          "user_id",
          "benefit_id",
          "key",
          "display_key",
          "status",
          "limit_activations",
          "usage",
          "limit_usage",
          "validations",
          "last_validated_at",
          "expires_at",
          "activations"
        ],
        "title": "LicenseKeyWithActivations"
      },
      "ListFundingSortBy": {
        "type": "string",
        "enum": [
          "oldest",
          "newest",
          "most_funded",
          "most_recently_funded",
          "most_engagement"
        ],
        "title": "ListFundingSortBy"
      },
      "ListResource_Account_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Account"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[Account]"
      },
      "ListResource_Article_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Article"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[Article]"
      },
      "ListResource_BenefitGrant_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/BenefitGrant"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[BenefitGrant]"
      },
      "ListResource_Benefit_": {
        "properties": {
          "items": {
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Benefit"
                }
              ],
              "title": "Benefit"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[Benefit]"
      },
      "ListResource_Donation_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Donation"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[Donation]"
      },
      "ListResource_DownloadableRead_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/DownloadableRead"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[DownloadableRead]"
      },
      "ListResource_ExternalOrganization_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ExternalOrganization"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[ExternalOrganization]"
      },
      "ListResource_FileRead_": {
        "properties": {
          "items": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/DownloadableFileRead"
                },
                {
                  "$ref": "#/components/schemas/ProductMediaFileRead"
                },
                {
                  "$ref": "#/components/schemas/OrganizationAvatarFileRead"
                }
              ],
              "title": "FileRead",
              "discriminator": {
                "propertyName": "service",
                "mapping": {
                  "downloadable": "#/components/schemas/DownloadableFileRead",
                  "organization_avatar": "#/components/schemas/OrganizationAvatarFileRead",
                  "product_media": "#/components/schemas/ProductMediaFileRead"
                }
              }
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[FileRead]"
      },
      "ListResource_IssueFunding_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/IssueFunding"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[IssueFunding]"
      },
      "ListResource_Issue_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Issue"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[Issue]"
      },
      "ListResource_LicenseKeyRead_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/LicenseKeyRead"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[LicenseKeyRead]"
      },
      "ListResource_OAuth2Client_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/OAuth2Client"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[OAuth2Client]"
      },
      "ListResource_Order_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Order"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[Order]"
      },
      "ListResource_Organization_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Organization"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[Organization]"
      },
      "ListResource_Pledge_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Pledge"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[Pledge]"
      },
      "ListResource_Product_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Product"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[Product]"
      },
      "ListResource_PublicDonation_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/PublicDonation"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[PublicDonation]"
      },
      "ListResource_PullRequest_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/PullRequest"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[PullRequest]"
      },
      "ListResource_Repository_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Repository-Output"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[Repository]"
      },
      "ListResource_Reward_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Reward"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[Reward]"
      },
      "ListResource_Subscription_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Subscription"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[Subscription]"
      },
      "ListResource_Transaction_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Transaction"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[Transaction]"
      },
      "ListResource_UserAdvertisementCampaign_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/UserAdvertisementCampaign"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[UserAdvertisementCampaign]"
      },
      "ListResource_UserBenefit_": {
        "properties": {
          "items": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/BenefitArticlesSubscriber"
                },
                {
                  "$ref": "#/components/schemas/BenefitAdsSubscriber"
                },
                {
                  "$ref": "#/components/schemas/BenefitDiscordSubscriber"
                },
                {
                  "$ref": "#/components/schemas/BenefitCustomSubscriber"
                },
                {
                  "$ref": "#/components/schemas/BenefitGitHubRepositorySubscriber"
                },
                {
                  "$ref": "#/components/schemas/BenefitDownloadablesSubscriber"
                },
                {
                  "$ref": "#/components/schemas/BenefitLicenseKeysSubscriber"
                }
              ],
              "title": "UserBenefit",
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "ads": "#/components/schemas/BenefitAdsSubscriber",
                  "articles": "#/components/schemas/BenefitArticlesSubscriber",
                  "custom": "#/components/schemas/BenefitCustomSubscriber",
                  "discord": "#/components/schemas/BenefitDiscordSubscriber",
                  "downloadables": "#/components/schemas/BenefitDownloadablesSubscriber",
                  "github_repository": "#/components/schemas/BenefitGitHubRepositorySubscriber",
                  "license_keys": "#/components/schemas/BenefitLicenseKeysSubscriber"
                }
              }
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[UserBenefit]"
      },
      "ListResource_UserOrder_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/UserOrder"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[UserOrder]"
      },
      "ListResource_UserSubscription_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/UserSubscription"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[UserSubscription]"
      },
      "ListResource_WebhookDelivery_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/WebhookDelivery"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[WebhookDelivery]"
      },
      "ListResource_WebhookEndpoint_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/WebhookEndpoint"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[WebhookEndpoint]"
      },
      "Metric": {
        "properties": {
          "slug": {
            "type": "string",
            "title": "Slug",
            "description": "Unique identifier for the metric."
          },
          "display_name": {
            "type": "string",
            "title": "Display Name",
            "description": "Human-readable name for the metric."
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetricType"
              }
            ],
            "description": "Type of the metric, useful to know the unit or format of the value."
          }
        },
        "type": "object",
        "required": [
          "slug",
          "display_name",
          "type"
        ],
        "title": "Metric",
        "description": "Information about a metric."
      },
      "MetricPeriod": {
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp",
            "description": "Timestamp of this period data."
          },
          "orders": {
            "type": "integer",
            "title": "Orders"
          },
          "revenue": {
            "type": "integer",
            "title": "Revenue"
          },
          "average_order_value": {
            "type": "integer",
            "title": "Average Order Value"
          },
          "one_time_products": {
            "type": "integer",
            "title": "One Time Products"
          },
          "one_time_products_revenue": {
            "type": "integer",
            "title": "One Time Products Revenue"
          },
          "new_subscriptions": {
            "type": "integer",
            "title": "New Subscriptions"
          },
          "new_subscriptions_revenue": {
            "type": "integer",
            "title": "New Subscriptions Revenue"
          },
          "renewed_subscriptions": {
            "type": "integer",
            "title": "Renewed Subscriptions"
          },
          "renewed_subscriptions_revenue": {
            "type": "integer",
            "title": "Renewed Subscriptions Revenue"
          },
          "active_subscriptions": {
            "type": "integer",
            "title": "Active Subscriptions"
          },
          "monthly_recurring_revenue": {
            "type": "integer",
            "title": "Monthly Recurring Revenue"
          }
        },
        "type": "object",
        "required": [
          "timestamp",
          "orders",
          "revenue",
          "average_order_value",
          "one_time_products",
          "one_time_products_revenue",
          "new_subscriptions",
          "new_subscriptions_revenue",
          "renewed_subscriptions",
          "renewed_subscriptions_revenue",
          "active_subscriptions",
          "monthly_recurring_revenue"
        ],
        "title": "MetricPeriod"
      },
      "MetricType": {
        "type": "string",
        "enum": [
          "scalar",
          "currency"
        ],
        "title": "MetricType"
      },
      "Metrics": {
        "properties": {
          "orders": {
            "$ref": "#/components/schemas/Metric"
          },
          "revenue": {
            "$ref": "#/components/schemas/Metric"
          },
          "average_order_value": {
            "$ref": "#/components/schemas/Metric"
          },
          "one_time_products": {
            "$ref": "#/components/schemas/Metric"
          },
          "one_time_products_revenue": {
            "$ref": "#/components/schemas/Metric"
          },
          "new_subscriptions": {
            "$ref": "#/components/schemas/Metric"
          },
          "new_subscriptions_revenue": {
            "$ref": "#/components/schemas/Metric"
          },
          "renewed_subscriptions": {
            "$ref": "#/components/schemas/Metric"
          },
          "renewed_subscriptions_revenue": {
            "$ref": "#/components/schemas/Metric"
          },
          "active_subscriptions": {
            "$ref": "#/components/schemas/Metric"
          },
          "monthly_recurring_revenue": {
            "$ref": "#/components/schemas/Metric"
          }
        },
        "type": "object",
        "required": [
          "orders",
          "revenue",
          "average_order_value",
          "one_time_products",
          "one_time_products_revenue",
          "new_subscriptions",
          "new_subscriptions_revenue",
          "renewed_subscriptions",
          "renewed_subscriptions_revenue",
          "active_subscriptions",
          "monthly_recurring_revenue"
        ],
        "title": "Metrics"
      },
      "MetricsIntervalLimit": {
        "properties": {
          "max_days": {
            "type": "integer",
            "title": "Max Days",
            "description": "Maximum number of days for this interval."
          }
        },
        "type": "object",
        "required": [
          "max_days"
        ],
        "title": "MetricsIntervalLimit",
        "description": "Date interval limit to get metrics for a given interval."
      },
      "MetricsIntervalsLimits": {
        "properties": {
          "hour": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetricsIntervalLimit"
              }
            ],
            "description": "Limits for the hour interval."
          },
          "day": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetricsIntervalLimit"
              }
            ],
            "description": "Limits for the day interval."
          },
          "week": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetricsIntervalLimit"
              }
            ],
            "description": "Limits for the week interval."
          },
          "month": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetricsIntervalLimit"
              }
            ],
            "description": "Limits for the month interval."
          },
          "year": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetricsIntervalLimit"
              }
            ],
            "description": "Limits for the year interval."
          }
        },
        "type": "object",
        "required": [
          "hour",
          "day",
          "week",
          "month",
          "year"
        ],
        "title": "MetricsIntervalsLimits",
        "description": "Date interval limits to get metrics for each interval."
      },
      "MetricsLimits": {
        "properties": {
          "min_date": {
            "type": "string",
            "format": "date",
            "title": "Min Date",
            "description": "Minimum date to get metrics."
          },
          "intervals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetricsIntervalsLimits"
              }
            ],
            "description": "Limits for each interval."
          }
        },
        "type": "object",
        "required": [
          "min_date",
          "intervals"
        ],
        "title": "MetricsLimits",
        "description": "Date limits to get metrics."
      },
      "MetricsResponse": {
        "properties": {
          "periods": {
            "items": {
              "$ref": "#/components/schemas/MetricPeriod"
            },
            "type": "array",
            "title": "Periods",
            "description": "List of data for each timestamp."
          },
          "metrics": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Metrics"
              }
            ],
            "description": "Information about the returned metrics."
          }
        },
        "type": "object",
        "required": [
          "periods",
          "metrics"
        ],
        "title": "MetricsResponse",
        "description": "Metrics response schema."
      },
      "NotPermitted": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "NotPermitted"
            ],
            "const": "NotPermitted",
            "title": "Type"
          },
          "detail": {
            "type": "string",
            "title": "Detail"
          }
        },
        "type": "object",
        "required": [
          "type",
          "detail"
        ],
        "title": "NotPermitted"
      },
      "OAuth2Client": {
        "properties": {
          "redirect_uris": {
            "items": {
              "type": "string",
              "maxLength": 2083,
              "minLength": 1,
              "format": "uri"
            },
            "type": "array",
            "title": "Redirect Uris"
          },
          "token_endpoint_auth_method": {
            "type": "string",
            "enum": [
              "client_secret_basic",
              "client_secret_post",
              "none"
            ],
            "title": "Token Endpoint Auth Method",
            "default": "client_secret_post"
          },
          "grant_types": {
            "items": {
              "type": "string",
              "enum": [
                "authorization_code",
                "refresh_token"
              ]
            },
            "type": "array",
            "title": "Grant Types",
            "default": [
              "authorization_code",
              "refresh_token"
            ]
          },
          "response_types": {
            "items": {
              "type": "string",
              "enum": [
                "code"
              ],
              "const": "code"
            },
            "type": "array",
            "title": "Response Types",
            "default": [
              "code"
            ]
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "default": "openid profile email user:read organizations:read organizations:write products:read products:write benefits:read benefits:write files:read files:write subscriptions:read subscriptions:write orders:read metrics:read articles:read articles:write webhooks:read webhooks:write external_organizations:read license_keys:read license_keys:write repositories:read repositories:write issues:read issues:write user:benefits:read user:orders:read user:subscriptions:read user:subscriptions:write user:downloadables:read user:license_keys:read user:advertisement_campaigns:read user:advertisement_campaigns:write"
          },
          "client_name": {
            "type": "string",
            "title": "Client Name"
          },
          "client_uri": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Uri"
          },
          "logo_uri": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Logo Uri"
          },
          "tos_uri": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tos Uri"
          },
          "policy_uri": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Policy Uri"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "client_id": {
            "type": "string",
            "title": "Client Id"
          },
          "client_secret": {
            "type": "string",
            "title": "Client Secret"
          },
          "client_id_issued_at": {
            "type": "integer",
            "title": "Client Id Issued At"
          },
          "client_secret_expires_at": {
            "type": "integer",
            "title": "Client Secret Expires At"
          }
        },
        "type": "object",
        "required": [
          "redirect_uris",
          "client_name",
          "created_at",
          "modified_at",
          "client_id",
          "client_secret",
          "client_id_issued_at",
          "client_secret_expires_at"
        ],
        "title": "OAuth2Client"
      },
      "OAuth2ClientConfiguration": {
        "properties": {
          "redirect_uris": {
            "items": {
              "type": "string",
              "maxLength": 2083,
              "minLength": 1,
              "format": "uri"
            },
            "type": "array",
            "title": "Redirect Uris"
          },
          "token_endpoint_auth_method": {
            "type": "string",
            "enum": [
              "client_secret_basic",
              "client_secret_post",
              "none"
            ],
            "title": "Token Endpoint Auth Method",
            "default": "client_secret_post"
          },
          "grant_types": {
            "items": {
              "type": "string",
              "enum": [
                "authorization_code",
                "refresh_token"
              ]
            },
            "type": "array",
            "title": "Grant Types",
            "default": [
              "authorization_code",
              "refresh_token"
            ]
          },
          "response_types": {
            "items": {
              "type": "string",
              "enum": [
                "code"
              ],
              "const": "code"
            },
            "type": "array",
            "title": "Response Types",
            "default": [
              "code"
            ]
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "default": "openid profile email user:read organizations:read organizations:write products:read products:write benefits:read benefits:write files:read files:write subscriptions:read subscriptions:write orders:read metrics:read articles:read articles:write webhooks:read webhooks:write external_organizations:read license_keys:read license_keys:write repositories:read repositories:write issues:read issues:write user:benefits:read user:orders:read user:subscriptions:read user:subscriptions:write user:downloadables:read user:license_keys:read user:advertisement_campaigns:read user:advertisement_campaigns:write"
          },
          "client_name": {
            "type": "string",
            "title": "Client Name"
          },
          "client_uri": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Uri"
          },
          "logo_uri": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Logo Uri"
          },
          "tos_uri": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tos Uri"
          },
          "policy_uri": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Policy Uri"
          }
        },
        "type": "object",
        "required": [
          "redirect_uris",
          "client_name"
        ],
        "title": "OAuth2ClientConfiguration"
      },
      "OAuth2ClientConfigurationUpdate": {
        "properties": {
          "redirect_uris": {
            "items": {
              "type": "string",
              "maxLength": 2083,
              "minLength": 1,
              "format": "uri"
            },
            "type": "array",
            "title": "Redirect Uris"
          },
          "token_endpoint_auth_method": {
            "type": "string",
            "enum": [
              "client_secret_basic",
              "client_secret_post",
              "none"
            ],
            "title": "Token Endpoint Auth Method",
            "default": "client_secret_post"
          },
          "grant_types": {
            "items": {
              "type": "string",
              "enum": [
                "authorization_code",
                "refresh_token"
              ]
            },
            "type": "array",
            "title": "Grant Types",
            "default": [
              "authorization_code",
              "refresh_token"
            ]
          },
          "response_types": {
            "items": {
              "type": "string",
              "enum": [
                "code"
              ],
              "const": "code"
            },
            "type": "array",
            "title": "Response Types",
            "default": [
              "code"
            ]
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "default": "openid profile email user:read organizations:read organizations:write products:read products:write benefits:read benefits:write files:read files:write subscriptions:read subscriptions:write orders:read metrics:read articles:read articles:write webhooks:read webhooks:write external_organizations:read license_keys:read license_keys:write repositories:read repositories:write issues:read issues:write user:benefits:read user:orders:read user:subscriptions:read user:subscriptions:write user:downloadables:read user:license_keys:read user:advertisement_campaigns:read user:advertisement_campaigns:write"
          },
          "client_name": {
            "type": "string",
            "title": "Client Name"
          },
          "client_uri": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Uri"
          },
          "logo_uri": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Logo Uri"
          },
          "tos_uri": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tos Uri"
          },
          "policy_uri": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Policy Uri"
          },
          "client_id": {
            "type": "string",
            "title": "Client Id"
          }
        },
        "type": "object",
        "required": [
          "redirect_uris",
          "client_name",
          "client_id"
        ],
        "title": "OAuth2ClientConfigurationUpdate"
      },
      "OAuth2ClientPublic": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "client_id": {
            "type": "string",
            "title": "Client Id"
          },
          "client_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Name"
          },
          "client_uri": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Uri"
          },
          "logo_uri": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Logo Uri"
          },
          "tos_uri": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tos Uri"
          },
          "policy_uri": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Policy Uri"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "client_id",
          "client_name",
          "client_uri",
          "logo_uri",
          "tos_uri",
          "policy_uri"
        ],
        "title": "OAuth2ClientPublic"
      },
      "Order": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "amount": {
            "type": "integer",
            "title": "Amount"
          },
          "tax_amount": {
            "type": "integer",
            "title": "Tax Amount"
          },
          "currency": {
            "type": "string",
            "title": "Currency"
          },
          "user_id": {
            "type": "string",
            "format": "uuid4",
            "title": "User Id"
          },
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id"
          },
          "product_price_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Price Id"
          },
          "subscription_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subscription Id"
          },
          "user": {
            "$ref": "#/components/schemas/OrderUser"
          },
          "product": {
            "$ref": "#/components/schemas/OrderProduct"
          },
          "product_price": {
            "$ref": "#/components/schemas/ProductPrice"
          },
          "subscription": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OrderSubscription"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "amount",
          "tax_amount",
          "currency",
          "user_id",
          "product_id",
          "product_price_id",
          "subscription_id",
          "user",
          "product",
          "product_price",
          "subscription"
        ],
        "title": "Order"
      },
      "OrderInvoice": {
        "properties": {
          "url": {
            "type": "string",
            "title": "Url",
            "description": "The URL to the invoice."
          }
        },
        "type": "object",
        "required": [
          "url"
        ],
        "title": "OrderInvoice",
        "description": "Order's invoice data."
      },
      "OrderProduct": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the product."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the product."
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the product."
          },
          "is_recurring": {
            "type": "boolean",
            "title": "Is Recurring",
            "description": "Whether the product is a subscription tier."
          },
          "is_archived": {
            "type": "boolean",
            "title": "Is Archived",
            "description": "Whether the product is archived and no longer available."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the product."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "name",
          "description",
          "is_recurring",
          "is_archived",
          "organization_id"
        ],
        "title": "OrderProduct"
      },
      "OrderSortProperty": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "amount",
          "-amount",
          "user",
          "-user",
          "product",
          "-product",
          "subscription",
          "-subscription"
        ],
        "title": "OrderSortProperty"
      },
      "OrderSubscription": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Amount"
          },
          "currency": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Currency"
          },
          "recurring_interval": {
            "$ref": "#/components/schemas/SubscriptionRecurringInterval"
          },
          "status": {
            "$ref": "#/components/schemas/SubscriptionStatus"
          },
          "current_period_start": {
            "type": "string",
            "format": "date-time",
            "title": "Current Period Start"
          },
          "current_period_end": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Current Period End"
          },
          "cancel_at_period_end": {
            "type": "boolean",
            "title": "Cancel At Period End"
          },
          "started_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Started At"
          },
          "ended_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ended At"
          },
          "user_id": {
            "type": "string",
            "format": "uuid4",
            "title": "User Id"
          },
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id"
          },
          "price_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Price Id"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "amount",
          "currency",
          "recurring_interval",
          "status",
          "current_period_start",
          "current_period_end",
          "cancel_at_period_end",
          "started_at",
          "ended_at",
          "user_id",
          "product_id",
          "price_id"
        ],
        "title": "OrderSubscription"
      },
      "OrderUser": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "public_name": {
            "type": "string",
            "title": "Public Name"
          },
          "github_username": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Github Username"
          },
          "avatar_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avatar Url"
          }
        },
        "type": "object",
        "required": [
          "id",
          "email",
          "public_name",
          "github_username",
          "avatar_url"
        ],
        "title": "OrderUser"
      },
      "Organization": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The organization ID.",
            "x-polar-selector-widget": {
              "displayProperty": "name",
              "resourceName": "Organization",
              "resourceRoot": "/v1/organizations"
            }
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "slug": {
            "type": "string",
            "title": "Slug"
          },
          "avatar_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avatar Url"
          },
          "bio": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Bio"
          },
          "company": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Company"
          },
          "blog": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Blog"
          },
          "location": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Location"
          },
          "email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email"
          },
          "twitter_username": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Twitter Username"
          },
          "pledge_minimum_amount": {
            "type": "integer",
            "title": "Pledge Minimum Amount"
          },
          "pledge_badge_show_amount": {
            "type": "boolean",
            "title": "Pledge Badge Show Amount"
          },
          "default_upfront_split_to_contributors": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Default Upfront Split To Contributors"
          },
          "donations_enabled": {
            "type": "boolean",
            "title": "Donations Enabled",
            "description": "If this organizations accepts donations"
          },
          "profile_settings": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OrganizationProfileSettings"
              },
              {
                "type": "null"
              }
            ],
            "description": "Settings for the organization profile"
          },
          "feature_settings": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OrganizationFeatureSettings"
              },
              {
                "type": "null"
              }
            ],
            "description": "Settings for the organization features"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "name",
          "slug",
          "avatar_url",
          "bio",
          "company",
          "blog",
          "location",
          "email",
          "twitter_username",
          "pledge_minimum_amount",
          "pledge_badge_show_amount",
          "default_upfront_split_to_contributors",
          "donations_enabled",
          "profile_settings",
          "feature_settings"
        ],
        "title": "Organization"
      },
      "OrganizationAvatarFileCreate": {
        "properties": {
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "mime_type": {
            "type": "string",
            "pattern": "^image\\/(jpeg|png|gif|webp|svg\\+xml)$",
            "title": "Mime Type",
            "description": "MIME type of the file. Only images are supported for this type of file."
          },
          "size": {
            "type": "integer",
            "maximum": 1048576,
            "title": "Size",
            "description": "Size of the file. A maximum of 1 MB is allowed for this type of file."
          },
          "checksum_sha256_base64": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Base64"
          },
          "upload": {
            "$ref": "#/components/schemas/S3FileCreateMultipart"
          },
          "service": {
            "type": "string",
            "enum": [
              "organization_avatar"
            ],
            "const": "organization_avatar",
            "title": "Service"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version"
          }
        },
        "type": "object",
        "required": [
          "name",
          "mime_type",
          "size",
          "upload",
          "service"
        ],
        "title": "OrganizationAvatarFileCreate",
        "description": "Schema to create a file to be used as an organization avatar."
      },
      "OrganizationAvatarFileRead": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "path": {
            "type": "string",
            "title": "Path"
          },
          "mime_type": {
            "type": "string",
            "title": "Mime Type"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "storage_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Storage Version"
          },
          "checksum_etag": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Etag"
          },
          "checksum_sha256_base64": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Base64"
          },
          "checksum_sha256_hex": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Hex"
          },
          "last_modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Modified At"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version"
          },
          "service": {
            "type": "string",
            "enum": [
              "organization_avatar"
            ],
            "const": "organization_avatar",
            "title": "Service"
          },
          "is_uploaded": {
            "type": "boolean",
            "title": "Is Uploaded"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "size_readable": {
            "type": "string",
            "title": "Size Readable",
            "readOnly": true
          },
          "public_url": {
            "type": "string",
            "title": "Public Url",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "id",
          "organization_id",
          "name",
          "path",
          "mime_type",
          "size",
          "storage_version",
          "checksum_etag",
          "checksum_sha256_base64",
          "checksum_sha256_hex",
          "last_modified_at",
          "version",
          "service",
          "is_uploaded",
          "created_at",
          "size_readable",
          "public_url"
        ],
        "title": "OrganizationAvatarFileRead",
        "description": "File to be used as an organization avatar."
      },
      "OrganizationCreate": {
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "title": "Name"
          },
          "slug": {
            "type": "string",
            "minLength": 3,
            "title": "Slug"
          },
          "avatar_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avatar Url"
          },
          "donations_enabled": {
            "type": "boolean",
            "title": "Donations Enabled",
            "default": false
          },
          "feature_settings": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OrganizationFeatureSettings"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "name",
          "slug"
        ],
        "title": "OrganizationCreate"
      },
      "OrganizationFeatureSettings": {
        "properties": {
          "articles_enabled": {
            "type": "boolean",
            "title": "Articles Enabled",
            "description": "If this organization has articles enabled",
            "default": false
          },
          "issue_funding_enabled": {
            "type": "boolean",
            "title": "Issue Funding Enabled",
            "description": "If this organization has issue funding enabled",
            "default": false
          }
        },
        "type": "object",
        "title": "OrganizationFeatureSettings"
      },
      "OrganizationProfileSettings": {
        "properties": {
          "enabled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Enabled",
            "description": "If this organization has a profile enabled"
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 160
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "A description of the organization"
          },
          "featured_projects": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "format": "uuid4"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Featured Projects",
            "description": "A list of featured projects"
          },
          "featured_organizations": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "format": "uuid4"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Featured Organizations",
            "description": "A list of featured organizations"
          },
          "links": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "maxLength": 2083,
                  "minLength": 1,
                  "format": "uri"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Links",
            "description": "A list of links associated with the organization"
          },
          "subscribe": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OrganizationSubscribePromoteSettings"
              },
              {
                "type": "null"
              }
            ],
            "description": "Subscription promotion settings",
            "default": {
              "promote": true,
              "show_count": true,
              "count_free": true
            }
          },
          "accent_color": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Accent Color",
            "description": "Accent color for the organization"
          }
        },
        "type": "object",
        "title": "OrganizationProfileSettings"
      },
      "OrganizationSortProperty": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "name",
          "-name"
        ],
        "title": "OrganizationSortProperty"
      },
      "OrganizationSubscribePromoteSettings": {
        "properties": {
          "promote": {
            "type": "boolean",
            "title": "Promote",
            "description": "Promote email subscription (free)",
            "default": true
          },
          "show_count": {
            "type": "boolean",
            "title": "Show Count",
            "description": "Show subscription count publicly",
            "default": true
          },
          "count_free": {
            "type": "boolean",
            "title": "Count Free",
            "description": "Include free subscribers in total count",
            "default": true
          }
        },
        "type": "object",
        "title": "OrganizationSubscribePromoteSettings"
      },
      "OrganizationUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 3
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "avatar_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avatar Url"
          },
          "default_upfront_split_to_contributors": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 100,
                "minimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Default Upfront Split To Contributors"
          },
          "pledge_badge_show_amount": {
            "type": "boolean",
            "title": "Pledge Badge Show Amount",
            "default": false
          },
          "billing_email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Billing Email"
          },
          "default_badge_custom_content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Default Badge Custom Content"
          },
          "pledge_minimum_amount": {
            "type": "integer",
            "title": "Pledge Minimum Amount",
            "default": 2000
          },
          "total_monthly_spending_limit": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Monthly Spending Limit"
          },
          "per_user_monthly_spending_limit": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Per User Monthly Spending Limit"
          },
          "donations_enabled": {
            "type": "boolean",
            "title": "Donations Enabled",
            "default": false
          },
          "profile_settings": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OrganizationProfileSettings"
              },
              {
                "type": "null"
              }
            ]
          },
          "feature_settings": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OrganizationFeatureSettings"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "title": "OrganizationUpdate"
      },
      "Pagination": {
        "properties": {
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          },
          "max_page": {
            "type": "integer",
            "title": "Max Page"
          }
        },
        "type": "object",
        "required": [
          "total_count",
          "max_page"
        ],
        "title": "Pagination"
      },
      "PaymentProcessor": {
        "type": "string",
        "enum": [
          "stripe",
          "open_collective"
        ],
        "title": "PaymentProcessor",
        "description": "Supported payment processors."
      },
      "PayoutCreate": {
        "properties": {
          "account_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Account Id"
          }
        },
        "type": "object",
        "required": [
          "account_id"
        ],
        "title": "PayoutCreate"
      },
      "PayoutEstimate": {
        "properties": {
          "account_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Account Id"
          },
          "gross_amount": {
            "type": "integer",
            "title": "Gross Amount"
          },
          "fees_amount": {
            "type": "integer",
            "title": "Fees Amount"
          },
          "net_amount": {
            "type": "integer",
            "title": "Net Amount"
          }
        },
        "type": "object",
        "required": [
          "account_id",
          "gross_amount",
          "fees_amount",
          "net_amount"
        ],
        "title": "PayoutEstimate"
      },
      "PlatformFeeType": {
        "type": "string",
        "enum": [
          "payment",
          "international_payment",
          "subscription",
          "invoice",
          "cross_border_transfer",
          "payout",
          "account",
          "platform"
        ],
        "title": "PlatformFeeType",
        "description": "Type of fees applied by Polar, and billed to the users."
      },
      "Platforms": {
        "type": "string",
        "enum": [
          "github"
        ],
        "const": "github",
        "title": "Platforms"
      },
      "Pledge": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "amount": {
            "type": "integer",
            "title": "Amount",
            "description": "Amount pledged towards the issue"
          },
          "currency": {
            "type": "string",
            "title": "Currency"
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PledgeState"
              }
            ],
            "description": "Current state of the pledge"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PledgeType"
              }
            ],
            "description": "Type of pledge"
          },
          "refunded_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Refunded At",
            "description": "If and when the pledge was refunded to the pledger"
          },
          "scheduled_payout_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Scheduled Payout At",
            "description": "When the payout is scheduled to be made to the maintainers behind the issue. Disputes must be made before this date."
          },
          "issue": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Issue"
              }
            ],
            "description": "The issue that the pledge was made towards"
          },
          "pledger": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Pledger"
              },
              {
                "type": "null"
              }
            ],
            "description": "The user or organization that made this pledge"
          },
          "hosted_invoice_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Hosted Invoice Url",
            "description": "URL of invoice for this pledge"
          },
          "authed_can_admin_sender": {
            "type": "boolean",
            "title": "Authed Can Admin Sender",
            "description": "If the currently authenticated subject can perform admin actions on behalf of the maker of the peldge",
            "default": false
          },
          "authed_can_admin_received": {
            "type": "boolean",
            "title": "Authed Can Admin Received",
            "description": "If the currently authenticated subject can perform admin actions on behalf of the receiver of the peldge",
            "default": false
          },
          "created_by": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Pledger"
              },
              {
                "type": "null"
              }
            ],
            "description": "For pledges made by an organization, or on behalf of an organization. This is the user that made the pledge. Only visible for members of said organization."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "amount",
          "currency",
          "state",
          "type",
          "issue"
        ],
        "title": "Pledge"
      },
      "PledgePledgesSummary": {
        "properties": {
          "funding": {
            "$ref": "#/components/schemas/Funding"
          },
          "pledges": {
            "items": {
              "$ref": "#/components/schemas/SummaryPledge"
            },
            "type": "array",
            "title": "Pledges"
          }
        },
        "type": "object",
        "required": [
          "funding",
          "pledges"
        ],
        "title": "PledgePledgesSummary"
      },
      "PledgeSpending": {
        "properties": {
          "amount": {
            "type": "integer",
            "title": "Amount"
          },
          "currency": {
            "type": "string",
            "title": "Currency"
          }
        },
        "type": "object",
        "required": [
          "amount",
          "currency"
        ],
        "title": "PledgeSpending"
      },
      "PledgeState": {
        "type": "string",
        "enum": [
          "initiated",
          "created",
          "pending",
          "refunded",
          "disputed",
          "charge_disputed",
          "cancelled"
        ],
        "title": "PledgeState"
      },
      "PledgeType": {
        "type": "string",
        "enum": [
          "pay_upfront",
          "pay_on_completion",
          "pay_directly"
        ],
        "title": "PledgeType"
      },
      "Pledger": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "github_username": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Github Username"
          },
          "avatar_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avatar Url"
          }
        },
        "type": "object",
        "required": [
          "name",
          "github_username",
          "avatar_url"
        ],
        "title": "Pledger"
      },
      "PledgesSummary": {
        "properties": {
          "total": {
            "$ref": "#/components/schemas/CurrencyAmount"
          },
          "pledgers": {
            "items": {
              "$ref": "#/components/schemas/Pledger"
            },
            "type": "array",
            "title": "Pledgers"
          }
        },
        "type": "object",
        "required": [
          "total",
          "pledgers"
        ],
        "title": "PledgesSummary"
      },
      "PledgesTypeSummaries": {
        "properties": {
          "pay_upfront": {
            "$ref": "#/components/schemas/PledgesSummary"
          },
          "pay_on_completion": {
            "$ref": "#/components/schemas/PledgesSummary"
          },
          "pay_directly": {
            "$ref": "#/components/schemas/PledgesSummary"
          }
        },
        "type": "object",
        "required": [
          "pay_upfront",
          "pay_on_completion",
          "pay_directly"
        ],
        "title": "PledgesTypeSummaries"
      },
      "Product": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the product."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the product."
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the product."
          },
          "is_recurring": {
            "type": "boolean",
            "title": "Is Recurring",
            "description": "Whether the product is a subscription tier."
          },
          "is_archived": {
            "type": "boolean",
            "title": "Is Archived",
            "description": "Whether the product is archived and no longer available."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the product."
          },
          "prices": {
            "items": {
              "$ref": "#/components/schemas/ProductPrice"
            },
            "type": "array",
            "title": "Prices",
            "description": "List of available prices for this product."
          },
          "benefits": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/BenefitBase"
                },
                {
                  "$ref": "#/components/schemas/BenefitArticles"
                }
              ]
            },
            "type": "array",
            "title": "BenefitPublic",
            "description": "The benefits granted by the product."
          },
          "medias": {
            "items": {
              "$ref": "#/components/schemas/ProductMediaFileRead"
            },
            "type": "array",
            "title": "Medias",
            "description": "The medias associated to the product."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "name",
          "description",
          "is_recurring",
          "is_archived",
          "organization_id",
          "prices",
          "benefits",
          "medias"
        ],
        "title": "Product",
        "description": "A product."
      },
      "ProductBenefitsUpdate": {
        "properties": {
          "benefits": {
            "items": {
              "type": "string",
              "format": "uuid4",
              "description": "The benefit ID.",
              "x-polar-selector-widget": {
                "displayProperty": "description",
                "resourceName": "Benefit",
                "resourceRoot": "/v1/benefits"
              }
            },
            "type": "array",
            "title": "Benefits",
            "description": "List of benefit IDs. Each one must be on the same organization as the product."
          }
        },
        "type": "object",
        "required": [
          "benefits"
        ],
        "title": "ProductBenefitsUpdate",
        "description": "Schema to update the benefits granted by a product."
      },
      "ProductMediaFileCreate": {
        "properties": {
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "mime_type": {
            "type": "string",
            "pattern": "^image\\/(jpeg|png|gif|webp|svg\\+xml)$",
            "title": "Mime Type",
            "description": "MIME type of the file. Only images are supported for this type of file."
          },
          "size": {
            "type": "integer",
            "maximum": 10485760,
            "title": "Size",
            "description": "Size of the file. A maximum of 10 MB is allowed for this type of file."
          },
          "checksum_sha256_base64": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Base64"
          },
          "upload": {
            "$ref": "#/components/schemas/S3FileCreateMultipart"
          },
          "service": {
            "type": "string",
            "enum": [
              "product_media"
            ],
            "const": "product_media",
            "title": "Service"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version"
          }
        },
        "type": "object",
        "required": [
          "name",
          "mime_type",
          "size",
          "upload",
          "service"
        ],
        "title": "ProductMediaFileCreate",
        "description": "Schema to create a file to be used as a product media file."
      },
      "ProductMediaFileRead": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "path": {
            "type": "string",
            "title": "Path"
          },
          "mime_type": {
            "type": "string",
            "title": "Mime Type"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "storage_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Storage Version"
          },
          "checksum_etag": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Etag"
          },
          "checksum_sha256_base64": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Base64"
          },
          "checksum_sha256_hex": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Hex"
          },
          "last_modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Modified At"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version"
          },
          "service": {
            "type": "string",
            "enum": [
              "product_media"
            ],
            "const": "product_media",
            "title": "Service"
          },
          "is_uploaded": {
            "type": "boolean",
            "title": "Is Uploaded"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "size_readable": {
            "type": "string",
            "title": "Size Readable",
            "readOnly": true
          },
          "public_url": {
            "type": "string",
            "title": "Public Url",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "id",
          "organization_id",
          "name",
          "path",
          "mime_type",
          "size",
          "storage_version",
          "checksum_etag",
          "checksum_sha256_base64",
          "checksum_sha256_hex",
          "last_modified_at",
          "version",
          "service",
          "is_uploaded",
          "created_at",
          "size_readable",
          "public_url"
        ],
        "title": "ProductMediaFileRead",
        "description": "File to be used as a product media file."
      },
      "ProductOneTimeCreate": {
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "title": "Name",
            "description": "The name of the product."
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the product."
          },
          "prices": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ProductPriceOneTimeFixedCreate"
                },
                {
                  "$ref": "#/components/schemas/ProductPriceOneTimeCustomCreate"
                },
                {
                  "$ref": "#/components/schemas/ProductPriceOneTimeFreeCreate"
                }
              ]
            },
            "type": "array",
            "maxItems": 1,
            "minItems": 1,
            "title": "One-time price",
            "description": "List of available prices for this product."
          },
          "medias": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "format": "uuid4"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Medias",
            "description": "List of file IDs. Each one must be on the same organization as the product, of type `product_media` and correctly uploaded."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the product. **Required unless you use an organization token.**"
          }
        },
        "type": "object",
        "required": [
          "name",
          "prices"
        ],
        "title": "ProductOneTimeCreate",
        "description": "Schema to create a one-time product."
      },
      "ProductPrice": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ProductPriceRecurring"
          },
          {
            "$ref": "#/components/schemas/ProductPriceOneTime"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "one_time": "#/components/schemas/ProductPriceOneTime",
            "recurring": "#/components/schemas/ProductPriceRecurring"
          }
        }
      },
      "ProductPriceOneTime": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ProductPriceOneTimeFixed"
          },
          {
            "$ref": "#/components/schemas/ProductPriceOneTimeCustom"
          },
          {
            "$ref": "#/components/schemas/ProductPriceOneTimeFree"
          }
        ],
        "discriminator": {
          "propertyName": "amount_type",
          "mapping": {
            "custom": "#/components/schemas/ProductPriceOneTimeCustom",
            "fixed": "#/components/schemas/ProductPriceOneTimeFixed",
            "free": "#/components/schemas/ProductPriceOneTimeFree"
          }
        }
      },
      "ProductPriceOneTimeCustom": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the price."
          },
          "amount_type": {
            "type": "string",
            "enum": [
              "custom"
            ],
            "const": "custom",
            "title": "Amount Type"
          },
          "is_archived": {
            "type": "boolean",
            "title": "Is Archived",
            "description": "Whether the price is archived and no longer available."
          },
          "price_currency": {
            "type": "string",
            "title": "Price Currency",
            "description": "The currency."
          },
          "minimum_amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Minimum Amount",
            "description": "The minimum amount the customer can pay."
          },
          "maximum_amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Maximum Amount",
            "description": "The maximum amount the customer can pay."
          },
          "preset_amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Preset Amount",
            "description": "The initial amount shown to the customer."
          },
          "type": {
            "type": "string",
            "enum": [
              "one_time"
            ],
            "const": "one_time",
            "title": "Type",
            "description": "The type of the price."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "amount_type",
          "is_archived",
          "price_currency",
          "minimum_amount",
          "maximum_amount",
          "preset_amount",
          "type"
        ],
        "title": "ProductPriceOneTimeCustom",
        "description": "A pay-what-you-want price for a one-time product."
      },
      "ProductPriceOneTimeCustomCreate": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "one_time"
            ],
            "const": "one_time",
            "title": "Type"
          },
          "amount_type": {
            "type": "string",
            "enum": [
              "custom"
            ],
            "const": "custom",
            "title": "Amount Type"
          },
          "price_currency": {
            "type": "string",
            "pattern": "usd",
            "title": "Price Currency",
            "description": "The currency. Currently, only `usd` is supported.",
            "default": "usd"
          },
          "minimum_amount": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 99999999,
                "minimum": 50,
                "description": "The price in cents."
              },
              {
                "type": "null"
              }
            ],
            "title": "Minimum Amount",
            "description": "The minimum amount the customer can pay."
          },
          "maximum_amount": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 99999999,
                "minimum": 50,
                "description": "The price in cents."
              },
              {
                "type": "null"
              }
            ],
            "title": "Maximum Amount",
            "description": "The maximum amount the customer can pay."
          },
          "preset_amount": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 99999999,
                "minimum": 50,
                "description": "The price in cents."
              },
              {
                "type": "null"
              }
            ],
            "title": "Preset Amount",
            "description": "The initial amount shown to the customer."
          }
        },
        "type": "object",
        "required": [
          "type",
          "amount_type"
        ],
        "title": "ProductPriceOneTimeCustomCreate",
        "description": "Schema to create a pay-what-you-want price for a one-time product."
      },
      "ProductPriceOneTimeFixed": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the price."
          },
          "amount_type": {
            "type": "string",
            "enum": [
              "fixed"
            ],
            "const": "fixed",
            "title": "Amount Type"
          },
          "is_archived": {
            "type": "boolean",
            "title": "Is Archived",
            "description": "Whether the price is archived and no longer available."
          },
          "price_currency": {
            "type": "string",
            "title": "Price Currency",
            "description": "The currency."
          },
          "price_amount": {
            "type": "integer",
            "title": "Price Amount",
            "description": "The price in cents."
          },
          "type": {
            "type": "string",
            "enum": [
              "one_time"
            ],
            "const": "one_time",
            "title": "Type",
            "description": "The type of the price."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "amount_type",
          "is_archived",
          "price_currency",
          "price_amount",
          "type"
        ],
        "title": "ProductPriceOneTimeFixed",
        "description": "A one-time price for a product."
      },
      "ProductPriceOneTimeFixedCreate": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "one_time"
            ],
            "const": "one_time",
            "title": "Type"
          },
          "amount_type": {
            "type": "string",
            "enum": [
              "fixed"
            ],
            "const": "fixed",
            "title": "Amount Type"
          },
          "price_amount": {
            "type": "integer",
            "maximum": 99999999,
            "minimum": 50,
            "title": "Price Amount",
            "description": "The price in cents."
          },
          "price_currency": {
            "type": "string",
            "pattern": "usd",
            "title": "Price Currency",
            "description": "The currency. Currently, only `usd` is supported.",
            "default": "usd"
          }
        },
        "type": "object",
        "required": [
          "type",
          "amount_type",
          "price_amount"
        ],
        "title": "ProductPriceOneTimeFixedCreate",
        "description": "Schema to create a one-time product price."
      },
      "ProductPriceOneTimeFree": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the price."
          },
          "amount_type": {
            "type": "string",
            "enum": [
              "free"
            ],
            "const": "free",
            "title": "Amount Type"
          },
          "is_archived": {
            "type": "boolean",
            "title": "Is Archived",
            "description": "Whether the price is archived and no longer available."
          },
          "type": {
            "type": "string",
            "enum": [
              "one_time"
            ],
            "const": "one_time",
            "title": "Type",
            "description": "The type of the price."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "amount_type",
          "is_archived",
          "type"
        ],
        "title": "ProductPriceOneTimeFree",
        "description": "A free one-time price for a product."
      },
      "ProductPriceOneTimeFreeCreate": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "one_time"
            ],
            "const": "one_time",
            "title": "Type"
          },
          "amount_type": {
            "type": "string",
            "enum": [
              "free"
            ],
            "const": "free",
            "title": "Amount Type"
          }
        },
        "type": "object",
        "required": [
          "type",
          "amount_type"
        ],
        "title": "ProductPriceOneTimeFreeCreate",
        "description": "Schema to create a free one-time product price."
      },
      "ProductPriceRecurring": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ProductPriceRecurringFixed"
          },
          {
            "$ref": "#/components/schemas/ProductPriceRecurringCustom"
          },
          {
            "$ref": "#/components/schemas/ProductPriceRecurringFree"
          }
        ],
        "discriminator": {
          "propertyName": "amount_type",
          "mapping": {
            "custom": "#/components/schemas/ProductPriceRecurringCustom",
            "fixed": "#/components/schemas/ProductPriceRecurringFixed",
            "free": "#/components/schemas/ProductPriceRecurringFree"
          }
        }
      },
      "ProductPriceRecurringCustom": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the price."
          },
          "amount_type": {
            "type": "string",
            "enum": [
              "custom"
            ],
            "const": "custom",
            "title": "Amount Type"
          },
          "is_archived": {
            "type": "boolean",
            "title": "Is Archived",
            "description": "Whether the price is archived and no longer available."
          },
          "price_currency": {
            "type": "string",
            "title": "Price Currency",
            "description": "The currency."
          },
          "minimum_amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Minimum Amount",
            "description": "The minimum amount the customer can pay."
          },
          "maximum_amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Maximum Amount",
            "description": "The maximum amount the customer can pay."
          },
          "preset_amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Preset Amount",
            "description": "The initial amount shown to the customer."
          },
          "type": {
            "type": "string",
            "enum": [
              "recurring"
            ],
            "const": "recurring",
            "title": "Type",
            "description": "The type of the price."
          },
          "recurring_interval": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SubscriptionRecurringInterval"
              }
            ],
            "description": "The recurring interval of the price."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "amount_type",
          "is_archived",
          "price_currency",
          "minimum_amount",
          "maximum_amount",
          "preset_amount",
          "type",
          "recurring_interval"
        ],
        "title": "ProductPriceRecurringCustom",
        "description": "A pay-what-you-want recurring price for a product, i.e. a subscription."
      },
      "ProductPriceRecurringFixed": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the price."
          },
          "amount_type": {
            "type": "string",
            "enum": [
              "fixed"
            ],
            "const": "fixed",
            "title": "Amount Type"
          },
          "is_archived": {
            "type": "boolean",
            "title": "Is Archived",
            "description": "Whether the price is archived and no longer available."
          },
          "price_currency": {
            "type": "string",
            "title": "Price Currency",
            "description": "The currency."
          },
          "price_amount": {
            "type": "integer",
            "title": "Price Amount",
            "description": "The price in cents."
          },
          "type": {
            "type": "string",
            "enum": [
              "recurring"
            ],
            "const": "recurring",
            "title": "Type",
            "description": "The type of the price."
          },
          "recurring_interval": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SubscriptionRecurringInterval"
              }
            ],
            "description": "The recurring interval of the price."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "amount_type",
          "is_archived",
          "price_currency",
          "price_amount",
          "type",
          "recurring_interval"
        ],
        "title": "ProductPriceRecurringFixed",
        "description": "A recurring price for a product, i.e. a subscription."
      },
      "ProductPriceRecurringFixedCreate": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "recurring"
            ],
            "const": "recurring",
            "title": "Type"
          },
          "amount_type": {
            "type": "string",
            "enum": [
              "fixed"
            ],
            "const": "fixed",
            "title": "Amount Type"
          },
          "price_amount": {
            "type": "integer",
            "maximum": 99999999,
            "minimum": 50,
            "title": "Price Amount",
            "description": "The price in cents."
          },
          "price_currency": {
            "type": "string",
            "pattern": "usd",
            "title": "Price Currency",
            "description": "The currency. Currently, only `usd` is supported.",
            "default": "usd"
          },
          "recurring_interval": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SubscriptionRecurringInterval"
              }
            ],
            "description": "The recurring interval of the price."
          }
        },
        "type": "object",
        "required": [
          "type",
          "amount_type",
          "price_amount",
          "recurring_interval"
        ],
        "title": "ProductPriceRecurringFixedCreate",
        "description": "Schema to create a recurring product price, i.e. a subscription."
      },
      "ProductPriceRecurringFree": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the price."
          },
          "amount_type": {
            "type": "string",
            "enum": [
              "free"
            ],
            "const": "free",
            "title": "Amount Type"
          },
          "is_archived": {
            "type": "boolean",
            "title": "Is Archived",
            "description": "Whether the price is archived and no longer available."
          },
          "type": {
            "type": "string",
            "enum": [
              "recurring"
            ],
            "const": "recurring",
            "title": "Type",
            "description": "The type of the price."
          },
          "recurring_interval": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SubscriptionRecurringInterval"
              }
            ],
            "description": "The recurring interval of the price."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "amount_type",
          "is_archived",
          "type",
          "recurring_interval"
        ],
        "title": "ProductPriceRecurringFree",
        "description": "A free recurring price for a product, i.e. a subscription."
      },
      "ProductPriceRecurringFreeCreate": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "recurring"
            ],
            "const": "recurring",
            "title": "Type"
          },
          "amount_type": {
            "type": "string",
            "enum": [
              "free"
            ],
            "const": "free",
            "title": "Amount Type"
          },
          "recurring_interval": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SubscriptionRecurringInterval"
              }
            ],
            "description": "The recurring interval of the price."
          }
        },
        "type": "object",
        "required": [
          "type",
          "amount_type",
          "recurring_interval"
        ],
        "title": "ProductPriceRecurringFreeCreate",
        "description": "Schema to create a free recurring product price, i.e. a subscription."
      },
      "ProductPriceType": {
        "type": "string",
        "enum": [
          "one_time",
          "recurring"
        ],
        "title": "ProductPriceType"
      },
      "ProductRecurringCreate": {
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "title": "Name",
            "description": "The name of the product."
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the product."
          },
          "prices": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ProductPriceRecurringFixedCreate"
                },
                "type": "array",
                "maxItems": 2,
                "minItems": 1,
                "title": "Recurring prices",
                "description": "List of recurring prices. Only one price per interval (one monthly and one yearly) is allowed."
              },
              {
                "items": {
                  "$ref": "#/components/schemas/ProductPriceRecurringFreeCreate"
                },
                "type": "array",
                "maxItems": 1,
                "minItems": 1,
                "title": "Free recurring price",
                "description": "List with a single free recurring price."
              }
            ],
            "title": "Prices",
            "description": "List of available prices for this product."
          },
          "medias": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "format": "uuid4"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Medias",
            "description": "List of file IDs. Each one must be on the same organization as the product, of type `product_media` and correctly uploaded."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the product. **Required unless you use an organization token.**"
          }
        },
        "type": "object",
        "required": [
          "name",
          "prices"
        ],
        "title": "ProductRecurringCreate",
        "description": "Schema to create a recurring product, i.e. a subscription."
      },
      "ProductUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 3,
                "description": "The name of the product."
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the product."
          },
          "is_archived": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Archived",
            "description": "Whether the product is archived. If `true`, the product won't be available for purchase anymore. Existing customers will still have access to their benefits, and subscriptions will continue normally."
          },
          "prices": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ExistingProductPrice"
                    },
                    {
                      "$ref": "#/components/schemas/ProductPriceRecurringFixedCreate"
                    },
                    {
                      "$ref": "#/components/schemas/ProductPriceRecurringFreeCreate"
                    },
                    {
                      "$ref": "#/components/schemas/ProductPriceOneTimeFixedCreate"
                    },
                    {
                      "$ref": "#/components/schemas/ProductPriceOneTimeCustomCreate"
                    },
                    {
                      "$ref": "#/components/schemas/ProductPriceOneTimeFreeCreate"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prices",
            "description": "List of available prices for this product. If you want to keep existing prices, include them in the list as an `ExistingProductPrice` object."
          },
          "medias": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "format": "uuid4"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Medias",
            "description": "List of file IDs. Each one must be on the same organization as the product, of type `product_media` and correctly uploaded."
          }
        },
        "type": "object",
        "title": "ProductUpdate",
        "description": "Schema to update a product."
      },
      "PublicDonation": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "amount": {
            "type": "integer",
            "title": "Amount"
          },
          "currency": {
            "type": "string",
            "title": "Currency"
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message"
          },
          "donor": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DonationOrganization"
              },
              {
                "$ref": "#/components/schemas/DonationUser"
              },
              {
                "type": "null"
              }
            ],
            "title": "Donor"
          }
        },
        "type": "object",
        "required": [
          "id",
          "amount",
          "currency",
          "message",
          "donor"
        ],
        "title": "PublicDonation"
      },
      "PullRequest": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "number": {
            "type": "integer",
            "title": "Number"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "author": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Author"
              },
              {
                "type": "null"
              }
            ]
          },
          "additions": {
            "type": "integer",
            "title": "Additions"
          },
          "deletions": {
            "type": "integer",
            "title": "Deletions"
          },
          "is_merged": {
            "type": "boolean",
            "title": "Is Merged"
          },
          "is_closed": {
            "type": "boolean",
            "title": "Is Closed"
          }
        },
        "type": "object",
        "required": [
          "id",
          "number",
          "title",
          "additions",
          "deletions",
          "is_merged",
          "is_closed"
        ],
        "title": "PullRequest"
      },
      "Reactions": {
        "properties": {
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          },
          "plus_one": {
            "type": "integer",
            "title": "Plus One"
          },
          "minus_one": {
            "type": "integer",
            "title": "Minus One"
          },
          "laugh": {
            "type": "integer",
            "title": "Laugh"
          },
          "hooray": {
            "type": "integer",
            "title": "Hooray"
          },
          "confused": {
            "type": "integer",
            "title": "Confused"
          },
          "heart": {
            "type": "integer",
            "title": "Heart"
          },
          "rocket": {
            "type": "integer",
            "title": "Rocket"
          },
          "eyes": {
            "type": "integer",
            "title": "Eyes"
          }
        },
        "type": "object",
        "required": [
          "total_count",
          "plus_one",
          "minus_one",
          "laugh",
          "hooray",
          "confused",
          "heart",
          "rocket",
          "eyes"
        ],
        "title": "Reactions"
      },
      "Repository-Input": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "platform": {
            "$ref": "#/components/schemas/Platforms"
          },
          "is_private": {
            "type": "boolean",
            "title": "Is Private"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "examples": [
              "MyOrg"
            ]
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "stars": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stars",
            "examples": [
              1337
            ]
          },
          "license": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "License"
          },
          "homepage": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Homepage"
          },
          "profile_settings": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RepositoryProfileSettings"
              },
              {
                "type": "null"
              }
            ],
            "description": "Settings for the repository profile"
          },
          "organization": {
            "$ref": "#/components/schemas/ExternalOrganization"
          }
        },
        "type": "object",
        "required": [
          "id",
          "platform",
          "is_private",
          "name",
          "description",
          "stars",
          "license",
          "homepage",
          "profile_settings",
          "organization"
        ],
        "title": "Repository"
      },
      "Repository-Output": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "platform": {
            "$ref": "#/components/schemas/Platforms"
          },
          "is_private": {
            "type": "boolean",
            "title": "Is Private"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "examples": [
              "MyOrg"
            ]
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "stars": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stars",
            "examples": [
              1337
            ]
          },
          "license": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "License"
          },
          "homepage": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Homepage"
          },
          "profile_settings": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RepositoryProfileSettings"
              },
              {
                "type": "null"
              }
            ],
            "description": "Settings for the repository profile"
          },
          "organization": {
            "$ref": "#/components/schemas/ExternalOrganization"
          }
        },
        "type": "object",
        "required": [
          "id",
          "platform",
          "is_private",
          "name",
          "description",
          "stars",
          "license",
          "homepage",
          "profile_settings",
          "organization"
        ],
        "title": "Repository"
      },
      "RepositoryProfileSettings": {
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 240
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "A description of the repository"
          },
          "cover_image_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cover Image Url",
            "description": "A URL to a cover image"
          },
          "featured_organizations": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "format": "uuid4"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Featured Organizations",
            "description": "A list of featured organizations"
          },
          "highlighted_subscription_tiers": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "format": "uuid4"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Highlighted Subscription Tiers",
            "description": "A list of highlighted subscription tiers"
          },
          "links": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "maxLength": 2083,
                  "minLength": 1,
                  "format": "uri"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Links",
            "description": "A list of links related to the repository"
          }
        },
        "type": "object",
        "title": "RepositoryProfileSettings"
      },
      "RepositoryProfileSettingsUpdate": {
        "properties": {
          "set_description": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Set Description"
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 240
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "set_cover_image_url": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Set Cover Image Url"
          },
          "cover_image_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cover Image Url"
          },
          "featured_organizations": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "format": "uuid4"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Featured Organizations"
          },
          "highlighted_subscription_tiers": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "format": "uuid4"
                },
                "type": "array",
                "maxItems": 3
              },
              {
                "type": "null"
              }
            ],
            "title": "Highlighted Subscription Tiers"
          },
          "links": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "maxLength": 2083,
                  "minLength": 1,
                  "format": "uri"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Links"
          }
        },
        "type": "object",
        "title": "RepositoryProfileSettingsUpdate"
      },
      "RepositorySortProperty": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "name",
          "-name",
          "stars",
          "-stars"
        ],
        "title": "RepositorySortProperty"
      },
      "RepositoryUpdate": {
        "properties": {
          "profile_settings": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RepositoryProfileSettingsUpdate"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "title": "RepositoryUpdate"
      },
      "ResourceNotFound": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ResourceNotFound"
            ],
            "const": "ResourceNotFound",
            "title": "Type"
          },
          "detail": {
            "type": "string",
            "title": "Detail"
          }
        },
        "type": "object",
        "required": [
          "type",
          "detail"
        ],
        "title": "ResourceNotFound"
      },
      "RevokeTokenResponse": {
        "properties": {},
        "type": "object",
        "title": "RevokeTokenResponse"
      },
      "Reward": {
        "properties": {
          "pledge": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Pledge"
              }
            ],
            "description": "The pledge that the reward was split from"
          },
          "user": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/User"
              },
              {
                "type": "null"
              }
            ],
            "description": "The user that received the reward (if any)"
          },
          "organization": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Organization"
              },
              {
                "type": "null"
              }
            ],
            "description": "The organization that received the reward (if any)"
          },
          "amount": {
            "$ref": "#/components/schemas/CurrencyAmount"
          },
          "state": {
            "$ref": "#/components/schemas/RewardState"
          },
          "paid_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Paid At",
            "description": "If and when the reward was paid out."
          }
        },
        "type": "object",
        "required": [
          "pledge",
          "amount",
          "state"
        ],
        "title": "Reward"
      },
      "RewardState": {
        "type": "string",
        "enum": [
          "pending",
          "paid"
        ],
        "title": "RewardState"
      },
      "RewardsSummary": {
        "properties": {
          "receivers": {
            "items": {
              "$ref": "#/components/schemas/RewardsSummaryReceiver"
            },
            "type": "array",
            "title": "Receivers"
          }
        },
        "type": "object",
        "required": [
          "receivers"
        ],
        "title": "RewardsSummary"
      },
      "RewardsSummaryReceiver": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "avatar_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avatar Url"
          }
        },
        "type": "object",
        "required": [
          "name",
          "avatar_url"
        ],
        "title": "RewardsSummaryReceiver"
      },
      "S3DownloadURL": {
        "properties": {
          "url": {
            "type": "string",
            "title": "Url"
          },
          "headers": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Headers",
            "default": {}
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "title": "Expires At"
          }
        },
        "type": "object",
        "required": [
          "url",
          "expires_at"
        ],
        "title": "S3DownloadURL"
      },
      "S3FileCreateMultipart": {
        "properties": {
          "parts": {
            "items": {
              "$ref": "#/components/schemas/S3FileCreatePart"
            },
            "type": "array",
            "title": "Parts"
          }
        },
        "type": "object",
        "required": [
          "parts"
        ],
        "title": "S3FileCreateMultipart"
      },
      "S3FileCreatePart": {
        "properties": {
          "number": {
            "type": "integer",
            "title": "Number"
          },
          "chunk_start": {
            "type": "integer",
            "title": "Chunk Start"
          },
          "chunk_end": {
            "type": "integer",
            "title": "Chunk End"
          },
          "checksum_sha256_base64": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Base64"
          }
        },
        "type": "object",
        "required": [
          "number",
          "chunk_start",
          "chunk_end"
        ],
        "title": "S3FileCreatePart"
      },
      "S3FileUploadCompletedPart": {
        "properties": {
          "number": {
            "type": "integer",
            "title": "Number"
          },
          "checksum_etag": {
            "type": "string",
            "title": "Checksum Etag"
          },
          "checksum_sha256_base64": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Base64"
          }
        },
        "type": "object",
        "required": [
          "number",
          "checksum_etag",
          "checksum_sha256_base64"
        ],
        "title": "S3FileUploadCompletedPart"
      },
      "S3FileUploadMultipart": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "path": {
            "type": "string",
            "title": "Path"
          },
          "parts": {
            "items": {
              "$ref": "#/components/schemas/S3FileUploadPart"
            },
            "type": "array",
            "title": "Parts"
          }
        },
        "type": "object",
        "required": [
          "id",
          "path",
          "parts"
        ],
        "title": "S3FileUploadMultipart"
      },
      "S3FileUploadPart": {
        "properties": {
          "number": {
            "type": "integer",
            "title": "Number"
          },
          "chunk_start": {
            "type": "integer",
            "title": "Chunk Start"
          },
          "chunk_end": {
            "type": "integer",
            "title": "Chunk End"
          },
          "checksum_sha256_base64": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Base64"
          },
          "url": {
            "type": "string",
            "title": "Url"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "title": "Expires At"
          },
          "headers": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Headers",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "number",
          "chunk_start",
          "chunk_end",
          "url",
          "expires_at"
        ],
        "title": "S3FileUploadPart"
      },
      "Scope": {
        "type": "string",
        "enum": [
          "openid",
          "profile",
          "email",
          "user:read",
          "admin",
          "web_default",
          "organizations:read",
          "organizations:write",
          "products:read",
          "products:write",
          "benefits:read",
          "benefits:write",
          "files:read",
          "files:write",
          "subscriptions:read",
          "subscriptions:write",
          "orders:read",
          "metrics:read",
          "articles:read",
          "articles:write",
          "webhooks:read",
          "webhooks:write",
          "external_organizations:read",
          "license_keys:read",
          "license_keys:write",
          "repositories:read",
          "repositories:write",
          "issues:read",
          "issues:write",
          "user:benefits:read",
          "user:orders:read",
          "user:subscriptions:read",
          "user:subscriptions:write",
          "user:downloadables:read",
          "user:license_keys:read",
          "user:advertisement_campaigns:read",
          "user:advertisement_campaigns:write"
        ],
        "title": "Scope",
        "enumNames": {
          "articles:read": "Read posts",
          "articles:write": "Create or modify posts",
          "benefits:read": "Read benefits",
          "benefits:write": "Create or modify benefits",
          "email": "Read your email address",
          "files:read": "Read file uploads",
          "files:write": "Create or modify file uploads",
          "license_keys:read": "Read license keys",
          "license_keys:write": "Modify license keys",
          "metrics:read": "Read metrics",
          "openid": "OpenID",
          "orders:read": "Read orders made on your organizations",
          "organizations:read": "Read your organizations",
          "organizations:write": "Create or modify organizations",
          "products:read": "Read products",
          "products:write": "Create or modify products",
          "profile": "Read your profile",
          "subscriptions:read": "Read subscriptions made on your organizations",
          "subscriptions:write": "Create or modify subscriptions made on your organizations",
          "user:advertisement_campaigns:read": "Read your advertisement campaigns",
          "user:advertisement_campaigns:write": "Create or modify your advertisement campaigns",
          "user:benefits:read": "Read your granted benefits",
          "user:downloadables:read": "Read your downloadable files",
          "user:license_keys:read": "Read license keys you have access to",
          "user:orders:read": "Read your orders",
          "user:read": "User Read",
          "user:subscriptions:read": "Read your subscriptions",
          "user:subscriptions:write": "Create or modify your subscriptions",
          "web_default": "Web Default",
          "webhooks:read": "Read webhooks",
          "webhooks:write": "Create or modify webhooks"
        }
      },
      "State": {
        "type": "string",
        "enum": [
          "open",
          "closed"
        ],
        "title": "State"
      },
      "Status": {
        "type": "string",
        "enum": [
          "created",
          "onboarding_started",
          "under_review",
          "active"
        ],
        "title": "Status"
      },
      "SubType": {
        "type": "string",
        "enum": [
          "user",
          "organization"
        ],
        "title": "SubType"
      },
      "Subscription": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Amount"
          },
          "currency": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Currency"
          },
          "recurring_interval": {
            "$ref": "#/components/schemas/SubscriptionRecurringInterval"
          },
          "status": {
            "$ref": "#/components/schemas/SubscriptionStatus"
          },
          "current_period_start": {
            "type": "string",
            "format": "date-time",
            "title": "Current Period Start"
          },
          "current_period_end": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Current Period End"
          },
          "cancel_at_period_end": {
            "type": "boolean",
            "title": "Cancel At Period End"
          },
          "started_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Started At"
          },
          "ended_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ended At"
          },
          "user_id": {
            "type": "string",
            "format": "uuid4",
            "title": "User Id"
          },
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id"
          },
          "price_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Price Id"
          },
          "user": {
            "$ref": "#/components/schemas/SubscriptionUser"
          },
          "product": {
            "$ref": "#/components/schemas/Product"
          },
          "price": {
            "$ref": "#/components/schemas/ProductPriceRecurring"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "amount",
          "currency",
          "recurring_interval",
          "status",
          "current_period_start",
          "current_period_end",
          "cancel_at_period_end",
          "started_at",
          "ended_at",
          "user_id",
          "product_id",
          "price_id",
          "user",
          "product",
          "price"
        ],
        "title": "Subscription"
      },
      "SubscriptionRecurringInterval": {
        "type": "string",
        "enum": [
          "month",
          "year"
        ],
        "title": "SubscriptionRecurringInterval"
      },
      "SubscriptionSortProperty": {
        "type": "string",
        "enum": [
          "user",
          "-user",
          "status",
          "-status",
          "started_at",
          "-started_at",
          "current_period_end",
          "-current_period_end",
          "amount",
          "-amount",
          "product",
          "-product"
        ],
        "title": "SubscriptionSortProperty"
      },
      "SubscriptionStatus": {
        "type": "string",
        "enum": [
          "incomplete",
          "incomplete_expired",
          "trialing",
          "active",
          "past_due",
          "canceled",
          "unpaid"
        ],
        "title": "SubscriptionStatus"
      },
      "SubscriptionUser": {
        "properties": {
          "email": {
            "type": "string",
            "title": "Email"
          },
          "public_name": {
            "type": "string",
            "title": "Public Name"
          },
          "github_username": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Github Username"
          },
          "avatar_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avatar Url"
          }
        },
        "type": "object",
        "required": [
          "email",
          "public_name",
          "github_username",
          "avatar_url"
        ],
        "title": "SubscriptionUser"
      },
      "SummaryPledge": {
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PledgeType"
              }
            ],
            "description": "Type of pledge"
          },
          "pledger": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Pledger"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "type",
          "pledger"
        ],
        "title": "SummaryPledge"
      },
      "TokenResponse": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token"
          },
          "token_type": {
            "type": "string",
            "enum": [
              "Bearer"
            ],
            "const": "Bearer",
            "title": "Token Type"
          },
          "expires_in": {
            "type": "integer",
            "title": "Expires In"
          },
          "refresh_token": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Refresh Token"
          },
          "scope": {
            "type": "string",
            "title": "Scope"
          },
          "id_token": {
            "type": "string",
            "title": "Id Token"
          }
        },
        "type": "object",
        "required": [
          "access_token",
          "token_type",
          "expires_in",
          "refresh_token",
          "scope",
          "id_token"
        ],
        "title": "TokenResponse"
      },
      "Transaction": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "type": {
            "$ref": "#/components/schemas/TransactionType"
          },
          "processor": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaymentProcessor"
              },
              {
                "type": "null"
              }
            ]
          },
          "currency": {
            "type": "string",
            "title": "Currency"
          },
          "amount": {
            "type": "integer",
            "title": "Amount"
          },
          "account_currency": {
            "type": "string",
            "title": "Account Currency"
          },
          "account_amount": {
            "type": "integer",
            "title": "Account Amount"
          },
          "platform_fee_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PlatformFeeType"
              },
              {
                "type": "null"
              }
            ]
          },
          "pledge_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Pledge Id"
          },
          "issue_reward_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Issue Reward Id"
          },
          "order_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id"
          },
          "donation_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Donation Id"
          },
          "payout_transaction_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Payout Transaction Id"
          },
          "incurred_by_transaction_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Incurred By Transaction Id"
          },
          "pledge": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TransactionPledge"
              },
              {
                "type": "null"
              }
            ]
          },
          "issue_reward": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TransactionIssueReward"
              },
              {
                "type": "null"
              }
            ]
          },
          "order": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TransactionOrder"
              },
              {
                "type": "null"
              }
            ]
          },
          "donation": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TransactionDonation"
              },
              {
                "type": "null"
              }
            ]
          },
          "account_incurred_transactions": {
            "items": {
              "$ref": "#/components/schemas/TransactionEmbedded"
            },
            "type": "array",
            "title": "Account Incurred Transactions"
          },
          "incurred_amount": {
            "type": "integer",
            "title": "Incurred Amount"
          },
          "gross_amount": {
            "type": "integer",
            "title": "Gross Amount"
          },
          "net_amount": {
            "type": "integer",
            "title": "Net Amount"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "type",
          "processor",
          "currency",
          "amount",
          "account_currency",
          "account_amount",
          "platform_fee_type",
          "pledge_id",
          "issue_reward_id",
          "order_id",
          "donation_id",
          "payout_transaction_id",
          "incurred_by_transaction_id",
          "pledge",
          "issue_reward",
          "order",
          "donation",
          "account_incurred_transactions",
          "incurred_amount",
          "gross_amount",
          "net_amount"
        ],
        "title": "Transaction"
      },
      "TransactionDetails": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "type": {
            "$ref": "#/components/schemas/TransactionType"
          },
          "processor": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaymentProcessor"
              },
              {
                "type": "null"
              }
            ]
          },
          "currency": {
            "type": "string",
            "title": "Currency"
          },
          "amount": {
            "type": "integer",
            "title": "Amount"
          },
          "account_currency": {
            "type": "string",
            "title": "Account Currency"
          },
          "account_amount": {
            "type": "integer",
            "title": "Account Amount"
          },
          "platform_fee_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PlatformFeeType"
              },
              {
                "type": "null"
              }
            ]
          },
          "pledge_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Pledge Id"
          },
          "issue_reward_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Issue Reward Id"
          },
          "order_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id"
          },
          "donation_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Donation Id"
          },
          "payout_transaction_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Payout Transaction Id"
          },
          "incurred_by_transaction_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Incurred By Transaction Id"
          },
          "pledge": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TransactionPledge"
              },
              {
                "type": "null"
              }
            ]
          },
          "issue_reward": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TransactionIssueReward"
              },
              {
                "type": "null"
              }
            ]
          },
          "order": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TransactionOrder"
              },
              {
                "type": "null"
              }
            ]
          },
          "donation": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TransactionDonation"
              },
              {
                "type": "null"
              }
            ]
          },
          "account_incurred_transactions": {
            "items": {
              "$ref": "#/components/schemas/TransactionEmbedded"
            },
            "type": "array",
            "title": "Account Incurred Transactions"
          },
          "incurred_amount": {
            "type": "integer",
            "title": "Incurred Amount"
          },
          "gross_amount": {
            "type": "integer",
            "title": "Gross Amount"
          },
          "net_amount": {
            "type": "integer",
            "title": "Net Amount"
          },
          "paid_transactions": {
            "items": {
              "$ref": "#/components/schemas/Transaction"
            },
            "type": "array",
            "title": "Paid Transactions"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "type",
          "processor",
          "currency",
          "amount",
          "account_currency",
          "account_amount",
          "platform_fee_type",
          "pledge_id",
          "issue_reward_id",
          "order_id",
          "donation_id",
          "payout_transaction_id",
          "incurred_by_transaction_id",
          "pledge",
          "issue_reward",
          "order",
          "donation",
          "account_incurred_transactions",
          "incurred_amount",
          "gross_amount",
          "net_amount",
          "paid_transactions"
        ],
        "title": "TransactionDetails"
      },
      "TransactionDonation": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "to_organization": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TransactionOrganization"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "to_organization"
        ],
        "title": "TransactionDonation"
      },
      "TransactionEmbedded": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "type": {
            "$ref": "#/components/schemas/TransactionType"
          },
          "processor": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaymentProcessor"
              },
              {
                "type": "null"
              }
            ]
          },
          "currency": {
            "type": "string",
            "title": "Currency"
          },
          "amount": {
            "type": "integer",
            "title": "Amount"
          },
          "account_currency": {
            "type": "string",
            "title": "Account Currency"
          },
          "account_amount": {
            "type": "integer",
            "title": "Account Amount"
          },
          "platform_fee_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PlatformFeeType"
              },
              {
                "type": "null"
              }
            ]
          },
          "pledge_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Pledge Id"
          },
          "issue_reward_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Issue Reward Id"
          },
          "order_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id"
          },
          "donation_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Donation Id"
          },
          "payout_transaction_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Payout Transaction Id"
          },
          "incurred_by_transaction_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Incurred By Transaction Id"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "type",
          "processor",
          "currency",
          "amount",
          "account_currency",
          "account_amount",
          "platform_fee_type",
          "pledge_id",
          "issue_reward_id",
          "order_id",
          "donation_id",
          "payout_transaction_id",
          "incurred_by_transaction_id"
        ],
        "title": "TransactionEmbedded"
      },
      "TransactionExternalOrganization": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "platform": {
            "$ref": "#/components/schemas/Platforms"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "avatar_url": {
            "type": "string",
            "title": "Avatar Url"
          },
          "is_personal": {
            "type": "boolean",
            "title": "Is Personal"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "platform",
          "name",
          "avatar_url",
          "is_personal"
        ],
        "title": "TransactionExternalOrganization"
      },
      "TransactionIssue": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "platform": {
            "$ref": "#/components/schemas/Platforms"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id"
          },
          "repository_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Repository Id"
          },
          "number": {
            "type": "integer",
            "title": "Number"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "organization": {
            "$ref": "#/components/schemas/TransactionExternalOrganization"
          },
          "repository": {
            "$ref": "#/components/schemas/TransactionRepository"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "platform",
          "organization_id",
          "repository_id",
          "number",
          "title",
          "organization",
          "repository"
        ],
        "title": "TransactionIssue"
      },
      "TransactionIssueReward": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "issue_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Issue Id"
          },
          "share_thousands": {
            "type": "integer",
            "title": "Share Thousands"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "issue_id",
          "share_thousands"
        ],
        "title": "TransactionIssueReward"
      },
      "TransactionOrder": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "product": {
            "$ref": "#/components/schemas/TransactionProduct"
          },
          "product_price": {
            "$ref": "#/components/schemas/ProductPrice"
          },
          "subscription_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subscription Id"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "product",
          "product_price",
          "subscription_id"
        ],
        "title": "TransactionOrder"
      },
      "TransactionOrganization": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "slug": {
            "type": "string",
            "title": "Slug"
          },
          "avatar_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avatar Url"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "name",
          "slug",
          "avatar_url"
        ],
        "title": "TransactionOrganization"
      },
      "TransactionPledge": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "state": {
            "$ref": "#/components/schemas/PledgeState"
          },
          "issue": {
            "$ref": "#/components/schemas/TransactionIssue"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "state",
          "issue"
        ],
        "title": "TransactionPledge"
      },
      "TransactionProduct": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id"
          },
          "organization": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TransactionOrganization"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "name",
          "organization_id",
          "organization"
        ],
        "title": "TransactionProduct"
      },
      "TransactionRepository": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "platform": {
            "$ref": "#/components/schemas/Platforms"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "platform",
          "organization_id",
          "name"
        ],
        "title": "TransactionRepository"
      },
      "TransactionSortProperty": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "amount",
          "-amount"
        ],
        "title": "TransactionSortProperty"
      },
      "TransactionType": {
        "type": "string",
        "enum": [
          "payment",
          "processor_fee",
          "refund",
          "dispute",
          "dispute_reversal",
          "balance",
          "payout"
        ],
        "title": "TransactionType",
        "description": "Type of transactions."
      },
      "TransactionsBalance": {
        "properties": {
          "currency": {
            "type": "string",
            "title": "Currency"
          },
          "amount": {
            "type": "integer",
            "title": "Amount"
          },
          "account_currency": {
            "type": "string",
            "title": "Account Currency"
          },
          "account_amount": {
            "type": "integer",
            "title": "Account Amount"
          }
        },
        "type": "object",
        "required": [
          "currency",
          "amount",
          "account_currency",
          "account_amount"
        ],
        "title": "TransactionsBalance"
      },
      "TransactionsSummary": {
        "properties": {
          "balance": {
            "$ref": "#/components/schemas/TransactionsBalance"
          },
          "payout": {
            "$ref": "#/components/schemas/TransactionsBalance"
          }
        },
        "type": "object",
        "required": [
          "balance",
          "payout"
        ],
        "title": "TransactionsSummary"
      },
      "Unauthorized": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Unauthorized"
            ],
            "const": "Unauthorized",
            "title": "Type"
          },
          "detail": {
            "type": "string",
            "title": "Detail"
          }
        },
        "type": "object",
        "required": [
          "type",
          "detail"
        ],
        "title": "Unauthorized"
      },
      "UpdateIssue": {
        "properties": {
          "funding_goal": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              },
              {
                "type": "null"
              }
            ]
          },
          "upfront_split_to_contributors": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 100,
                "minimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Upfront Split To Contributors"
          },
          "set_upfront_split_to_contributors": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Set Upfront Split To Contributors"
          }
        },
        "type": "object",
        "title": "UpdateIssue"
      },
      "User": {
        "properties": {
          "username": {
            "type": "string",
            "title": "Username"
          },
          "avatar_url": {
            "type": "string",
            "title": "Avatar Url"
          }
        },
        "type": "object",
        "required": [
          "username",
          "avatar_url"
        ],
        "title": "User"
      },
      "UserAdvertisementCampaign": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "user_id": {
            "type": "string",
            "format": "uuid4",
            "title": "User Id"
          },
          "views": {
            "type": "integer",
            "title": "Views"
          },
          "clicks": {
            "type": "integer",
            "title": "Clicks"
          },
          "image_url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "Image Url"
          },
          "image_url_dark": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Image Url Dark"
          },
          "text": {
            "type": "string",
            "title": "Text"
          },
          "link_url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "Link Url"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "user_id",
          "views",
          "clicks",
          "image_url",
          "image_url_dark",
          "text",
          "link_url"
        ],
        "title": "UserAdvertisementCampaign"
      },
      "UserAdvertisementCampaignCreate": {
        "properties": {
          "image_url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "Image Url"
          },
          "image_url_dark": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Image Url Dark"
          },
          "text": {
            "type": "string",
            "title": "Text"
          },
          "link_url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "Link Url"
          }
        },
        "type": "object",
        "required": [
          "image_url",
          "text",
          "link_url"
        ],
        "title": "UserAdvertisementCampaignCreate"
      },
      "UserAdvertisementCampaignEnable": {
        "properties": {
          "benefit_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Benefit Id",
            "description": "The benefit ID.",
            "x-polar-selector-widget": {
              "displayProperty": "description",
              "resourceName": "Benefit",
              "resourceRoot": "/v1/benefits"
            }
          }
        },
        "type": "object",
        "required": [
          "benefit_id"
        ],
        "title": "UserAdvertisementCampaignEnable"
      },
      "UserAdvertisementCampaignUpdate": {
        "properties": {
          "image_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Image Url"
          },
          "image_url_dark": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Image Url Dark"
          },
          "text": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Text"
          },
          "link_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Link Url"
          }
        },
        "type": "object",
        "title": "UserAdvertisementCampaignUpdate"
      },
      "UserAdvertisementSortProperty": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "views",
          "-views",
          "clicks",
          "-clicks"
        ],
        "title": "UserAdvertisementSortProperty"
      },
      "UserBase": {
        "properties": {
          "username": {
            "type": "string",
            "maxLength": 50,
            "title": "Username"
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "avatar_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avatar Url"
          },
          "account_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Account Id"
          }
        },
        "type": "object",
        "required": [
          "username",
          "email",
          "avatar_url",
          "account_id"
        ],
        "title": "UserBase"
      },
      "UserBenefitSortProperty": {
        "type": "string",
        "enum": [
          "granted_at",
          "-granted_at",
          "type",
          "-type",
          "organization",
          "-organization"
        ],
        "title": "UserBenefitSortProperty"
      },
      "UserInfoOrganization": {
        "properties": {
          "sub": {
            "type": "string",
            "title": "Sub"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          }
        },
        "type": "object",
        "required": [
          "sub"
        ],
        "title": "UserInfoOrganization"
      },
      "UserInfoUser": {
        "properties": {
          "sub": {
            "type": "string",
            "title": "Sub"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email"
          },
          "email_verified": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email Verified"
          }
        },
        "type": "object",
        "required": [
          "sub"
        ],
        "title": "UserInfoUser"
      },
      "UserOrder": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "amount": {
            "type": "integer",
            "title": "Amount"
          },
          "tax_amount": {
            "type": "integer",
            "title": "Tax Amount"
          },
          "currency": {
            "type": "string",
            "title": "Currency"
          },
          "user_id": {
            "type": "string",
            "format": "uuid4",
            "title": "User Id"
          },
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id"
          },
          "product_price_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Price Id"
          },
          "subscription_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subscription Id"
          },
          "product": {
            "$ref": "#/components/schemas/UserOrderProduct"
          },
          "product_price": {
            "$ref": "#/components/schemas/ProductPrice"
          },
          "subscription": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UserOrderSubscription"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "amount",
          "tax_amount",
          "currency",
          "user_id",
          "product_id",
          "product_price_id",
          "subscription_id",
          "product",
          "product_price",
          "subscription"
        ],
        "title": "UserOrder"
      },
      "UserOrderInvoice": {
        "properties": {
          "url": {
            "type": "string",
            "title": "Url",
            "description": "The URL to the invoice."
          }
        },
        "type": "object",
        "required": [
          "url"
        ],
        "title": "UserOrderInvoice",
        "description": "Order's invoice data."
      },
      "UserOrderProduct": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the product."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the product."
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the product."
          },
          "is_recurring": {
            "type": "boolean",
            "title": "Is Recurring",
            "description": "Whether the product is a subscription tier."
          },
          "is_archived": {
            "type": "boolean",
            "title": "Is Archived",
            "description": "Whether the product is archived and no longer available."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the product."
          },
          "prices": {
            "items": {
              "$ref": "#/components/schemas/ProductPrice"
            },
            "type": "array",
            "title": "Prices",
            "description": "List of available prices for this product."
          },
          "benefits": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/BenefitBase"
                },
                {
                  "$ref": "#/components/schemas/BenefitArticles"
                }
              ]
            },
            "type": "array",
            "title": "BenefitPublic",
            "description": "The benefits granted by the product."
          },
          "medias": {
            "items": {
              "$ref": "#/components/schemas/ProductMediaFileRead"
            },
            "type": "array",
            "title": "Medias",
            "description": "The medias associated to the product."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "name",
          "description",
          "is_recurring",
          "is_archived",
          "organization_id",
          "prices",
          "benefits",
          "medias"
        ],
        "title": "UserOrderProduct"
      },
      "UserOrderSortProperty": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "amount",
          "-amount",
          "organization",
          "-organization",
          "product",
          "-product",
          "subscription",
          "-subscription"
        ],
        "title": "UserOrderSortProperty"
      },
      "UserOrderSubscription": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Amount"
          },
          "currency": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Currency"
          },
          "recurring_interval": {
            "$ref": "#/components/schemas/SubscriptionRecurringInterval"
          },
          "status": {
            "$ref": "#/components/schemas/SubscriptionStatus"
          },
          "current_period_start": {
            "type": "string",
            "format": "date-time",
            "title": "Current Period Start"
          },
          "current_period_end": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Current Period End"
          },
          "cancel_at_period_end": {
            "type": "boolean",
            "title": "Cancel At Period End"
          },
          "started_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Started At"
          },
          "ended_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ended At"
          },
          "user_id": {
            "type": "string",
            "format": "uuid4",
            "title": "User Id"
          },
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id"
          },
          "price_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Price Id"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "amount",
          "currency",
          "recurring_interval",
          "status",
          "current_period_start",
          "current_period_end",
          "cancel_at_period_end",
          "started_at",
          "ended_at",
          "user_id",
          "product_id",
          "price_id"
        ],
        "title": "UserOrderSubscription"
      },
      "UserSubscription": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Amount"
          },
          "currency": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Currency"
          },
          "recurring_interval": {
            "$ref": "#/components/schemas/SubscriptionRecurringInterval"
          },
          "status": {
            "$ref": "#/components/schemas/SubscriptionStatus"
          },
          "current_period_start": {
            "type": "string",
            "format": "date-time",
            "title": "Current Period Start"
          },
          "current_period_end": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Current Period End"
          },
          "cancel_at_period_end": {
            "type": "boolean",
            "title": "Cancel At Period End"
          },
          "started_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Started At"
          },
          "ended_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ended At"
          },
          "user_id": {
            "type": "string",
            "format": "uuid4",
            "title": "User Id"
          },
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id"
          },
          "price_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Price Id"
          },
          "product": {
            "$ref": "#/components/schemas/UserSubscriptionProduct"
          },
          "price": {
            "$ref": "#/components/schemas/ProductPrice"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "amount",
          "currency",
          "recurring_interval",
          "status",
          "current_period_start",
          "current_period_end",
          "cancel_at_period_end",
          "started_at",
          "ended_at",
          "user_id",
          "product_id",
          "price_id",
          "product",
          "price"
        ],
        "title": "UserSubscription"
      },
      "UserSubscriptionProduct": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the product."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the product."
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the product."
          },
          "is_recurring": {
            "type": "boolean",
            "title": "Is Recurring",
            "description": "Whether the product is a subscription tier."
          },
          "is_archived": {
            "type": "boolean",
            "title": "Is Archived",
            "description": "Whether the product is archived and no longer available."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the product."
          },
          "prices": {
            "items": {
              "$ref": "#/components/schemas/ProductPrice"
            },
            "type": "array",
            "title": "Prices",
            "description": "List of available prices for this product."
          },
          "benefits": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/BenefitBase"
                },
                {
                  "$ref": "#/components/schemas/BenefitArticles"
                }
              ]
            },
            "type": "array",
            "title": "BenefitPublic",
            "description": "The benefits granted by the product."
          },
          "medias": {
            "items": {
              "$ref": "#/components/schemas/ProductMediaFileRead"
            },
            "type": "array",
            "title": "Medias",
            "description": "The medias associated to the product."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "name",
          "description",
          "is_recurring",
          "is_archived",
          "organization_id",
          "prices",
          "benefits",
          "medias"
        ],
        "title": "UserSubscriptionProduct"
      },
      "UserSubscriptionSortProperty": {
        "type": "string",
        "enum": [
          "started_at",
          "-started_at",
          "amount",
          "-amount",
          "status",
          "-status",
          "organization",
          "-organization",
          "product",
          "-product"
        ],
        "title": "UserSubscriptionSortProperty"
      },
      "UserSubscriptionUpdate": {
        "properties": {
          "product_price_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Price Id"
          }
        },
        "type": "object",
        "required": [
          "product_price_id"
        ],
        "title": "UserSubscriptionUpdate"
      },
      "ValidatedLicenseKey": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id"
          },
          "user_id": {
            "type": "string",
            "format": "uuid4",
            "title": "User Id"
          },
          "benefit_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Benefit Id",
            "description": "The benefit ID.",
            "x-polar-selector-widget": {
              "displayProperty": "description",
              "resourceName": "Benefit",
              "resourceRoot": "/v1/benefits"
            }
          },
          "key": {
            "type": "string",
            "title": "Key"
          },
          "display_key": {
            "type": "string",
            "title": "Display Key"
          },
          "status": {
            "$ref": "#/components/schemas/LicenseKeyStatus"
          },
          "limit_activations": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit Activations"
          },
          "usage": {
            "type": "integer",
            "title": "Usage"
          },
          "limit_usage": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit Usage"
          },
          "validations": {
            "type": "integer",
            "title": "Validations"
          },
          "last_validated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Validated At"
          },
          "expires_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expires At"
          },
          "activation": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LicenseKeyActivationBase"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "id",
          "organization_id",
          "user_id",
          "benefit_id",
          "key",
          "display_key",
          "status",
          "limit_activations",
          "usage",
          "limit_usage",
          "validations",
          "last_validated_at",
          "expires_at"
        ],
        "title": "ValidatedLicenseKey"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "WebhookBenefitCreatedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "benefit.created"
            ],
            "const": "benefit.created",
            "title": "Type"
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Benefit"
              }
            ],
            "title": "Benefit"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookBenefitCreatedPayload",
        "description": "Sent when a new benefit is created.\n\n**Discord & Slack support:** Basic"
      },
      "WebhookBenefitGrantCreatedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "benefit_grant.created"
            ],
            "const": "benefit_grant.created",
            "title": "Type"
          },
          "data": {
            "$ref": "#/components/schemas/BenefitGrantWebhook"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookBenefitGrantCreatedPayload",
        "description": "Sent when a new benefit grant is created.\n\n**Discord & Slack support:** Basic"
      },
      "WebhookBenefitGrantRevokedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "benefit_grant.revoked"
            ],
            "const": "benefit_grant.revoked",
            "title": "Type"
          },
          "data": {
            "$ref": "#/components/schemas/BenefitGrantWebhook"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookBenefitGrantRevokedPayload",
        "description": "Sent when a new benefit grant is revoked.\n\n**Discord & Slack support:** Basic"
      },
      "WebhookBenefitGrantUpdatedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "benefit_grant.updated"
            ],
            "const": "benefit_grant.updated",
            "title": "Type"
          },
          "data": {
            "$ref": "#/components/schemas/BenefitGrantWebhook"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookBenefitGrantUpdatedPayload",
        "description": "Sent when a new benefit grant is updated.\n\n**Discord & Slack support:** Basic"
      },
      "WebhookBenefitUpdatedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "benefit.updated"
            ],
            "const": "benefit.updated",
            "title": "Type"
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Benefit"
              }
            ],
            "title": "Benefit"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookBenefitUpdatedPayload",
        "description": "Sent when a benefit is updated.\n\n**Discord & Slack support:** Basic"
      },
      "WebhookDelivery": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The webhook delivery ID."
          },
          "http_code": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Http Code",
            "description": "The HTTP code returned by the URL. `null` if the endpoint was unreachable."
          },
          "succeeded": {
            "type": "boolean",
            "title": "Succeeded",
            "description": "Whether the delivery was successful."
          },
          "webhook_event": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WebhookEvent"
              }
            ],
            "description": "The webhook event sent by this delivery."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "succeeded",
          "webhook_event"
        ],
        "title": "WebhookDelivery",
        "description": "A webhook delivery for a webhook event."
      },
      "WebhookDonationCreatedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "donation.created"
            ],
            "const": "donation.created",
            "title": "Type"
          },
          "data": {
            "$ref": "#/components/schemas/Donation"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookDonationCreatedPayload",
        "description": "Sent when a new donation is created.\n\n**Discord & Slack support:** Full"
      },
      "WebhookEndpoint": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The webhook endpoint ID."
          },
          "url": {
            "type": "string",
            "title": "Url",
            "description": "The URL where the webhook events will be sent.",
            "examples": [
              "https://webhook.site/cb791d80-f26e-4f8c-be88-6e56054192b0"
            ]
          },
          "format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WebhookFormat"
              }
            ],
            "description": "The format of the webhook payload."
          },
          "user_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id",
            "description": "The user ID associated with the webhook endpoint."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The organization ID associated with the webhook endpoint."
          },
          "events": {
            "items": {
              "$ref": "#/components/schemas/WebhookEventType"
            },
            "type": "array",
            "title": "Events",
            "description": "The events that will trigger the webhook."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "url",
          "format",
          "events"
        ],
        "title": "WebhookEndpoint",
        "description": "A webhook endpoint."
      },
      "WebhookEndpointCreate": {
        "properties": {
          "url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "Url",
            "description": "The URL where the webhook events will be sent.",
            "examples": [
              "https://webhook.site/cb791d80-f26e-4f8c-be88-6e56054192b0"
            ]
          },
          "format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WebhookFormat"
              }
            ],
            "description": "The format of the webhook payload."
          },
          "secret": {
            "type": "string",
            "title": "Secret",
            "description": "The secret used to sign the webhook events.",
            "examples": [
              "f_z6mfSpxkjogyw3FkA2aH2gYE5huxruNf34MpdWMcA"
            ]
          },
          "events": {
            "items": {
              "$ref": "#/components/schemas/WebhookEventType"
            },
            "type": "array",
            "title": "Events",
            "description": "The events that will trigger the webhook."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The organization ID associated with the webhook endpoint. **Required unless you use an organization token.**"
          }
        },
        "type": "object",
        "required": [
          "url",
          "format",
          "secret",
          "events"
        ],
        "title": "WebhookEndpointCreate",
        "description": "Schema to create a webhook endpoint."
      },
      "WebhookEndpointUpdate": {
        "properties": {
          "url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri",
                "description": "The URL where the webhook events will be sent.",
                "examples": [
                  "https://webhook.site/cb791d80-f26e-4f8c-be88-6e56054192b0"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Url"
          },
          "format": {
            "anyOf": [
              {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/WebhookFormat"
                  }
                ],
                "description": "The format of the webhook payload."
              },
              {
                "type": "null"
              }
            ]
          },
          "secret": {
            "anyOf": [
              {
                "type": "string",
                "description": "The secret used to sign the webhook events.",
                "examples": [
                  "f_z6mfSpxkjogyw3FkA2aH2gYE5huxruNf34MpdWMcA"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Secret"
          },
          "events": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/WebhookEventType"
                },
                "type": "array",
                "description": "The events that will trigger the webhook."
              },
              {
                "type": "null"
              }
            ],
            "title": "Events"
          }
        },
        "type": "object",
        "title": "WebhookEndpointUpdate",
        "description": "Schema to update a webhook endpoint."
      },
      "WebhookEvent": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The webhook event ID."
          },
          "last_http_code": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Http Code",
            "description": "Last HTTP code returned by the URL. `null` if no delviery has been attempted or if the endpoint was unreachable."
          },
          "succeeded": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Succeeded",
            "description": "Whether this event was successfully delivered. `null` if no delivery has been attempted."
          },
          "payload": {
            "type": "string",
            "title": "Payload",
            "description": "The payload of the webhook event."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "payload"
        ],
        "title": "WebhookEvent",
        "description": "A webhook event.\n\nAn event represent something that happened in the system\nthat should be sent to the webhook endpoint.\n\nIt can be delivered multiple times until it's marked as succeeded,\neach one creating a new delivery."
      },
      "WebhookEventType": {
        "type": "string",
        "enum": [
          "order.created",
          "subscription.created",
          "subscription.updated",
          "product.created",
          "product.updated",
          "benefit.created",
          "benefit.updated",
          "benefit_grant.created",
          "benefit_grant.updated",
          "benefit_grant.revoked",
          "organization.updated",
          "pledge.created",
          "pledge.updated",
          "donation.created"
        ],
        "title": "WebhookEventType"
      },
      "WebhookFormat": {
        "type": "string",
        "enum": [
          "raw",
          "discord",
          "slack"
        ],
        "title": "WebhookFormat"
      },
      "WebhookOrderCreatedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "order.created"
            ],
            "const": "order.created",
            "title": "Type"
          },
          "data": {
            "$ref": "#/components/schemas/Order"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookOrderCreatedPayload",
        "description": "Sent when a new order is created.\n\n**Discord & Slack support:** Full"
      },
      "WebhookOrganizationUpdatedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "organization.updated"
            ],
            "const": "organization.updated",
            "title": "Type"
          },
          "data": {
            "$ref": "#/components/schemas/Organization"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookOrganizationUpdatedPayload",
        "description": "Sent when a organization is updated.\n\n**Discord & Slack support:** Basic"
      },
      "WebhookPledgeCreatedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "pledge.created"
            ],
            "const": "pledge.created",
            "title": "Type"
          },
          "data": {
            "$ref": "#/components/schemas/Pledge"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookPledgeCreatedPayload",
        "description": "Sent when a new pledge is created. Note that this does mean that the pledge has been paid yet.\n\n**Discord & Slack support:** Full"
      },
      "WebhookPledgeUpdatedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "pledge.updated"
            ],
            "const": "pledge.updated",
            "title": "Type"
          },
          "data": {
            "$ref": "#/components/schemas/Pledge"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookPledgeUpdatedPayload",
        "description": "Sent when a pledge is updated.\n\n**Discord & Slack support:** Basic"
      },
      "WebhookProductCreatedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "product.created"
            ],
            "const": "product.created",
            "title": "Type"
          },
          "data": {
            "$ref": "#/components/schemas/Product"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookProductCreatedPayload",
        "description": "Sent when a new product is created.\n\n**Discord & Slack support:** Basic"
      },
      "WebhookProductUpdatedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "product.updated"
            ],
            "const": "product.updated",
            "title": "Type"
          },
          "data": {
            "$ref": "#/components/schemas/Product"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookProductUpdatedPayload",
        "description": "Sent when a product is updated.\n\n**Discord & Slack support:** Basic"
      },
      "WebhookSubscriptionCreatedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "subscription.created"
            ],
            "const": "subscription.created",
            "title": "Type"
          },
          "data": {
            "$ref": "#/components/schemas/Subscription"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookSubscriptionCreatedPayload",
        "description": "Sent when a new subscription is created.\n\n**Discord & Slack support:** Full"
      },
      "WebhookSubscriptionUpdatedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "subscription.updated"
            ],
            "const": "subscription.updated",
            "title": "Type"
          },
          "data": {
            "$ref": "#/components/schemas/Subscription"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookSubscriptionUpdatedPayload",
        "description": "Sent when a new subscription is updated. This event fires if the subscription is cancelled, both immediately and if the subscription is cancelled at the end of the current period.\n\n**Discord & Slack support:** On cancellation"
      }
    },
    "securitySchemes": {
      "oidc": {
        "type": "openIdConnect",
        "openIdConnectUrl": "/.well-known/openid-configuration"
      },
      "pat": {
        "type": "http",
        "description": "You can generate a **Personal Access Token** from your [settings](https://polar.sh/settings).",
        "scheme": "bearer"
      }
    }
  },
  "tags": [
    {
      "name": "documented",
      "description": "Endpoints shown and documented in the Polar API documentation."
    },
    {
      "name": "featured",
      "description": "Endpoints featured in the Polar API documentation for their interest in common use-cases."
    },
    {
      "name": "issue_funding",
      "description": "Endpoints related to issue funding and rewards in the Polar API."
    }
  ]
}
