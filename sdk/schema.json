{
  "openapi": "3.1.0",
  "info": {
    "title": "Polar API",
    "summary": "Polar HTTP and Webhooks API",
    "description": "Read the docs at https://docs.polar.sh/api",
    "version": "0.1.0"
  },
  "servers": [
    {
      "url": "https://api.polar.sh",
      "description": "Production environment",
      "x-speakeasy-server-id": "production"
    },
    {
      "url": "https://sandbox-api.polar.sh",
      "description": "Sandbox environment",
      "x-speakeasy-server-id": "sandbox"
    }
  ],
  "paths": {
    "/v1/external_organizations/": {
      "get": {
        "tags": [
          "external_organizations",
          "documented",
          "issue_funding"
        ],
        "summary": "List External Organizations",
        "description": "List external organizations.",
        "operationId": "external_organizations:list",
        "security": [
          {
            "oidc": [
              "external_organizations:read"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "platform",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Platforms"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Platforms"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Platform Filter",
              "description": "Filter by platform."
            },
            "description": "Filter by platform."
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "RepositoryName Filter",
              "description": "Filter by name."
            },
            "description": "Filter by name."
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalOrganizationSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "-created_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_ExternalOrganization_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Anonymous",
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "external_organizations",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "list",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.ExternalOrganizations.List(ctx, operations.ExternalOrganizationsListRequest{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceExternalOrganization != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "list",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.externalOrganizations.list({});\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "list",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.external_organizations.list()\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          }
        ]
      }
    },
    "/v1/repositories/": {
      "get": {
        "tags": [
          "repositories",
          "documented",
          "issue_funding"
        ],
        "summary": "List Repositories",
        "description": "List repositories.",
        "operationId": "repositories:list",
        "security": [
          {
            "oidc": [
              "repositories:read",
              "repositories:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "platform",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Platforms"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Platforms"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Platform Filter",
              "description": "Filter by platform."
            },
            "description": "Filter by platform."
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "RepositoryName Filter",
              "description": "Filter by name."
            },
            "description": "Filter by name."
          },
          {
            "name": "external_organization_name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "ExternalOrganizationName Filter",
              "description": "Filter by external organization name."
            },
            "description": "Filter by external organization name."
          },
          {
            "name": "is_private",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by private status.",
              "title": "Is Private"
            },
            "description": "Filter by private status."
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RepositorySortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "-created_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_Repository_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Anonymous",
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "repositories",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "list",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Repositories.List(ctx, operations.RepositoriesListRequest{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceRepository != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "list",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.repositories.list({});\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "list",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.repositories.list()\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          }
        ]
      }
    },
    "/v1/repositories/{id}": {
      "get": {
        "tags": [
          "repositories",
          "documented",
          "issue_funding"
        ],
        "summary": "Get Repository",
        "description": "Get a repository by ID.",
        "operationId": "repositories:get",
        "security": [
          {
            "oidc": [
              "repositories:read",
              "repositories:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The repository ID.",
              "x-polar-selector-widget": {
                "resourceRoot": "/v1/repositories",
                "resourceName": "Repository",
                "displayProperty": "name"
              },
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Repository"
                }
              }
            }
          },
          "404": {
            "description": "Repository not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Anonymous",
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "repositories",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "get",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Repositories.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Repository != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "get",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.repositories.get({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "get",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.repositories.get(id=\"<value>\")\n\n    # Handle response\n    print(res)"
          }
        ]
      },
      "patch": {
        "tags": [
          "repositories",
          "documented",
          "issue_funding"
        ],
        "summary": "Update Repository",
        "description": "Update a repository.",
        "operationId": "repositories:update",
        "security": [
          {
            "oidc": [
              "repositories:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The repository ID.",
              "x-polar-selector-widget": {
                "resourceRoot": "/v1/repositories",
                "resourceName": "Repository",
                "displayProperty": "name"
              },
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RepositoryUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Repository updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Repository"
                }
              }
            }
          },
          "403": {
            "description": "You don't have the permission to update this repository.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotPermitted"
                }
              }
            }
          },
          "404": {
            "description": "Repository not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "repositories",
        "x-speakeasy-name-override": "update",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "update",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Repositories.Update(ctx, \"<value>\", components.RepositoryUpdate{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Repository != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "update",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.repositories.update({\n    id: \"<value>\",\n    repositoryUpdate: {},\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "update",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.repositories.update(id=\"<value>\", repository_update={})\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/organizations/": {
      "get": {
        "tags": [
          "organizations",
          "documented",
          "featured"
        ],
        "summary": "List Organizations",
        "description": "List organizations.",
        "operationId": "organizations:list",
        "security": [
          {
            "oidc": [
              "organizations:read",
              "organizations:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "slug",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by slug.",
              "title": "Slug"
            },
            "description": "Filter by slug."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "created_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_Organization_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "organizations",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "list",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Organizations.List(ctx, nil, nil, nil, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceOrganization != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "list",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.organizations.list({});\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "list",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.organizations.list()\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          }
        ]
      },
      "post": {
        "tags": [
          "organizations",
          "documented",
          "featured"
        ],
        "summary": "Create Organization",
        "description": "Create an organization.",
        "operationId": "organizations:create",
        "security": [
          {
            "oidc": [
              "organizations:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Organization created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-group": "organizations",
        "x-speakeasy-name-override": "create",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "create",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Organizations.Create(ctx, components.OrganizationCreate{\n        Name: \"<value>\",\n        Slug: \"<value>\",\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Organization != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "create",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.organizations.create({\n    name: \"<value>\",\n    slug: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "create",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.organizations.create(request={\n        \"name\": \"<value>\",\n        \"slug\": \"<value>\",\n    })\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/organizations/{id}": {
      "get": {
        "tags": [
          "organizations",
          "documented",
          "featured"
        ],
        "summary": "Get Organization",
        "description": "Get an organization by ID.",
        "operationId": "organizations:get",
        "security": [
          {
            "oidc": [
              "organizations:read",
              "organizations:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The organization ID.",
              "x-polar-selector-widget": {
                "resourceRoot": "/v1/organizations",
                "resourceName": "Organization",
                "displayProperty": "name"
              },
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "organizations",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "get",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Organizations.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Organization != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "get",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.organizations.get({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "get",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.organizations.get(id=\"<value>\")\n\n    # Handle response\n    print(res)"
          }
        ]
      },
      "patch": {
        "tags": [
          "organizations",
          "documented",
          "featured"
        ],
        "summary": "Update Organization",
        "description": "Update an organization.",
        "operationId": "organizations:update",
        "security": [
          {
            "oidc": [
              "organizations:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The organization ID.",
              "x-polar-selector-widget": {
                "resourceRoot": "/v1/organizations",
                "resourceName": "Organization",
                "displayProperty": "name"
              },
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organization updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "403": {
            "description": "You don't have the permission to update this organization.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotPermitted"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "organizations",
        "x-speakeasy-name-override": "update",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "update",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Organizations.Update(ctx, \"<value>\", components.OrganizationUpdate{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Organization != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "update",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.organizations.update({\n    id: \"<value>\",\n    organizationUpdate: {},\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "update",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.organizations.update(id=\"<value>\", organization_update={})\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/subscriptions/": {
      "get": {
        "tags": [
          "subscriptions",
          "documented"
        ],
        "summary": "List Subscriptions",
        "description": "List subscriptions.",
        "operationId": "subscriptions:list",
        "security": [
          {
            "oidc": [
              "subscriptions:read",
              "subscriptions:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "product_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The product ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/products",
                    "resourceName": "Product",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The product ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/products",
                      "resourceName": "Product",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "ProductID Filter",
              "description": "Filter by product ID."
            },
            "description": "Filter by product ID."
          },
          {
            "name": "customer_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "CustomerID Filter",
              "description": "Filter by customer ID."
            },
            "description": "Filter by customer ID."
          },
          {
            "name": "discount_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The product ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/products",
                    "resourceName": "Product",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The product ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/products",
                      "resourceName": "Product",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "DiscountID Filter",
              "description": "Filter by discount ID."
            },
            "description": "Filter by discount ID."
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by active or inactive subscription.",
              "title": "Active"
            },
            "description": "Filter by active or inactive subscription."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubscriptionSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "-started_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_Subscription_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "subscriptions",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "list",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Subscriptions.List(ctx, operations.SubscriptionsListRequest{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceSubscription != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "list",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.subscriptions.list({});\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "list",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.subscriptions.list()\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          }
        ]
      }
    },
    "/v1/subscriptions/export": {
      "get": {
        "tags": [
          "subscriptions",
          "documented"
        ],
        "summary": "Export Subscriptions",
        "description": "Export subscriptions as a CSV file.",
        "operationId": "subscriptions:export",
        "security": [
          {
            "oidc": [
              "subscriptions:read",
              "subscriptions:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by organization ID.",
              "title": "Organization Id"
            },
            "description": "Filter by organization ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "subscriptions",
        "x-speakeasy-name-override": "export",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "export",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Subscriptions.Export(ctx, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Any != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "export",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.subscriptions.export({});\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "export",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.subscriptions.export()\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/advertisements/": {
      "get": {
        "tags": [
          "advertisements",
          "documented"
        ],
        "summary": "List Campaigns",
        "description": "List active advertisement campaigns for a benefit.",
        "operationId": "advertisements:list",
        "parameters": [
          {
            "name": "benefit_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The benefit ID.",
              "x-polar-selector-widget": {
                "resourceRoot": "/v1/benefits",
                "resourceName": "Benefit",
                "displayProperty": "description"
              },
              "title": "Benefit Id"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdvertisementSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "granted_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdvertisementCampaignListResource"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "advertisements",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "list",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Advertisements.List(ctx, \"<value>\", nil, nil, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.AdvertisementCampaignListResource != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "list",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.advertisements.list({\n    benefitId: \"<value>\",\n  });\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "list",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.advertisements.list(benefit_id=\"<value>\")\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          }
        ]
      }
    },
    "/v1/advertisements/{id}": {
      "get": {
        "tags": [
          "advertisements",
          "documented"
        ],
        "summary": "Get Campaign",
        "description": "Get an advertisement campaign by ID.",
        "operationId": "advertisements:get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The advertisement campaign ID.",
              "title": "Id"
            },
            "description": "The advertisement campaign ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdvertisementCampaign"
                }
              }
            }
          },
          "404": {
            "description": "Advertisement campaign not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-group": "advertisements",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "get",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Advertisements.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.AdvertisementCampaign != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "get",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.advertisements.get({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "get",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.advertisements.get(id=\"<value>\")\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/oauth2/": {
      "get": {
        "tags": [
          "oauth2",
          "clients",
          "documented"
        ],
        "summary": "List Clients",
        "description": "List OAuth2 clients.",
        "operationId": "oauth2:clients:list",
        "security": [
          {
            "oidc": []
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_OAuth2Client_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "oauth2.clients",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "list",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Oauth2.Clients.List(ctx, nil, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceOAuth2Client != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "list",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.oauth2.clients.list({});\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "list",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.oauth2.clients.list()\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          }
        ]
      }
    },
    "/v1/oauth2/register": {
      "post": {
        "tags": [
          "oauth2",
          "clients",
          "documented"
        ],
        "summary": "Create Client",
        "description": "Create an OAuth2 client.",
        "operationId": "oauth2:clients:oauth2:create_client",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OAuth2ClientConfiguration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oidc": []
          },
          {
            "pat": []
          }
        ],
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-group": "oauth2.clients",
        "x-speakeasy-name-override": "create",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "create_client",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Oauth2.Clients.Create(ctx, components.OAuth2ClientConfiguration{\n        RedirectUris: []string{\n            \"https://inferior-chainstay.com\",\n        },\n        ClientName: \"<value>\",\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Any != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "create_client",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.oauth2.clients.create({\n    redirectUris: [\n      \"https://inferior-chainstay.com\",\n    ],\n    clientName: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "create_client",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.oauth2.clients.create(request={\n        \"redirect_uris\": [\n            \"https://inferior-chainstay.com\",\n        ],\n        \"client_name\": \"<value>\",\n    })\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/oauth2/register/{client_id}": {
      "get": {
        "tags": [
          "oauth2",
          "clients",
          "documented"
        ],
        "summary": "Get Client",
        "description": "Get an OAuth2 client by Client ID.",
        "operationId": "oauth2:clients:oauth2:get_client",
        "security": [
          {
            "oidc": []
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Client Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Anonymous",
          "User"
        ],
        "x-speakeasy-group": "oauth2.clients",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "get_client",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Oauth2.Clients.Get(ctx, \"<id>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Any != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "get_client",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.oauth2.clients.get({\n    clientId: \"<id>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "get_client",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.oauth2.clients.get(client_id=\"<id>\")\n\n    # Handle response\n    print(res)"
          }
        ]
      },
      "put": {
        "tags": [
          "oauth2",
          "clients",
          "documented"
        ],
        "summary": "Update Client",
        "description": "Update an OAuth2 client.",
        "operationId": "oauth2:clients:oauth2:update_client",
        "security": [
          {
            "oidc": []
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Client Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OAuth2ClientConfigurationUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Anonymous",
          "User"
        ],
        "x-speakeasy-group": "oauth2.clients",
        "x-speakeasy-name-override": "update",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "update_client",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Oauth2.Clients.Update(ctx, \"<id>\", components.OAuth2ClientConfigurationUpdate{\n        RedirectUris: []string{\n            \"https://grown-worth.name\",\n            \"https://worthwhile-avalanche.org/\",\n            \"https://general-digit.com/\",\n        },\n        ClientName: \"<value>\",\n        ClientID: \"<id>\",\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Any != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "update_client",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.oauth2.clients.update({\n    clientId: \"<id>\",\n    oAuth2ClientConfigurationUpdate: {\n      redirectUris: [\n        \"https://grown-worth.name\",\n        \"https://worthwhile-avalanche.org/\",\n        \"https://general-digit.com/\",\n      ],\n      clientName: \"<value>\",\n      clientId: \"<id>\",\n    },\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "update_client",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.oauth2.clients.update(client_id=\"<id>\", o_auth2_client_configuration_update={\n        \"redirect_uris\": [\n            \"https://grown-worth.name\",\n            \"https://worthwhile-avalanche.org/\",\n            \"https://general-digit.com/\",\n        ],\n        \"client_name\": \"<value>\",\n        \"client_id\": \"<id>\",\n    })\n\n    # Handle response\n    print(res)"
          }
        ]
      },
      "delete": {
        "tags": [
          "oauth2",
          "clients",
          "documented"
        ],
        "summary": "Delete Client",
        "description": "Delete an OAuth2 client.",
        "operationId": "oauth2:clients:oauth2:delete_client",
        "security": [
          {
            "oidc": []
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Client Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Anonymous",
          "User"
        ],
        "x-speakeasy-group": "oauth2.clients",
        "x-speakeasy-name-override": "delete",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "delete_client",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Oauth2.Clients.Delete(ctx, \"<id>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Any != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "delete_client",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.oauth2.clients.delete({\n    clientId: \"<id>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "delete_client",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.oauth2.clients.delete(client_id=\"<id>\")\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/oauth2/authorize": {
      "get": {
        "tags": [
          "oauth2",
          "documented"
        ],
        "summary": "Authorize",
        "operationId": "oauth2:authorize",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AuthorizeResponseUser"
                    },
                    {
                      "$ref": "#/components/schemas/AuthorizeResponseOrganization"
                    }
                  ],
                  "title": "Response Oauth2:Authorize",
                  "discriminator": {
                    "propertyName": "sub_type",
                    "mapping": {
                      "user": "#/components/schemas/AuthorizeResponseUser",
                      "organization": "#/components/schemas/AuthorizeResponseOrganization"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oidc": []
          },
          {
            "pat": []
          }
        ],
        "x-polar-allowed-subjects": [
          "Anonymous",
          "User"
        ],
        "x-speakeasy-group": "oauth2",
        "x-speakeasy-name-override": "authorize",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "authorize",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Oauth2.Authorize(ctx)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ResponseOauth2Authorize != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "authorize",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.oauth2.authorize();\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "authorize",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.oauth2.authorize()\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/oauth2/token": {
      "post": {
        "tags": [
          "oauth2",
          "featured",
          "documented"
        ],
        "summary": "Request Token",
        "description": "Request an access token using a valid grant.",
        "operationId": "oauth2:request_token",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/paths/~1v1~1oauth2~1token/post/x-components/AuthorizationCodeTokenRequest"
                  },
                  {
                    "$ref": "#/paths/~1v1~1oauth2~1token/post/x-components/RefreshTokenRequest"
                  }
                ],
                "discriminator": {
                  "propertyName": "grant_type",
                  "mapping": {
                    "authorization_code": "#/paths/~1v1~1oauth2~1token/post/x-components/AuthorizationCodeTokenRequest",
                    "refresh_token": "#/paths/~1v1~1oauth2~1token/post/x-components/RefreshTokenRequest"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          }
        },
        "x-components": {
          "AuthorizationCodeTokenRequest": {
            "properties": {
              "grant_type": {
                "const": "authorization_code",
                "title": "Grant Type",
                "type": "string"
              },
              "client_id": {
                "title": "Client Id",
                "type": "string"
              },
              "client_secret": {
                "title": "Client Secret",
                "type": "string"
              },
              "code": {
                "title": "Code",
                "type": "string"
              },
              "redirect_uri": {
                "format": "uri",
                "maxLength": 2083,
                "minLength": 1,
                "title": "Redirect Uri",
                "type": "string"
              }
            },
            "required": [
              "grant_type",
              "client_id",
              "client_secret",
              "code",
              "redirect_uri"
            ],
            "title": "AuthorizationCodeTokenRequest",
            "type": "object"
          },
          "RefreshTokenRequest": {
            "properties": {
              "grant_type": {
                "const": "refresh_token",
                "title": "Grant Type",
                "type": "string"
              },
              "client_id": {
                "title": "Client Id",
                "type": "string"
              },
              "client_secret": {
                "title": "Client Secret",
                "type": "string"
              },
              "refresh_token": {
                "title": "Refresh Token",
                "type": "string"
              }
            },
            "required": [
              "grant_type",
              "client_id",
              "client_secret",
              "refresh_token"
            ],
            "title": "RefreshTokenRequest",
            "type": "object"
          }
        },
        "x-speakeasy-group": "oauth2",
        "x-speakeasy-name-override": "token",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "request_token",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Oauth2.Token(ctx, operations.CreateOauth2RequestTokenRequestBodyOnev11oauth21tokenPostXComponentsAuthorizationCodeTokenRequest(\n        components.Onev11oauth21tokenPostXComponentsAuthorizationCodeTokenRequest{\n            ClientID: \"<id>\",\n            ClientSecret: \"<value>\",\n            Code: \"<value>\",\n            RedirectURI: \"https://talkative-barracks.com\",\n        },\n    ))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.TokenResponse != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "request_token",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.oauth2.token({\n    clientId: \"<id>\",\n    clientSecret: \"<value>\",\n    code: \"<value>\",\n    redirectUri: \"https://old-fort.name\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "request_token",
            "source": "import polar_sdk\nfrom polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.oauth2.token(request={\n        \"grant_type\": polar_sdk.GrantType.AUTHORIZATION_CODE,\n        \"client_id\": \"<id>\",\n        \"client_secret\": \"<value>\",\n        \"code\": \"<value>\",\n        \"redirect_uri\": \"https://old-fort.name\",\n    })\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/oauth2/revoke": {
      "post": {
        "tags": [
          "oauth2",
          "featured",
          "documented"
        ],
        "summary": "Revoke Token",
        "description": "Revoke an access token or a refresh token.",
        "operationId": "oauth2:revoke_token",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "token": {
                    "type": "string",
                    "title": "Token"
                  },
                  "token_type_hint": {
                    "anyOf": [
                      {
                        "type": "string",
                        "enum": [
                          "access_token",
                          "refresh_token"
                        ]
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Token Type Hint"
                  },
                  "client_id": {
                    "type": "string",
                    "title": "Client Id"
                  },
                  "client_secret": {
                    "type": "string",
                    "title": "Client Secret"
                  }
                },
                "type": "object",
                "required": [
                  "token",
                  "client_id",
                  "client_secret"
                ],
                "title": "RevokeTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RevokeTokenResponse"
                }
              }
            }
          }
        },
        "x-speakeasy-group": "oauth2",
        "x-speakeasy-name-override": "revoke",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "revoke_token",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Oauth2.Revoke(ctx, operations.Oauth2RevokeTokenRevokeTokenRequest{\n        Token: \"<value>\",\n        ClientID: \"<id>\",\n        ClientSecret: \"<value>\",\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.RevokeTokenResponse != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "revoke_token",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.oauth2.revoke({\n    token: \"<value>\",\n    clientId: \"<id>\",\n    clientSecret: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "revoke_token",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.oauth2.revoke(request={\n        \"token\": \"<value>\",\n        \"client_id\": \"<id>\",\n        \"client_secret\": \"<value>\",\n    })\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/oauth2/introspect": {
      "post": {
        "tags": [
          "oauth2",
          "featured",
          "documented"
        ],
        "summary": "Introspect Token",
        "description": "Get information about an access token.",
        "operationId": "oauth2:introspect_token",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "token": {
                    "type": "string",
                    "title": "Token"
                  },
                  "token_type_hint": {
                    "anyOf": [
                      {
                        "type": "string",
                        "enum": [
                          "access_token",
                          "refresh_token"
                        ]
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Token Type Hint"
                  },
                  "client_id": {
                    "type": "string",
                    "title": "Client Id"
                  },
                  "client_secret": {
                    "type": "string",
                    "title": "Client Secret"
                  }
                },
                "type": "object",
                "required": [
                  "token",
                  "client_id",
                  "client_secret"
                ],
                "title": "IntrospectTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntrospectTokenResponse"
                }
              }
            }
          }
        },
        "x-speakeasy-group": "oauth2",
        "x-speakeasy-name-override": "introspect",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "introspect_token",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Oauth2.Introspect(ctx, operations.Oauth2IntrospectTokenIntrospectTokenRequest{\n        Token: \"<value>\",\n        ClientID: \"<id>\",\n        ClientSecret: \"<value>\",\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.IntrospectTokenResponse != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "introspect_token",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.oauth2.introspect({\n    token: \"<value>\",\n    clientId: \"<id>\",\n    clientSecret: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "introspect_token",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.oauth2.introspect(request={\n        \"token\": \"<value>\",\n        \"client_id\": \"<id>\",\n        \"client_secret\": \"<value>\",\n    })\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/oauth2/userinfo": {
      "get": {
        "tags": [
          "oauth2",
          "featured",
          "documented"
        ],
        "summary": "Get User Info",
        "description": "Get information about the authenticated user.",
        "operationId": "oauth2:userinfo",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/UserInfoUser"
                    },
                    {
                      "$ref": "#/components/schemas/UserInfoOrganization"
                    }
                  ],
                  "title": "Response Oauth2:Userinfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "oidc": []
          }
        ],
        "x-speakeasy-name-override": "userinfo",
        "x-speakeasy-group": "oauth2",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "userinfo",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Oauth2.Userinfo(ctx)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ResponseOauth2Userinfo != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "userinfo",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.oauth2.userinfo();\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "userinfo",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.oauth2.userinfo()\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/benefits/": {
      "get": {
        "tags": [
          "benefits",
          "documented"
        ],
        "summary": "List Benefits",
        "description": "List benefits.",
        "operationId": "benefits:list",
        "security": [
          {
            "oidc": [
              "benefits:read",
              "benefits:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/BenefitType"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BenefitType"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "BenefitType Filter",
              "description": "Filter by benefit type."
            },
            "description": "Filter by benefit type."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_Benefit_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "benefits",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "list",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Benefits.List(ctx, nil, nil, nil, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceBenefit != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "list",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.benefits.list({});\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "list",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.benefits.list()\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          }
        ]
      },
      "post": {
        "tags": [
          "benefits",
          "documented"
        ],
        "summary": "Create Benefit",
        "description": "Create a benefit.",
        "operationId": "benefits:create",
        "security": [
          {
            "oidc": [
              "benefits:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BenefitCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Benefit created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Benefit",
                  "title": "Benefit"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "benefits",
        "x-speakeasy-name-override": "create",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "create",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Benefits.Create(ctx, components.CreateBenefitCreateBenefitDownloadablesCreate(\n        components.BenefitDownloadablesCreate{\n            Description: \"yuck forager beneath please shadowy foodstuffs welcome\",\n            Properties: components.BenefitDownloadablesCreateProperties{\n                Files: []string{\n                    \"<value>\",\n                },\n            },\n        },\n    ))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Benefit != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "create",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.benefits.create({\n    description: \"delightfully fumigate convection though zowie up bulky electronics\",\n    properties: {\n      guildToken: \"<value>\",\n      roleId: \"<id>\",\n    },\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "create",
            "source": "import polar_sdk\nfrom polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.benefits.create(request={\n        \"type\": polar_sdk.BenefitDiscordCreateType.DISCORD,\n        \"description\": \"delightfully fumigate convection though zowie up bulky electronics\",\n        \"properties\": {\n            \"guild_token\": \"<value>\",\n            \"role_id\": \"<id>\",\n        },\n    })\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/benefits/{id}": {
      "get": {
        "tags": [
          "benefits",
          "documented"
        ],
        "summary": "Get Benefit",
        "description": "Get a benefit by ID.",
        "operationId": "benefits:get",
        "security": [
          {
            "oidc": [
              "benefits:read",
              "benefits:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The benefit ID.",
              "x-polar-selector-widget": {
                "resourceRoot": "/v1/benefits",
                "resourceName": "Benefit",
                "displayProperty": "description"
              },
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Benefit",
                  "title": "Benefit"
                }
              }
            }
          },
          "404": {
            "description": "Benefit not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "benefits",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "get",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Benefits.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Benefit != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "get",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.benefits.get({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "get",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.benefits.get(id=\"<value>\")\n\n    # Handle response\n    print(res)"
          }
        ]
      },
      "patch": {
        "tags": [
          "benefits",
          "documented"
        ],
        "summary": "Update Benefit",
        "description": "Update a benefit.",
        "operationId": "benefits:update",
        "security": [
          {
            "oidc": [
              "benefits:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The benefit ID.",
              "x-polar-selector-widget": {
                "resourceRoot": "/v1/benefits",
                "resourceName": "Benefit",
                "displayProperty": "description"
              },
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/BenefitAdsUpdate"
                  },
                  {
                    "$ref": "#/components/schemas/BenefitCustomUpdate"
                  },
                  {
                    "$ref": "#/components/schemas/BenefitDiscordUpdate"
                  },
                  {
                    "$ref": "#/components/schemas/BenefitGitHubRepositoryUpdate"
                  },
                  {
                    "$ref": "#/components/schemas/BenefitDownloadablesUpdate"
                  },
                  {
                    "$ref": "#/components/schemas/BenefitLicenseKeysUpdate"
                  }
                ],
                "title": "Benefit Update"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Benefit updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Benefit",
                  "title": "Benefit"
                }
              }
            }
          },
          "403": {
            "description": "You don't have the permission to update this benefit.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotPermitted"
                }
              }
            }
          },
          "404": {
            "description": "Benefit not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "benefits",
        "x-speakeasy-name-override": "update",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "update",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Benefits.Update(ctx, \"<value>\", operations.CreateBenefitsUpdateBenefitUpdateBenefitGitHubRepositoryUpdate(\n        components.BenefitGitHubRepositoryUpdate{\n            Properties: &components.BenefitGitHubRepositoryCreateProperties{\n                RepositoryOwner: \"polarsource\",\n                RepositoryName: \"private_repo\",\n                Permission: components.BenefitGitHubRepositoryCreatePropertiesPermissionTriage,\n            },\n        },\n    ))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Benefit != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "update",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.benefits.update({\n    id: \"<value>\",\n    requestBody: {},\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "update",
            "source": "import polar_sdk\nfrom polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.benefits.update(id=\"<value>\", request_body={\n        \"type\": polar_sdk.BenefitLicenseKeysUpdateType.LICENSE_KEYS,\n    })\n\n    # Handle response\n    print(res)"
          }
        ]
      },
      "delete": {
        "tags": [
          "benefits",
          "documented"
        ],
        "summary": "Delete Benefit",
        "description": "Delete a benefit.\n\n> [!WARNING]\n> Every grants associated with the benefit will be revoked.\n> Users will lose access to the benefit.",
        "operationId": "benefits:delete",
        "security": [
          {
            "oidc": [
              "benefits:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The benefit ID.",
              "x-polar-selector-widget": {
                "resourceRoot": "/v1/benefits",
                "resourceName": "Benefit",
                "displayProperty": "description"
              },
              "title": "Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Benefit deleted."
          },
          "403": {
            "description": "You don't have the permission to update this benefit or it's not deletable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotPermitted"
                }
              }
            }
          },
          "404": {
            "description": "Benefit not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "benefits",
        "x-speakeasy-name-override": "delete",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "delete",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Benefits.Delete(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "delete",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  await polar.benefits.delete({\n    id: \"<value>\",\n  });\n\n\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "delete",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    polar.benefits.delete(id=\"<value>\")\n\n    # Use the SDK ..."
          }
        ]
      }
    },
    "/v1/benefits/{id}/grants": {
      "get": {
        "tags": [
          "benefits",
          "documented"
        ],
        "summary": "List Benefit Grants",
        "description": "List the individual grants for a benefit.\n\nIt's especially useful to check if a user has been granted a benefit.",
        "operationId": "benefits:grants",
        "security": [
          {
            "oidc": [
              "benefits:read",
              "benefits:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The benefit ID.",
              "x-polar-selector-widget": {
                "resourceRoot": "/v1/benefits",
                "resourceName": "Benefit",
                "displayProperty": "description"
              },
              "title": "Id"
            }
          },
          {
            "name": "is_granted",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by granted status. If `true`, only granted benefits will be returned. If `false`, only revoked benefits will be returned. ",
              "title": "Is Granted"
            },
            "description": "Filter by granted status. If `true`, only granted benefits will be returned. If `false`, only revoked benefits will be returned. "
          },
          {
            "name": "customer_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "CustomerID Filter",
              "description": "Filter by customer."
            },
            "description": "Filter by customer."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_BenefitGrant_"
                }
              }
            }
          },
          "404": {
            "description": "Benefit not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "benefits",
        "x-speakeasy-name-override": "grants",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "grants",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Benefits.Grants(ctx, operations.BenefitsGrantsRequest{\n        ID: \"<value>\",\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceBenefitGrant != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "grants",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.benefits.grants({\n    id: \"<value>\",\n  });\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "grants",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.benefits.grants(id=\"<value>\")\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          }
        ]
      }
    },
    "/v1/products/": {
      "get": {
        "tags": [
          "products",
          "documented",
          "featured"
        ],
        "summary": "List Products",
        "description": "List products.",
        "operationId": "products:list",
        "security": [
          {
            "oidc": [
              "products:read",
              "products:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by product name.",
              "title": "Query"
            },
            "description": "Filter by product name."
          },
          {
            "name": "is_archived",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter on archived products.",
              "title": "Is Archived"
            },
            "description": "Filter on archived products."
          },
          {
            "name": "is_recurring",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter on recurring products. If `true`, only subscriptions tiers are returned. If `false`, only one-time purchase products are returned. ",
              "title": "Is Recurring"
            },
            "description": "Filter on recurring products. If `true`, only subscriptions tiers are returned. If `false`, only one-time purchase products are returned. "
          },
          {
            "name": "benefit_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The benefit ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/benefits",
                    "resourceName": "Benefit",
                    "displayProperty": "description"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The benefit ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/benefits",
                      "resourceName": "Benefit",
                      "displayProperty": "description"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "BenefitID Filter",
              "description": "Filter products granting specific benefit."
            },
            "description": "Filter products granting specific benefit."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "-created_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_Product_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "products",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "list",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Products.List(ctx, operations.ProductsListRequest{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceProduct != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "list",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.products.list({});\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "list",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.products.list()\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          }
        ]
      },
      "post": {
        "tags": [
          "products",
          "documented",
          "featured"
        ],
        "summary": "Create Product",
        "description": "Create a product.",
        "operationId": "products:create",
        "security": [
          {
            "oidc": [
              "products:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductCreate",
                "title": "ProductCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "products",
        "x-speakeasy-name-override": "create",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "create",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Products.Create(ctx, components.CreateProductCreateProductRecurringCreate(\n        components.ProductRecurringCreate{\n            Name: \"<value>\",\n            Prices: components.CreateProductRecurringCreatePricesArrayOfProductPriceRecurringFixedCreate(\n                []components.ProductPriceRecurringFixedCreate{\n                    components.ProductPriceRecurringFixedCreate{\n                        PriceAmount: 796474,\n                        RecurringInterval: components.SubscriptionRecurringIntervalYear,\n                    },\n                },\n            ),\n        },\n    ))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Product != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "create",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.products.create({\n    name: \"<value>\",\n    prices: [\n      {\n        recurringInterval: \"month\",\n      },\n    ],\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "create",
            "source": "import polar_sdk\nfrom polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.products.create(request={\n        \"name\": \"<value>\",\n        \"prices\": [\n            {\n                \"type\": polar_sdk.ProductPriceRecurringFreeCreateType.RECURRING,\n                \"amount_type\": polar_sdk.ProductPriceRecurringFreeCreateAmountType.FREE,\n                \"recurring_interval\": polar_sdk.SubscriptionRecurringInterval.MONTH,\n            },\n        ],\n    })\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/products/{id}": {
      "get": {
        "tags": [
          "products",
          "documented",
          "featured"
        ],
        "summary": "Get Product",
        "description": "Get a product by ID.",
        "operationId": "products:get",
        "security": [
          {
            "oidc": [
              "products:read",
              "products:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The product ID.",
              "x-polar-selector-widget": {
                "resourceRoot": "/v1/products",
                "resourceName": "Product",
                "displayProperty": "name"
              },
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "404": {
            "description": "Product not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "products",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "get",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Products.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Product != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "get",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.products.get({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "get",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.products.get(id=\"<value>\")\n\n    # Handle response\n    print(res)"
          }
        ]
      },
      "patch": {
        "tags": [
          "products",
          "documented",
          "featured"
        ],
        "summary": "Update Product",
        "description": "Update a product.",
        "operationId": "products:update",
        "security": [
          {
            "oidc": [
              "products:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The product ID.",
              "x-polar-selector-widget": {
                "resourceRoot": "/v1/products",
                "resourceName": "Product",
                "displayProperty": "name"
              },
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "403": {
            "description": "You don't have the permission to update this product.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotPermitted"
                }
              }
            }
          },
          "404": {
            "description": "Product not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "products",
        "x-speakeasy-name-override": "update",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "update",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Products.Update(ctx, \"<value>\", components.ProductUpdate{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Product != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "update",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.products.update({\n    id: \"<value>\",\n    productUpdate: {},\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "update",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.products.update(id=\"<value>\", product_update={})\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/products/{id}/benefits": {
      "post": {
        "tags": [
          "products",
          "documented",
          "featured"
        ],
        "summary": "Update Product Benefits",
        "description": "Update benefits granted by a product.",
        "operationId": "products:update_benefits",
        "security": [
          {
            "oidc": [
              "products:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The product ID.",
              "x-polar-selector-widget": {
                "resourceRoot": "/v1/products",
                "resourceName": "Product",
                "displayProperty": "name"
              },
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductBenefitsUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product benefits updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "403": {
            "description": "You don't have the permission to update this product.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotPermitted"
                }
              }
            }
          },
          "404": {
            "description": "Product not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "products",
        "x-speakeasy-name-override": "update_benefits",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "update_benefits",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Products.UpdateBenefits(ctx, \"<value>\", components.ProductBenefitsUpdate{\n        Benefits: []string{\n            \"<value>\",\n        },\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Product != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "update_benefits",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.products.updateBenefits({\n    id: \"<value>\",\n    productBenefitsUpdate: {\n      benefits: [\n        \"<value>\",\n      ],\n    },\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "update_benefits",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.products.update_benefits(id=\"<value>\", product_benefits_update={\n        \"benefits\": [\n            \"<value>\",\n        ],\n    })\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/orders/": {
      "get": {
        "tags": [
          "orders",
          "documented"
        ],
        "summary": "List Orders",
        "description": "List orders.",
        "operationId": "orders:list",
        "security": [
          {
            "oidc": [
              "orders:read"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "product_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The product ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/products",
                    "resourceName": "Product",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The product ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/products",
                      "resourceName": "Product",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "ProductID Filter",
              "description": "Filter by product ID."
            },
            "description": "Filter by product ID."
          },
          {
            "name": "product_price_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ProductPriceType"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductPriceType"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "ProductPriceType Filter",
              "description": "Filter by product price type. `recurring` will return orders corresponding to subscriptions creations or renewals. `one_time` will return orders corresponding to one-time purchases."
            },
            "description": "Filter by product price type. `recurring` will return orders corresponding to subscriptions creations or renewals. `one_time` will return orders corresponding to one-time purchases."
          },
          {
            "name": "discount_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "DiscountID Filter",
              "description": "Filter by discount ID."
            },
            "description": "Filter by discount ID."
          },
          {
            "name": "customer_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "CustomerID Filter",
              "description": "Filter by customer ID."
            },
            "description": "Filter by customer ID."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "-created_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_Order_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "orders",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "list",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Orders.List(ctx, operations.OrdersListRequest{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceOrder != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "list",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.orders.list({});\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "list",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.orders.list()\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          }
        ]
      }
    },
    "/v1/orders/{id}": {
      "get": {
        "tags": [
          "orders",
          "documented"
        ],
        "summary": "Get Order",
        "description": "Get an order by ID.",
        "operationId": "orders:get",
        "security": [
          {
            "oidc": [
              "orders:read"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The order ID.",
              "title": "Id"
            },
            "description": "The order ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "404": {
            "description": "Order not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "orders",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "get",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Orders.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Order != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "get",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.orders.get({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "get",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.orders.get(id=\"<value>\")\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/orders/{id}/invoice": {
      "get": {
        "tags": [
          "orders",
          "documented"
        ],
        "summary": "Get Order Invoice",
        "description": "Get an order's invoice data.",
        "operationId": "orders:invoice",
        "security": [
          {
            "oidc": [
              "orders:read"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The order ID.",
              "title": "Id"
            },
            "description": "The order ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderInvoice"
                }
              }
            }
          },
          "404": {
            "description": "Order not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "orders",
        "x-speakeasy-name-override": "invoice",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "invoice",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Orders.Invoice(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.OrderInvoice != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "invoice",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.orders.invoice({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "invoice",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.orders.invoice(id=\"<value>\")\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/checkouts/custom/": {
      "get": {
        "tags": [
          "checkouts",
          "custom",
          "documented",
          "featured"
        ],
        "summary": "List Checkout Sessions",
        "description": "List checkout sessions.",
        "operationId": "checkouts:custom:list",
        "security": [
          {
            "oidc": [
              "checkouts:read",
              "checkouts:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "product_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The product ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/products",
                    "resourceName": "Product",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The product ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/products",
                      "resourceName": "Product",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "ProductID Filter",
              "description": "Filter by product ID."
            },
            "description": "Filter by product ID."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CheckoutSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "-created_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_Checkout_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "checkouts.custom",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "list",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Checkouts.Custom.List(ctx, operations.CheckoutsCustomListRequest{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceCheckout != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "list",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.checkouts.custom.list({});\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "list",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.checkouts.custom.list()\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          }
        ]
      },
      "post": {
        "tags": [
          "checkouts",
          "custom",
          "documented",
          "featured"
        ],
        "summary": "Create Checkout Session",
        "description": "Create a checkout session.",
        "operationId": "checkouts:custom:create",
        "security": [
          {
            "oidc": [
              "checkouts:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckoutCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Checkout session created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "checkouts.custom",
        "x-speakeasy-name-override": "create",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "create",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Checkouts.Custom.Create(ctx, components.CreateCheckoutCreateCheckoutPriceCreate(\n        components.CheckoutPriceCreate{\n            ProductPriceID: \"<value>\",\n        },\n    ))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Checkout != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "create",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.checkouts.custom.create({\n    productId: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "create",
            "source": "import polar_sdk\nfrom polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.checkouts.custom.create(request={\n        \"payment_processor\": polar_sdk.CheckoutProductCreatePaymentProcessor.STRIPE,\n        \"product_id\": \"<value>\",\n    })\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/checkouts/custom/{id}": {
      "get": {
        "tags": [
          "checkouts",
          "custom",
          "documented",
          "featured"
        ],
        "summary": "Get Checkout Session",
        "description": "Get a checkout session by ID.",
        "operationId": "checkouts:custom:get",
        "security": [
          {
            "oidc": [
              "checkouts:read",
              "checkouts:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The checkout session ID.",
              "title": "Id"
            },
            "description": "The checkout session ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          },
          "404": {
            "description": "Checkout session not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "checkouts.custom",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "get",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Checkouts.Custom.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Checkout != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "get",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.checkouts.custom.get({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "get",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.checkouts.custom.get(id=\"<value>\")\n\n    # Handle response\n    print(res)"
          }
        ]
      },
      "patch": {
        "tags": [
          "checkouts",
          "custom",
          "documented",
          "featured"
        ],
        "summary": "Update Checkout Session",
        "description": "Update a checkout session.",
        "operationId": "checkouts:custom:update",
        "security": [
          {
            "oidc": [
              "checkouts:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The checkout session ID.",
              "title": "Id"
            },
            "description": "The checkout session ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckoutUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Checkout session updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          },
          "404": {
            "description": "Checkout session not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "checkouts.custom",
        "x-speakeasy-name-override": "update",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "update",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Checkouts.Custom.Update(ctx, \"<value>\", components.CheckoutUpdate{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Checkout != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "update",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.checkouts.custom.update({\n    id: \"<value>\",\n    checkoutUpdate: {},\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "update",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.checkouts.custom.update(id=\"<value>\", checkout_update={})\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/checkouts/custom/client/{client_secret}": {
      "get": {
        "tags": [
          "checkouts",
          "custom",
          "documented",
          "featured"
        ],
        "summary": "Get Checkout Session from Client",
        "description": "Get a checkout session by client secret.",
        "operationId": "checkouts:custom:client_get",
        "parameters": [
          {
            "name": "client_secret",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The checkout session client secret.",
              "title": "Client Secret"
            },
            "description": "The checkout session client secret."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutPublic"
                }
              }
            }
          },
          "404": {
            "description": "Checkout session not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-group": "checkouts.custom",
        "x-speakeasy-name-override": "client_get",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "client_get",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Checkouts.Custom.ClientGet(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CheckoutPublic != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "client_get",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.checkouts.custom.clientGet({\n    clientSecret: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "client_get",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.checkouts.custom.client_get(client_secret=\"<value>\")\n\n    # Handle response\n    print(res)"
          }
        ]
      },
      "patch": {
        "tags": [
          "checkouts",
          "custom",
          "documented",
          "featured"
        ],
        "summary": "Update Checkout Session from Client",
        "description": "Update a checkout session by client secret.",
        "operationId": "checkouts:custom:client_update",
        "parameters": [
          {
            "name": "client_secret",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The checkout session client secret.",
              "title": "Client Secret"
            },
            "description": "The checkout session client secret."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckoutUpdatePublic"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Checkout session updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutPublic"
                }
              }
            }
          },
          "404": {
            "description": "Checkout session not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-group": "checkouts.custom",
        "x-speakeasy-name-override": "client_update",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "client_update",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Checkouts.Custom.ClientUpdate(ctx, \"<value>\", components.CheckoutUpdatePublic{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CheckoutPublic != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "client_update",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.checkouts.custom.clientUpdate({\n    clientSecret: \"<value>\",\n    checkoutUpdatePublic: {},\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "client_update",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.checkouts.custom.client_update(client_secret=\"<value>\", checkout_update_public={})\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/checkouts/custom/client/{client_secret}/confirm": {
      "post": {
        "tags": [
          "checkouts",
          "custom",
          "documented",
          "featured"
        ],
        "summary": "Confirm Checkout Session from Client",
        "description": "Confirm a checkout session by client secret.\n\nOrders and subscriptions will be processed.",
        "operationId": "checkouts:custom:client_confirm",
        "security": [
          {
            "oidc": []
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "client_secret",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The checkout session client secret.",
              "title": "Client Secret"
            },
            "description": "The checkout session client secret."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckoutConfirmStripe"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Checkout session confirmed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutPublicConfirmed"
                }
              }
            }
          },
          "404": {
            "description": "Checkout session not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Anonymous",
          "User"
        ],
        "x-speakeasy-group": "checkouts.custom",
        "x-speakeasy-name-override": "client_confirm",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "client_confirm",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Checkouts.Custom.ClientConfirm(ctx, \"<value>\", components.CheckoutConfirmStripe{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CheckoutPublicConfirmed != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "client_confirm",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.checkouts.custom.clientConfirm({\n    clientSecret: \"<value>\",\n    checkoutConfirmStripe: {},\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "client_confirm",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.checkouts.custom.client_confirm(client_secret=\"<value>\", checkout_confirm_stripe={})\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/checkouts/": {
      "post": {
        "tags": [
          "checkouts",
          "documented"
        ],
        "summary": "Create Checkout",
        "description": "Create a checkout session.",
        "operationId": "checkouts:create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckoutLegacyCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutLegacy"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "oidc": []
          },
          {
            "pat": []
          }
        ],
        "x-polar-allowed-subjects": [
          "Anonymous",
          "User"
        ],
        "x-speakeasy-deprecation-replacement": "checkouts:custom:create",
        "x-speakeasy-deprecation-message": "This API is deprecated. We recommend you to use the new custom checkout API, which is more flexible and powerful. Please refer to the documentation for more information.",
        "x-speakeasy-group": "checkouts",
        "x-speakeasy-name-override": "create"
      }
    },
    "/v1/checkouts/{id}": {
      "get": {
        "tags": [
          "checkouts",
          "documented"
        ],
        "summary": "Get Checkout",
        "description": "Get an active checkout session by ID.",
        "operationId": "checkouts:get",
        "deprecated": true,
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutLegacy"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-deprecation-message": "This API is deprecated. We recommend you to use the new custom checkout API, which is more flexible and powerful. Please refer to the documentation for more information.",
        "x-speakeasy-group": "checkouts",
        "x-speakeasy-name-override": "get"
      }
    },
    "/v1/files/": {
      "get": {
        "tags": [
          "files",
          "documented"
        ],
        "summary": "List Files",
        "description": "List files.",
        "operationId": "files:list",
        "security": [
          {
            "oidc": [
              "files:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "List of file IDs to get. ",
              "title": "Ids"
            },
            "description": "List of file IDs to get. "
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_FileRead_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "files",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "list",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Files.List(ctx, nil, nil, nil, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceFileRead != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "list",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.files.list({});\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "list",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.files.list()\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          }
        ]
      },
      "post": {
        "tags": [
          "files",
          "documented"
        ],
        "summary": "Create File",
        "description": "Create a file.",
        "operationId": "files:create",
        "security": [
          {
            "oidc": [
              "files:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "File created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileUpload"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "files",
        "x-speakeasy-name-override": "create",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "create",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Files.Create(ctx, components.CreateFileCreateProductMediaFileCreate(\n        components.ProductMediaFileCreate{\n            Name: \"<value>\",\n            MimeType: \"<value>\",\n            Size: 951062,\n            Upload: components.S3FileCreateMultipart{\n                Parts: []components.S3FileCreatePart{\n                    components.S3FileCreatePart{\n                        Number: 86,\n                        ChunkStart: 169727,\n                        ChunkEnd: 89964,\n                    },\n                },\n            },\n        },\n    ))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.FileUpload != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "create",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.files.create({\n    name: \"<value>\",\n    mimeType: \"<value>\",\n    size: 638424,\n    upload: {\n      parts: [\n        {\n          number: 417458,\n          chunkStart: 134365,\n          chunkEnd: 69025,\n        },\n      ],\n    },\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "create",
            "source": "import polar_sdk\nfrom polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.files.create(request={\n        \"name\": \"<value>\",\n        \"mime_type\": \"<value>\",\n        \"size\": 638424,\n        \"upload\": {\n            \"parts\": [\n                {\n                    \"number\": 417458,\n                    \"chunk_start\": 134365,\n                    \"chunk_end\": 69025,\n                },\n            ],\n        },\n        \"service\": polar_sdk.OrganizationAvatarFileCreateService.ORGANIZATION_AVATAR,\n    })\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/files/{id}/uploaded": {
      "post": {
        "tags": [
          "files",
          "documented"
        ],
        "summary": "Complete File Upload",
        "description": "Complete a file upload.",
        "operationId": "files:uploaded",
        "security": [
          {
            "oidc": [
              "files:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The file ID.",
              "title": "Id"
            },
            "description": "The file ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileUploadCompleted"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File upload completed.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DownloadableFileRead"
                    },
                    {
                      "$ref": "#/components/schemas/ProductMediaFileRead"
                    },
                    {
                      "$ref": "#/components/schemas/OrganizationAvatarFileRead"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "service",
                    "mapping": {
                      "downloadable": "#/components/schemas/DownloadableFileRead",
                      "product_media": "#/components/schemas/ProductMediaFileRead",
                      "organization_avatar": "#/components/schemas/OrganizationAvatarFileRead"
                    }
                  },
                  "title": "Response Files:Uploaded"
                }
              }
            }
          },
          "403": {
            "description": "You don't have the permission to update this file.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotPermitted"
                }
              }
            }
          },
          "404": {
            "description": "File not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "files",
        "x-speakeasy-name-override": "uploaded",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "uploaded",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Files.Uploaded(ctx, \"<value>\", components.FileUploadCompleted{\n        ID: \"<id>\",\n        Path: \"/sys\",\n        Parts: []components.S3FileUploadCompletedPart{\n            components.S3FileUploadCompletedPart{\n                Number: 173116,\n                ChecksumEtag: \"<value>\",\n                ChecksumSha256Base64: polargo.String(\"<value>\"),\n            },\n            components.S3FileUploadCompletedPart{\n                Number: 894030,\n                ChecksumEtag: \"<value>\",\n                ChecksumSha256Base64: polargo.String(\"<value>\"),\n            },\n            components.S3FileUploadCompletedPart{\n                Number: 673715,\n                ChecksumEtag: \"<value>\",\n                ChecksumSha256Base64: polargo.String(\"<value>\"),\n            },\n        },\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ResponseFilesUploaded != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "uploaded",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.files.uploaded({\n    id: \"<value>\",\n    fileUploadCompleted: {\n      id: \"<id>\",\n      path: \"/sys\",\n      parts: [\n        {\n          number: 173116,\n          checksumEtag: \"<value>\",\n          checksumSha256Base64: \"<value>\",\n        },\n        {\n          number: 894030,\n          checksumEtag: \"<value>\",\n          checksumSha256Base64: \"<value>\",\n        },\n        {\n          number: 673715,\n          checksumEtag: \"<value>\",\n          checksumSha256Base64: \"<value>\",\n        },\n      ],\n    },\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "uploaded",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.files.uploaded(id=\"<value>\", file_upload_completed={\n        \"id\": \"<id>\",\n        \"path\": \"/sys\",\n        \"parts\": [\n            {\n                \"number\": 173116,\n                \"checksum_etag\": \"<value>\",\n                \"checksum_sha256_base64\": \"<value>\",\n            },\n            {\n                \"number\": 894030,\n                \"checksum_etag\": \"<value>\",\n                \"checksum_sha256_base64\": \"<value>\",\n            },\n            {\n                \"number\": 673715,\n                \"checksum_etag\": \"<value>\",\n                \"checksum_sha256_base64\": \"<value>\",\n            },\n        ],\n    })\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/files/{id}": {
      "patch": {
        "tags": [
          "files",
          "documented"
        ],
        "summary": "Update File",
        "description": "Update a file.",
        "operationId": "files:update",
        "security": [
          {
            "oidc": [
              "files:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The file ID.",
              "title": "Id"
            },
            "description": "The file ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilePatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File updated.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DownloadableFileRead"
                    },
                    {
                      "$ref": "#/components/schemas/ProductMediaFileRead"
                    },
                    {
                      "$ref": "#/components/schemas/OrganizationAvatarFileRead"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "service",
                    "mapping": {
                      "downloadable": "#/components/schemas/DownloadableFileRead",
                      "product_media": "#/components/schemas/ProductMediaFileRead",
                      "organization_avatar": "#/components/schemas/OrganizationAvatarFileRead"
                    }
                  },
                  "title": "Response Files:Update"
                }
              }
            }
          },
          "403": {
            "description": "You don't have the permission to update this file.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotPermitted"
                }
              }
            }
          },
          "404": {
            "description": "File not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "files",
        "x-speakeasy-name-override": "update",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "update",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Files.Update(ctx, \"<value>\", components.FilePatch{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ResponseFilesUpdate != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "update",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.files.update({\n    id: \"<value>\",\n    filePatch: {},\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "update",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.files.update(id=\"<value>\", file_patch={})\n\n    # Handle response\n    print(res)"
          }
        ]
      },
      "delete": {
        "tags": [
          "files",
          "documented"
        ],
        "summary": "Delete File",
        "description": "Delete a file.",
        "operationId": "files:delete",
        "security": [
          {
            "oidc": [
              "files:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "File deleted."
          },
          "403": {
            "description": "You don't have the permission to delete this file.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotPermitted"
                }
              }
            }
          },
          "404": {
            "description": "File not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "files",
        "x-speakeasy-name-override": "delete",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "delete",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Files.Delete(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "delete",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  await polar.files.delete({\n    id: \"<value>\",\n  });\n\n\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "delete",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    polar.files.delete(id=\"<value>\")\n\n    # Use the SDK ..."
          }
        ]
      }
    },
    "/v1/metrics/": {
      "get": {
        "tags": [
          "metrics",
          "documented"
        ],
        "summary": "Get Metrics",
        "description": "Get metrics about your orders and subscriptions.",
        "operationId": "metrics:get",
        "security": [
          {
            "oidc": [
              "metrics:read"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "description": "Start date.",
              "title": "Start Date"
            },
            "description": "Start date."
          },
          {
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "description": "End date.",
              "title": "End Date"
            },
            "description": "End date."
          },
          {
            "name": "interval",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Interval",
              "description": "Interval between two timestamps."
            },
            "description": "Interval between two timestamps."
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "product_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The product ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/products",
                    "resourceName": "Product",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The product ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/products",
                      "resourceName": "Product",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "ProductID Filter",
              "description": "Filter by product ID."
            },
            "description": "Filter by product ID."
          },
          {
            "name": "product_price_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ProductPriceType"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductPriceType"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "ProductPriceType Filter",
              "description": "Filter by product price type. `recurring` will filter data corresponding to subscriptions creations or renewals. `one_time` will filter data corresponding to one-time purchases."
            },
            "description": "Filter by product price type. `recurring` will filter data corresponding to subscriptions creations or renewals. `one_time` will filter data corresponding to one-time purchases."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "metrics",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "get",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/types\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Metrics.Get(ctx, operations.MetricsGetRequest{\n        StartDate: types.MustDateFromString(\"2024-02-07\"),\n        EndDate: types.MustDateFromString(\"2023-09-05\"),\n        Interval: components.IntervalWeek,\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.MetricsResponse != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "get",
            "source": "import { Polar } from \"@polar-sh/sdk\";\nimport { RFCDate } from \"@polar-sh/sdk/types\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.metrics.get({\n    startDate: new RFCDate(\"2024-02-07\"),\n    endDate: new RFCDate(\"2023-09-05\"),\n    interval: \"week\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "get",
            "source": "import dateutil.parser\nimport polar_sdk\nfrom polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.metrics.get(start_date=dateutil.parser.parse(\"2024-02-07\").date(), end_date=dateutil.parser.parse(\"2023-09-05\").date(), interval=polar_sdk.Interval.WEEK)\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/metrics/limits": {
      "get": {
        "tags": [
          "metrics",
          "documented"
        ],
        "summary": "Get Metrics Limits",
        "description": "Get the interval limits for the metrics endpoint.",
        "operationId": "metrics:limits",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsLimits"
                }
              }
            }
          }
        },
        "security": [
          {
            "oidc": [
              "metrics:read"
            ]
          },
          {
            "pat": []
          }
        ],
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "metrics",
        "x-speakeasy-name-override": "limits",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "limits",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Metrics.Limits(ctx)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.MetricsLimits != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "limits",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.metrics.limits();\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "limits",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.metrics.limits()\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/license-keys": {
      "get": {
        "tags": [
          "license_keys",
          "documented",
          "featured"
        ],
        "summary": "List License Keys",
        "description": "Get license keys connected to the given organization & filters.",
        "operationId": "license_keys:list",
        "security": [
          {
            "oidc": [
              "license_keys:read",
              "license_keys:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "benefit_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The benefit ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/benefits",
                    "resourceName": "Benefit",
                    "displayProperty": "description"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The benefit ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/benefits",
                      "resourceName": "Benefit",
                      "displayProperty": "description"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "BenefitID Filter",
              "description": "Filter by benefit ID."
            },
            "description": "Filter by benefit ID."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_LicenseKeyRead_"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized to manage license key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "License key not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "license_keys",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "list",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.LicenseKeys.List(ctx, nil, nil, nil, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceLicenseKeyRead != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "list",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.licenseKeys.list({});\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "list",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.license_keys.list()\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          }
        ]
      }
    },
    "/v1/license-keys/{id}": {
      "get": {
        "tags": [
          "license_keys",
          "documented",
          "featured"
        ],
        "summary": "Get License Key",
        "description": "Get a license key.",
        "operationId": "license_keys:get",
        "security": [
          {
            "oidc": [
              "license_keys:read",
              "license_keys:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseKeyWithActivations"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized to manage license key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "License key not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "license_keys",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "get",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.LicenseKeys.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.LicenseKeyWithActivations != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "get",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.licenseKeys.get({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "get",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.license_keys.get(id=\"<value>\")\n\n    # Handle response\n    print(res)"
          }
        ]
      },
      "patch": {
        "tags": [
          "license_keys",
          "documented",
          "featured"
        ],
        "summary": "Update License Key",
        "description": "Update a license key.",
        "operationId": "license_keys:update",
        "security": [
          {
            "oidc": [
              "license_keys:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LicenseKeyUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseKeyRead"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized to manage license key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "License key not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "license_keys",
        "x-speakeasy-name-override": "update",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "update",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.LicenseKeys.Update(ctx, \"<value>\", components.LicenseKeyUpdate{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.LicenseKeyRead != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "update",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.licenseKeys.update({\n    id: \"<value>\",\n    licenseKeyUpdate: {},\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "update",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.license_keys.update(id=\"<value>\", license_key_update={})\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/license-keys/{id}/activations/{activation_id}": {
      "get": {
        "tags": [
          "license_keys",
          "documented",
          "featured"
        ],
        "summary": "Get Activation",
        "description": "Get a license key activation.",
        "operationId": "license_keys:get_activation",
        "security": [
          {
            "oidc": [
              "license_keys:read",
              "license_keys:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            }
          },
          {
            "name": "activation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "title": "Activation Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseKeyActivationRead"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized to manage license key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "License key not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "license_keys",
        "x-speakeasy-name-override": "get_activation",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "get_activation",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.LicenseKeys.GetActivation(ctx, \"<value>\", \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.LicenseKeyActivationRead != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "get_activation",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.licenseKeys.getActivation({\n    id: \"<value>\",\n    activationId: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "get_activation",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.license_keys.get_activation(id=\"<value>\", activation_id=\"<value>\")\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/checkout-links/": {
      "get": {
        "tags": [
          "checkout-links",
          "documented"
        ],
        "summary": "List Checkout Links",
        "description": "List checkout links.",
        "operationId": "checkout-links:list",
        "security": [
          {
            "oidc": [
              "checkout_links:read",
              "checkout_links:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "product_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The product ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/products",
                    "resourceName": "Product",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The product ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/products",
                      "resourceName": "Product",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "ProductID Filter",
              "description": "Filter by product ID."
            },
            "description": "Filter by product ID."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CheckoutLinkSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "created_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_CheckoutLink_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "checkout-links",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "list",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CheckoutLinks.List(ctx, operations.CheckoutLinksListRequest{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceCheckoutLink != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "list",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.checkoutLinks.list({});\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "list",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.checkout_links.list()\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          }
        ]
      },
      "post": {
        "tags": [
          "checkout-links",
          "documented"
        ],
        "summary": "Create Checkout Link",
        "description": "Create a checkout link.",
        "operationId": "checkout-links:create",
        "security": [
          {
            "oidc": [
              "checkout_links:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckoutLinkCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Checkout link created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutLink"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "checkout-links",
        "x-speakeasy-name-override": "create",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "create",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CheckoutLinks.Create(ctx, components.CreateCheckoutLinkCreateCheckoutLinkPriceCreate(\n        components.CheckoutLinkPriceCreate{\n            ProductPriceID: \"<value>\",\n        },\n    ))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CheckoutLink != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "create",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.checkoutLinks.create({\n    productId: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "create",
            "source": "import polar_sdk\nfrom polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.checkout_links.create(request={\n        \"payment_processor\": polar_sdk.CheckoutLinkProductCreatePaymentProcessor.STRIPE,\n        \"product_id\": \"<value>\",\n    })\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/checkout-links/{id}": {
      "get": {
        "tags": [
          "checkout-links",
          "documented"
        ],
        "summary": "Get Checkout Link",
        "description": "Get a checkout link by ID.",
        "operationId": "checkout-links:get",
        "security": [
          {
            "oidc": [
              "checkout_links:read",
              "checkout_links:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The checkout link ID.",
              "title": "Id"
            },
            "description": "The checkout link ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutLink"
                }
              }
            }
          },
          "404": {
            "description": "Checkout link not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "checkout-links",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "get",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CheckoutLinks.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CheckoutLink != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "get",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.checkoutLinks.get({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "get",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.checkout_links.get(id=\"<value>\")\n\n    # Handle response\n    print(res)"
          }
        ]
      },
      "patch": {
        "tags": [
          "checkout-links",
          "documented"
        ],
        "summary": "Update Checkout Link",
        "description": "Update a checkout link.",
        "operationId": "checkout-links:update",
        "security": [
          {
            "oidc": [
              "checkout_links:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The checkout link ID.",
              "title": "Id"
            },
            "description": "The checkout link ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckoutLinkUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Checkout link updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutLink"
                }
              }
            }
          },
          "404": {
            "description": "Checkout link not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "checkout-links",
        "x-speakeasy-name-override": "update",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "update",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CheckoutLinks.Update(ctx, \"<value>\", components.CheckoutLinkUpdate{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CheckoutLink != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "update",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.checkoutLinks.update({\n    id: \"<value>\",\n    checkoutLinkUpdate: {},\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "update",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.checkout_links.update(id=\"<value>\", checkout_link_update={})\n\n    # Handle response\n    print(res)"
          }
        ]
      },
      "delete": {
        "tags": [
          "checkout-links",
          "documented"
        ],
        "summary": "Delete Checkout Link",
        "description": "Delete a checkout link.",
        "operationId": "checkout-links:delete",
        "security": [
          {
            "oidc": [
              "checkout_links:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The checkout link ID.",
              "title": "Id"
            },
            "description": "The checkout link ID."
          }
        ],
        "responses": {
          "204": {
            "description": "Checkout link deleted."
          },
          "404": {
            "description": "Checkout link not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "checkout-links",
        "x-speakeasy-name-override": "delete",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "delete",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CheckoutLinks.Delete(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "delete",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  await polar.checkoutLinks.delete({\n    id: \"<value>\",\n  });\n\n\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "delete",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    polar.checkout_links.delete(id=\"<value>\")\n\n    # Use the SDK ..."
          }
        ]
      }
    },
    "/v1/custom-fields/": {
      "get": {
        "tags": [
          "custom-fields",
          "documented"
        ],
        "summary": "List Custom Fields",
        "description": "List custom fields.",
        "operationId": "custom-fields:list",
        "security": [
          {
            "oidc": [
              "custom_fields:read",
              "custom_fields:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by custom field name or slug.",
              "title": "Query"
            },
            "description": "Filter by custom field name or slug."
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/CustomFieldType"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomFieldType"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "CustomFieldType Filter",
              "description": "Filter by custom field type."
            },
            "description": "Filter by custom field type."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomFieldSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "slug"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_CustomField_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "custom-fields",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "list",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomFields.List(ctx, operations.CustomFieldsListRequest{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceCustomField != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "list",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customFields.list({});\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "list",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.custom_fields.list()\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          }
        ]
      },
      "post": {
        "tags": [
          "custom-fields",
          "documented"
        ],
        "summary": "Create Custom Field",
        "description": "Create a custom field.",
        "operationId": "custom-fields:create",
        "security": [
          {
            "oidc": [
              "custom_fields:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Custom field created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomField",
                  "title": "CustomField"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "custom-fields",
        "x-speakeasy-name-override": "create",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "create",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomFields.Create(ctx, components.CreateCustomFieldCreateCustomFieldCreateSelect(\n        components.CustomFieldCreateSelect{\n            Slug: \"<value>\",\n            Name: \"<value>\",\n            Properties: components.CustomFieldSelectProperties{\n                Options: []components.CustomFieldSelectOption{\n                    components.CustomFieldSelectOption{\n                        Value: \"<value>\",\n                        Label: \"<value>\",\n                    },\n                },\n            },\n        },\n    ))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CustomField != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "create",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customFields.create({\n    slug: \"<value>\",\n    name: \"<value>\",\n    properties: {},\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "create",
            "source": "import polar_sdk\nfrom polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.custom_fields.create(request={\n        \"type\": polar_sdk.CustomFieldCreateNumberType.NUMBER,\n        \"slug\": \"<value>\",\n        \"name\": \"<value>\",\n        \"properties\": {},\n    })\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/custom-fields/{id}": {
      "get": {
        "tags": [
          "custom-fields",
          "documented"
        ],
        "summary": "Get Custom Field",
        "description": "Get a custom field by ID.",
        "operationId": "custom-fields:get",
        "security": [
          {
            "oidc": [
              "custom_fields:read",
              "custom_fields:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The custom field ID.",
              "title": "Id"
            },
            "description": "The custom field ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomField",
                  "title": "CustomField"
                }
              }
            }
          },
          "404": {
            "description": "Custom field not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "custom-fields",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "get",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomFields.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CustomField != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "get",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customFields.get({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "get",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.custom_fields.get(id=\"<value>\")\n\n    # Handle response\n    print(res)"
          }
        ]
      },
      "patch": {
        "tags": [
          "custom-fields",
          "documented"
        ],
        "summary": "Update Custom Field",
        "description": "Update a custom field.",
        "operationId": "custom-fields:update",
        "security": [
          {
            "oidc": [
              "custom_fields:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The custom field ID.",
              "title": "Id"
            },
            "description": "The custom field ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Custom field updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomField",
                  "title": "CustomField"
                }
              }
            }
          },
          "404": {
            "description": "Custom field not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "custom-fields",
        "x-speakeasy-name-override": "update",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "update",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomFields.Update(ctx, \"<value>\", components.CreateCustomFieldUpdateCustomFieldUpdateNumber(\n        components.CustomFieldUpdateNumber{},\n    ))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CustomField != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "update",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customFields.update({\n    id: \"<value>\",\n    customFieldUpdate: {},\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "update",
            "source": "import polar_sdk\nfrom polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.custom_fields.update(id=\"<value>\", custom_field_update={\n        \"type\": polar_sdk.CustomFieldUpdateTextType.TEXT,\n    })\n\n    # Handle response\n    print(res)"
          }
        ]
      },
      "delete": {
        "tags": [
          "custom-fields",
          "documented"
        ],
        "summary": "Delete Custom Field",
        "description": "Delete a custom field.",
        "operationId": "custom-fields:delete",
        "security": [
          {
            "oidc": [
              "custom_fields:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The custom field ID.",
              "title": "Id"
            },
            "description": "The custom field ID."
          }
        ],
        "responses": {
          "204": {
            "description": "Custom field deleted."
          },
          "404": {
            "description": "Custom field not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "custom-fields",
        "x-speakeasy-name-override": "delete",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "delete",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomFields.Delete(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "delete",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  await polar.customFields.delete({\n    id: \"<value>\",\n  });\n\n\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "delete",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    polar.custom_fields.delete(id=\"<value>\")\n\n    # Use the SDK ..."
          }
        ]
      }
    },
    "/v1/discounts/": {
      "get": {
        "tags": [
          "discounts",
          "featured",
          "documented"
        ],
        "summary": "List Discounts",
        "description": "List discounts.",
        "operationId": "discounts:list",
        "security": [
          {
            "oidc": [
              "discounts:read",
              "discounts:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by name.",
              "title": "Query"
            },
            "description": "Filter by name."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DiscountSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "-created_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_Discount_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "discounts",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "list",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Discounts.List(ctx, operations.DiscountsListRequest{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceDiscount != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "list",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.discounts.list({});\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "list",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.discounts.list()\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          }
        ]
      },
      "post": {
        "tags": [
          "discounts",
          "featured",
          "documented"
        ],
        "summary": "Create Discount",
        "description": "Create a discount.",
        "operationId": "discounts:create",
        "security": [
          {
            "oidc": [
              "discounts:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscountCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Discount created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Discount",
                  "title": "Discount"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "discounts",
        "x-speakeasy-name-override": "create",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "create",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Discounts.Create(ctx, components.CreateDiscountCreateDiscountFixedRepeatDurationCreate(\n        components.DiscountFixedRepeatDurationCreate{\n            Duration: components.DiscountDurationForever,\n            DurationInMonths: 417458,\n            Type: components.DiscountTypeFixed,\n            Amount: 69025,\n            Name: \"<value>\",\n        },\n    ))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Discount != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "create",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.discounts.create({\n    duration: \"forever\",\n    durationInMonths: 417458,\n    type: \"fixed\",\n    amount: 69025,\n    name: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "create",
            "source": "import polar_sdk\nfrom polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.discounts.create(request={\n        \"duration\": polar_sdk.DiscountDuration.FOREVER,\n        \"duration_in_months\": 417458,\n        \"type\": polar_sdk.DiscountType.FIXED,\n        \"amount\": 69025,\n        \"name\": \"<value>\",\n    })\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/discounts/{id}": {
      "get": {
        "tags": [
          "discounts",
          "featured",
          "documented"
        ],
        "summary": "Get Discount",
        "description": "Get a discount by ID.",
        "operationId": "discounts:get",
        "security": [
          {
            "oidc": [
              "discounts:read",
              "discounts:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The discount ID.",
              "title": "Id"
            },
            "description": "The discount ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Discount",
                  "title": "Discount"
                }
              }
            }
          },
          "404": {
            "description": "Discount not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "discounts",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "get",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Discounts.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Discount != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "get",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.discounts.get({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "get",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.discounts.get(id=\"<value>\")\n\n    # Handle response\n    print(res)"
          }
        ]
      },
      "patch": {
        "tags": [
          "discounts",
          "featured",
          "documented"
        ],
        "summary": "Update Discount",
        "description": "Update a discount.",
        "operationId": "discounts:update",
        "security": [
          {
            "oidc": [
              "discounts:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The discount ID.",
              "title": "Id"
            },
            "description": "The discount ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscountUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Discount updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Discount",
                  "title": "Discount"
                }
              }
            }
          },
          "404": {
            "description": "Discount not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "discounts",
        "x-speakeasy-name-override": "update",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "update",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Discounts.Update(ctx, \"<value>\", components.DiscountUpdate{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Discount != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "update",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.discounts.update({\n    id: \"<value>\",\n    discountUpdate: {},\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "update",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.discounts.update(id=\"<value>\", discount_update={})\n\n    # Handle response\n    print(res)"
          }
        ]
      },
      "delete": {
        "tags": [
          "discounts",
          "featured",
          "documented"
        ],
        "summary": "Delete Discount",
        "description": "Delete a discount.",
        "operationId": "discounts:delete",
        "security": [
          {
            "oidc": [
              "discounts:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The discount ID.",
              "title": "Id"
            },
            "description": "The discount ID."
          }
        ],
        "responses": {
          "204": {
            "description": "Discount deleted."
          },
          "404": {
            "description": "Discount not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "discounts",
        "x-speakeasy-name-override": "delete",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "delete",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Discounts.Delete(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "delete",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  await polar.discounts.delete({\n    id: \"<value>\",\n  });\n\n\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "delete",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    polar.discounts.delete(id=\"<value>\")\n\n    # Use the SDK ..."
          }
        ]
      }
    },
    "/v1/customers/": {
      "get": {
        "tags": [
          "customers",
          "documented",
          "featured"
        ],
        "summary": "List Customers",
        "description": "List customers.",
        "operationId": "customers:list",
        "security": [
          {
            "oidc": [
              "customers:read",
              "customers:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by name or email.",
              "title": "Query"
            },
            "description": "Filter by name or email."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "-created_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_Customer_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "customers",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "list",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Customers.List(ctx, operations.CustomersListRequest{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceCustomer != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "list",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customers.list({});\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "list",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.customers.list()\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          }
        ]
      },
      "post": {
        "tags": [
          "customers",
          "documented",
          "featured"
        ],
        "summary": "Create Customer",
        "description": "Create a customer.",
        "operationId": "customers:create",
        "security": [
          {
            "oidc": [
              "customers:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Customer created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "customers",
        "x-speakeasy-name-override": "create",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "create",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Customers.Create(ctx, components.CustomerCreate{\n        Email: \"Loyal79@yahoo.com\",\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Customer != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "create",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customers.create({\n    email: \"Loyal79@yahoo.com\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "create",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.customers.create(request={\n        \"email\": \"Loyal79@yahoo.com\",\n    })\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/customers/{id}": {
      "get": {
        "tags": [
          "customers",
          "documented",
          "featured"
        ],
        "summary": "Get Customer",
        "description": "Get a customer by ID.",
        "operationId": "customers:get",
        "security": [
          {
            "oidc": [
              "customers:read",
              "customers:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The customer ID.",
              "title": "Id"
            },
            "description": "The customer ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "404": {
            "description": "Customer not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "customers",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "get",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Customers.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Customer != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "get",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customers.get({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "get",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.customers.get(id=\"<value>\")\n\n    # Handle response\n    print(res)"
          }
        ]
      },
      "patch": {
        "tags": [
          "customers",
          "documented",
          "featured"
        ],
        "summary": "Update Customer",
        "description": "Update a customer.",
        "operationId": "customers:update",
        "security": [
          {
            "oidc": [
              "customers:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The customer ID.",
              "title": "Id"
            },
            "description": "The customer ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Customer updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "404": {
            "description": "Customer not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "customers",
        "x-speakeasy-name-override": "update",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "update",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Customers.Update(ctx, \"<value>\", components.CustomerUpdate{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Customer != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "update",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customers.update({\n    id: \"<value>\",\n    customerUpdate: {},\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "update",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.customers.update(id=\"<value>\", customer_update={})\n\n    # Handle response\n    print(res)"
          }
        ]
      },
      "delete": {
        "tags": [
          "customers",
          "documented",
          "featured"
        ],
        "summary": "Delete Customer",
        "description": "Delete a customer.\n\nImmediately cancels any active subscriptions and revokes any active benefits.",
        "operationId": "customers:delete",
        "security": [
          {
            "oidc": [
              "customers:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The customer ID.",
              "title": "Id"
            },
            "description": "The customer ID."
          }
        ],
        "responses": {
          "204": {
            "description": "Customer deleted."
          },
          "404": {
            "description": "Customer not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "customers",
        "x-speakeasy-name-override": "delete",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "delete",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Customers.Delete(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "delete",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  await polar.customers.delete({\n    id: \"<value>\",\n  });\n\n\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "delete",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    polar.customers.delete(id=\"<value>\")\n\n    # Use the SDK ..."
          }
        ]
      }
    },
    "/v1/customer-portal/benefit-grants/": {
      "get": {
        "tags": [
          "customer_portal",
          "benefit-grants",
          "documented"
        ],
        "summary": "List Benefit Grants",
        "description": "List benefits grants of the authenticated customer or user.",
        "operationId": "customer_portal:benefit-grants:list",
        "security": [
          {
            "oidc": [
              "customer_portal:read",
              "customer_portal:write"
            ]
          },
          {
            "pat": []
          },
          {
            "customer_session": []
          }
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/BenefitType"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BenefitType"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "BenefitType Filter",
              "description": "Filter by benefit type."
            },
            "description": "Filter by benefit type."
          },
          {
            "name": "benefit_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "BenefitID Filter",
              "description": "Filter by benefit ID."
            },
            "description": "Filter by benefit ID."
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "checkout_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "CheckoutID Filter",
              "description": "Filter by checkout ID."
            },
            "description": "Filter by checkout ID."
          },
          {
            "name": "order_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrderID Filter",
              "description": "Filter by order ID."
            },
            "description": "Filter by order ID."
          },
          {
            "name": "subscription_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "SubscriptionID Filter",
              "description": "Filter by subscription ID."
            },
            "description": "Filter by subscription ID."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerBenefitGrantSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "-granted_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_CustomerBenefitGrant_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Customer",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "customer_portal.benefit-grants",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "list",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomerPortal.BenefitGrants.List(ctx, operations.CustomerPortalBenefitGrantsListRequest{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceCustomerBenefitGrant != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "list",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customerPortal.benefitGrants.list({});\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "list",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.customer_portal.benefit_grants.list()\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          }
        ]
      }
    },
    "/v1/customer-portal/benefit-grants/{id}": {
      "get": {
        "tags": [
          "customer_portal",
          "benefit-grants",
          "documented"
        ],
        "summary": "Get Benefit Grant",
        "description": "Get a benefit grant by ID for the authenticated customer or user.",
        "operationId": "customer_portal:benefit-grants:get",
        "security": [
          {
            "oidc": [
              "customer_portal:read",
              "customer_portal:write"
            ]
          },
          {
            "pat": []
          },
          {
            "customer_session": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The benefit grant ID.",
              "title": "Id"
            },
            "description": "The benefit grant ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerBenefitGrant",
                  "title": "CustomerBenefitGrant"
                }
              }
            }
          },
          "404": {
            "description": "Benefit grant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Customer",
          "User"
        ],
        "x-speakeasy-group": "customer_portal.benefit-grants",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "get",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomerPortal.BenefitGrants.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CustomerBenefitGrant != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "get",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customerPortal.benefitGrants.get({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "get",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.customer_portal.benefit_grants.get(id=\"<value>\")\n\n    # Handle response\n    print(res)"
          }
        ]
      },
      "patch": {
        "tags": [
          "customer_portal",
          "benefit-grants",
          "documented"
        ],
        "summary": "Update Benefit Grant",
        "description": "Update a benefit grant for the authenticated customer or user.",
        "operationId": "customer_portal:benefit-grants:update",
        "security": [
          {
            "oidc": [
              "customer_portal:write"
            ]
          },
          {
            "pat": []
          },
          {
            "customer_session": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The benefit grant ID.",
              "title": "Id"
            },
            "description": "The benefit grant ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerBenefitGrantUpdate",
                "title": "CustomerBenefitGrantUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Benefit grant updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerBenefitGrant",
                  "title": "CustomerBenefitGrant"
                }
              }
            }
          },
          "403": {
            "description": "The benefit grant is revoked and cannot be updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotPermitted"
                }
              }
            }
          },
          "404": {
            "description": "Benefit grant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Customer",
          "User"
        ],
        "x-speakeasy-group": "customer_portal.benefit-grants",
        "x-speakeasy-name-override": "update",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "update",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomerPortal.BenefitGrants.Update(ctx, \"<value>\", components.CreateCustomerBenefitGrantUpdateCustomerBenefitGrantDownloadablesUpdate(\n        components.CustomerBenefitGrantDownloadablesUpdate{},\n    ))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CustomerBenefitGrant != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "update",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customerPortal.benefitGrants.update({\n    id: \"<value>\",\n    customerBenefitGrantUpdate: {},\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "update",
            "source": "import polar_sdk\nfrom polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.customer_portal.benefit_grants.update(id=\"<value>\", customer_benefit_grant_update={\n        \"benefit_type\": polar_sdk.CustomerBenefitGrantLicenseKeysUpdateBenefitType.LICENSE_KEYS,\n    })\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/customer-portal/customers/{id}": {
      "get": {
        "tags": [
          "customer_portal",
          "customers",
          "documented"
        ],
        "summary": "Get Customer",
        "description": "Get a customer by ID for the authenticated customer or user.",
        "operationId": "customer_portal:customers:get",
        "security": [
          {
            "oidc": [
              "customer_portal:read",
              "customer_portal:write"
            ]
          },
          {
            "pat": []
          },
          {
            "customer_session": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The customer ID.",
              "title": "Id"
            },
            "description": "The customer ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerPortalCustomer"
                }
              }
            }
          },
          "404": {
            "description": "Customer not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Customer",
          "User"
        ],
        "x-speakeasy-group": "customer_portal.customers",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "get",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomerPortal.Customers.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CustomerPortalCustomer != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "get",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customerPortal.customers.get({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "get",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.customer_portal.customers.get(id=\"<value>\")\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/customer-portal/downloadables/": {
      "get": {
        "tags": [
          "customer_portal",
          "downloadables",
          "documented"
        ],
        "summary": "List Downloadables",
        "operationId": "customer_portal:downloadables:list",
        "security": [
          {
            "oidc": [
              "customer_portal:read",
              "customer_portal:write"
            ]
          },
          {
            "pat": []
          },
          {
            "customer_session": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "benefit_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The benefit ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/benefits",
                    "resourceName": "Benefit",
                    "displayProperty": "description"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The benefit ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/benefits",
                      "resourceName": "Benefit",
                      "displayProperty": "description"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "BenefitID Filter",
              "description": "Filter by benefit ID."
            },
            "description": "Filter by benefit ID."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_DownloadableRead_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Customer",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "customer_portal.downloadables",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "list",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomerPortal.Downloadables.List(ctx, nil, nil, nil, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceDownloadableRead != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "list",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customerPortal.downloadables.list({});\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "list",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.customer_portal.downloadables.list()\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          }
        ]
      }
    },
    "/v1/customer-portal/downloadables/{token}": {
      "get": {
        "tags": [
          "customer_portal",
          "downloadables",
          "documented"
        ],
        "summary": "Get Downloadable",
        "operationId": "customer_portal:downloadables:customer_portal.downloadables.get",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "302": {
            "description": "Redirected to download"
          },
          "400": {
            "description": "Invalid signature"
          },
          "404": {
            "description": "Downloadable not found"
          },
          "410": {
            "description": "Expired signature"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-group": "customer_portal.downloadables",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "get",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomerPortal.Downloadables.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Any != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "get",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customerPortal.downloadables.get({\n    token: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "get",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.customer_portal.downloadables.get(token=\"<value>\")\n\n    assert res is not None\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/customer-portal/license-keys/": {
      "get": {
        "tags": [
          "customer_portal",
          "license_keys",
          "documented",
          "featured"
        ],
        "summary": "List License Keys",
        "operationId": "customer_portal:license_keys:list",
        "security": [
          {
            "oidc": [
              "customer_portal:read",
              "customer_portal:write"
            ]
          },
          {
            "pat": []
          },
          {
            "customer_session": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "benefit_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The benefit ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/benefits",
                    "resourceName": "Benefit",
                    "displayProperty": "description"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by a specific benefit",
              "title": "Benefit Id"
            },
            "description": "Filter by a specific benefit"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_LicenseKeyRead_"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized to manage license key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "License key not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Customer",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "customer_portal.license_keys",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "list",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomerPortal.LicenseKeys.List(ctx, nil, nil, nil, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceLicenseKeyRead != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "list",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customerPortal.licenseKeys.list({});\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "list",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.customer_portal.license_keys.list()\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          }
        ]
      }
    },
    "/v1/customer-portal/license-keys/{id}": {
      "get": {
        "tags": [
          "customer_portal",
          "license_keys",
          "documented",
          "featured"
        ],
        "summary": "Get License Key",
        "description": "Get a license key.",
        "operationId": "customer_portal:license_keys:get",
        "security": [
          {
            "oidc": [
              "customer_portal:read",
              "customer_portal:write"
            ]
          },
          {
            "pat": []
          },
          {
            "customer_session": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseKeyWithActivations"
                }
              }
            }
          },
          "404": {
            "description": "License key not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Customer",
          "User"
        ],
        "x-speakeasy-group": "customer_portal.license_keys",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "get",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomerPortal.LicenseKeys.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.LicenseKeyWithActivations != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "get",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customerPortal.licenseKeys.get({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "get",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.customer_portal.license_keys.get(id=\"<value>\")\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/customer-portal/license-keys/validate": {
      "post": {
        "tags": [
          "customer_portal",
          "license_keys",
          "documented",
          "featured"
        ],
        "summary": "Validate License Key",
        "description": "Validate a license key.",
        "operationId": "customer_portal:license_keys:validate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LicenseKeyValidate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidatedLicenseKey"
                }
              }
            }
          },
          "404": {
            "description": "License key not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-group": "customer_portal.license_keys",
        "x-speakeasy-name-override": "validate",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "validate",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomerPortal.LicenseKeys.Validate(ctx, components.LicenseKeyValidate{\n        Key: \"<key>\",\n        OrganizationID: \"<value>\",\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ValidatedLicenseKey != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "validate",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customerPortal.licenseKeys.validate({\n    key: \"<key>\",\n    organizationId: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "validate",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.customer_portal.license_keys.validate(request={\n        \"key\": \"<key>\",\n        \"organization_id\": \"<value>\",\n    })\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/customer-portal/license-keys/activate": {
      "post": {
        "tags": [
          "customer_portal",
          "license_keys",
          "documented",
          "featured"
        ],
        "summary": "Activate License Key",
        "description": "Activate a license key instance.",
        "operationId": "customer_portal:license_keys:activate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LicenseKeyActivate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseKeyActivationRead"
                }
              }
            }
          },
          "403": {
            "description": "License key activation not required or permitted (limit reached).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotPermitted"
                }
              }
            }
          },
          "404": {
            "description": "License key not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-group": "customer_portal.license_keys",
        "x-speakeasy-name-override": "activate",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "activate",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomerPortal.LicenseKeys.Activate(ctx, components.LicenseKeyActivate{\n        Key: \"<key>\",\n        OrganizationID: \"<value>\",\n        Label: \"<value>\",\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.LicenseKeyActivationRead != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "activate",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customerPortal.licenseKeys.activate({\n    key: \"<key>\",\n    organizationId: \"<value>\",\n    label: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "activate",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.customer_portal.license_keys.activate(request={\n        \"key\": \"<key>\",\n        \"organization_id\": \"<value>\",\n        \"label\": \"<value>\",\n    })\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/customer-portal/license-keys/deactivate": {
      "post": {
        "tags": [
          "customer_portal",
          "license_keys",
          "documented",
          "featured"
        ],
        "summary": "Deactivate License Key",
        "description": "Deactivate a license key instance.",
        "operationId": "customer_portal:license_keys:deactivate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LicenseKeyDeactivate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "License key activation deactivated."
          },
          "404": {
            "description": "License key not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-group": "customer_portal.license_keys",
        "x-speakeasy-name-override": "deactivate",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "deactivate",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomerPortal.LicenseKeys.Deactivate(ctx, components.LicenseKeyDeactivate{\n        Key: \"<key>\",\n        OrganizationID: \"<value>\",\n        ActivationID: \"<value>\",\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "deactivate",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  await polar.customerPortal.licenseKeys.deactivate({\n    key: \"<key>\",\n    organizationId: \"<value>\",\n    activationId: \"<value>\",\n  });\n\n\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "deactivate",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    polar.customer_portal.license_keys.deactivate(request={\n        \"key\": \"<key>\",\n        \"organization_id\": \"<value>\",\n        \"activation_id\": \"<value>\",\n    })\n\n    # Use the SDK ..."
          }
        ]
      }
    },
    "/v1/customer-portal/orders/": {
      "get": {
        "tags": [
          "customer_portal",
          "orders",
          "documented"
        ],
        "summary": "List Orders",
        "description": "List orders of the authenticated customer or user.",
        "operationId": "customer_portal:orders:list",
        "security": [
          {
            "oidc": [
              "customer_portal:read",
              "customer_portal:write"
            ]
          },
          {
            "pat": []
          },
          {
            "customer_session": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "product_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The product ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/products",
                    "resourceName": "Product",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The product ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/products",
                      "resourceName": "Product",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "ProductID Filter",
              "description": "Filter by product ID."
            },
            "description": "Filter by product ID."
          },
          {
            "name": "product_price_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ProductPriceType"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductPriceType"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "ProductPriceType Filter",
              "description": "Filter by product price type. `recurring` will return orders corresponding to subscriptions creations or renewals. `one_time` will return orders corresponding to one-time purchases."
            },
            "description": "Filter by product price type. `recurring` will return orders corresponding to subscriptions creations or renewals. `one_time` will return orders corresponding to one-time purchases."
          },
          {
            "name": "subscription_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "SubscriptionID Filter",
              "description": "Filter by subscription ID."
            },
            "description": "Filter by subscription ID."
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Search by product or organization name.",
              "title": "Query"
            },
            "description": "Search by product or organization name."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerOrderSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "-created_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_CustomerOrder_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Customer",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "customer_portal.orders",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "list",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomerPortal.Orders.List(ctx, operations.CustomerPortalOrdersListRequest{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceCustomerOrder != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "list",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customerPortal.orders.list({});\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "list",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.customer_portal.orders.list()\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          }
        ]
      }
    },
    "/v1/customer-portal/orders/{id}": {
      "get": {
        "tags": [
          "customer_portal",
          "orders",
          "documented"
        ],
        "summary": "Get Order",
        "description": "Get an order by ID for the authenticated customer or user.",
        "operationId": "customer_portal:orders:get",
        "security": [
          {
            "oidc": [
              "customer_portal:read",
              "customer_portal:write"
            ]
          },
          {
            "pat": []
          },
          {
            "customer_session": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The order ID.",
              "title": "Id"
            },
            "description": "The order ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerOrder"
                }
              }
            }
          },
          "404": {
            "description": "Order not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Customer",
          "User"
        ],
        "x-speakeasy-group": "customer_portal.orders",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "get",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomerPortal.Orders.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CustomerOrder != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "get",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customerPortal.orders.get({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "get",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.customer_portal.orders.get(id=\"<value>\")\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/customer-portal/orders/{id}/invoice": {
      "get": {
        "tags": [
          "customer_portal",
          "orders",
          "documented"
        ],
        "summary": "Get Order Invoice",
        "description": "Get an order's invoice data.",
        "operationId": "customer_portal:orders:invoice",
        "security": [
          {
            "oidc": [
              "customer_portal:read",
              "customer_portal:write"
            ]
          },
          {
            "pat": []
          },
          {
            "customer_session": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The order ID.",
              "title": "Id"
            },
            "description": "The order ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerOrderInvoice"
                }
              }
            }
          },
          "404": {
            "description": "Order not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Customer",
          "User"
        ],
        "x-speakeasy-group": "customer_portal.orders",
        "x-speakeasy-name-override": "invoice",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "invoice",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomerPortal.Orders.Invoice(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CustomerOrderInvoice != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "invoice",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customerPortal.orders.invoice({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "invoice",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.customer_portal.orders.invoice(id=\"<value>\")\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/customer-portal/organizations/{slug}": {
      "get": {
        "tags": [
          "customer_portal",
          "organizations",
          "documented"
        ],
        "summary": "Get Organization",
        "description": "Get a customer portal's organization by slug.",
        "operationId": "customer_portal:organizations:get",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The organization slug.",
              "title": "Slug"
            },
            "description": "The organization slug."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-group": "customer_portal.organizations",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "get",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomerPortal.Organizations.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Organization != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "get",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customerPortal.organizations.get({\n    slug: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "get",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.customer_portal.organizations.get(slug=\"<value>\")\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/customer-portal/subscriptions/": {
      "get": {
        "tags": [
          "customer_portal",
          "subscriptions",
          "documented",
          "featured"
        ],
        "summary": "List Subscriptions",
        "description": "List subscriptions of the authenticated customer or user.",
        "operationId": "customer_portal:subscriptions:list",
        "security": [
          {
            "oidc": [
              "customer_portal:read",
              "customer_portal:write"
            ]
          },
          {
            "pat": []
          },
          {
            "customer_session": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The organization ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/organizations",
                    "resourceName": "Organization",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The organization ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/organizations",
                      "resourceName": "Organization",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "OrganizationID Filter",
              "description": "Filter by organization ID."
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "product_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4",
                  "description": "The product ID.",
                  "x-polar-selector-widget": {
                    "resourceRoot": "/v1/products",
                    "resourceName": "Product",
                    "displayProperty": "name"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid4",
                    "description": "The product ID.",
                    "x-polar-selector-widget": {
                      "resourceRoot": "/v1/products",
                      "resourceName": "Product",
                      "displayProperty": "name"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "ProductID Filter",
              "description": "Filter by product ID."
            },
            "description": "Filter by product ID."
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by active or cancelled subscription.",
              "title": "Active"
            },
            "description": "Filter by active or cancelled subscription."
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Search by product or organization name.",
              "title": "Query"
            },
            "description": "Search by product or organization name."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerSubscriptionSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "-started_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_CustomerSubscription_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Customer",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "customer_portal.subscriptions",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "list",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomerPortal.Subscriptions.List(ctx, operations.CustomerPortalSubscriptionsListRequest{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceCustomerSubscription != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "list",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customerPortal.subscriptions.list({});\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "list",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.customer_portal.subscriptions.list()\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          }
        ]
      }
    },
    "/v1/customer-portal/subscriptions/{id}": {
      "get": {
        "tags": [
          "customer_portal",
          "subscriptions",
          "documented",
          "featured"
        ],
        "summary": "Get Subscription",
        "description": "Get a subscription for the authenticated customer or user.",
        "operationId": "customer_portal:subscriptions:get",
        "security": [
          {
            "oidc": [
              "customer_portal:read",
              "customer_portal:write"
            ]
          },
          {
            "pat": []
          },
          {
            "customer_session": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The subscription ID.",
              "title": "Id"
            },
            "description": "The subscription ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSubscription"
                }
              }
            }
          },
          "404": {
            "description": "Subscription not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Customer",
          "User"
        ],
        "x-speakeasy-group": "customer_portal.subscriptions",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "get",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomerPortal.Subscriptions.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CustomerSubscription != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "get",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customerPortal.subscriptions.get({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "get",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.customer_portal.subscriptions.get(id=\"<value>\")\n\n    # Handle response\n    print(res)"
          }
        ]
      },
      "patch": {
        "tags": [
          "customer_portal",
          "subscriptions",
          "documented",
          "featured"
        ],
        "summary": "Update Subscription",
        "description": "Update a subscription of the authenticated customer or user.",
        "operationId": "customer_portal:subscriptions:update",
        "security": [
          {
            "oidc": [
              "customer_portal:write"
            ]
          },
          {
            "pat": []
          },
          {
            "customer_session": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The subscription ID.",
              "title": "Id"
            },
            "description": "The subscription ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerSubscriptionUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscription updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSubscription"
                }
              }
            }
          },
          "404": {
            "description": "Subscription not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Customer",
          "User"
        ],
        "x-speakeasy-group": "customer_portal.subscriptions",
        "x-speakeasy-name-override": "update",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "update",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomerPortal.Subscriptions.Update(ctx, \"<value>\", components.CustomerSubscriptionUpdate{\n        ProductPriceID: \"<value>\",\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CustomerSubscription != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "update",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customerPortal.subscriptions.update({\n    id: \"<value>\",\n    customerSubscriptionUpdate: {\n      productPriceId: \"<value>\",\n    },\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "update",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.customer_portal.subscriptions.update(id=\"<value>\", customer_subscription_update={\n        \"product_price_id\": \"<value>\",\n    })\n\n    # Handle response\n    print(res)"
          }
        ]
      },
      "delete": {
        "tags": [
          "customer_portal",
          "subscriptions",
          "documented",
          "featured"
        ],
        "summary": "Cancel Subscription",
        "description": "Cancel a subscription of the authenticated customer or user.",
        "operationId": "customer_portal:subscriptions:cancel",
        "security": [
          {
            "oidc": [
              "customer_portal:write"
            ]
          },
          {
            "pat": []
          },
          {
            "customer_session": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The subscription ID.",
              "title": "Id"
            },
            "description": "The subscription ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription canceled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSubscription"
                }
              }
            }
          },
          "403": {
            "description": "This subscription is already canceled or will be at the end of the period.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlreadyCanceledSubscription"
                }
              }
            }
          },
          "404": {
            "description": "Subscription not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Customer",
          "User"
        ],
        "x-speakeasy-group": "customer_portal.subscriptions",
        "x-speakeasy-name-override": "cancel",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "cancel",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomerPortal.Subscriptions.Cancel(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CustomerSubscription != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "cancel",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customerPortal.subscriptions.cancel({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "cancel",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.customer_portal.subscriptions.cancel(id=\"<value>\")\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/customer-sessions/": {
      "post": {
        "tags": [
          "customer-sessions",
          "documented",
          "featured"
        ],
        "summary": "Create Customer Session",
        "description": "Create a customer session.",
        "operationId": "customer-sessions:create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerSessionCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Customer session created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSession"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oidc": [
              "customer_sessions:write"
            ]
          },
          {
            "pat": []
          }
        ],
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "customer-sessions",
        "x-speakeasy-name-override": "create",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "create",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomerSessions.Create(ctx, components.CustomerSessionCreate{\n        CustomerID: \"<value>\",\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CustomerSession != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "create",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customerSessions.create({\n    customerId: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "create",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.customer_sessions.create(request={\n        \"customer_id\": \"<value>\",\n    })\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    }
  },
  "webhooks": {
    "checkout.created": {
      "post": {
        "summary": "checkout.created",
        "description": "Sent when a new checkout is created.\n\n**Discord & Slack support:** Basic",
        "operationId": "_endpointcheckout_created_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookCheckoutCreatedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "checkout.updated": {
      "post": {
        "summary": "checkout.updated",
        "description": "Sent when a checkout is updated.\n\n**Discord & Slack support:** Basic",
        "operationId": "_endpointcheckout_updated_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookCheckoutUpdatedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "order.created": {
      "post": {
        "summary": "order.created",
        "description": "Sent when a new order is created.\n\n**Discord & Slack support:** Full",
        "operationId": "_endpointorder_created_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookOrderCreatedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "subscription.created": {
      "post": {
        "summary": "subscription.created",
        "description": "Sent when a new subscription is created.\n\n**Discord & Slack support:** Full",
        "operationId": "_endpointsubscription_created_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookSubscriptionCreatedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "subscription.updated": {
      "post": {
        "summary": "subscription.updated",
        "description": "Sent when a subscription is updated. This event fires for all changes to the subscription, including renewals.\n\nIf you want more specific events, you can listen to `subscription.active`, `subscription.canceled`, and `subscription.revoked`.\n\nTo listen specifically for renewals, you can listen to `order.created` events and check the `billing_reason` field.\n\n**Discord & Slack support:** On cancellation and revocation. Renewals are skipped.",
        "operationId": "_endpointsubscription_updated_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookSubscriptionUpdatedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "subscription.active": {
      "post": {
        "summary": "subscription.active",
        "description": "Sent when a subscription becomes active,\nwhether because it's a new paid subscription or because payment was recovered.\n\n**Discord & Slack support:** Full",
        "operationId": "_endpointsubscription_active_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookSubscriptionActivePayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "subscription.canceled": {
      "post": {
        "summary": "subscription.canceled",
        "description": "Sent when a subscription is canceled by the user.\nThey might still have access until the end of the current period.\n\n**Discord & Slack support:** Full",
        "operationId": "_endpointsubscription_canceled_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookSubscriptionCanceledPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "subscription.revoked": {
      "post": {
        "summary": "subscription.revoked",
        "description": "Sent when a subscription is revoked, the user looses access immediately.\nHappens when the subscription is canceled, or payment is past due.\n\n**Discord & Slack support:** Full",
        "operationId": "_endpointsubscription_revoked_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookSubscriptionRevokedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "product.created": {
      "post": {
        "summary": "product.created",
        "description": "Sent when a new product is created.\n\n**Discord & Slack support:** Basic",
        "operationId": "_endpointproduct_created_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookProductCreatedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "product.updated": {
      "post": {
        "summary": "product.updated",
        "description": "Sent when a product is updated.\n\n**Discord & Slack support:** Basic",
        "operationId": "_endpointproduct_updated_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookProductUpdatedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "pledge.created": {
      "post": {
        "summary": "pledge.created",
        "description": "Sent when a new pledge is created. Note that this does mean that the pledge has been paid yet.\n\n**Discord & Slack support:** Full",
        "operationId": "_endpointpledge_created_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookPledgeCreatedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "pledge.updated": {
      "post": {
        "summary": "pledge.updated",
        "description": "Sent when a pledge is updated.\n\n**Discord & Slack support:** Basic",
        "operationId": "_endpointpledge_updated_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookPledgeUpdatedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "organization.updated": {
      "post": {
        "summary": "organization.updated",
        "description": "Sent when a organization is updated.\n\n**Discord & Slack support:** Basic",
        "operationId": "_endpointorganization_updated_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookOrganizationUpdatedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "benefit.created": {
      "post": {
        "summary": "benefit.created",
        "description": "Sent when a new benefit is created.\n\n**Discord & Slack support:** Basic",
        "operationId": "_endpointbenefit_created_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookBenefitCreatedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "benefit.updated": {
      "post": {
        "summary": "benefit.updated",
        "description": "Sent when a benefit is updated.\n\n**Discord & Slack support:** Basic",
        "operationId": "_endpointbenefit_updated_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookBenefitUpdatedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "benefit_grant.created": {
      "post": {
        "summary": "benefit_grant.created",
        "description": "Sent when a new benefit grant is created.\n\n**Discord & Slack support:** Basic",
        "operationId": "_endpointbenefit_grant_created_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookBenefitGrantCreatedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "benefit_grant.updated": {
      "post": {
        "summary": "benefit_grant.updated",
        "description": "Sent when a new benefit grant is updated.\n\n**Discord & Slack support:** Basic",
        "operationId": "_endpointbenefit_grant_updated_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookBenefitGrantUpdatedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "benefit_grant.revoked": {
      "post": {
        "summary": "benefit_grant.revoked",
        "description": "Sent when a new benefit grant is revoked.\n\n**Discord & Slack support:** Basic",
        "operationId": "_endpointbenefit_grant_revoked_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookBenefitGrantRevokedPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Address": {
        "properties": {
          "line1": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Line1"
          },
          "line2": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Line2"
          },
          "postal_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Postal Code"
          },
          "city": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "City"
          },
          "state": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "State"
          },
          "country": {
            "type": "string",
            "pattern": "^\\w{2}$",
            "title": "Country"
          }
        },
        "type": "object",
        "required": [
          "country"
        ],
        "title": "Address"
      },
      "AdvertisementCampaign": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "image_url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "Image Url"
          },
          "image_url_dark": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Image Url Dark"
          },
          "text": {
            "type": "string",
            "title": "Text"
          },
          "link_url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "Link Url"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "image_url",
          "image_url_dark",
          "text",
          "link_url"
        ],
        "title": "AdvertisementCampaign"
      },
      "AdvertisementCampaignListResource": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/AdvertisementCampaign"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "dimensions": {
            "prefixItems": [
              {
                "type": "integer"
              },
              {
                "type": "integer"
              }
            ],
            "items": {
              "type": "integer"
            },
            "type": "array",
            "maxItems": 2,
            "minItems": 2,
            "title": "Dimensions",
            "description": "The dimensions (width, height) in pixels of the advertisement images."
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination",
          "dimensions"
        ],
        "title": "AdvertisementCampaignListResource"
      },
      "AdvertisementSortProperty": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "granted_at",
          "-granted_at",
          "views",
          "-views",
          "clicks",
          "-clicks"
        ],
        "title": "AdvertisementSortProperty"
      },
      "AlreadyCanceledSubscription": {
        "properties": {
          "error": {
            "type": "string",
            "const": "AlreadyCanceledSubscription",
            "title": "Error"
          },
          "detail": {
            "type": "string",
            "title": "Detail"
          }
        },
        "type": "object",
        "required": [
          "error",
          "detail"
        ],
        "title": "AlreadyCanceledSubscription"
      },
      "Assignee": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "login": {
            "type": "string",
            "title": "Login"
          },
          "html_url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "Html Url"
          },
          "avatar_url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "Avatar Url"
          }
        },
        "type": "object",
        "required": [
          "id",
          "login",
          "html_url",
          "avatar_url"
        ],
        "title": "Assignee"
      },
      "AttachedCustomField": {
        "properties": {
          "custom_field_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Custom Field Id",
            "description": "ID of the custom field."
          },
          "custom_field": {
            "$ref": "#/components/schemas/CustomField",
            "title": "CustomField"
          },
          "order": {
            "type": "integer",
            "title": "Order",
            "description": "Order of the custom field in the resource."
          },
          "required": {
            "type": "boolean",
            "title": "Required",
            "description": "Whether the value is required for this custom field."
          }
        },
        "type": "object",
        "required": [
          "custom_field_id",
          "custom_field",
          "order",
          "required"
        ],
        "title": "AttachedCustomField",
        "description": "Schema of a custom field attached to a resource."
      },
      "AttachedCustomFieldCreate": {
        "properties": {
          "custom_field_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Custom Field Id",
            "description": "ID of the custom field to attach."
          },
          "required": {
            "type": "boolean",
            "title": "Required",
            "description": "Whether the value is required for this custom field."
          }
        },
        "type": "object",
        "required": [
          "custom_field_id",
          "required"
        ],
        "title": "AttachedCustomFieldCreate",
        "description": "Schema to attach a custom field to a resource."
      },
      "Author": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "login": {
            "type": "string",
            "title": "Login"
          },
          "html_url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "Html Url"
          },
          "avatar_url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "Avatar Url"
          }
        },
        "type": "object",
        "required": [
          "id",
          "login",
          "html_url",
          "avatar_url"
        ],
        "title": "Author"
      },
      "AuthorizeOrganization": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "slug": {
            "type": "string",
            "title": "Slug"
          },
          "avatar_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avatar Url"
          }
        },
        "type": "object",
        "required": [
          "id",
          "slug",
          "avatar_url"
        ],
        "title": "AuthorizeOrganization"
      },
      "AuthorizeResponseOrganization": {
        "properties": {
          "client": {
            "$ref": "#/components/schemas/OAuth2ClientPublic"
          },
          "sub_type": {
            "type": "string",
            "const": "organization",
            "title": "Sub Type"
          },
          "sub": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AuthorizeOrganization"
              },
              {
                "type": "null"
              }
            ]
          },
          "scopes": {
            "items": {
              "$ref": "#/components/schemas/Scope"
            },
            "type": "array",
            "title": "Scopes"
          },
          "organizations": {
            "items": {
              "$ref": "#/components/schemas/AuthorizeOrganization"
            },
            "type": "array",
            "title": "Organizations"
          }
        },
        "type": "object",
        "required": [
          "client",
          "sub_type",
          "sub",
          "scopes",
          "organizations"
        ],
        "title": "AuthorizeResponseOrganization"
      },
      "AuthorizeResponseUser": {
        "properties": {
          "client": {
            "$ref": "#/components/schemas/OAuth2ClientPublic"
          },
          "sub_type": {
            "type": "string",
            "const": "user",
            "title": "Sub Type"
          },
          "sub": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AuthorizeUser"
              },
              {
                "type": "null"
              }
            ]
          },
          "scopes": {
            "items": {
              "$ref": "#/components/schemas/Scope"
            },
            "type": "array",
            "title": "Scopes"
          }
        },
        "type": "object",
        "required": [
          "client",
          "sub_type",
          "sub",
          "scopes"
        ],
        "title": "AuthorizeResponseUser"
      },
      "AuthorizeUser": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "avatar_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avatar Url"
          }
        },
        "type": "object",
        "required": [
          "id",
          "email",
          "avatar_url"
        ],
        "title": "AuthorizeUser"
      },
      "Benefit": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/BenefitAds"
          },
          {
            "$ref": "#/components/schemas/BenefitCustom"
          },
          {
            "$ref": "#/components/schemas/BenefitDiscord"
          },
          {
            "$ref": "#/components/schemas/BenefitGitHubRepository"
          },
          {
            "$ref": "#/components/schemas/BenefitDownloadables"
          },
          {
            "$ref": "#/components/schemas/BenefitLicenseKeys"
          }
        ]
      },
      "BenefitAds": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the benefit."
          },
          "type": {
            "type": "string",
            "const": "ads",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the benefit."
          },
          "selectable": {
            "type": "boolean",
            "title": "Selectable",
            "description": "Whether the benefit is selectable when creating a product."
          },
          "deletable": {
            "type": "boolean",
            "title": "Deletable",
            "description": "Whether the benefit is deletable."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit."
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitAdsProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "type",
          "description",
          "selectable",
          "deletable",
          "organization_id",
          "properties"
        ],
        "title": "BenefitAds",
        "description": "A benefit of type `ads`.\n\nUse it so your backers can display ads on your README, website, etc."
      },
      "BenefitAdsCreate": {
        "properties": {
          "type": {
            "type": "string",
            "const": "ads",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "maxLength": 42,
            "minLength": 3,
            "title": "Description",
            "description": "The description of the benefit. Will be displayed on products having this benefit."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit. **Required unless you use an organization token.**"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitAdsProperties"
          }
        },
        "type": "object",
        "required": [
          "type",
          "description",
          "properties"
        ],
        "title": "BenefitAdsCreate"
      },
      "BenefitAdsProperties": {
        "properties": {
          "image_height": {
            "type": "integer",
            "title": "Image Height",
            "description": "The height of the displayed ad.",
            "default": 400
          },
          "image_width": {
            "type": "integer",
            "title": "Image Width",
            "description": "The width of the displayed ad.",
            "default": 400
          }
        },
        "type": "object",
        "title": "BenefitAdsProperties",
        "description": "Properties for a benefit of type `ads`."
      },
      "BenefitAdsSubscriber": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the benefit."
          },
          "type": {
            "type": "string",
            "const": "ads",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the benefit."
          },
          "selectable": {
            "type": "boolean",
            "title": "Selectable",
            "description": "Whether the benefit is selectable when creating a product."
          },
          "deletable": {
            "type": "boolean",
            "title": "Deletable",
            "description": "Whether the benefit is deletable."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit."
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitAdsProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "type",
          "description",
          "selectable",
          "deletable",
          "organization_id",
          "organization",
          "properties"
        ],
        "title": "BenefitAdsSubscriber"
      },
      "BenefitAdsUpdate": {
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 42,
                "minLength": 3
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the benefit. Will be displayed on products having this benefit."
          },
          "type": {
            "type": "string",
            "const": "ads",
            "title": "Type"
          },
          "properties": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitAdsProperties"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "type"
        ],
        "title": "BenefitAdsUpdate"
      },
      "BenefitBase": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the benefit."
          },
          "type": {
            "$ref": "#/components/schemas/BenefitType",
            "description": "The type of the benefit."
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the benefit."
          },
          "selectable": {
            "type": "boolean",
            "title": "Selectable",
            "description": "Whether the benefit is selectable when creating a product."
          },
          "deletable": {
            "type": "boolean",
            "title": "Deletable",
            "description": "Whether the benefit is deletable."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "type",
          "description",
          "selectable",
          "deletable",
          "organization_id"
        ],
        "title": "BenefitBase"
      },
      "BenefitCreate": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/BenefitCustomCreate"
          },
          {
            "$ref": "#/components/schemas/BenefitAdsCreate"
          },
          {
            "$ref": "#/components/schemas/BenefitDiscordCreate"
          },
          {
            "$ref": "#/components/schemas/BenefitGitHubRepositoryCreate"
          },
          {
            "$ref": "#/components/schemas/BenefitDownloadablesCreate"
          },
          {
            "$ref": "#/components/schemas/BenefitLicenseKeysCreate"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "ads": "#/components/schemas/BenefitAdsCreate",
            "custom": "#/components/schemas/BenefitCustomCreate",
            "discord": "#/components/schemas/BenefitDiscordCreate",
            "downloadables": "#/components/schemas/BenefitDownloadablesCreate",
            "github_repository": "#/components/schemas/BenefitGitHubRepositoryCreate",
            "license_keys": "#/components/schemas/BenefitLicenseKeysCreate"
          }
        }
      },
      "BenefitCustom": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the benefit."
          },
          "type": {
            "type": "string",
            "const": "custom",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the benefit."
          },
          "selectable": {
            "type": "boolean",
            "title": "Selectable",
            "description": "Whether the benefit is selectable when creating a product."
          },
          "deletable": {
            "type": "boolean",
            "title": "Deletable",
            "description": "Whether the benefit is deletable."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit."
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitCustomProperties"
          },
          "is_tax_applicable": {
            "type": "boolean",
            "title": "Is Tax Applicable",
            "deprecated": true
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "type",
          "description",
          "selectable",
          "deletable",
          "organization_id",
          "properties",
          "is_tax_applicable"
        ],
        "title": "BenefitCustom",
        "description": "A benefit of type `custom`.\n\nUse it to grant any kind of benefit that doesn't fit in the other types."
      },
      "BenefitCustomCreate": {
        "properties": {
          "type": {
            "type": "string",
            "const": "custom",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "maxLength": 42,
            "minLength": 3,
            "title": "Description",
            "description": "The description of the benefit. Will be displayed on products having this benefit."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit. **Required unless you use an organization token.**"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitCustomCreateProperties"
          }
        },
        "type": "object",
        "required": [
          "type",
          "description",
          "properties"
        ],
        "title": "BenefitCustomCreate",
        "description": "Schema to create a benefit of type `custom`."
      },
      "BenefitCustomCreateProperties": {
        "properties": {
          "note": {
            "anyOf": [
              {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Private note to be shared with customers who have this benefit granted."
              },
              {
                "type": "null"
              }
            ],
            "title": "Note"
          }
        },
        "type": "object",
        "title": "BenefitCustomCreateProperties",
        "description": "Properties for creating a benefit of type `custom`."
      },
      "BenefitCustomProperties": {
        "properties": {
          "note": {
            "anyOf": [
              {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Private note to be shared with customers who have this benefit granted."
              },
              {
                "type": "null"
              }
            ],
            "title": "Note"
          }
        },
        "type": "object",
        "required": [
          "note"
        ],
        "title": "BenefitCustomProperties",
        "description": "Properties for a benefit of type `custom`."
      },
      "BenefitCustomSubscriber": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the benefit."
          },
          "type": {
            "type": "string",
            "const": "custom",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the benefit."
          },
          "selectable": {
            "type": "boolean",
            "title": "Selectable",
            "description": "Whether the benefit is selectable when creating a product."
          },
          "deletable": {
            "type": "boolean",
            "title": "Deletable",
            "description": "Whether the benefit is deletable."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit."
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitCustomSubscriberProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "type",
          "description",
          "selectable",
          "deletable",
          "organization_id",
          "organization",
          "properties"
        ],
        "title": "BenefitCustomSubscriber"
      },
      "BenefitCustomSubscriberProperties": {
        "properties": {
          "note": {
            "anyOf": [
              {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Private note to be shared with customers who have this benefit granted."
              },
              {
                "type": "null"
              }
            ],
            "title": "Note"
          }
        },
        "type": "object",
        "required": [
          "note"
        ],
        "title": "BenefitCustomSubscriberProperties",
        "description": "Properties available to subscribers for a benefit of type `custom`."
      },
      "BenefitCustomUpdate": {
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 42,
                "minLength": 3
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the benefit. Will be displayed on products having this benefit."
          },
          "type": {
            "type": "string",
            "const": "custom",
            "title": "Type"
          },
          "properties": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitCustomProperties"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "type"
        ],
        "title": "BenefitCustomUpdate"
      },
      "BenefitDiscord": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the benefit."
          },
          "type": {
            "type": "string",
            "const": "discord",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the benefit."
          },
          "selectable": {
            "type": "boolean",
            "title": "Selectable",
            "description": "Whether the benefit is selectable when creating a product."
          },
          "deletable": {
            "type": "boolean",
            "title": "Deletable",
            "description": "Whether the benefit is deletable."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit."
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitDiscordProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "type",
          "description",
          "selectable",
          "deletable",
          "organization_id",
          "properties"
        ],
        "title": "BenefitDiscord",
        "description": "A benefit of type `discord`.\n\nUse it to automatically invite your backers to a Discord server."
      },
      "BenefitDiscordCreate": {
        "properties": {
          "type": {
            "type": "string",
            "const": "discord",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "maxLength": 42,
            "minLength": 3,
            "title": "Description",
            "description": "The description of the benefit. Will be displayed on products having this benefit."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit. **Required unless you use an organization token.**"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitDiscordCreateProperties"
          }
        },
        "type": "object",
        "required": [
          "type",
          "description",
          "properties"
        ],
        "title": "BenefitDiscordCreate"
      },
      "BenefitDiscordCreateProperties": {
        "properties": {
          "guild_token": {
            "type": "string",
            "title": "Guild Token"
          },
          "role_id": {
            "type": "string",
            "title": "Role Id",
            "description": "The ID of the Discord role to grant."
          }
        },
        "type": "object",
        "required": [
          "guild_token",
          "role_id"
        ],
        "title": "BenefitDiscordCreateProperties",
        "description": "Properties to create a benefit of type `discord`."
      },
      "BenefitDiscordProperties": {
        "properties": {
          "guild_id": {
            "type": "string",
            "title": "Guild Id",
            "description": "The ID of the Discord server."
          },
          "role_id": {
            "type": "string",
            "title": "Role Id",
            "description": "The ID of the Discord role to grant."
          },
          "guild_token": {
            "type": "string",
            "title": "Guild Token",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "guild_id",
          "role_id",
          "guild_token"
        ],
        "title": "BenefitDiscordProperties",
        "description": "Properties for a benefit of type `discord`."
      },
      "BenefitDiscordSubscriber": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the benefit."
          },
          "type": {
            "type": "string",
            "const": "discord",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the benefit."
          },
          "selectable": {
            "type": "boolean",
            "title": "Selectable",
            "description": "Whether the benefit is selectable when creating a product."
          },
          "deletable": {
            "type": "boolean",
            "title": "Deletable",
            "description": "Whether the benefit is deletable."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit."
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitDiscordSubscriberProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "type",
          "description",
          "selectable",
          "deletable",
          "organization_id",
          "organization",
          "properties"
        ],
        "title": "BenefitDiscordSubscriber"
      },
      "BenefitDiscordSubscriberProperties": {
        "properties": {
          "guild_id": {
            "type": "string",
            "title": "Guild Id",
            "description": "The ID of the Discord server."
          }
        },
        "type": "object",
        "required": [
          "guild_id"
        ],
        "title": "BenefitDiscordSubscriberProperties",
        "description": "Properties available to subscribers for a benefit of type `discord`."
      },
      "BenefitDiscordUpdate": {
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 42,
                "minLength": 3
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the benefit. Will be displayed on products having this benefit."
          },
          "type": {
            "type": "string",
            "const": "discord",
            "title": "Type"
          },
          "properties": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitDiscordCreateProperties"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "type"
        ],
        "title": "BenefitDiscordUpdate"
      },
      "BenefitDownloadables": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the benefit."
          },
          "type": {
            "type": "string",
            "const": "downloadables",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the benefit."
          },
          "selectable": {
            "type": "boolean",
            "title": "Selectable",
            "description": "Whether the benefit is selectable when creating a product."
          },
          "deletable": {
            "type": "boolean",
            "title": "Deletable",
            "description": "Whether the benefit is deletable."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit."
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitDownloadablesProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "type",
          "description",
          "selectable",
          "deletable",
          "organization_id",
          "properties"
        ],
        "title": "BenefitDownloadables"
      },
      "BenefitDownloadablesCreate": {
        "properties": {
          "type": {
            "type": "string",
            "const": "downloadables",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "maxLength": 42,
            "minLength": 3,
            "title": "Description",
            "description": "The description of the benefit. Will be displayed on products having this benefit."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit. **Required unless you use an organization token.**"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitDownloadablesCreateProperties"
          }
        },
        "type": "object",
        "required": [
          "type",
          "description",
          "properties"
        ],
        "title": "BenefitDownloadablesCreate"
      },
      "BenefitDownloadablesCreateProperties": {
        "properties": {
          "archived": {
            "additionalProperties": {
              "type": "boolean"
            },
            "propertyNames": {
              "format": "uuid4"
            },
            "type": "object",
            "title": "Archived",
            "default": {}
          },
          "files": {
            "items": {
              "type": "string",
              "format": "uuid4"
            },
            "type": "array",
            "minItems": 1,
            "title": "Files"
          }
        },
        "type": "object",
        "required": [
          "files"
        ],
        "title": "BenefitDownloadablesCreateProperties"
      },
      "BenefitDownloadablesProperties": {
        "properties": {
          "archived": {
            "additionalProperties": {
              "type": "boolean"
            },
            "propertyNames": {
              "format": "uuid4"
            },
            "type": "object",
            "title": "Archived"
          },
          "files": {
            "items": {
              "type": "string",
              "format": "uuid4"
            },
            "type": "array",
            "title": "Files"
          }
        },
        "type": "object",
        "required": [
          "archived",
          "files"
        ],
        "title": "BenefitDownloadablesProperties"
      },
      "BenefitDownloadablesSubscriber": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the benefit."
          },
          "type": {
            "type": "string",
            "const": "downloadables",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the benefit."
          },
          "selectable": {
            "type": "boolean",
            "title": "Selectable",
            "description": "Whether the benefit is selectable when creating a product."
          },
          "deletable": {
            "type": "boolean",
            "title": "Deletable",
            "description": "Whether the benefit is deletable."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit."
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitDownloadablesSubscriberProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "type",
          "description",
          "selectable",
          "deletable",
          "organization_id",
          "organization",
          "properties"
        ],
        "title": "BenefitDownloadablesSubscriber"
      },
      "BenefitDownloadablesSubscriberProperties": {
        "properties": {
          "active_files": {
            "items": {
              "type": "string",
              "format": "uuid4"
            },
            "type": "array",
            "title": "Active Files"
          }
        },
        "type": "object",
        "required": [
          "active_files"
        ],
        "title": "BenefitDownloadablesSubscriberProperties"
      },
      "BenefitDownloadablesUpdate": {
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 42,
                "minLength": 3
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the benefit. Will be displayed on products having this benefit."
          },
          "type": {
            "type": "string",
            "const": "downloadables",
            "title": "Type"
          },
          "properties": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitDownloadablesCreateProperties"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "type"
        ],
        "title": "BenefitDownloadablesUpdate"
      },
      "BenefitGitHubRepository": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the benefit."
          },
          "type": {
            "type": "string",
            "const": "github_repository",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the benefit."
          },
          "selectable": {
            "type": "boolean",
            "title": "Selectable",
            "description": "Whether the benefit is selectable when creating a product."
          },
          "deletable": {
            "type": "boolean",
            "title": "Deletable",
            "description": "Whether the benefit is deletable."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit."
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitGitHubRepositoryProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "type",
          "description",
          "selectable",
          "deletable",
          "organization_id",
          "properties"
        ],
        "title": "BenefitGitHubRepository",
        "description": "A benefit of type `github_repository`.\n\nUse it to automatically invite your backers to a private GitHub repository."
      },
      "BenefitGitHubRepositoryCreate": {
        "properties": {
          "type": {
            "type": "string",
            "const": "github_repository",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "maxLength": 42,
            "minLength": 3,
            "title": "Description",
            "description": "The description of the benefit. Will be displayed on products having this benefit."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit. **Required unless you use an organization token.**"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitGitHubRepositoryCreateProperties"
          }
        },
        "type": "object",
        "required": [
          "type",
          "description",
          "properties"
        ],
        "title": "BenefitGitHubRepositoryCreate"
      },
      "BenefitGitHubRepositoryCreateProperties": {
        "properties": {
          "repository_owner": {
            "type": "string",
            "title": "Repository Owner",
            "description": "The owner of the repository.",
            "examples": [
              "polarsource"
            ]
          },
          "repository_name": {
            "type": "string",
            "title": "Repository Name",
            "description": "The name of the repository.",
            "examples": [
              "private_repo"
            ]
          },
          "permission": {
            "type": "string",
            "enum": [
              "pull",
              "triage",
              "push",
              "maintain",
              "admin"
            ],
            "title": "Permission",
            "description": "The permission level to grant. Read more about roles and their permissions on [GitHub documentation](https://docs.github.com/en/organizations/managing-user-access-to-your-organizations-repositories/managing-repository-roles/repository-roles-for-an-organization#permissions-for-each-role)."
          }
        },
        "type": "object",
        "required": [
          "repository_owner",
          "repository_name",
          "permission"
        ],
        "title": "BenefitGitHubRepositoryCreateProperties",
        "description": "Properties to create a benefit of type `github_repository`."
      },
      "BenefitGitHubRepositoryProperties": {
        "properties": {
          "repository_owner": {
            "type": "string",
            "title": "Repository Owner",
            "description": "The owner of the repository.",
            "examples": [
              "polarsource"
            ]
          },
          "repository_name": {
            "type": "string",
            "title": "Repository Name",
            "description": "The name of the repository.",
            "examples": [
              "private_repo"
            ]
          },
          "permission": {
            "type": "string",
            "enum": [
              "pull",
              "triage",
              "push",
              "maintain",
              "admin"
            ],
            "title": "Permission",
            "description": "The permission level to grant. Read more about roles and their permissions on [GitHub documentation](https://docs.github.com/en/organizations/managing-user-access-to-your-organizations-repositories/managing-repository-roles/repository-roles-for-an-organization#permissions-for-each-role)."
          },
          "repository_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Repository Id",
            "deprecated": true
          }
        },
        "type": "object",
        "required": [
          "repository_owner",
          "repository_name",
          "permission"
        ],
        "title": "BenefitGitHubRepositoryProperties",
        "description": "Properties for a benefit of type `github_repository`."
      },
      "BenefitGitHubRepositorySubscriber": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the benefit."
          },
          "type": {
            "type": "string",
            "const": "github_repository",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the benefit."
          },
          "selectable": {
            "type": "boolean",
            "title": "Selectable",
            "description": "Whether the benefit is selectable when creating a product."
          },
          "deletable": {
            "type": "boolean",
            "title": "Deletable",
            "description": "Whether the benefit is deletable."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit."
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitGitHubRepositorySubscriberProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "type",
          "description",
          "selectable",
          "deletable",
          "organization_id",
          "organization",
          "properties"
        ],
        "title": "BenefitGitHubRepositorySubscriber"
      },
      "BenefitGitHubRepositorySubscriberProperties": {
        "properties": {
          "repository_owner": {
            "type": "string",
            "title": "Repository Owner",
            "description": "The owner of the repository.",
            "examples": [
              "polarsource"
            ]
          },
          "repository_name": {
            "type": "string",
            "title": "Repository Name",
            "description": "The name of the repository.",
            "examples": [
              "private_repo"
            ]
          }
        },
        "type": "object",
        "required": [
          "repository_owner",
          "repository_name"
        ],
        "title": "BenefitGitHubRepositorySubscriberProperties",
        "description": "Properties available to subscribers for a benefit of type `github_repository`."
      },
      "BenefitGitHubRepositoryUpdate": {
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 42,
                "minLength": 3
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the benefit. Will be displayed on products having this benefit."
          },
          "type": {
            "type": "string",
            "const": "github_repository",
            "title": "Type"
          },
          "properties": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitGitHubRepositoryCreateProperties"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "type"
        ],
        "title": "BenefitGitHubRepositoryUpdate"
      },
      "BenefitGrant": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the grant."
          },
          "granted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Granted At",
            "description": "The timestamp when the benefit was granted. If `None`, the benefit is not granted."
          },
          "is_granted": {
            "type": "boolean",
            "title": "Is Granted",
            "description": "Whether the benefit is granted."
          },
          "revoked_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Revoked At",
            "description": "The timestamp when the benefit was revoked. If `None`, the benefit is not revoked."
          },
          "is_revoked": {
            "type": "boolean",
            "title": "Is Revoked",
            "description": "Whether the benefit is revoked."
          },
          "subscription_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subscription Id",
            "description": "The ID of the subscription that granted this benefit."
          },
          "order_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id",
            "description": "The ID of the order that granted this benefit."
          },
          "customer_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Customer Id",
            "description": "The ID of the customer concerned by this grant."
          },
          "user_id": {
            "type": "string",
            "format": "uuid4",
            "title": "User Id",
            "deprecated": true
          },
          "benefit_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Benefit Id",
            "description": "The ID of the benefit concerned by this grant."
          },
          "properties": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitGrantDiscordProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantGitHubRepositoryProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantDownloadablesProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantLicenseKeysProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantAdsProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantCustomProperties"
              }
            ],
            "title": "Properties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "is_granted",
          "is_revoked",
          "subscription_id",
          "order_id",
          "customer_id",
          "user_id",
          "benefit_id",
          "properties"
        ],
        "title": "BenefitGrant"
      },
      "BenefitGrantAdsProperties": {
        "properties": {
          "advertisement_campaign_id": {
            "type": "string",
            "title": "Advertisement Campaign Id"
          }
        },
        "type": "object",
        "required": [
          "advertisement_campaign_id"
        ],
        "title": "BenefitGrantAdsProperties"
      },
      "BenefitGrantCustomProperties": {
        "properties": {},
        "type": "object",
        "title": "BenefitGrantCustomProperties"
      },
      "BenefitGrantDiscordProperties": {
        "properties": {
          "account_id": {
            "type": "string",
            "title": "Account Id"
          },
          "guild_id": {
            "type": "string",
            "title": "Guild Id"
          },
          "role_id": {
            "type": "string",
            "title": "Role Id"
          }
        },
        "type": "object",
        "title": "BenefitGrantDiscordProperties"
      },
      "BenefitGrantDownloadablesProperties": {
        "properties": {
          "files": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Files"
          }
        },
        "type": "object",
        "title": "BenefitGrantDownloadablesProperties"
      },
      "BenefitGrantGitHubRepositoryProperties": {
        "properties": {
          "account_id": {
            "type": "string",
            "title": "Account Id"
          },
          "repository_owner": {
            "type": "string",
            "title": "Repository Owner"
          },
          "repository_name": {
            "type": "string",
            "title": "Repository Name"
          },
          "permission": {
            "type": "string",
            "enum": [
              "pull",
              "triage",
              "push",
              "maintain",
              "admin"
            ],
            "title": "Permission"
          }
        },
        "type": "object",
        "title": "BenefitGrantGitHubRepositoryProperties"
      },
      "BenefitGrantLicenseKeysProperties": {
        "properties": {
          "license_key_id": {
            "type": "string",
            "title": "License Key Id"
          },
          "display_key": {
            "type": "string",
            "title": "Display Key"
          }
        },
        "type": "object",
        "title": "BenefitGrantLicenseKeysProperties"
      },
      "BenefitGrantWebhook": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the grant."
          },
          "granted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Granted At",
            "description": "The timestamp when the benefit was granted. If `None`, the benefit is not granted."
          },
          "is_granted": {
            "type": "boolean",
            "title": "Is Granted",
            "description": "Whether the benefit is granted."
          },
          "revoked_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Revoked At",
            "description": "The timestamp when the benefit was revoked. If `None`, the benefit is not revoked."
          },
          "is_revoked": {
            "type": "boolean",
            "title": "Is Revoked",
            "description": "Whether the benefit is revoked."
          },
          "subscription_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subscription Id",
            "description": "The ID of the subscription that granted this benefit."
          },
          "order_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id",
            "description": "The ID of the order that granted this benefit."
          },
          "customer_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Customer Id",
            "description": "The ID of the customer concerned by this grant."
          },
          "user_id": {
            "type": "string",
            "format": "uuid4",
            "title": "User Id",
            "deprecated": true
          },
          "benefit_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Benefit Id",
            "description": "The ID of the benefit concerned by this grant."
          },
          "properties": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitGrantDiscordProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantGitHubRepositoryProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantDownloadablesProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantLicenseKeysProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantAdsProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantCustomProperties"
              }
            ],
            "title": "Properties"
          },
          "benefit": {
            "$ref": "#/components/schemas/Benefit",
            "title": "Benefit"
          },
          "previous_properties": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitGrantDiscordProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantGitHubRepositoryProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantDownloadablesProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantLicenseKeysProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantAdsProperties"
              },
              {
                "$ref": "#/components/schemas/BenefitGrantCustomProperties"
              },
              {
                "type": "null"
              }
            ],
            "title": "Previous Properties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "is_granted",
          "is_revoked",
          "subscription_id",
          "order_id",
          "customer_id",
          "user_id",
          "benefit_id",
          "properties",
          "benefit"
        ],
        "title": "BenefitGrantWebhook"
      },
      "BenefitLicenseKeyActivationProperties": {
        "properties": {
          "limit": {
            "type": "integer",
            "maximum": 50,
            "exclusiveMinimum": 0,
            "title": "Limit"
          },
          "enable_customer_admin": {
            "type": "boolean",
            "title": "Enable Customer Admin"
          }
        },
        "type": "object",
        "required": [
          "limit",
          "enable_customer_admin"
        ],
        "title": "BenefitLicenseKeyActivationProperties"
      },
      "BenefitLicenseKeyExpirationProperties": {
        "properties": {
          "ttl": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "Ttl"
          },
          "timeframe": {
            "type": "string",
            "enum": [
              "year",
              "month",
              "day"
            ],
            "title": "Timeframe"
          }
        },
        "type": "object",
        "required": [
          "ttl",
          "timeframe"
        ],
        "title": "BenefitLicenseKeyExpirationProperties"
      },
      "BenefitLicenseKeys": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the benefit."
          },
          "type": {
            "type": "string",
            "const": "license_keys",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the benefit."
          },
          "selectable": {
            "type": "boolean",
            "title": "Selectable",
            "description": "Whether the benefit is selectable when creating a product."
          },
          "deletable": {
            "type": "boolean",
            "title": "Deletable",
            "description": "Whether the benefit is deletable."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit."
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitLicenseKeysProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "type",
          "description",
          "selectable",
          "deletable",
          "organization_id",
          "properties"
        ],
        "title": "BenefitLicenseKeys"
      },
      "BenefitLicenseKeysCreate": {
        "properties": {
          "type": {
            "type": "string",
            "const": "license_keys",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "maxLength": 42,
            "minLength": 3,
            "title": "Description",
            "description": "The description of the benefit. Will be displayed on products having this benefit."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit. **Required unless you use an organization token.**"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitLicenseKeysCreateProperties"
          }
        },
        "type": "object",
        "required": [
          "type",
          "description",
          "properties"
        ],
        "title": "BenefitLicenseKeysCreate"
      },
      "BenefitLicenseKeysCreateProperties": {
        "properties": {
          "prefix": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prefix"
          },
          "expires": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitLicenseKeyExpirationProperties"
              },
              {
                "type": "null"
              }
            ]
          },
          "activations": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitLicenseKeyActivationProperties"
              },
              {
                "type": "null"
              }
            ]
          },
          "limit_usage": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMinimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit Usage"
          }
        },
        "type": "object",
        "title": "BenefitLicenseKeysCreateProperties"
      },
      "BenefitLicenseKeysProperties": {
        "properties": {
          "prefix": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prefix"
          },
          "expires": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitLicenseKeyExpirationProperties"
              },
              {
                "type": "null"
              }
            ]
          },
          "activations": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitLicenseKeyActivationProperties"
              },
              {
                "type": "null"
              }
            ]
          },
          "limit_usage": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit Usage"
          }
        },
        "type": "object",
        "required": [
          "prefix",
          "expires",
          "activations",
          "limit_usage"
        ],
        "title": "BenefitLicenseKeysProperties"
      },
      "BenefitLicenseKeysSubscriber": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the benefit."
          },
          "type": {
            "type": "string",
            "const": "license_keys",
            "title": "Type"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the benefit."
          },
          "selectable": {
            "type": "boolean",
            "title": "Selectable",
            "description": "Whether the benefit is selectable when creating a product."
          },
          "deletable": {
            "type": "boolean",
            "title": "Deletable",
            "description": "Whether the benefit is deletable."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the benefit."
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitLicenseKeysSubscriberProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "type",
          "description",
          "selectable",
          "deletable",
          "organization_id",
          "organization",
          "properties"
        ],
        "title": "BenefitLicenseKeysSubscriber"
      },
      "BenefitLicenseKeysSubscriberProperties": {
        "properties": {
          "prefix": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prefix"
          },
          "expires": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitLicenseKeyExpirationProperties"
              },
              {
                "type": "null"
              }
            ]
          },
          "activations": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitLicenseKeyActivationProperties"
              },
              {
                "type": "null"
              }
            ]
          },
          "limit_usage": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit Usage"
          }
        },
        "type": "object",
        "required": [
          "prefix",
          "expires",
          "activations",
          "limit_usage"
        ],
        "title": "BenefitLicenseKeysSubscriberProperties"
      },
      "BenefitLicenseKeysUpdate": {
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 42,
                "minLength": 3
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the benefit. Will be displayed on products having this benefit."
          },
          "type": {
            "type": "string",
            "const": "license_keys",
            "title": "Type"
          },
          "properties": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BenefitLicenseKeysCreateProperties"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "type"
        ],
        "title": "BenefitLicenseKeysUpdate"
      },
      "BenefitType": {
        "type": "string",
        "enum": [
          "custom",
          "ads",
          "discord",
          "github_repository",
          "downloadables",
          "license_keys"
        ],
        "title": "BenefitType"
      },
      "Checkout": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "custom_field_data": {
            "type": "object",
            "title": "Custom Field Data",
            "description": "Key-value object storing custom field values."
          },
          "payment_processor": {
            "$ref": "#/components/schemas/PaymentProcessor",
            "description": "Payment processor used."
          },
          "status": {
            "$ref": "#/components/schemas/CheckoutStatus",
            "description": "Status of the checkout session."
          },
          "client_secret": {
            "type": "string",
            "title": "Client Secret",
            "description": "Client secret used to update and complete the checkout session from the client."
          },
          "url": {
            "type": "string",
            "title": "Url",
            "description": "URL where the customer can access the checkout session."
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "title": "Expires At",
            "description": "Expiration date and time of the checkout session."
          },
          "success_url": {
            "type": "string",
            "title": "Success Url",
            "description": "URL where the customer will be redirected after a successful payment."
          },
          "embed_origin": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Embed Origin",
            "description": "When checkout is embedded, represents the Origin of the page embedding the checkout. Used as a security measure to send messages only to the embedding page."
          },
          "amount": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 99999999,
                "minimum": 50,
                "description": "Amount to pay in cents. Only useful for custom prices, it'll be ignored for fixed and free prices."
              },
              {
                "type": "null"
              }
            ],
            "title": "Amount"
          },
          "tax_amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Amount",
            "description": "Computed tax amount to pay in cents."
          },
          "currency": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Currency",
            "description": "Currency code of the checkout session."
          },
          "subtotal_amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subtotal Amount",
            "description": "Subtotal amount in cents, including discounts and before tax."
          },
          "total_amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Amount",
            "description": "Total amount to pay in cents, including discounts and after tax."
          },
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id",
            "description": "ID of the product to checkout."
          },
          "product_price_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Price Id",
            "description": "ID of the product price to checkout."
          },
          "discount_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Id",
            "description": "ID of the discount applied to the checkout."
          },
          "allow_discount_codes": {
            "type": "boolean",
            "title": "Allow Discount Codes",
            "description": "Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it."
          },
          "is_discount_applicable": {
            "type": "boolean",
            "title": "Is Discount Applicable",
            "description": "Whether the discount is applicable to the checkout. Typically, free and custom prices are not discountable."
          },
          "is_free_product_price": {
            "type": "boolean",
            "title": "Is Free Product Price",
            "description": "Whether the product price is free, regardless of discounts."
          },
          "is_payment_required": {
            "type": "boolean",
            "title": "Is Payment Required",
            "description": "Whether the checkout requires payment, e.g. in case of free products or discounts that cover the total amount."
          },
          "is_payment_setup_required": {
            "type": "boolean",
            "title": "Is Payment Setup Required",
            "description": "Whether the checkout requires setting up a payment method, regardless of the amount, e.g. subscriptions that have first free cycles."
          },
          "is_payment_form_required": {
            "type": "boolean",
            "title": "Is Payment Form Required",
            "description": "Whether the checkout requires a payment form, whether because of a payment or payment method setup."
          },
          "customer_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Id"
          },
          "customer_name": {
            "anyOf": [
              {
                "type": "string",
                "description": "Name of the customer."
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Name"
          },
          "customer_email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email",
                "description": "Email address of the customer."
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Email"
          },
          "customer_ip_address": {
            "anyOf": [
              {
                "type": "string",
                "format": "ipvanyaddress"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Ip Address"
          },
          "customer_billing_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address",
                "description": "Billing address of the customer."
              },
              {
                "type": "null"
              }
            ]
          },
          "customer_tax_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Tax Id"
          },
          "payment_processor_metadata": {
            "type": "object",
            "title": "Payment Processor Metadata"
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "product": {
            "$ref": "#/components/schemas/CheckoutProduct"
          },
          "product_price": {
            "$ref": "#/components/schemas/ProductPrice"
          },
          "discount": {
            "anyOf": [
              {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CheckoutDiscountFixedOnceForeverDuration"
                  },
                  {
                    "$ref": "#/components/schemas/CheckoutDiscountFixedRepeatDuration"
                  },
                  {
                    "$ref": "#/components/schemas/CheckoutDiscountPercentageOnceForeverDuration"
                  },
                  {
                    "$ref": "#/components/schemas/CheckoutDiscountPercentageRepeatDuration"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount"
          },
          "subscription_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subscription Id"
          },
          "attached_custom_fields": {
            "items": {
              "$ref": "#/components/schemas/AttachedCustomField"
            },
            "type": "array",
            "title": "Attached Custom Fields"
          },
          "customer_metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Customer Metadata"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "payment_processor",
          "status",
          "client_secret",
          "url",
          "expires_at",
          "success_url",
          "embed_origin",
          "amount",
          "tax_amount",
          "currency",
          "subtotal_amount",
          "total_amount",
          "product_id",
          "product_price_id",
          "discount_id",
          "allow_discount_codes",
          "is_discount_applicable",
          "is_free_product_price",
          "is_payment_required",
          "is_payment_setup_required",
          "is_payment_form_required",
          "customer_id",
          "customer_name",
          "customer_email",
          "customer_ip_address",
          "customer_billing_address",
          "customer_tax_id",
          "payment_processor_metadata",
          "metadata",
          "product",
          "product_price",
          "discount",
          "subscription_id",
          "attached_custom_fields",
          "customer_metadata"
        ],
        "title": "Checkout",
        "description": "Checkout session data retrieved using an access token."
      },
      "CheckoutConfirmStripe": {
        "properties": {
          "custom_field_data": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Custom Field Data",
            "description": "Key-value object storing custom field values."
          },
          "product_price_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Product Price Id",
            "description": "ID of the product price to checkout. Must correspond to a price linked to the same product."
          },
          "amount": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 99999999,
                "minimum": 50,
                "description": "Amount to pay in cents. Only useful for custom prices, it'll be ignored for fixed and free prices."
              },
              {
                "type": "null"
              }
            ],
            "title": "Amount"
          },
          "customer_name": {
            "anyOf": [
              {
                "type": "string",
                "description": "Name of the customer."
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Name"
          },
          "customer_email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email",
                "description": "Email address of the customer."
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Email"
          },
          "customer_billing_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address",
                "description": "Billing address of the customer."
              },
              {
                "type": "null"
              }
            ]
          },
          "customer_tax_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Tax Id"
          },
          "discount_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Code",
            "description": "Discount code to apply to the checkout."
          },
          "confirmation_token_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Confirmation Token Id",
            "description": "ID of the Stripe confirmation token. Required for fixed prices and custom prices."
          }
        },
        "type": "object",
        "title": "CheckoutConfirmStripe",
        "description": "Confirm a checkout session using a Stripe confirmation token."
      },
      "CheckoutCreate": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/CheckoutProductCreate"
          },
          {
            "$ref": "#/components/schemas/CheckoutPriceCreate"
          }
        ]
      },
      "CheckoutDiscountFixedOnceForeverDuration": {
        "properties": {
          "duration": {
            "$ref": "#/components/schemas/DiscountDuration"
          },
          "type": {
            "$ref": "#/components/schemas/DiscountType"
          },
          "amount": {
            "type": "integer",
            "title": "Amount"
          },
          "currency": {
            "type": "string",
            "title": "Currency"
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Code"
          }
        },
        "type": "object",
        "required": [
          "duration",
          "type",
          "amount",
          "currency",
          "id",
          "name",
          "code"
        ],
        "title": "CheckoutDiscountFixedOnceForeverDuration",
        "description": "Schema for a fixed amount discount that is applied once or forever."
      },
      "CheckoutDiscountFixedRepeatDuration": {
        "properties": {
          "duration": {
            "$ref": "#/components/schemas/DiscountDuration"
          },
          "duration_in_months": {
            "type": "integer",
            "title": "Duration In Months"
          },
          "type": {
            "$ref": "#/components/schemas/DiscountType"
          },
          "amount": {
            "type": "integer",
            "title": "Amount"
          },
          "currency": {
            "type": "string",
            "title": "Currency"
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Code"
          }
        },
        "type": "object",
        "required": [
          "duration",
          "duration_in_months",
          "type",
          "amount",
          "currency",
          "id",
          "name",
          "code"
        ],
        "title": "CheckoutDiscountFixedRepeatDuration",
        "description": "Schema for a fixed amount discount that is applied on every invoice\nfor a certain number of months."
      },
      "CheckoutDiscountPercentageOnceForeverDuration": {
        "properties": {
          "duration": {
            "$ref": "#/components/schemas/DiscountDuration"
          },
          "type": {
            "$ref": "#/components/schemas/DiscountType"
          },
          "basis_points": {
            "type": "integer",
            "title": "Basis Points"
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Code"
          }
        },
        "type": "object",
        "required": [
          "duration",
          "type",
          "basis_points",
          "id",
          "name",
          "code"
        ],
        "title": "CheckoutDiscountPercentageOnceForeverDuration",
        "description": "Schema for a percentage discount that is applied once or forever."
      },
      "CheckoutDiscountPercentageRepeatDuration": {
        "properties": {
          "duration": {
            "$ref": "#/components/schemas/DiscountDuration"
          },
          "duration_in_months": {
            "type": "integer",
            "title": "Duration In Months"
          },
          "type": {
            "$ref": "#/components/schemas/DiscountType"
          },
          "basis_points": {
            "type": "integer",
            "title": "Basis Points"
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Code"
          }
        },
        "type": "object",
        "required": [
          "duration",
          "duration_in_months",
          "type",
          "basis_points",
          "id",
          "name",
          "code"
        ],
        "title": "CheckoutDiscountPercentageRepeatDuration",
        "description": "Schema for a percentage discount that is applied on every invoice\nfor a certain number of months."
      },
      "CheckoutLegacy": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The ID of the checkout."
          },
          "url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Url",
            "description": "URL the customer should be redirected to complete the purchase."
          },
          "customer_email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Email"
          },
          "customer_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Name"
          },
          "product": {
            "$ref": "#/components/schemas/CheckoutProduct"
          },
          "product_price": {
            "$ref": "#/components/schemas/ProductPrice"
          }
        },
        "type": "object",
        "required": [
          "id",
          "customer_email",
          "customer_name",
          "product",
          "product_price"
        ],
        "title": "CheckoutLegacy",
        "description": "A checkout session."
      },
      "CheckoutLegacyCreate": {
        "properties": {
          "product_price_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Price Id",
            "description": "ID of the product price to subscribe to."
          },
          "success_url": {
            "type": "string",
            "minLength": 1,
            "format": "uri",
            "title": "Success Url",
            "description": "URL where the customer will be redirected after a successful subscription. You can add the `session_id={CHECKOUT_SESSION_ID}` query parameter to retrieve the checkout session id."
          },
          "customer_email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Email",
            "description": "If you already know the email of your customer, you can set it. It'll be pre-filled on the checkout page."
          },
          "subscription_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subscription Id",
            "description": "ID of the subscription to update. If not provided, a new subscription will be created."
          }
        },
        "type": "object",
        "required": [
          "product_price_id",
          "success_url"
        ],
        "title": "CheckoutLegacyCreate"
      },
      "CheckoutLink": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "payment_processor": {
            "$ref": "#/components/schemas/PaymentProcessor",
            "description": "Payment processor used."
          },
          "client_secret": {
            "type": "string",
            "title": "Client Secret",
            "description": "Client secret used to access the checkout link."
          },
          "success_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Success Url",
            "description": "URL where the customer will be redirected after a successful payment."
          },
          "label": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Label",
            "description": "Optional label to distinguish links internally"
          },
          "allow_discount_codes": {
            "type": "boolean",
            "title": "Allow Discount Codes",
            "description": "Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it."
          },
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id",
            "description": "ID of the product to checkout."
          },
          "product_price_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Product Price Id",
            "description": "ID of the product price to checkout. First available price will be selected unless an explicit price ID is set."
          },
          "discount_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Id",
            "description": "ID of the discount to apply to the checkout. If the discount is not applicable anymore when opening the checkout link, it'll be ignored."
          },
          "product": {
            "$ref": "#/components/schemas/CheckoutLinkProduct"
          },
          "product_price": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ProductPrice"
              },
              {
                "type": "null"
              }
            ]
          },
          "discount": {
            "anyOf": [
              {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/DiscountFixedOnceForeverDurationBase"
                  },
                  {
                    "$ref": "#/components/schemas/DiscountFixedRepeatDurationBase"
                  },
                  {
                    "$ref": "#/components/schemas/DiscountPercentageOnceForeverDurationBase"
                  },
                  {
                    "$ref": "#/components/schemas/DiscountPercentageRepeatDurationBase"
                  }
                ],
                "title": "CheckoutLinkDiscount"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount"
          },
          "url": {
            "type": "string",
            "title": "Url",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "metadata",
          "payment_processor",
          "client_secret",
          "success_url",
          "label",
          "allow_discount_codes",
          "product_id",
          "product_price_id",
          "discount_id",
          "product",
          "product_price",
          "discount",
          "url"
        ],
        "title": "CheckoutLink",
        "description": "Checkout link data."
      },
      "CheckoutLinkCreate": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/CheckoutLinkProductCreate"
          },
          {
            "$ref": "#/components/schemas/CheckoutLinkPriceCreate"
          }
        ]
      },
      "CheckoutLinkPriceCreate": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "payment_processor": {
            "type": "string",
            "const": "stripe",
            "title": "Payment Processor",
            "description": "Payment processor to use. Currently only Stripe is supported."
          },
          "label": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Label",
            "description": "Optional label to distinguish links internally"
          },
          "allow_discount_codes": {
            "type": "boolean",
            "title": "Allow Discount Codes",
            "description": "Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it.",
            "default": true
          },
          "discount_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Id",
            "description": "ID of the discount to apply to the checkout. If the discount is not applicable anymore when opening the checkout link, it'll be ignored."
          },
          "success_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Success Url",
            "description": "URL where the customer will be redirected after a successful payment.You can add the `checkout_id={CHECKOUT_ID}` query parameter to retrieve the checkout session id."
          },
          "product_price_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Price Id",
            "description": "ID of the product price to checkout."
          }
        },
        "type": "object",
        "required": [
          "payment_processor",
          "product_price_id"
        ],
        "title": "CheckoutLinkPriceCreate"
      },
      "CheckoutLinkProduct": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the product."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the product."
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the product."
          },
          "is_recurring": {
            "type": "boolean",
            "title": "Is Recurring",
            "description": "Whether the product is a subscription tier."
          },
          "is_archived": {
            "type": "boolean",
            "title": "Is Archived",
            "description": "Whether the product is archived and no longer available."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the product."
          },
          "prices": {
            "items": {
              "$ref": "#/components/schemas/ProductPrice"
            },
            "type": "array",
            "title": "Prices",
            "description": "List of prices for this product."
          },
          "benefits": {
            "items": {
              "$ref": "#/components/schemas/BenefitBase"
            },
            "type": "array",
            "title": "BenefitPublic",
            "description": "List of benefits granted by the product."
          },
          "medias": {
            "items": {
              "$ref": "#/components/schemas/ProductMediaFileRead"
            },
            "type": "array",
            "title": "Medias",
            "description": "List of medias associated to the product."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "name",
          "description",
          "is_recurring",
          "is_archived",
          "organization_id",
          "prices",
          "benefits",
          "medias"
        ],
        "title": "CheckoutLinkProduct",
        "description": "Product data for a checkout link."
      },
      "CheckoutLinkProductCreate": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "payment_processor": {
            "type": "string",
            "const": "stripe",
            "title": "Payment Processor",
            "description": "Payment processor to use. Currently only Stripe is supported."
          },
          "label": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Label",
            "description": "Optional label to distinguish links internally"
          },
          "allow_discount_codes": {
            "type": "boolean",
            "title": "Allow Discount Codes",
            "description": "Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it.",
            "default": true
          },
          "discount_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Id",
            "description": "ID of the discount to apply to the checkout. If the discount is not applicable anymore when opening the checkout link, it'll be ignored."
          },
          "success_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Success Url",
            "description": "URL where the customer will be redirected after a successful payment.You can add the `checkout_id={CHECKOUT_ID}` query parameter to retrieve the checkout session id."
          },
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id",
            "description": "ID of the product to checkout. First available price will be selected."
          }
        },
        "type": "object",
        "required": [
          "payment_processor",
          "product_id"
        ],
        "title": "CheckoutLinkProductCreate"
      },
      "CheckoutLinkSortProperty": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at"
        ],
        "title": "CheckoutLinkSortProperty"
      },
      "CheckoutLinkUpdate": {
        "properties": {
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {
                      "type": "string",
                      "maxLength": 500,
                      "minLength": 1
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "boolean"
                    }
                  ]
                },
                "propertyNames": {
                  "maxLength": 40,
                  "minLength": 1
                },
                "type": "object",
                "maxProperties": 50,
                "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A boolean\n\nYou can store up to **50 key-value pairs**."
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          },
          "label": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Label"
          },
          "allow_discount_codes": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Allow Discount Codes",
            "description": "Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it."
          },
          "product_price_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Product Price Id"
          },
          "discount_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Id",
            "description": "ID of the discount to apply to the checkout. If the discount is not applicable anymore when opening the checkout link, it'll be ignored."
          },
          "success_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Success Url",
            "description": "URL where the customer will be redirected after a successful payment.You can add the `checkout_id={CHECKOUT_ID}` query parameter to retrieve the checkout session id."
          }
        },
        "type": "object",
        "title": "CheckoutLinkUpdate",
        "description": "Schema to update an existing checkout link."
      },
      "CheckoutPriceCreate": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "custom_field_data": {
            "type": "object",
            "title": "Custom Field Data",
            "description": "Key-value object storing custom field values."
          },
          "payment_processor": {
            "type": "string",
            "const": "stripe",
            "title": "Payment Processor",
            "description": "Payment processor to use. Currently only Stripe is supported."
          },
          "discount_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Id",
            "description": "ID of the discount to apply to the checkout."
          },
          "allow_discount_codes": {
            "type": "boolean",
            "title": "Allow Discount Codes",
            "description": "Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it.",
            "default": true
          },
          "amount": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 99999999,
                "minimum": 50,
                "description": "Amount to pay in cents. Only useful for custom prices, it'll be ignored for fixed and free prices."
              },
              {
                "type": "null"
              }
            ],
            "title": "Amount"
          },
          "customer_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Id",
            "description": "ID of an existing customer in the organization. The customer data will be pre-filled in the checkout form. The resulting order will be linked to this customer."
          },
          "customer_name": {
            "anyOf": [
              {
                "type": "string",
                "description": "Name of the customer."
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Name"
          },
          "customer_email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email",
                "description": "Email address of the customer."
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Email"
          },
          "customer_ip_address": {
            "anyOf": [
              {
                "type": "string",
                "format": "ipvanyaddress"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Ip Address"
          },
          "customer_billing_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address",
                "description": "Billing address of the customer."
              },
              {
                "type": "null"
              }
            ]
          },
          "customer_tax_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Tax Id"
          },
          "customer_metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Customer Metadata",
            "description": "Key-value object allowing you to store additional information that'll be copied to the created customer.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "subscription_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subscription Id",
            "description": "ID of a subscription to upgrade. It must be on a free pricing. If checkout is successful, metadata set on this checkout will be copied to the subscription, and existing keys will be overwritten."
          },
          "success_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Success Url",
            "description": "URL where the customer will be redirected after a successful payment.You can add the `checkout_id={CHECKOUT_ID}` query parameter to retrieve the checkout session id."
          },
          "embed_origin": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Embed Origin",
            "description": "If you plan to embed the checkout session, set this to the Origin of the embedding page. It'll allow the Polar iframe to communicate with the parent page."
          },
          "product_price_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Price Id",
            "description": "ID of the product price to checkout."
          }
        },
        "type": "object",
        "required": [
          "payment_processor",
          "product_price_id"
        ],
        "title": "CheckoutPriceCreate",
        "description": "Create a new checkout session from a product price.\n\nMetadata set on the checkout will be copied\nto the resulting order and/or subscription."
      },
      "CheckoutProduct": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the product."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the product."
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the product."
          },
          "is_recurring": {
            "type": "boolean",
            "title": "Is Recurring",
            "description": "Whether the product is a subscription tier."
          },
          "is_archived": {
            "type": "boolean",
            "title": "Is Archived",
            "description": "Whether the product is archived and no longer available."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the product."
          },
          "prices": {
            "items": {
              "$ref": "#/components/schemas/ProductPrice"
            },
            "type": "array",
            "title": "Prices",
            "description": "List of prices for this product."
          },
          "benefits": {
            "items": {
              "$ref": "#/components/schemas/BenefitBase"
            },
            "type": "array",
            "title": "BenefitPublic",
            "description": "List of benefits granted by the product."
          },
          "medias": {
            "items": {
              "$ref": "#/components/schemas/ProductMediaFileRead"
            },
            "type": "array",
            "title": "Medias",
            "description": "List of medias associated to the product."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "name",
          "description",
          "is_recurring",
          "is_archived",
          "organization_id",
          "prices",
          "benefits",
          "medias"
        ],
        "title": "CheckoutProduct",
        "description": "Product data for a checkout session."
      },
      "CheckoutProductCreate": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "custom_field_data": {
            "type": "object",
            "title": "Custom Field Data",
            "description": "Key-value object storing custom field values."
          },
          "payment_processor": {
            "type": "string",
            "const": "stripe",
            "title": "Payment Processor",
            "description": "Payment processor to use. Currently only Stripe is supported."
          },
          "discount_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Id",
            "description": "ID of the discount to apply to the checkout."
          },
          "allow_discount_codes": {
            "type": "boolean",
            "title": "Allow Discount Codes",
            "description": "Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it.",
            "default": true
          },
          "amount": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 99999999,
                "minimum": 50,
                "description": "Amount to pay in cents. Only useful for custom prices, it'll be ignored for fixed and free prices."
              },
              {
                "type": "null"
              }
            ],
            "title": "Amount"
          },
          "customer_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Id",
            "description": "ID of an existing customer in the organization. The customer data will be pre-filled in the checkout form. The resulting order will be linked to this customer."
          },
          "customer_name": {
            "anyOf": [
              {
                "type": "string",
                "description": "Name of the customer."
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Name"
          },
          "customer_email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email",
                "description": "Email address of the customer."
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Email"
          },
          "customer_ip_address": {
            "anyOf": [
              {
                "type": "string",
                "format": "ipvanyaddress"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Ip Address"
          },
          "customer_billing_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address",
                "description": "Billing address of the customer."
              },
              {
                "type": "null"
              }
            ]
          },
          "customer_tax_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Tax Id"
          },
          "customer_metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Customer Metadata",
            "description": "Key-value object allowing you to store additional information that'll be copied to the created customer.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "subscription_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subscription Id",
            "description": "ID of a subscription to upgrade. It must be on a free pricing. If checkout is successful, metadata set on this checkout will be copied to the subscription, and existing keys will be overwritten."
          },
          "success_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Success Url",
            "description": "URL where the customer will be redirected after a successful payment.You can add the `checkout_id={CHECKOUT_ID}` query parameter to retrieve the checkout session id."
          },
          "embed_origin": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Embed Origin",
            "description": "If you plan to embed the checkout session, set this to the Origin of the embedding page. It'll allow the Polar iframe to communicate with the parent page."
          },
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id",
            "description": "ID of the product to checkout. First available price will be selected."
          }
        },
        "type": "object",
        "required": [
          "payment_processor",
          "product_id"
        ],
        "title": "CheckoutProductCreate",
        "description": "Create a new checkout session from a product.\n\nMetadata set on the checkout will be copied\nto the resulting order and/or subscription."
      },
      "CheckoutPublic": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "custom_field_data": {
            "type": "object",
            "title": "Custom Field Data",
            "description": "Key-value object storing custom field values."
          },
          "payment_processor": {
            "$ref": "#/components/schemas/PaymentProcessor",
            "description": "Payment processor used."
          },
          "status": {
            "$ref": "#/components/schemas/CheckoutStatus",
            "description": "Status of the checkout session."
          },
          "client_secret": {
            "type": "string",
            "title": "Client Secret",
            "description": "Client secret used to update and complete the checkout session from the client."
          },
          "url": {
            "type": "string",
            "title": "Url",
            "description": "URL where the customer can access the checkout session."
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "title": "Expires At",
            "description": "Expiration date and time of the checkout session."
          },
          "success_url": {
            "type": "string",
            "title": "Success Url",
            "description": "URL where the customer will be redirected after a successful payment."
          },
          "embed_origin": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Embed Origin",
            "description": "When checkout is embedded, represents the Origin of the page embedding the checkout. Used as a security measure to send messages only to the embedding page."
          },
          "amount": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 99999999,
                "minimum": 50,
                "description": "Amount to pay in cents. Only useful for custom prices, it'll be ignored for fixed and free prices."
              },
              {
                "type": "null"
              }
            ],
            "title": "Amount"
          },
          "tax_amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Amount",
            "description": "Computed tax amount to pay in cents."
          },
          "currency": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Currency",
            "description": "Currency code of the checkout session."
          },
          "subtotal_amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subtotal Amount",
            "description": "Subtotal amount in cents, including discounts and before tax."
          },
          "total_amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Amount",
            "description": "Total amount to pay in cents, including discounts and after tax."
          },
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id",
            "description": "ID of the product to checkout."
          },
          "product_price_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Price Id",
            "description": "ID of the product price to checkout."
          },
          "discount_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Id",
            "description": "ID of the discount applied to the checkout."
          },
          "allow_discount_codes": {
            "type": "boolean",
            "title": "Allow Discount Codes",
            "description": "Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it."
          },
          "is_discount_applicable": {
            "type": "boolean",
            "title": "Is Discount Applicable",
            "description": "Whether the discount is applicable to the checkout. Typically, free and custom prices are not discountable."
          },
          "is_free_product_price": {
            "type": "boolean",
            "title": "Is Free Product Price",
            "description": "Whether the product price is free, regardless of discounts."
          },
          "is_payment_required": {
            "type": "boolean",
            "title": "Is Payment Required",
            "description": "Whether the checkout requires payment, e.g. in case of free products or discounts that cover the total amount."
          },
          "is_payment_setup_required": {
            "type": "boolean",
            "title": "Is Payment Setup Required",
            "description": "Whether the checkout requires setting up a payment method, regardless of the amount, e.g. subscriptions that have first free cycles."
          },
          "is_payment_form_required": {
            "type": "boolean",
            "title": "Is Payment Form Required",
            "description": "Whether the checkout requires a payment form, whether because of a payment or payment method setup."
          },
          "customer_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Id"
          },
          "customer_name": {
            "anyOf": [
              {
                "type": "string",
                "description": "Name of the customer."
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Name"
          },
          "customer_email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email",
                "description": "Email address of the customer."
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Email"
          },
          "customer_ip_address": {
            "anyOf": [
              {
                "type": "string",
                "format": "ipvanyaddress"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Ip Address"
          },
          "customer_billing_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address",
                "description": "Billing address of the customer."
              },
              {
                "type": "null"
              }
            ]
          },
          "customer_tax_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Tax Id"
          },
          "payment_processor_metadata": {
            "type": "object",
            "title": "Payment Processor Metadata"
          },
          "product": {
            "$ref": "#/components/schemas/CheckoutProduct"
          },
          "product_price": {
            "$ref": "#/components/schemas/ProductPrice"
          },
          "discount": {
            "anyOf": [
              {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CheckoutDiscountFixedOnceForeverDuration"
                  },
                  {
                    "$ref": "#/components/schemas/CheckoutDiscountFixedRepeatDuration"
                  },
                  {
                    "$ref": "#/components/schemas/CheckoutDiscountPercentageOnceForeverDuration"
                  },
                  {
                    "$ref": "#/components/schemas/CheckoutDiscountPercentageRepeatDuration"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount"
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          },
          "attached_custom_fields": {
            "items": {
              "$ref": "#/components/schemas/AttachedCustomField"
            },
            "type": "array",
            "title": "Attached Custom Fields"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "payment_processor",
          "status",
          "client_secret",
          "url",
          "expires_at",
          "success_url",
          "embed_origin",
          "amount",
          "tax_amount",
          "currency",
          "subtotal_amount",
          "total_amount",
          "product_id",
          "product_price_id",
          "discount_id",
          "allow_discount_codes",
          "is_discount_applicable",
          "is_free_product_price",
          "is_payment_required",
          "is_payment_setup_required",
          "is_payment_form_required",
          "customer_id",
          "customer_name",
          "customer_email",
          "customer_ip_address",
          "customer_billing_address",
          "customer_tax_id",
          "payment_processor_metadata",
          "product",
          "product_price",
          "discount",
          "organization",
          "attached_custom_fields"
        ],
        "title": "CheckoutPublic",
        "description": "Checkout session data retrieved using the client secret."
      },
      "CheckoutPublicConfirmed": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "custom_field_data": {
            "type": "object",
            "title": "Custom Field Data",
            "description": "Key-value object storing custom field values."
          },
          "payment_processor": {
            "$ref": "#/components/schemas/PaymentProcessor",
            "description": "Payment processor used."
          },
          "status": {
            "type": "string",
            "const": "confirmed",
            "title": "Status"
          },
          "client_secret": {
            "type": "string",
            "title": "Client Secret",
            "description": "Client secret used to update and complete the checkout session from the client."
          },
          "url": {
            "type": "string",
            "title": "Url",
            "description": "URL where the customer can access the checkout session."
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "title": "Expires At",
            "description": "Expiration date and time of the checkout session."
          },
          "success_url": {
            "type": "string",
            "title": "Success Url",
            "description": "URL where the customer will be redirected after a successful payment."
          },
          "embed_origin": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Embed Origin",
            "description": "When checkout is embedded, represents the Origin of the page embedding the checkout. Used as a security measure to send messages only to the embedding page."
          },
          "amount": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 99999999,
                "minimum": 50,
                "description": "Amount to pay in cents. Only useful for custom prices, it'll be ignored for fixed and free prices."
              },
              {
                "type": "null"
              }
            ],
            "title": "Amount"
          },
          "tax_amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Amount",
            "description": "Computed tax amount to pay in cents."
          },
          "currency": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Currency",
            "description": "Currency code of the checkout session."
          },
          "subtotal_amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subtotal Amount",
            "description": "Subtotal amount in cents, including discounts and before tax."
          },
          "total_amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Amount",
            "description": "Total amount to pay in cents, including discounts and after tax."
          },
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id",
            "description": "ID of the product to checkout."
          },
          "product_price_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Price Id",
            "description": "ID of the product price to checkout."
          },
          "discount_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Id",
            "description": "ID of the discount applied to the checkout."
          },
          "allow_discount_codes": {
            "type": "boolean",
            "title": "Allow Discount Codes",
            "description": "Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it."
          },
          "is_discount_applicable": {
            "type": "boolean",
            "title": "Is Discount Applicable",
            "description": "Whether the discount is applicable to the checkout. Typically, free and custom prices are not discountable."
          },
          "is_free_product_price": {
            "type": "boolean",
            "title": "Is Free Product Price",
            "description": "Whether the product price is free, regardless of discounts."
          },
          "is_payment_required": {
            "type": "boolean",
            "title": "Is Payment Required",
            "description": "Whether the checkout requires payment, e.g. in case of free products or discounts that cover the total amount."
          },
          "is_payment_setup_required": {
            "type": "boolean",
            "title": "Is Payment Setup Required",
            "description": "Whether the checkout requires setting up a payment method, regardless of the amount, e.g. subscriptions that have first free cycles."
          },
          "is_payment_form_required": {
            "type": "boolean",
            "title": "Is Payment Form Required",
            "description": "Whether the checkout requires a payment form, whether because of a payment or payment method setup."
          },
          "customer_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Id"
          },
          "customer_name": {
            "anyOf": [
              {
                "type": "string",
                "description": "Name of the customer."
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Name"
          },
          "customer_email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email",
                "description": "Email address of the customer."
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Email"
          },
          "customer_ip_address": {
            "anyOf": [
              {
                "type": "string",
                "format": "ipvanyaddress"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Ip Address"
          },
          "customer_billing_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address",
                "description": "Billing address of the customer."
              },
              {
                "type": "null"
              }
            ]
          },
          "customer_tax_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Tax Id"
          },
          "payment_processor_metadata": {
            "type": "object",
            "title": "Payment Processor Metadata"
          },
          "product": {
            "$ref": "#/components/schemas/CheckoutProduct"
          },
          "product_price": {
            "$ref": "#/components/schemas/ProductPrice"
          },
          "discount": {
            "anyOf": [
              {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CheckoutDiscountFixedOnceForeverDuration"
                  },
                  {
                    "$ref": "#/components/schemas/CheckoutDiscountFixedRepeatDuration"
                  },
                  {
                    "$ref": "#/components/schemas/CheckoutDiscountPercentageOnceForeverDuration"
                  },
                  {
                    "$ref": "#/components/schemas/CheckoutDiscountPercentageRepeatDuration"
                  }
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount"
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          },
          "attached_custom_fields": {
            "items": {
              "$ref": "#/components/schemas/AttachedCustomField"
            },
            "type": "array",
            "title": "Attached Custom Fields"
          },
          "customer_session_token": {
            "type": "string",
            "title": "Customer Session Token"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "payment_processor",
          "status",
          "client_secret",
          "url",
          "expires_at",
          "success_url",
          "embed_origin",
          "amount",
          "tax_amount",
          "currency",
          "subtotal_amount",
          "total_amount",
          "product_id",
          "product_price_id",
          "discount_id",
          "allow_discount_codes",
          "is_discount_applicable",
          "is_free_product_price",
          "is_payment_required",
          "is_payment_setup_required",
          "is_payment_form_required",
          "customer_id",
          "customer_name",
          "customer_email",
          "customer_ip_address",
          "customer_billing_address",
          "customer_tax_id",
          "payment_processor_metadata",
          "product",
          "product_price",
          "discount",
          "organization",
          "attached_custom_fields",
          "customer_session_token"
        ],
        "title": "CheckoutPublicConfirmed",
        "description": "Checkout session data retrieved using the client secret after confirmation.\n\nIt contains a customer session token to retrieve order information\nright after the checkout."
      },
      "CheckoutSortProperty": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "expires_at",
          "-expires_at"
        ],
        "title": "CheckoutSortProperty"
      },
      "CheckoutStatus": {
        "type": "string",
        "enum": [
          "open",
          "expired",
          "confirmed",
          "succeeded",
          "failed"
        ],
        "title": "CheckoutStatus"
      },
      "CheckoutUpdate": {
        "properties": {
          "custom_field_data": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Custom Field Data",
            "description": "Key-value object storing custom field values."
          },
          "product_price_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Product Price Id",
            "description": "ID of the product price to checkout. Must correspond to a price linked to the same product."
          },
          "amount": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 99999999,
                "minimum": 50,
                "description": "Amount to pay in cents. Only useful for custom prices, it'll be ignored for fixed and free prices."
              },
              {
                "type": "null"
              }
            ],
            "title": "Amount"
          },
          "customer_name": {
            "anyOf": [
              {
                "type": "string",
                "description": "Name of the customer."
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Name"
          },
          "customer_email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email",
                "description": "Email address of the customer."
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Email"
          },
          "customer_billing_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address",
                "description": "Billing address of the customer."
              },
              {
                "type": "null"
              }
            ]
          },
          "customer_tax_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Tax Id"
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {
                      "type": "string",
                      "maxLength": 500,
                      "minLength": 1
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "boolean"
                    }
                  ]
                },
                "propertyNames": {
                  "maxLength": 40,
                  "minLength": 1
                },
                "type": "object",
                "maxProperties": 50,
                "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A boolean\n\nYou can store up to **50 key-value pairs**."
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          },
          "discount_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Id",
            "description": "ID of the discount to apply to the checkout."
          },
          "allow_discount_codes": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Allow Discount Codes",
            "description": "Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it."
          },
          "customer_ip_address": {
            "anyOf": [
              {
                "type": "string",
                "format": "ipvanyaddress"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Ip Address"
          },
          "customer_metadata": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {
                      "type": "string",
                      "maxLength": 500,
                      "minLength": 1
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "boolean"
                    }
                  ]
                },
                "propertyNames": {
                  "maxLength": 40,
                  "minLength": 1
                },
                "type": "object",
                "maxProperties": 50,
                "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A boolean\n\nYou can store up to **50 key-value pairs**."
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Metadata",
            "description": "Key-value object allowing you to store additional information that'll be copied to the created customer.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "success_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Success Url",
            "description": "URL where the customer will be redirected after a successful payment.You can add the `checkout_id={CHECKOUT_ID}` query parameter to retrieve the checkout session id."
          },
          "embed_origin": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Embed Origin",
            "description": "If you plan to embed the checkout session, set this to the Origin of the embedding page. It'll allow the Polar iframe to communicate with the parent page."
          }
        },
        "type": "object",
        "title": "CheckoutUpdate",
        "description": "Update an existing checkout session using an access token."
      },
      "CheckoutUpdatePublic": {
        "properties": {
          "custom_field_data": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Custom Field Data",
            "description": "Key-value object storing custom field values."
          },
          "product_price_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Product Price Id",
            "description": "ID of the product price to checkout. Must correspond to a price linked to the same product."
          },
          "amount": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 99999999,
                "minimum": 50,
                "description": "Amount to pay in cents. Only useful for custom prices, it'll be ignored for fixed and free prices."
              },
              {
                "type": "null"
              }
            ],
            "title": "Amount"
          },
          "customer_name": {
            "anyOf": [
              {
                "type": "string",
                "description": "Name of the customer."
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Name"
          },
          "customer_email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email",
                "description": "Email address of the customer."
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Email"
          },
          "customer_billing_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address",
                "description": "Billing address of the customer."
              },
              {
                "type": "null"
              }
            ]
          },
          "customer_tax_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Tax Id"
          },
          "discount_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Code",
            "description": "Discount code to apply to the checkout."
          }
        },
        "type": "object",
        "title": "CheckoutUpdatePublic",
        "description": "Update an existing checkout session using the client secret."
      },
      "CurrencyAmount": {
        "properties": {
          "currency": {
            "type": "string",
            "title": "Currency",
            "description": "Three letter currency code (eg: USD)"
          },
          "amount": {
            "type": "integer",
            "title": "Amount",
            "description": "Amount in the currencies smallest unit (cents if currency is USD)"
          }
        },
        "type": "object",
        "required": [
          "currency",
          "amount"
        ],
        "title": "CurrencyAmount"
      },
      "CustomField": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/CustomFieldText"
          },
          {
            "$ref": "#/components/schemas/CustomFieldNumber"
          },
          {
            "$ref": "#/components/schemas/CustomFieldDate"
          },
          {
            "$ref": "#/components/schemas/CustomFieldCheckbox"
          },
          {
            "$ref": "#/components/schemas/CustomFieldSelect"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "checkbox": "#/components/schemas/CustomFieldCheckbox",
            "date": "#/components/schemas/CustomFieldDate",
            "number": "#/components/schemas/CustomFieldNumber",
            "select": "#/components/schemas/CustomFieldSelect",
            "text": "#/components/schemas/CustomFieldText"
          }
        }
      },
      "CustomFieldCheckbox": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "type": {
            "type": "string",
            "const": "checkbox",
            "title": "Type"
          },
          "slug": {
            "type": "string",
            "title": "Slug",
            "description": "Identifier of the custom field. It'll be used as key when storing the value."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the custom field."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the custom field.",
            "x-polar-selector-widget": {
              "displayProperty": "name",
              "resourceName": "Organization",
              "resourceRoot": "/v1/organizations"
            }
          },
          "properties": {
            "$ref": "#/components/schemas/CustomFieldCheckboxProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "metadata",
          "type",
          "slug",
          "name",
          "organization_id",
          "properties"
        ],
        "title": "CustomFieldCheckbox",
        "description": "Schema for a custom field of type checkbox."
      },
      "CustomFieldCheckboxProperties": {
        "properties": {
          "form_label": {
            "type": "string",
            "minLength": 1,
            "title": "Form Label"
          },
          "form_help_text": {
            "type": "string",
            "minLength": 1,
            "title": "Form Help Text"
          },
          "form_placeholder": {
            "type": "string",
            "minLength": 1,
            "title": "Form Placeholder"
          }
        },
        "type": "object",
        "title": "CustomFieldCheckboxProperties"
      },
      "CustomFieldCreate": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/CustomFieldCreateText"
          },
          {
            "$ref": "#/components/schemas/CustomFieldCreateNumber"
          },
          {
            "$ref": "#/components/schemas/CustomFieldCreateDate"
          },
          {
            "$ref": "#/components/schemas/CustomFieldCreateCheckbox"
          },
          {
            "$ref": "#/components/schemas/CustomFieldCreateSelect"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "checkbox": "#/components/schemas/CustomFieldCreateCheckbox",
            "date": "#/components/schemas/CustomFieldCreateDate",
            "number": "#/components/schemas/CustomFieldCreateNumber",
            "select": "#/components/schemas/CustomFieldCreateSelect",
            "text": "#/components/schemas/CustomFieldCreateText"
          }
        }
      },
      "CustomFieldCreateCheckbox": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "type": {
            "type": "string",
            "const": "checkbox",
            "title": "Type"
          },
          "slug": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[a-z0-9-_]+$",
            "title": "Slug",
            "description": "Identifier of the custom field. It'll be used as key when storing the value. Must be unique across the organization.It can only contain ASCII letters, numbers and hyphens."
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "title": "Name",
            "description": "Name of the custom field."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the custom field. **Required unless you use an organization token.**"
          },
          "properties": {
            "$ref": "#/components/schemas/CustomFieldCheckboxProperties"
          }
        },
        "type": "object",
        "required": [
          "type",
          "slug",
          "name",
          "properties"
        ],
        "title": "CustomFieldCreateCheckbox",
        "description": "Schema to create a custom field of type checkbox."
      },
      "CustomFieldCreateDate": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "type": {
            "type": "string",
            "const": "date",
            "title": "Type"
          },
          "slug": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[a-z0-9-_]+$",
            "title": "Slug",
            "description": "Identifier of the custom field. It'll be used as key when storing the value. Must be unique across the organization.It can only contain ASCII letters, numbers and hyphens."
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "title": "Name",
            "description": "Name of the custom field."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the custom field. **Required unless you use an organization token.**"
          },
          "properties": {
            "$ref": "#/components/schemas/CustomFieldDateProperties"
          }
        },
        "type": "object",
        "required": [
          "type",
          "slug",
          "name",
          "properties"
        ],
        "title": "CustomFieldCreateDate",
        "description": "Schema to create a custom field of type date."
      },
      "CustomFieldCreateNumber": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "type": {
            "type": "string",
            "const": "number",
            "title": "Type"
          },
          "slug": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[a-z0-9-_]+$",
            "title": "Slug",
            "description": "Identifier of the custom field. It'll be used as key when storing the value. Must be unique across the organization.It can only contain ASCII letters, numbers and hyphens."
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "title": "Name",
            "description": "Name of the custom field."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the custom field. **Required unless you use an organization token.**"
          },
          "properties": {
            "$ref": "#/components/schemas/CustomFieldNumberProperties"
          }
        },
        "type": "object",
        "required": [
          "type",
          "slug",
          "name",
          "properties"
        ],
        "title": "CustomFieldCreateNumber",
        "description": "Schema to create a custom field of type number."
      },
      "CustomFieldCreateSelect": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "type": {
            "type": "string",
            "const": "select",
            "title": "Type"
          },
          "slug": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[a-z0-9-_]+$",
            "title": "Slug",
            "description": "Identifier of the custom field. It'll be used as key when storing the value. Must be unique across the organization.It can only contain ASCII letters, numbers and hyphens."
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "title": "Name",
            "description": "Name of the custom field."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the custom field. **Required unless you use an organization token.**"
          },
          "properties": {
            "$ref": "#/components/schemas/CustomFieldSelectProperties"
          }
        },
        "type": "object",
        "required": [
          "type",
          "slug",
          "name",
          "properties"
        ],
        "title": "CustomFieldCreateSelect",
        "description": "Schema to create a custom field of type select."
      },
      "CustomFieldCreateText": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "type": {
            "type": "string",
            "const": "text",
            "title": "Type"
          },
          "slug": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[a-z0-9-_]+$",
            "title": "Slug",
            "description": "Identifier of the custom field. It'll be used as key when storing the value. Must be unique across the organization.It can only contain ASCII letters, numbers and hyphens."
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "title": "Name",
            "description": "Name of the custom field."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the custom field. **Required unless you use an organization token.**"
          },
          "properties": {
            "$ref": "#/components/schemas/CustomFieldTextProperties"
          }
        },
        "type": "object",
        "required": [
          "type",
          "slug",
          "name",
          "properties"
        ],
        "title": "CustomFieldCreateText",
        "description": "Schema to create a custom field of type text."
      },
      "CustomFieldDate": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "type": {
            "type": "string",
            "const": "date",
            "title": "Type"
          },
          "slug": {
            "type": "string",
            "title": "Slug",
            "description": "Identifier of the custom field. It'll be used as key when storing the value."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the custom field."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the custom field.",
            "x-polar-selector-widget": {
              "displayProperty": "name",
              "resourceName": "Organization",
              "resourceRoot": "/v1/organizations"
            }
          },
          "properties": {
            "$ref": "#/components/schemas/CustomFieldDateProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "metadata",
          "type",
          "slug",
          "name",
          "organization_id",
          "properties"
        ],
        "title": "CustomFieldDate",
        "description": "Schema for a custom field of type date."
      },
      "CustomFieldDateProperties": {
        "properties": {
          "form_label": {
            "type": "string",
            "minLength": 1,
            "title": "Form Label"
          },
          "form_help_text": {
            "type": "string",
            "minLength": 1,
            "title": "Form Help Text"
          },
          "form_placeholder": {
            "type": "string",
            "minLength": 1,
            "title": "Form Placeholder"
          },
          "ge": {
            "type": "integer",
            "title": "Ge"
          },
          "le": {
            "type": "integer",
            "title": "Le"
          }
        },
        "type": "object",
        "title": "CustomFieldDateProperties"
      },
      "CustomFieldNumber": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "type": {
            "type": "string",
            "const": "number",
            "title": "Type"
          },
          "slug": {
            "type": "string",
            "title": "Slug",
            "description": "Identifier of the custom field. It'll be used as key when storing the value."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the custom field."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the custom field.",
            "x-polar-selector-widget": {
              "displayProperty": "name",
              "resourceName": "Organization",
              "resourceRoot": "/v1/organizations"
            }
          },
          "properties": {
            "$ref": "#/components/schemas/CustomFieldNumberProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "metadata",
          "type",
          "slug",
          "name",
          "organization_id",
          "properties"
        ],
        "title": "CustomFieldNumber",
        "description": "Schema for a custom field of type number."
      },
      "CustomFieldNumberProperties": {
        "properties": {
          "form_label": {
            "type": "string",
            "minLength": 1,
            "title": "Form Label"
          },
          "form_help_text": {
            "type": "string",
            "minLength": 1,
            "title": "Form Help Text"
          },
          "form_placeholder": {
            "type": "string",
            "minLength": 1,
            "title": "Form Placeholder"
          },
          "ge": {
            "type": "integer",
            "title": "Ge"
          },
          "le": {
            "type": "integer",
            "title": "Le"
          }
        },
        "type": "object",
        "title": "CustomFieldNumberProperties"
      },
      "CustomFieldSelect": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "type": {
            "type": "string",
            "const": "select",
            "title": "Type"
          },
          "slug": {
            "type": "string",
            "title": "Slug",
            "description": "Identifier of the custom field. It'll be used as key when storing the value."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the custom field."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the custom field.",
            "x-polar-selector-widget": {
              "displayProperty": "name",
              "resourceName": "Organization",
              "resourceRoot": "/v1/organizations"
            }
          },
          "properties": {
            "$ref": "#/components/schemas/CustomFieldSelectProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "metadata",
          "type",
          "slug",
          "name",
          "organization_id",
          "properties"
        ],
        "title": "CustomFieldSelect",
        "description": "Schema for a custom field of type select."
      },
      "CustomFieldSelectOption": {
        "properties": {
          "value": {
            "type": "string",
            "minLength": 1,
            "title": "Value"
          },
          "label": {
            "type": "string",
            "minLength": 1,
            "title": "Label"
          }
        },
        "type": "object",
        "required": [
          "value",
          "label"
        ],
        "title": "CustomFieldSelectOption"
      },
      "CustomFieldSelectProperties": {
        "properties": {
          "form_label": {
            "type": "string",
            "minLength": 1,
            "title": "Form Label"
          },
          "form_help_text": {
            "type": "string",
            "minLength": 1,
            "title": "Form Help Text"
          },
          "form_placeholder": {
            "type": "string",
            "minLength": 1,
            "title": "Form Placeholder"
          },
          "options": {
            "items": {
              "$ref": "#/components/schemas/CustomFieldSelectOption"
            },
            "type": "array",
            "title": "Options"
          }
        },
        "type": "object",
        "required": [
          "options"
        ],
        "title": "CustomFieldSelectProperties"
      },
      "CustomFieldSortProperty": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "slug",
          "-slug",
          "name",
          "-name",
          "type",
          "-type"
        ],
        "title": "CustomFieldSortProperty"
      },
      "CustomFieldText": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "type": {
            "type": "string",
            "const": "text",
            "title": "Type"
          },
          "slug": {
            "type": "string",
            "title": "Slug",
            "description": "Identifier of the custom field. It'll be used as key when storing the value."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the custom field."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the custom field.",
            "x-polar-selector-widget": {
              "displayProperty": "name",
              "resourceName": "Organization",
              "resourceRoot": "/v1/organizations"
            }
          },
          "properties": {
            "$ref": "#/components/schemas/CustomFieldTextProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "metadata",
          "type",
          "slug",
          "name",
          "organization_id",
          "properties"
        ],
        "title": "CustomFieldText",
        "description": "Schema for a custom field of type text."
      },
      "CustomFieldTextProperties": {
        "properties": {
          "form_label": {
            "type": "string",
            "minLength": 1,
            "title": "Form Label"
          },
          "form_help_text": {
            "type": "string",
            "minLength": 1,
            "title": "Form Help Text"
          },
          "form_placeholder": {
            "type": "string",
            "minLength": 1,
            "title": "Form Placeholder"
          },
          "textarea": {
            "type": "boolean",
            "title": "Textarea"
          },
          "min_length": {
            "type": "integer",
            "minimum": 0,
            "title": "Min Length"
          },
          "max_length": {
            "type": "integer",
            "minimum": 0,
            "title": "Max Length"
          }
        },
        "type": "object",
        "title": "CustomFieldTextProperties"
      },
      "CustomFieldType": {
        "type": "string",
        "enum": [
          "text",
          "number",
          "date",
          "checkbox",
          "select"
        ],
        "title": "CustomFieldType"
      },
      "CustomFieldUpdate": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/CustomFieldUpdateText"
          },
          {
            "$ref": "#/components/schemas/CustomFieldUpdateNumber"
          },
          {
            "$ref": "#/components/schemas/CustomFieldUpdateDate"
          },
          {
            "$ref": "#/components/schemas/CustomFieldUpdateCheckbox"
          },
          {
            "$ref": "#/components/schemas/CustomFieldUpdateSelect"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "checkbox": "#/components/schemas/CustomFieldUpdateCheckbox",
            "date": "#/components/schemas/CustomFieldUpdateDate",
            "number": "#/components/schemas/CustomFieldUpdateNumber",
            "select": "#/components/schemas/CustomFieldUpdateSelect",
            "text": "#/components/schemas/CustomFieldUpdateText"
          }
        }
      },
      "CustomFieldUpdateCheckbox": {
        "properties": {
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {
                      "type": "string",
                      "maxLength": 500,
                      "minLength": 1
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "boolean"
                    }
                  ]
                },
                "propertyNames": {
                  "maxLength": 40,
                  "minLength": 1
                },
                "type": "object",
                "maxProperties": 50,
                "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A boolean\n\nYou can store up to **50 key-value pairs**."
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          },
          "name": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 1,
                "description": "Name of the custom field."
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "slug": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 1,
                "pattern": "^[a-z0-9-_]+$",
                "description": "Identifier of the custom field. It'll be used as key when storing the value. Must be unique across the organization.It can only contain ASCII letters, numbers and hyphens."
              },
              {
                "type": "null"
              }
            ],
            "title": "Slug"
          },
          "type": {
            "type": "string",
            "const": "checkbox",
            "title": "Type"
          },
          "properties": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CustomFieldCheckboxProperties"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "type"
        ],
        "title": "CustomFieldUpdateCheckbox",
        "description": "Schema to update a custom field of type checkbox."
      },
      "CustomFieldUpdateDate": {
        "properties": {
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {
                      "type": "string",
                      "maxLength": 500,
                      "minLength": 1
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "boolean"
                    }
                  ]
                },
                "propertyNames": {
                  "maxLength": 40,
                  "minLength": 1
                },
                "type": "object",
                "maxProperties": 50,
                "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A boolean\n\nYou can store up to **50 key-value pairs**."
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          },
          "name": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 1,
                "description": "Name of the custom field."
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "slug": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 1,
                "pattern": "^[a-z0-9-_]+$",
                "description": "Identifier of the custom field. It'll be used as key when storing the value. Must be unique across the organization.It can only contain ASCII letters, numbers and hyphens."
              },
              {
                "type": "null"
              }
            ],
            "title": "Slug"
          },
          "type": {
            "type": "string",
            "const": "date",
            "title": "Type"
          },
          "properties": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CustomFieldDateProperties"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "type"
        ],
        "title": "CustomFieldUpdateDate",
        "description": "Schema to update a custom field of type date."
      },
      "CustomFieldUpdateNumber": {
        "properties": {
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {
                      "type": "string",
                      "maxLength": 500,
                      "minLength": 1
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "boolean"
                    }
                  ]
                },
                "propertyNames": {
                  "maxLength": 40,
                  "minLength": 1
                },
                "type": "object",
                "maxProperties": 50,
                "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A boolean\n\nYou can store up to **50 key-value pairs**."
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          },
          "name": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 1,
                "description": "Name of the custom field."
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "slug": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 1,
                "pattern": "^[a-z0-9-_]+$",
                "description": "Identifier of the custom field. It'll be used as key when storing the value. Must be unique across the organization.It can only contain ASCII letters, numbers and hyphens."
              },
              {
                "type": "null"
              }
            ],
            "title": "Slug"
          },
          "type": {
            "type": "string",
            "const": "number",
            "title": "Type"
          },
          "properties": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CustomFieldNumberProperties"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "type"
        ],
        "title": "CustomFieldUpdateNumber",
        "description": "Schema to update a custom field of type number."
      },
      "CustomFieldUpdateSelect": {
        "properties": {
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {
                      "type": "string",
                      "maxLength": 500,
                      "minLength": 1
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "boolean"
                    }
                  ]
                },
                "propertyNames": {
                  "maxLength": 40,
                  "minLength": 1
                },
                "type": "object",
                "maxProperties": 50,
                "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A boolean\n\nYou can store up to **50 key-value pairs**."
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          },
          "name": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 1,
                "description": "Name of the custom field."
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "slug": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 1,
                "pattern": "^[a-z0-9-_]+$",
                "description": "Identifier of the custom field. It'll be used as key when storing the value. Must be unique across the organization.It can only contain ASCII letters, numbers and hyphens."
              },
              {
                "type": "null"
              }
            ],
            "title": "Slug"
          },
          "type": {
            "type": "string",
            "const": "select",
            "title": "Type"
          },
          "properties": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CustomFieldSelectProperties"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "type"
        ],
        "title": "CustomFieldUpdateSelect",
        "description": "Schema to update a custom field of type select."
      },
      "CustomFieldUpdateText": {
        "properties": {
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {
                      "type": "string",
                      "maxLength": 500,
                      "minLength": 1
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "boolean"
                    }
                  ]
                },
                "propertyNames": {
                  "maxLength": 40,
                  "minLength": 1
                },
                "type": "object",
                "maxProperties": 50,
                "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A boolean\n\nYou can store up to **50 key-value pairs**."
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          },
          "name": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 1,
                "description": "Name of the custom field."
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "slug": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 1,
                "pattern": "^[a-z0-9-_]+$",
                "description": "Identifier of the custom field. It'll be used as key when storing the value. Must be unique across the organization.It can only contain ASCII letters, numbers and hyphens."
              },
              {
                "type": "null"
              }
            ],
            "title": "Slug"
          },
          "type": {
            "type": "string",
            "const": "text",
            "title": "Type"
          },
          "properties": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CustomFieldTextProperties"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "type"
        ],
        "title": "CustomFieldUpdateText",
        "description": "Schema to update a custom field of type text."
      },
      "Customer": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "email_verified": {
            "type": "boolean",
            "title": "Email Verified"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "billing_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address"
              },
              {
                "type": "null"
              }
            ]
          },
          "tax_id": {
            "anyOf": [
              {
                "prefixItems": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/components/schemas/TaxIDFormat"
                  }
                ],
                "type": "array",
                "maxItems": 2,
                "minItems": 2
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Id"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id"
          },
          "avatar_url": {
            "type": "string",
            "title": "Avatar Url",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "metadata",
          "email",
          "email_verified",
          "name",
          "billing_address",
          "tax_id",
          "organization_id",
          "avatar_url"
        ],
        "title": "Customer",
        "description": "A customer in an organization."
      },
      "CustomerBenefitGrant": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/CustomerBenefitGrantDiscord"
          },
          {
            "$ref": "#/components/schemas/CustomerBenefitGrantGitHubRepository"
          },
          {
            "$ref": "#/components/schemas/CustomerBenefitGrantDownloadables"
          },
          {
            "$ref": "#/components/schemas/CustomerBenefitGrantLicenseKeys"
          },
          {
            "$ref": "#/components/schemas/CustomerBenefitGrantAds"
          },
          {
            "$ref": "#/components/schemas/CustomerBenefitGrantCustom"
          }
        ]
      },
      "CustomerBenefitGrantAds": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "granted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Granted At"
          },
          "revoked_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Revoked At"
          },
          "customer_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Customer Id"
          },
          "benefit_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Benefit Id"
          },
          "subscription_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subscription Id"
          },
          "order_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id"
          },
          "is_granted": {
            "type": "boolean",
            "title": "Is Granted"
          },
          "is_revoked": {
            "type": "boolean",
            "title": "Is Revoked"
          },
          "benefit": {
            "$ref": "#/components/schemas/BenefitAdsSubscriber"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitGrantAdsProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "granted_at",
          "revoked_at",
          "customer_id",
          "benefit_id",
          "subscription_id",
          "order_id",
          "is_granted",
          "is_revoked",
          "benefit",
          "properties"
        ],
        "title": "CustomerBenefitGrantAds"
      },
      "CustomerBenefitGrantAdsUpdate": {
        "properties": {
          "benefit_type": {
            "type": "string",
            "const": "ads",
            "title": "Benefit Type"
          }
        },
        "type": "object",
        "required": [
          "benefit_type"
        ],
        "title": "CustomerBenefitGrantAdsUpdate"
      },
      "CustomerBenefitGrantCustom": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "granted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Granted At"
          },
          "revoked_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Revoked At"
          },
          "customer_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Customer Id"
          },
          "benefit_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Benefit Id"
          },
          "subscription_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subscription Id"
          },
          "order_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id"
          },
          "is_granted": {
            "type": "boolean",
            "title": "Is Granted"
          },
          "is_revoked": {
            "type": "boolean",
            "title": "Is Revoked"
          },
          "benefit": {
            "$ref": "#/components/schemas/BenefitCustomSubscriber"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitGrantCustomProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "granted_at",
          "revoked_at",
          "customer_id",
          "benefit_id",
          "subscription_id",
          "order_id",
          "is_granted",
          "is_revoked",
          "benefit",
          "properties"
        ],
        "title": "CustomerBenefitGrantCustom"
      },
      "CustomerBenefitGrantCustomUpdate": {
        "properties": {
          "benefit_type": {
            "type": "string",
            "const": "custom",
            "title": "Benefit Type"
          }
        },
        "type": "object",
        "required": [
          "benefit_type"
        ],
        "title": "CustomerBenefitGrantCustomUpdate"
      },
      "CustomerBenefitGrantDiscord": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "granted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Granted At"
          },
          "revoked_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Revoked At"
          },
          "customer_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Customer Id"
          },
          "benefit_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Benefit Id"
          },
          "subscription_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subscription Id"
          },
          "order_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id"
          },
          "is_granted": {
            "type": "boolean",
            "title": "Is Granted"
          },
          "is_revoked": {
            "type": "boolean",
            "title": "Is Revoked"
          },
          "benefit": {
            "$ref": "#/components/schemas/BenefitDiscordSubscriber"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitGrantDiscordProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "granted_at",
          "revoked_at",
          "customer_id",
          "benefit_id",
          "subscription_id",
          "order_id",
          "is_granted",
          "is_revoked",
          "benefit",
          "properties"
        ],
        "title": "CustomerBenefitGrantDiscord"
      },
      "CustomerBenefitGrantDiscordPropertiesUpdate": {
        "properties": {
          "account_id": {
            "type": "string",
            "title": "Account Id"
          }
        },
        "type": "object",
        "required": [
          "account_id"
        ],
        "title": "CustomerBenefitGrantDiscordPropertiesUpdate"
      },
      "CustomerBenefitGrantDiscordUpdate": {
        "properties": {
          "benefit_type": {
            "type": "string",
            "const": "discord",
            "title": "Benefit Type"
          },
          "properties": {
            "$ref": "#/components/schemas/CustomerBenefitGrantDiscordPropertiesUpdate"
          }
        },
        "type": "object",
        "required": [
          "benefit_type",
          "properties"
        ],
        "title": "CustomerBenefitGrantDiscordUpdate"
      },
      "CustomerBenefitGrantDownloadables": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "granted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Granted At"
          },
          "revoked_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Revoked At"
          },
          "customer_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Customer Id"
          },
          "benefit_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Benefit Id"
          },
          "subscription_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subscription Id"
          },
          "order_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id"
          },
          "is_granted": {
            "type": "boolean",
            "title": "Is Granted"
          },
          "is_revoked": {
            "type": "boolean",
            "title": "Is Revoked"
          },
          "benefit": {
            "$ref": "#/components/schemas/BenefitDownloadablesSubscriber"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitGrantDownloadablesProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "granted_at",
          "revoked_at",
          "customer_id",
          "benefit_id",
          "subscription_id",
          "order_id",
          "is_granted",
          "is_revoked",
          "benefit",
          "properties"
        ],
        "title": "CustomerBenefitGrantDownloadables"
      },
      "CustomerBenefitGrantDownloadablesUpdate": {
        "properties": {
          "benefit_type": {
            "type": "string",
            "const": "downloadables",
            "title": "Benefit Type"
          }
        },
        "type": "object",
        "required": [
          "benefit_type"
        ],
        "title": "CustomerBenefitGrantDownloadablesUpdate"
      },
      "CustomerBenefitGrantGitHubRepository": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "granted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Granted At"
          },
          "revoked_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Revoked At"
          },
          "customer_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Customer Id"
          },
          "benefit_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Benefit Id"
          },
          "subscription_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subscription Id"
          },
          "order_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id"
          },
          "is_granted": {
            "type": "boolean",
            "title": "Is Granted"
          },
          "is_revoked": {
            "type": "boolean",
            "title": "Is Revoked"
          },
          "benefit": {
            "$ref": "#/components/schemas/BenefitGitHubRepositorySubscriber"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitGrantGitHubRepositoryProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "granted_at",
          "revoked_at",
          "customer_id",
          "benefit_id",
          "subscription_id",
          "order_id",
          "is_granted",
          "is_revoked",
          "benefit",
          "properties"
        ],
        "title": "CustomerBenefitGrantGitHubRepository"
      },
      "CustomerBenefitGrantGitHubRepositoryPropertiesUpdate": {
        "properties": {
          "account_id": {
            "type": "string",
            "title": "Account Id"
          }
        },
        "type": "object",
        "required": [
          "account_id"
        ],
        "title": "CustomerBenefitGrantGitHubRepositoryPropertiesUpdate"
      },
      "CustomerBenefitGrantGitHubRepositoryUpdate": {
        "properties": {
          "benefit_type": {
            "type": "string",
            "const": "github_repository",
            "title": "Benefit Type"
          },
          "properties": {
            "$ref": "#/components/schemas/CustomerBenefitGrantGitHubRepositoryPropertiesUpdate"
          }
        },
        "type": "object",
        "required": [
          "benefit_type",
          "properties"
        ],
        "title": "CustomerBenefitGrantGitHubRepositoryUpdate"
      },
      "CustomerBenefitGrantLicenseKeys": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "granted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Granted At"
          },
          "revoked_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Revoked At"
          },
          "customer_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Customer Id"
          },
          "benefit_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Benefit Id"
          },
          "subscription_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subscription Id"
          },
          "order_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id"
          },
          "is_granted": {
            "type": "boolean",
            "title": "Is Granted"
          },
          "is_revoked": {
            "type": "boolean",
            "title": "Is Revoked"
          },
          "benefit": {
            "$ref": "#/components/schemas/BenefitLicenseKeysSubscriber"
          },
          "properties": {
            "$ref": "#/components/schemas/BenefitGrantLicenseKeysProperties"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "granted_at",
          "revoked_at",
          "customer_id",
          "benefit_id",
          "subscription_id",
          "order_id",
          "is_granted",
          "is_revoked",
          "benefit",
          "properties"
        ],
        "title": "CustomerBenefitGrantLicenseKeys"
      },
      "CustomerBenefitGrantLicenseKeysUpdate": {
        "properties": {
          "benefit_type": {
            "type": "string",
            "const": "license_keys",
            "title": "Benefit Type"
          }
        },
        "type": "object",
        "required": [
          "benefit_type"
        ],
        "title": "CustomerBenefitGrantLicenseKeysUpdate"
      },
      "CustomerBenefitGrantSortProperty": {
        "type": "string",
        "enum": [
          "granted_at",
          "-granted_at",
          "type",
          "-type",
          "organization",
          "-organization"
        ],
        "title": "CustomerBenefitGrantSortProperty"
      },
      "CustomerBenefitGrantUpdate": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/CustomerBenefitGrantDiscordUpdate"
          },
          {
            "$ref": "#/components/schemas/CustomerBenefitGrantGitHubRepositoryUpdate"
          },
          {
            "$ref": "#/components/schemas/CustomerBenefitGrantDownloadablesUpdate"
          },
          {
            "$ref": "#/components/schemas/CustomerBenefitGrantLicenseKeysUpdate"
          },
          {
            "$ref": "#/components/schemas/CustomerBenefitGrantAdsUpdate"
          },
          {
            "$ref": "#/components/schemas/CustomerBenefitGrantCustomUpdate"
          }
        ],
        "discriminator": {
          "propertyName": "benefit_type",
          "mapping": {
            "ads": "#/components/schemas/CustomerBenefitGrantAdsUpdate",
            "custom": "#/components/schemas/CustomerBenefitGrantCustomUpdate",
            "discord": "#/components/schemas/CustomerBenefitGrantDiscordUpdate",
            "downloadables": "#/components/schemas/CustomerBenefitGrantDownloadablesUpdate",
            "github_repository": "#/components/schemas/CustomerBenefitGrantGitHubRepositoryUpdate",
            "license_keys": "#/components/schemas/CustomerBenefitGrantLicenseKeysUpdate"
          }
        }
      },
      "CustomerCreate": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "billing_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address"
              },
              {
                "type": "null"
              }
            ]
          },
          "tax_id": {
            "anyOf": [
              {
                "prefixItems": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/components/schemas/TaxIDFormat"
                  }
                ],
                "type": "array",
                "maxItems": 2,
                "minItems": 2
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Id"
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the customer. **Required unless you use an organization token.**"
          }
        },
        "type": "object",
        "required": [
          "email"
        ],
        "title": "CustomerCreate"
      },
      "CustomerOrder": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "amount": {
            "type": "integer",
            "title": "Amount"
          },
          "tax_amount": {
            "type": "integer",
            "title": "Tax Amount"
          },
          "currency": {
            "type": "string",
            "title": "Currency"
          },
          "customer_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Customer Id"
          },
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id"
          },
          "product_price_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Price Id"
          },
          "subscription_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subscription Id"
          },
          "user_id": {
            "type": "string",
            "format": "uuid4",
            "title": "User Id",
            "deprecated": true
          },
          "product": {
            "$ref": "#/components/schemas/CustomerOrderProduct"
          },
          "product_price": {
            "$ref": "#/components/schemas/ProductPrice"
          },
          "subscription": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CustomerOrderSubscription"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "amount",
          "tax_amount",
          "currency",
          "customer_id",
          "product_id",
          "product_price_id",
          "subscription_id",
          "user_id",
          "product",
          "product_price",
          "subscription"
        ],
        "title": "CustomerOrder"
      },
      "CustomerOrderInvoice": {
        "properties": {
          "url": {
            "type": "string",
            "title": "Url",
            "description": "The URL to the invoice."
          }
        },
        "type": "object",
        "required": [
          "url"
        ],
        "title": "CustomerOrderInvoice",
        "description": "Order's invoice data."
      },
      "CustomerOrderProduct": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the product."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the product."
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the product."
          },
          "is_recurring": {
            "type": "boolean",
            "title": "Is Recurring",
            "description": "Whether the product is a subscription tier."
          },
          "is_archived": {
            "type": "boolean",
            "title": "Is Archived",
            "description": "Whether the product is archived and no longer available."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the product."
          },
          "prices": {
            "items": {
              "$ref": "#/components/schemas/ProductPrice"
            },
            "type": "array",
            "title": "Prices",
            "description": "List of prices for this product."
          },
          "benefits": {
            "items": {
              "$ref": "#/components/schemas/BenefitBase"
            },
            "type": "array",
            "title": "BenefitPublic",
            "description": "List of benefits granted by the product."
          },
          "medias": {
            "items": {
              "$ref": "#/components/schemas/ProductMediaFileRead"
            },
            "type": "array",
            "title": "Medias",
            "description": "List of medias associated to the product."
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "name",
          "description",
          "is_recurring",
          "is_archived",
          "organization_id",
          "prices",
          "benefits",
          "medias",
          "organization"
        ],
        "title": "CustomerOrderProduct"
      },
      "CustomerOrderSortProperty": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "amount",
          "-amount",
          "organization",
          "-organization",
          "product",
          "-product",
          "subscription",
          "-subscription"
        ],
        "title": "CustomerOrderSortProperty"
      },
      "CustomerOrderSubscription": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Amount"
          },
          "currency": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Currency"
          },
          "recurring_interval": {
            "$ref": "#/components/schemas/SubscriptionRecurringInterval"
          },
          "status": {
            "$ref": "#/components/schemas/SubscriptionStatus"
          },
          "current_period_start": {
            "type": "string",
            "format": "date-time",
            "title": "Current Period Start"
          },
          "current_period_end": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Current Period End"
          },
          "cancel_at_period_end": {
            "type": "boolean",
            "title": "Cancel At Period End"
          },
          "started_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Started At"
          },
          "ended_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ended At"
          },
          "customer_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Customer Id"
          },
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id"
          },
          "price_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Price Id"
          },
          "discount_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Id"
          },
          "checkout_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checkout Id"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "amount",
          "currency",
          "recurring_interval",
          "status",
          "current_period_start",
          "current_period_end",
          "cancel_at_period_end",
          "started_at",
          "ended_at",
          "customer_id",
          "product_id",
          "price_id",
          "discount_id",
          "checkout_id"
        ],
        "title": "CustomerOrderSubscription"
      },
      "CustomerPortalCustomer": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "email_verified": {
            "type": "boolean",
            "title": "Email Verified"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "billing_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address"
              },
              {
                "type": "null"
              }
            ]
          },
          "tax_id": {
            "anyOf": [
              {
                "prefixItems": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/components/schemas/TaxIDFormat"
                  }
                ],
                "type": "array",
                "maxItems": 2,
                "minItems": 2
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Id"
          },
          "oauth_accounts": {
            "additionalProperties": {
              "$ref": "#/components/schemas/CustomerPortalOAuthAccount"
            },
            "type": "object",
            "title": "Oauth Accounts"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "email",
          "email_verified",
          "name",
          "billing_address",
          "tax_id",
          "oauth_accounts"
        ],
        "title": "CustomerPortalCustomer"
      },
      "CustomerPortalOAuthAccount": {
        "properties": {
          "account_id": {
            "type": "string",
            "title": "Account Id"
          },
          "account_username": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Account Username"
          }
        },
        "type": "object",
        "required": [
          "account_id",
          "account_username"
        ],
        "title": "CustomerPortalOAuthAccount"
      },
      "CustomerSession": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "token": {
            "type": "string",
            "title": "Token"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "title": "Expires At"
          },
          "customer_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Customer Id"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "token",
          "expires_at",
          "customer_id",
          "customer"
        ],
        "title": "CustomerSession",
        "description": "A customer session that can be used to authenticate as a customer."
      },
      "CustomerSessionCreate": {
        "properties": {
          "customer_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Customer Id",
            "description": "ID of the customer to create a session for."
          }
        },
        "type": "object",
        "required": [
          "customer_id"
        ],
        "title": "CustomerSessionCreate",
        "description": "Schema for creating a customer session."
      },
      "CustomerSortProperty": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "email",
          "-email",
          "name",
          "-name"
        ],
        "title": "CustomerSortProperty"
      },
      "CustomerSubscription": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Amount"
          },
          "currency": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Currency"
          },
          "recurring_interval": {
            "$ref": "#/components/schemas/SubscriptionRecurringInterval"
          },
          "status": {
            "$ref": "#/components/schemas/SubscriptionStatus"
          },
          "current_period_start": {
            "type": "string",
            "format": "date-time",
            "title": "Current Period Start"
          },
          "current_period_end": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Current Period End"
          },
          "cancel_at_period_end": {
            "type": "boolean",
            "title": "Cancel At Period End"
          },
          "started_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Started At"
          },
          "ended_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ended At"
          },
          "customer_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Customer Id"
          },
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id"
          },
          "price_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Price Id"
          },
          "discount_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Id"
          },
          "checkout_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checkout Id"
          },
          "user_id": {
            "type": "string",
            "format": "uuid4",
            "title": "User Id",
            "deprecated": true
          },
          "product": {
            "$ref": "#/components/schemas/CustomerSubscriptionProduct"
          },
          "price": {
            "$ref": "#/components/schemas/ProductPrice"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "amount",
          "currency",
          "recurring_interval",
          "status",
          "current_period_start",
          "current_period_end",
          "cancel_at_period_end",
          "started_at",
          "ended_at",
          "customer_id",
          "product_id",
          "price_id",
          "discount_id",
          "checkout_id",
          "user_id",
          "product",
          "price"
        ],
        "title": "CustomerSubscription"
      },
      "CustomerSubscriptionProduct": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the product."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the product."
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the product."
          },
          "is_recurring": {
            "type": "boolean",
            "title": "Is Recurring",
            "description": "Whether the product is a subscription tier."
          },
          "is_archived": {
            "type": "boolean",
            "title": "Is Archived",
            "description": "Whether the product is archived and no longer available."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the product."
          },
          "prices": {
            "items": {
              "$ref": "#/components/schemas/ProductPrice"
            },
            "type": "array",
            "title": "Prices",
            "description": "List of prices for this product."
          },
          "benefits": {
            "items": {
              "$ref": "#/components/schemas/BenefitBase"
            },
            "type": "array",
            "title": "BenefitPublic",
            "description": "List of benefits granted by the product."
          },
          "medias": {
            "items": {
              "$ref": "#/components/schemas/ProductMediaFileRead"
            },
            "type": "array",
            "title": "Medias",
            "description": "List of medias associated to the product."
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "name",
          "description",
          "is_recurring",
          "is_archived",
          "organization_id",
          "prices",
          "benefits",
          "medias",
          "organization"
        ],
        "title": "CustomerSubscriptionProduct"
      },
      "CustomerSubscriptionSortProperty": {
        "type": "string",
        "enum": [
          "started_at",
          "-started_at",
          "amount",
          "-amount",
          "status",
          "-status",
          "organization",
          "-organization",
          "product",
          "-product"
        ],
        "title": "CustomerSubscriptionSortProperty"
      },
      "CustomerSubscriptionUpdate": {
        "properties": {
          "product_price_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Price Id"
          }
        },
        "type": "object",
        "required": [
          "product_price_id"
        ],
        "title": "CustomerSubscriptionUpdate"
      },
      "CustomerUpdate": {
        "properties": {
          "email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "billing_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address"
              },
              {
                "type": "null"
              }
            ]
          },
          "tax_id": {
            "anyOf": [
              {
                "prefixItems": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/components/schemas/TaxIDFormat"
                  }
                ],
                "type": "array",
                "maxItems": 2,
                "minItems": 2
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Id"
          }
        },
        "type": "object",
        "title": "CustomerUpdate"
      },
      "Discount": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/DiscountFixedOnceForeverDuration"
          },
          {
            "$ref": "#/components/schemas/DiscountFixedRepeatDuration"
          },
          {
            "$ref": "#/components/schemas/DiscountPercentageOnceForeverDuration"
          },
          {
            "$ref": "#/components/schemas/DiscountPercentageRepeatDuration"
          }
        ]
      },
      "DiscountCreate": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/DiscountFixedOnceForeverDurationCreate"
          },
          {
            "$ref": "#/components/schemas/DiscountFixedRepeatDurationCreate"
          },
          {
            "$ref": "#/components/schemas/DiscountPercentageOnceForeverDurationCreate"
          },
          {
            "$ref": "#/components/schemas/DiscountPercentageRepeatDurationCreate"
          }
        ]
      },
      "DiscountDuration": {
        "type": "string",
        "enum": [
          "once",
          "forever",
          "repeating"
        ],
        "title": "DiscountDuration"
      },
      "DiscountFixedOnceForeverDuration": {
        "properties": {
          "duration": {
            "$ref": "#/components/schemas/DiscountDuration"
          },
          "type": {
            "$ref": "#/components/schemas/DiscountType"
          },
          "amount": {
            "type": "integer",
            "title": "Amount"
          },
          "currency": {
            "type": "string",
            "title": "Currency"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the discount. Will be displayed to the customer when the discount is applied."
          },
          "code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Code",
            "description": "Code customers can use to apply the discount during checkout."
          },
          "starts_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Starts At",
            "description": "Timestamp after which the discount is redeemable."
          },
          "ends_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ends At",
            "description": "Timestamp after which the discount is no longer redeemable."
          },
          "max_redemptions": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Redemptions",
            "description": "Maximum number of times the discount can be redeemed."
          },
          "redemptions_count": {
            "type": "integer",
            "title": "Redemptions Count",
            "description": "Number of times the discount has been redeemed."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The organization ID.",
            "x-polar-selector-widget": {
              "displayProperty": "name",
              "resourceName": "Organization",
              "resourceRoot": "/v1/organizations"
            }
          },
          "products": {
            "items": {
              "$ref": "#/components/schemas/DiscountProduct"
            },
            "type": "array",
            "title": "Products"
          }
        },
        "type": "object",
        "required": [
          "duration",
          "type",
          "amount",
          "currency",
          "created_at",
          "modified_at",
          "id",
          "metadata",
          "name",
          "code",
          "starts_at",
          "ends_at",
          "max_redemptions",
          "redemptions_count",
          "organization_id",
          "products"
        ],
        "title": "DiscountFixedOnceForeverDuration",
        "description": "Schema for a fixed amount discount that is applied once or forever."
      },
      "DiscountFixedOnceForeverDurationBase": {
        "properties": {
          "duration": {
            "$ref": "#/components/schemas/DiscountDuration"
          },
          "type": {
            "$ref": "#/components/schemas/DiscountType"
          },
          "amount": {
            "type": "integer",
            "title": "Amount"
          },
          "currency": {
            "type": "string",
            "title": "Currency"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the discount. Will be displayed to the customer when the discount is applied."
          },
          "code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Code",
            "description": "Code customers can use to apply the discount during checkout."
          },
          "starts_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Starts At",
            "description": "Timestamp after which the discount is redeemable."
          },
          "ends_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ends At",
            "description": "Timestamp after which the discount is no longer redeemable."
          },
          "max_redemptions": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Redemptions",
            "description": "Maximum number of times the discount can be redeemed."
          },
          "redemptions_count": {
            "type": "integer",
            "title": "Redemptions Count",
            "description": "Number of times the discount has been redeemed."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The organization ID.",
            "x-polar-selector-widget": {
              "displayProperty": "name",
              "resourceName": "Organization",
              "resourceRoot": "/v1/organizations"
            }
          }
        },
        "type": "object",
        "required": [
          "duration",
          "type",
          "amount",
          "currency",
          "created_at",
          "modified_at",
          "id",
          "metadata",
          "name",
          "code",
          "starts_at",
          "ends_at",
          "max_redemptions",
          "redemptions_count",
          "organization_id"
        ],
        "title": "DiscountFixedOnceForeverDurationBase"
      },
      "DiscountFixedOnceForeverDurationCreate": {
        "properties": {
          "duration": {
            "$ref": "#/components/schemas/DiscountDuration"
          },
          "type": {
            "$ref": "#/components/schemas/DiscountType",
            "description": "Type of the discount."
          },
          "amount": {
            "type": "integer",
            "minimum": 0,
            "title": "Amount",
            "description": "Fixed amount to discount from the invoice total."
          },
          "currency": {
            "type": "string",
            "pattern": "usd",
            "title": "Currency",
            "description": "The currency. Currently, only `usd` is supported.",
            "default": "usd"
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "title": "Name",
            "description": "Name of the discount. Will be displayed to the customer when the discount is applied."
          },
          "code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Code",
            "description": "Code customers can use to apply the discount during checkout. Must be between 3 and 256 characters long and contain only alphanumeric characters.If not provided, the discount can only be applied via the API."
          },
          "starts_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Starts At",
            "description": "Optional timestamp after which the discount is redeemable."
          },
          "ends_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ends At",
            "description": "Optional timestamp after which the discount is no longer redeemable."
          },
          "max_redemptions": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Redemptions",
            "description": "Optional maximum number of times the discount can be redeemed."
          },
          "products": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "format": "uuid4"
                },
                "type": "array",
                "description": "List of product IDs the discount can be applied to."
              },
              {
                "type": "null"
              }
            ],
            "title": "Products"
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the discount. **Required unless you use an organization token.**"
          }
        },
        "type": "object",
        "required": [
          "duration",
          "type",
          "amount",
          "name"
        ],
        "title": "DiscountFixedOnceForeverDurationCreate",
        "description": "Schema to create a fixed amount discount that is applied once or forever."
      },
      "DiscountFixedRepeatDuration": {
        "properties": {
          "duration": {
            "$ref": "#/components/schemas/DiscountDuration"
          },
          "duration_in_months": {
            "type": "integer",
            "title": "Duration In Months"
          },
          "type": {
            "$ref": "#/components/schemas/DiscountType"
          },
          "amount": {
            "type": "integer",
            "title": "Amount"
          },
          "currency": {
            "type": "string",
            "title": "Currency"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the discount. Will be displayed to the customer when the discount is applied."
          },
          "code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Code",
            "description": "Code customers can use to apply the discount during checkout."
          },
          "starts_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Starts At",
            "description": "Timestamp after which the discount is redeemable."
          },
          "ends_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ends At",
            "description": "Timestamp after which the discount is no longer redeemable."
          },
          "max_redemptions": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Redemptions",
            "description": "Maximum number of times the discount can be redeemed."
          },
          "redemptions_count": {
            "type": "integer",
            "title": "Redemptions Count",
            "description": "Number of times the discount has been redeemed."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The organization ID.",
            "x-polar-selector-widget": {
              "displayProperty": "name",
              "resourceName": "Organization",
              "resourceRoot": "/v1/organizations"
            }
          },
          "products": {
            "items": {
              "$ref": "#/components/schemas/DiscountProduct"
            },
            "type": "array",
            "title": "Products"
          }
        },
        "type": "object",
        "required": [
          "duration",
          "duration_in_months",
          "type",
          "amount",
          "currency",
          "created_at",
          "modified_at",
          "id",
          "metadata",
          "name",
          "code",
          "starts_at",
          "ends_at",
          "max_redemptions",
          "redemptions_count",
          "organization_id",
          "products"
        ],
        "title": "DiscountFixedRepeatDuration",
        "description": "Schema for a fixed amount discount that is applied on every invoice\nfor a certain number of months."
      },
      "DiscountFixedRepeatDurationBase": {
        "properties": {
          "duration": {
            "$ref": "#/components/schemas/DiscountDuration"
          },
          "duration_in_months": {
            "type": "integer",
            "title": "Duration In Months"
          },
          "type": {
            "$ref": "#/components/schemas/DiscountType"
          },
          "amount": {
            "type": "integer",
            "title": "Amount"
          },
          "currency": {
            "type": "string",
            "title": "Currency"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the discount. Will be displayed to the customer when the discount is applied."
          },
          "code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Code",
            "description": "Code customers can use to apply the discount during checkout."
          },
          "starts_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Starts At",
            "description": "Timestamp after which the discount is redeemable."
          },
          "ends_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ends At",
            "description": "Timestamp after which the discount is no longer redeemable."
          },
          "max_redemptions": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Redemptions",
            "description": "Maximum number of times the discount can be redeemed."
          },
          "redemptions_count": {
            "type": "integer",
            "title": "Redemptions Count",
            "description": "Number of times the discount has been redeemed."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The organization ID.",
            "x-polar-selector-widget": {
              "displayProperty": "name",
              "resourceName": "Organization",
              "resourceRoot": "/v1/organizations"
            }
          }
        },
        "type": "object",
        "required": [
          "duration",
          "duration_in_months",
          "type",
          "amount",
          "currency",
          "created_at",
          "modified_at",
          "id",
          "metadata",
          "name",
          "code",
          "starts_at",
          "ends_at",
          "max_redemptions",
          "redemptions_count",
          "organization_id"
        ],
        "title": "DiscountFixedRepeatDurationBase"
      },
      "DiscountFixedRepeatDurationCreate": {
        "properties": {
          "duration": {
            "$ref": "#/components/schemas/DiscountDuration"
          },
          "duration_in_months": {
            "type": "integer",
            "minimum": 1,
            "title": "Duration In Months",
            "description": "Number of months the discount should be applied.\n\nFor this to work on yearly pricing, you should multiply this by 12.\nFor example, to apply the discount for 2 years, set this to 24."
          },
          "type": {
            "$ref": "#/components/schemas/DiscountType",
            "description": "Type of the discount."
          },
          "amount": {
            "type": "integer",
            "minimum": 0,
            "title": "Amount",
            "description": "Fixed amount to discount from the invoice total."
          },
          "currency": {
            "type": "string",
            "pattern": "usd",
            "title": "Currency",
            "description": "The currency. Currently, only `usd` is supported.",
            "default": "usd"
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "title": "Name",
            "description": "Name of the discount. Will be displayed to the customer when the discount is applied."
          },
          "code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Code",
            "description": "Code customers can use to apply the discount during checkout. Must be between 3 and 256 characters long and contain only alphanumeric characters.If not provided, the discount can only be applied via the API."
          },
          "starts_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Starts At",
            "description": "Optional timestamp after which the discount is redeemable."
          },
          "ends_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ends At",
            "description": "Optional timestamp after which the discount is no longer redeemable."
          },
          "max_redemptions": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Redemptions",
            "description": "Optional maximum number of times the discount can be redeemed."
          },
          "products": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "format": "uuid4"
                },
                "type": "array",
                "description": "List of product IDs the discount can be applied to."
              },
              {
                "type": "null"
              }
            ],
            "title": "Products"
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the discount. **Required unless you use an organization token.**"
          }
        },
        "type": "object",
        "required": [
          "duration",
          "duration_in_months",
          "type",
          "amount",
          "name"
        ],
        "title": "DiscountFixedRepeatDurationCreate",
        "description": "Schema to create a fixed amount discount that is applied on every invoice\nfor a certain number of months."
      },
      "DiscountPercentageOnceForeverDuration": {
        "properties": {
          "duration": {
            "$ref": "#/components/schemas/DiscountDuration"
          },
          "type": {
            "$ref": "#/components/schemas/DiscountType"
          },
          "basis_points": {
            "type": "integer",
            "title": "Basis Points"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the discount. Will be displayed to the customer when the discount is applied."
          },
          "code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Code",
            "description": "Code customers can use to apply the discount during checkout."
          },
          "starts_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Starts At",
            "description": "Timestamp after which the discount is redeemable."
          },
          "ends_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ends At",
            "description": "Timestamp after which the discount is no longer redeemable."
          },
          "max_redemptions": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Redemptions",
            "description": "Maximum number of times the discount can be redeemed."
          },
          "redemptions_count": {
            "type": "integer",
            "title": "Redemptions Count",
            "description": "Number of times the discount has been redeemed."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The organization ID.",
            "x-polar-selector-widget": {
              "displayProperty": "name",
              "resourceName": "Organization",
              "resourceRoot": "/v1/organizations"
            }
          },
          "products": {
            "items": {
              "$ref": "#/components/schemas/DiscountProduct"
            },
            "type": "array",
            "title": "Products"
          }
        },
        "type": "object",
        "required": [
          "duration",
          "type",
          "basis_points",
          "created_at",
          "modified_at",
          "id",
          "metadata",
          "name",
          "code",
          "starts_at",
          "ends_at",
          "max_redemptions",
          "redemptions_count",
          "organization_id",
          "products"
        ],
        "title": "DiscountPercentageOnceForeverDuration",
        "description": "Schema for a percentage discount that is applied once or forever."
      },
      "DiscountPercentageOnceForeverDurationBase": {
        "properties": {
          "duration": {
            "$ref": "#/components/schemas/DiscountDuration"
          },
          "type": {
            "$ref": "#/components/schemas/DiscountType"
          },
          "basis_points": {
            "type": "integer",
            "title": "Basis Points"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the discount. Will be displayed to the customer when the discount is applied."
          },
          "code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Code",
            "description": "Code customers can use to apply the discount during checkout."
          },
          "starts_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Starts At",
            "description": "Timestamp after which the discount is redeemable."
          },
          "ends_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ends At",
            "description": "Timestamp after which the discount is no longer redeemable."
          },
          "max_redemptions": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Redemptions",
            "description": "Maximum number of times the discount can be redeemed."
          },
          "redemptions_count": {
            "type": "integer",
            "title": "Redemptions Count",
            "description": "Number of times the discount has been redeemed."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The organization ID.",
            "x-polar-selector-widget": {
              "displayProperty": "name",
              "resourceName": "Organization",
              "resourceRoot": "/v1/organizations"
            }
          }
        },
        "type": "object",
        "required": [
          "duration",
          "type",
          "basis_points",
          "created_at",
          "modified_at",
          "id",
          "metadata",
          "name",
          "code",
          "starts_at",
          "ends_at",
          "max_redemptions",
          "redemptions_count",
          "organization_id"
        ],
        "title": "DiscountPercentageOnceForeverDurationBase"
      },
      "DiscountPercentageOnceForeverDurationCreate": {
        "properties": {
          "duration": {
            "$ref": "#/components/schemas/DiscountDuration"
          },
          "type": {
            "$ref": "#/components/schemas/DiscountType",
            "description": "Type of the discount."
          },
          "basis_points": {
            "type": "integer",
            "maximum": 10000,
            "minimum": 1,
            "title": "Basis Points",
            "description": "Discount percentage in basis points.\n\nA basis point is 1/100th of a percent.\nFor example, to create a 25.5% discount, set this to 2550."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "title": "Name",
            "description": "Name of the discount. Will be displayed to the customer when the discount is applied."
          },
          "code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Code",
            "description": "Code customers can use to apply the discount during checkout. Must be between 3 and 256 characters long and contain only alphanumeric characters.If not provided, the discount can only be applied via the API."
          },
          "starts_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Starts At",
            "description": "Optional timestamp after which the discount is redeemable."
          },
          "ends_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ends At",
            "description": "Optional timestamp after which the discount is no longer redeemable."
          },
          "max_redemptions": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Redemptions",
            "description": "Optional maximum number of times the discount can be redeemed."
          },
          "products": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "format": "uuid4"
                },
                "type": "array",
                "description": "List of product IDs the discount can be applied to."
              },
              {
                "type": "null"
              }
            ],
            "title": "Products"
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the discount. **Required unless you use an organization token.**"
          }
        },
        "type": "object",
        "required": [
          "duration",
          "type",
          "basis_points",
          "name"
        ],
        "title": "DiscountPercentageOnceForeverDurationCreate",
        "description": "Schema to create a percentage discount that is applied once or forever."
      },
      "DiscountPercentageRepeatDuration": {
        "properties": {
          "duration": {
            "$ref": "#/components/schemas/DiscountDuration"
          },
          "duration_in_months": {
            "type": "integer",
            "title": "Duration In Months"
          },
          "type": {
            "$ref": "#/components/schemas/DiscountType"
          },
          "basis_points": {
            "type": "integer",
            "title": "Basis Points"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the discount. Will be displayed to the customer when the discount is applied."
          },
          "code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Code",
            "description": "Code customers can use to apply the discount during checkout."
          },
          "starts_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Starts At",
            "description": "Timestamp after which the discount is redeemable."
          },
          "ends_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ends At",
            "description": "Timestamp after which the discount is no longer redeemable."
          },
          "max_redemptions": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Redemptions",
            "description": "Maximum number of times the discount can be redeemed."
          },
          "redemptions_count": {
            "type": "integer",
            "title": "Redemptions Count",
            "description": "Number of times the discount has been redeemed."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The organization ID.",
            "x-polar-selector-widget": {
              "displayProperty": "name",
              "resourceName": "Organization",
              "resourceRoot": "/v1/organizations"
            }
          },
          "products": {
            "items": {
              "$ref": "#/components/schemas/DiscountProduct"
            },
            "type": "array",
            "title": "Products"
          }
        },
        "type": "object",
        "required": [
          "duration",
          "duration_in_months",
          "type",
          "basis_points",
          "created_at",
          "modified_at",
          "id",
          "metadata",
          "name",
          "code",
          "starts_at",
          "ends_at",
          "max_redemptions",
          "redemptions_count",
          "organization_id",
          "products"
        ],
        "title": "DiscountPercentageRepeatDuration",
        "description": "Schema for a percentage discount that is applied on every invoice\nfor a certain number of months."
      },
      "DiscountPercentageRepeatDurationBase": {
        "properties": {
          "duration": {
            "$ref": "#/components/schemas/DiscountDuration"
          },
          "duration_in_months": {
            "type": "integer",
            "title": "Duration In Months"
          },
          "type": {
            "$ref": "#/components/schemas/DiscountType"
          },
          "basis_points": {
            "type": "integer",
            "title": "Basis Points"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the discount. Will be displayed to the customer when the discount is applied."
          },
          "code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Code",
            "description": "Code customers can use to apply the discount during checkout."
          },
          "starts_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Starts At",
            "description": "Timestamp after which the discount is redeemable."
          },
          "ends_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ends At",
            "description": "Timestamp after which the discount is no longer redeemable."
          },
          "max_redemptions": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Redemptions",
            "description": "Maximum number of times the discount can be redeemed."
          },
          "redemptions_count": {
            "type": "integer",
            "title": "Redemptions Count",
            "description": "Number of times the discount has been redeemed."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The organization ID.",
            "x-polar-selector-widget": {
              "displayProperty": "name",
              "resourceName": "Organization",
              "resourceRoot": "/v1/organizations"
            }
          }
        },
        "type": "object",
        "required": [
          "duration",
          "duration_in_months",
          "type",
          "basis_points",
          "created_at",
          "modified_at",
          "id",
          "metadata",
          "name",
          "code",
          "starts_at",
          "ends_at",
          "max_redemptions",
          "redemptions_count",
          "organization_id"
        ],
        "title": "DiscountPercentageRepeatDurationBase"
      },
      "DiscountPercentageRepeatDurationCreate": {
        "properties": {
          "duration": {
            "$ref": "#/components/schemas/DiscountDuration"
          },
          "duration_in_months": {
            "type": "integer",
            "minimum": 1,
            "title": "Duration In Months",
            "description": "Number of months the discount should be applied.\n\nFor this to work on yearly pricing, you should multiply this by 12.\nFor example, to apply the discount for 2 years, set this to 24."
          },
          "type": {
            "$ref": "#/components/schemas/DiscountType",
            "description": "Type of the discount."
          },
          "basis_points": {
            "type": "integer",
            "maximum": 10000,
            "minimum": 1,
            "title": "Basis Points",
            "description": "Discount percentage in basis points.\n\nA basis point is 1/100th of a percent.\nFor example, to create a 25.5% discount, set this to 2550."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "title": "Name",
            "description": "Name of the discount. Will be displayed to the customer when the discount is applied."
          },
          "code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Code",
            "description": "Code customers can use to apply the discount during checkout. Must be between 3 and 256 characters long and contain only alphanumeric characters.If not provided, the discount can only be applied via the API."
          },
          "starts_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Starts At",
            "description": "Optional timestamp after which the discount is redeemable."
          },
          "ends_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ends At",
            "description": "Optional timestamp after which the discount is no longer redeemable."
          },
          "max_redemptions": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Redemptions",
            "description": "Optional maximum number of times the discount can be redeemed."
          },
          "products": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "format": "uuid4"
                },
                "type": "array",
                "description": "List of product IDs the discount can be applied to."
              },
              {
                "type": "null"
              }
            ],
            "title": "Products"
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the discount. **Required unless you use an organization token.**"
          }
        },
        "type": "object",
        "required": [
          "duration",
          "duration_in_months",
          "type",
          "basis_points",
          "name"
        ],
        "title": "DiscountPercentageRepeatDurationCreate",
        "description": "Schema to create a percentage discount that is applied on every invoice\nfor a certain number of months."
      },
      "DiscountProduct": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the product."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the product."
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the product."
          },
          "is_recurring": {
            "type": "boolean",
            "title": "Is Recurring",
            "description": "Whether the product is a subscription tier."
          },
          "is_archived": {
            "type": "boolean",
            "title": "Is Archived",
            "description": "Whether the product is archived and no longer available."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the product."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "name",
          "description",
          "is_recurring",
          "is_archived",
          "organization_id"
        ],
        "title": "DiscountProduct",
        "description": "A product that a discount can be applied to."
      },
      "DiscountSortProperty": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "name",
          "-name",
          "code",
          "-code",
          "redemptions_count",
          "-redemptions_count"
        ],
        "title": "DiscountSortProperty"
      },
      "DiscountType": {
        "type": "string",
        "enum": [
          "fixed",
          "percentage"
        ],
        "title": "DiscountType"
      },
      "DiscountUpdate": {
        "properties": {
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {
                      "type": "string",
                      "maxLength": 500,
                      "minLength": 1
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "boolean"
                    }
                  ]
                },
                "propertyNames": {
                  "maxLength": 40,
                  "minLength": 1
                },
                "type": "object",
                "maxProperties": 50,
                "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A boolean\n\nYou can store up to **50 key-value pairs**."
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          },
          "name": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 1,
                "description": "Name of the discount. Will be displayed to the customer when the discount is applied."
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "code": {
            "anyOf": [
              {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Code customers can use to apply the discount during checkout. Must be between 3 and 256 characters long and contain only alphanumeric characters.If not provided, the discount can only be applied via the API."
              },
              {
                "type": "null"
              }
            ],
            "title": "Code"
          },
          "starts_at": {
            "anyOf": [
              {
                "anyOf": [
                  {
                    "type": "string",
                    "format": "date-time"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Optional timestamp after which the discount is redeemable."
              },
              {
                "type": "null"
              }
            ],
            "title": "Starts At"
          },
          "ends_at": {
            "anyOf": [
              {
                "anyOf": [
                  {
                    "type": "string",
                    "format": "date-time"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Optional timestamp after which the discount is no longer redeemable."
              },
              {
                "type": "null"
              }
            ],
            "title": "Ends At"
          },
          "max_redemptions": {
            "anyOf": [
              {
                "anyOf": [
                  {
                    "type": "integer",
                    "minimum": 1
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Optional maximum number of times the discount can be redeemed."
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Redemptions"
          },
          "duration": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DiscountDuration"
              },
              {
                "type": "null"
              }
            ]
          },
          "duration_in_months": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1,
                "description": "Number of months the discount should be applied.\n\nFor this to work on yearly pricing, you should multiply this by 12.\nFor example, to apply the discount for 2 years, set this to 24."
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration In Months"
          },
          "type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DiscountType"
              },
              {
                "type": "null"
              }
            ]
          },
          "amount": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0,
                "description": "Fixed amount to discount from the invoice total."
              },
              {
                "type": "null"
              }
            ],
            "title": "Amount"
          },
          "currency": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "usd",
                "description": "The currency. Currently, only `usd` is supported.",
                "default": "usd"
              },
              {
                "type": "null"
              }
            ],
            "title": "Currency"
          },
          "basis_points": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 10000,
                "minimum": 1,
                "description": "Discount percentage in basis points.\n\nA basis point is 1/100th of a percent.\nFor example, to create a 25.5% discount, set this to 2550."
              },
              {
                "type": "null"
              }
            ],
            "title": "Basis Points"
          },
          "products": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "format": "uuid4"
                },
                "type": "array",
                "description": "List of product IDs the discount can be applied to."
              },
              {
                "type": "null"
              }
            ],
            "title": "Products"
          }
        },
        "type": "object",
        "title": "DiscountUpdate",
        "description": "Schema to update a discount."
      },
      "DownloadableFileCreate": {
        "properties": {
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "mime_type": {
            "type": "string",
            "title": "Mime Type"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "checksum_sha256_base64": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Base64"
          },
          "upload": {
            "$ref": "#/components/schemas/S3FileCreateMultipart"
          },
          "service": {
            "type": "string",
            "const": "downloadable",
            "title": "Service"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version"
          }
        },
        "type": "object",
        "required": [
          "name",
          "mime_type",
          "size",
          "upload",
          "service"
        ],
        "title": "DownloadableFileCreate",
        "description": "Schema to create a file to be associated with the downloadables benefit."
      },
      "DownloadableFileRead": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "path": {
            "type": "string",
            "title": "Path"
          },
          "mime_type": {
            "type": "string",
            "title": "Mime Type"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "storage_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Storage Version"
          },
          "checksum_etag": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Etag"
          },
          "checksum_sha256_base64": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Base64"
          },
          "checksum_sha256_hex": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Hex"
          },
          "last_modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Modified At"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version"
          },
          "service": {
            "type": "string",
            "const": "downloadable",
            "title": "Service"
          },
          "is_uploaded": {
            "type": "boolean",
            "title": "Is Uploaded"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "size_readable": {
            "type": "string",
            "title": "Size Readable",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "id",
          "organization_id",
          "name",
          "path",
          "mime_type",
          "size",
          "storage_version",
          "checksum_etag",
          "checksum_sha256_base64",
          "checksum_sha256_hex",
          "last_modified_at",
          "version",
          "service",
          "is_uploaded",
          "created_at",
          "size_readable"
        ],
        "title": "DownloadableFileRead",
        "description": "File to be associated with the downloadables benefit."
      },
      "DownloadableRead": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "benefit_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Benefit Id"
          },
          "file": {
            "$ref": "#/components/schemas/FileDownload"
          }
        },
        "type": "object",
        "required": [
          "id",
          "benefit_id",
          "file"
        ],
        "title": "DownloadableRead"
      },
      "ExistingProductPrice": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          }
        },
        "type": "object",
        "required": [
          "id"
        ],
        "title": "ExistingProductPrice",
        "description": "A price that already exists for this product.\n\nUseful when updating a product if you want to keep an existing price."
      },
      "ExternalOrganization": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "platform": {
            "$ref": "#/components/schemas/Platforms"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "avatar_url": {
            "type": "string",
            "title": "Avatar Url"
          },
          "is_personal": {
            "type": "boolean",
            "title": "Is Personal"
          },
          "bio": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Bio"
          },
          "pretty_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Pretty Name"
          },
          "company": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Company"
          },
          "blog": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Blog"
          },
          "location": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Location"
          },
          "email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email"
          },
          "twitter_username": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Twitter Username"
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id"
          }
        },
        "type": "object",
        "required": [
          "id",
          "platform",
          "name",
          "avatar_url",
          "is_personal",
          "bio",
          "pretty_name",
          "company",
          "blog",
          "location",
          "email",
          "twitter_username",
          "organization_id"
        ],
        "title": "ExternalOrganization"
      },
      "ExternalOrganizationSortProperty": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "name",
          "-name"
        ],
        "title": "ExternalOrganizationSortProperty"
      },
      "FileCreate": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/DownloadableFileCreate"
          },
          {
            "$ref": "#/components/schemas/ProductMediaFileCreate"
          },
          {
            "$ref": "#/components/schemas/OrganizationAvatarFileCreate"
          }
        ],
        "discriminator": {
          "propertyName": "service",
          "mapping": {
            "downloadable": "#/components/schemas/DownloadableFileCreate",
            "organization_avatar": "#/components/schemas/OrganizationAvatarFileCreate",
            "product_media": "#/components/schemas/ProductMediaFileCreate"
          }
        }
      },
      "FileDownload": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "path": {
            "type": "string",
            "title": "Path"
          },
          "mime_type": {
            "type": "string",
            "title": "Mime Type"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "storage_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Storage Version"
          },
          "checksum_etag": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Etag"
          },
          "checksum_sha256_base64": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Base64"
          },
          "checksum_sha256_hex": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Hex"
          },
          "last_modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Modified At"
          },
          "download": {
            "$ref": "#/components/schemas/S3DownloadURL"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version"
          },
          "is_uploaded": {
            "type": "boolean",
            "title": "Is Uploaded"
          },
          "service": {
            "$ref": "#/components/schemas/FileServiceTypes"
          },
          "size_readable": {
            "type": "string",
            "title": "Size Readable",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "id",
          "organization_id",
          "name",
          "path",
          "mime_type",
          "size",
          "storage_version",
          "checksum_etag",
          "checksum_sha256_base64",
          "checksum_sha256_hex",
          "last_modified_at",
          "download",
          "version",
          "is_uploaded",
          "service",
          "size_readable"
        ],
        "title": "FileDownload"
      },
      "FilePatch": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version"
          }
        },
        "type": "object",
        "title": "FilePatch"
      },
      "FileServiceTypes": {
        "type": "string",
        "enum": [
          "downloadable",
          "product_media",
          "organization_avatar"
        ],
        "title": "FileServiceTypes"
      },
      "FileUpload": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "path": {
            "type": "string",
            "title": "Path"
          },
          "mime_type": {
            "type": "string",
            "title": "Mime Type"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "storage_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Storage Version"
          },
          "checksum_etag": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Etag"
          },
          "checksum_sha256_base64": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Base64"
          },
          "checksum_sha256_hex": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Hex"
          },
          "last_modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Modified At"
          },
          "upload": {
            "$ref": "#/components/schemas/S3FileUploadMultipart"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version"
          },
          "is_uploaded": {
            "type": "boolean",
            "title": "Is Uploaded",
            "default": false
          },
          "service": {
            "$ref": "#/components/schemas/FileServiceTypes"
          },
          "size_readable": {
            "type": "string",
            "title": "Size Readable",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "id",
          "organization_id",
          "name",
          "path",
          "mime_type",
          "size",
          "storage_version",
          "checksum_etag",
          "checksum_sha256_base64",
          "checksum_sha256_hex",
          "last_modified_at",
          "upload",
          "version",
          "service",
          "size_readable"
        ],
        "title": "FileUpload"
      },
      "FileUploadCompleted": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "path": {
            "type": "string",
            "title": "Path"
          },
          "parts": {
            "items": {
              "$ref": "#/components/schemas/S3FileUploadCompletedPart"
            },
            "type": "array",
            "title": "Parts"
          }
        },
        "type": "object",
        "required": [
          "id",
          "path",
          "parts"
        ],
        "title": "FileUploadCompleted"
      },
      "Funding": {
        "properties": {
          "funding_goal": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              },
              {
                "type": "null"
              }
            ]
          },
          "pledges_sum": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              },
              {
                "type": "null"
              }
            ],
            "description": "Sum of pledges to this isuse (including currently open pledges and pledges that have been paid out). Always in USD."
          }
        },
        "type": "object",
        "title": "Funding"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "Interval": {
        "type": "string",
        "enum": [
          "year",
          "month",
          "week",
          "day",
          "hour"
        ],
        "title": "Interval"
      },
      "IntrospectTokenResponse": {
        "properties": {
          "active": {
            "type": "boolean",
            "title": "Active"
          },
          "client_id": {
            "type": "string",
            "title": "Client Id"
          },
          "token_type": {
            "type": "string",
            "enum": [
              "access_token",
              "refresh_token"
            ],
            "title": "Token Type"
          },
          "scope": {
            "type": "string",
            "title": "Scope"
          },
          "sub_type": {
            "$ref": "#/components/schemas/SubType"
          },
          "sub": {
            "type": "string",
            "title": "Sub"
          },
          "aud": {
            "type": "string",
            "title": "Aud"
          },
          "iss": {
            "type": "string",
            "title": "Iss"
          },
          "exp": {
            "type": "integer",
            "title": "Exp"
          },
          "iat": {
            "type": "integer",
            "title": "Iat"
          }
        },
        "type": "object",
        "required": [
          "active",
          "client_id",
          "token_type",
          "scope",
          "sub_type",
          "sub",
          "aud",
          "iss",
          "exp",
          "iat"
        ],
        "title": "IntrospectTokenResponse"
      },
      "Issue": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "platform": {
            "$ref": "#/components/schemas/Platforms",
            "description": "Issue platform (currently always GitHub)"
          },
          "number": {
            "type": "integer",
            "title": "Number",
            "description": "GitHub #number"
          },
          "title": {
            "type": "string",
            "title": "Title",
            "description": "GitHub issue title"
          },
          "body": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Body",
            "description": "GitHub issue body"
          },
          "comments": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Comments",
            "description": "Number of GitHub comments made on the issue"
          },
          "labels": {
            "items": {
              "$ref": "#/components/schemas/Label"
            },
            "type": "array",
            "title": "Labels",
            "default": []
          },
          "author": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Author"
              },
              {
                "type": "null"
              }
            ],
            "description": "GitHub author"
          },
          "assignees": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/Assignee"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Assignees",
            "description": "GitHub assignees"
          },
          "reactions": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Reactions"
              },
              {
                "type": "null"
              }
            ],
            "description": "GitHub reactions"
          },
          "state": {
            "$ref": "#/components/schemas/State"
          },
          "issue_closed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Issue Closed At"
          },
          "issue_modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Issue Modified At"
          },
          "issue_created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Issue Created At"
          },
          "needs_confirmation_solved": {
            "type": "boolean",
            "title": "Needs Confirmation Solved",
            "description": "If a maintainer needs to mark this issue as solved"
          },
          "confirmed_solved_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Confirmed Solved At",
            "description": "If this issue has been marked as confirmed solved through Polar"
          },
          "funding": {
            "$ref": "#/components/schemas/Funding"
          },
          "repository": {
            "$ref": "#/components/schemas/Repository",
            "description": "The repository that the issue is in"
          },
          "upfront_split_to_contributors": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Upfront Split To Contributors",
            "description": "Share of rewrads that will be rewarded to contributors of this issue. A number between 0 and 100 (inclusive)."
          },
          "pledge_badge_currently_embedded": {
            "type": "boolean",
            "title": "Pledge Badge Currently Embedded",
            "description": "If this issue currently has the Polar badge SVG embedded"
          },
          "badge_custom_content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Badge Custom Content",
            "description": "Optional custom badge SVG promotional content"
          }
        },
        "type": "object",
        "required": [
          "id",
          "platform",
          "number",
          "title",
          "state",
          "issue_created_at",
          "needs_confirmation_solved",
          "funding",
          "repository",
          "pledge_badge_currently_embedded"
        ],
        "title": "Issue"
      },
      "Label": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "color": {
            "type": "string",
            "title": "Color"
          }
        },
        "type": "object",
        "required": [
          "name",
          "color"
        ],
        "title": "Label"
      },
      "LicenseKeyActivate": {
        "properties": {
          "key": {
            "type": "string",
            "title": "Key"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id"
          },
          "label": {
            "type": "string",
            "title": "Label"
          },
          "conditions": {
            "type": "object",
            "title": "Conditions",
            "default": {}
          },
          "meta": {
            "type": "object",
            "title": "Meta",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "key",
          "organization_id",
          "label"
        ],
        "title": "LicenseKeyActivate"
      },
      "LicenseKeyActivationBase": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "license_key_id": {
            "type": "string",
            "format": "uuid4",
            "title": "License Key Id"
          },
          "label": {
            "type": "string",
            "title": "Label"
          },
          "meta": {
            "type": "object",
            "title": "Meta"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "license_key_id",
          "label",
          "meta",
          "created_at",
          "modified_at"
        ],
        "title": "LicenseKeyActivationBase"
      },
      "LicenseKeyActivationRead": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "license_key_id": {
            "type": "string",
            "format": "uuid4",
            "title": "License Key Id"
          },
          "label": {
            "type": "string",
            "title": "Label"
          },
          "meta": {
            "type": "object",
            "title": "Meta"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At"
          },
          "license_key": {
            "$ref": "#/components/schemas/LicenseKeyRead"
          }
        },
        "type": "object",
        "required": [
          "id",
          "license_key_id",
          "label",
          "meta",
          "created_at",
          "modified_at",
          "license_key"
        ],
        "title": "LicenseKeyActivationRead"
      },
      "LicenseKeyCustomer": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "email_verified": {
            "type": "boolean",
            "title": "Email Verified"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "billing_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address"
              },
              {
                "type": "null"
              }
            ]
          },
          "tax_id": {
            "anyOf": [
              {
                "prefixItems": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/components/schemas/TaxIDFormat"
                  }
                ],
                "type": "array",
                "maxItems": 2,
                "minItems": 2
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Id"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id"
          },
          "avatar_url": {
            "type": "string",
            "title": "Avatar Url",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "metadata",
          "email",
          "email_verified",
          "name",
          "billing_address",
          "tax_id",
          "organization_id",
          "avatar_url"
        ],
        "title": "LicenseKeyCustomer"
      },
      "LicenseKeyDeactivate": {
        "properties": {
          "key": {
            "type": "string",
            "title": "Key"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id"
          },
          "activation_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Activation Id"
          }
        },
        "type": "object",
        "required": [
          "key",
          "organization_id",
          "activation_id"
        ],
        "title": "LicenseKeyDeactivate"
      },
      "LicenseKeyRead": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id"
          },
          "user_id": {
            "type": "string",
            "format": "uuid4",
            "title": "User Id",
            "deprecated": true
          },
          "customer_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Customer Id"
          },
          "user": {
            "$ref": "#/components/schemas/LicenseKeyUser",
            "deprecated": true
          },
          "customer": {
            "$ref": "#/components/schemas/LicenseKeyCustomer"
          },
          "benefit_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Benefit Id",
            "description": "The benefit ID.",
            "x-polar-selector-widget": {
              "displayProperty": "description",
              "resourceName": "Benefit",
              "resourceRoot": "/v1/benefits"
            }
          },
          "key": {
            "type": "string",
            "title": "Key"
          },
          "display_key": {
            "type": "string",
            "title": "Display Key"
          },
          "status": {
            "$ref": "#/components/schemas/LicenseKeyStatus"
          },
          "limit_activations": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit Activations"
          },
          "usage": {
            "type": "integer",
            "title": "Usage"
          },
          "limit_usage": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit Usage"
          },
          "validations": {
            "type": "integer",
            "title": "Validations"
          },
          "last_validated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Validated At"
          },
          "expires_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expires At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "organization_id",
          "user_id",
          "customer_id",
          "user",
          "customer",
          "benefit_id",
          "key",
          "display_key",
          "status",
          "limit_activations",
          "usage",
          "limit_usage",
          "validations",
          "last_validated_at",
          "expires_at"
        ],
        "title": "LicenseKeyRead"
      },
      "LicenseKeyStatus": {
        "type": "string",
        "enum": [
          "granted",
          "revoked",
          "disabled"
        ],
        "title": "LicenseKeyStatus"
      },
      "LicenseKeyUpdate": {
        "properties": {
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LicenseKeyStatus"
              },
              {
                "type": "null"
              }
            ]
          },
          "usage": {
            "type": "integer",
            "title": "Usage",
            "default": 0
          },
          "limit_activations": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 50,
                "exclusiveMinimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit Activations"
          },
          "limit_usage": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMinimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit Usage"
          },
          "expires_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expires At"
          }
        },
        "type": "object",
        "title": "LicenseKeyUpdate"
      },
      "LicenseKeyUser": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "public_name": {
            "type": "string",
            "title": "Public Name"
          },
          "avatar_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avatar Url"
          }
        },
        "type": "object",
        "required": [
          "id",
          "email",
          "public_name"
        ],
        "title": "LicenseKeyUser"
      },
      "LicenseKeyValidate": {
        "properties": {
          "key": {
            "type": "string",
            "title": "Key"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id"
          },
          "activation_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Activation Id"
          },
          "benefit_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The benefit ID.",
                "x-polar-selector-widget": {
                  "displayProperty": "description",
                  "resourceName": "Benefit",
                  "resourceRoot": "/v1/benefits"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Benefit Id"
          },
          "customer_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Id"
          },
          "increment_usage": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Increment Usage"
          },
          "conditions": {
            "type": "object",
            "title": "Conditions",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "key",
          "organization_id"
        ],
        "title": "LicenseKeyValidate"
      },
      "LicenseKeyWithActivations": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id"
          },
          "user_id": {
            "type": "string",
            "format": "uuid4",
            "title": "User Id",
            "deprecated": true
          },
          "customer_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Customer Id"
          },
          "user": {
            "$ref": "#/components/schemas/LicenseKeyUser",
            "deprecated": true
          },
          "customer": {
            "$ref": "#/components/schemas/LicenseKeyCustomer"
          },
          "benefit_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Benefit Id",
            "description": "The benefit ID.",
            "x-polar-selector-widget": {
              "displayProperty": "description",
              "resourceName": "Benefit",
              "resourceRoot": "/v1/benefits"
            }
          },
          "key": {
            "type": "string",
            "title": "Key"
          },
          "display_key": {
            "type": "string",
            "title": "Display Key"
          },
          "status": {
            "$ref": "#/components/schemas/LicenseKeyStatus"
          },
          "limit_activations": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit Activations"
          },
          "usage": {
            "type": "integer",
            "title": "Usage"
          },
          "limit_usage": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit Usage"
          },
          "validations": {
            "type": "integer",
            "title": "Validations"
          },
          "last_validated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Validated At"
          },
          "expires_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expires At"
          },
          "activations": {
            "items": {
              "$ref": "#/components/schemas/LicenseKeyActivationBase"
            },
            "type": "array",
            "title": "Activations"
          }
        },
        "type": "object",
        "required": [
          "id",
          "organization_id",
          "user_id",
          "customer_id",
          "user",
          "customer",
          "benefit_id",
          "key",
          "display_key",
          "status",
          "limit_activations",
          "usage",
          "limit_usage",
          "validations",
          "last_validated_at",
          "expires_at",
          "activations"
        ],
        "title": "LicenseKeyWithActivations"
      },
      "ListResource_BenefitGrant_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/BenefitGrant"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[BenefitGrant]"
      },
      "ListResource_Benefit_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Benefit",
              "title": "Benefit"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[Benefit]"
      },
      "ListResource_CheckoutLink_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/CheckoutLink"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[CheckoutLink]"
      },
      "ListResource_Checkout_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Checkout"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[Checkout]"
      },
      "ListResource_CustomField_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/CustomField",
              "title": "CustomField"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[CustomField]"
      },
      "ListResource_CustomerBenefitGrant_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/CustomerBenefitGrant",
              "title": "CustomerBenefitGrant"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[CustomerBenefitGrant]"
      },
      "ListResource_CustomerOrder_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/CustomerOrder"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[CustomerOrder]"
      },
      "ListResource_CustomerSubscription_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/CustomerSubscription"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[CustomerSubscription]"
      },
      "ListResource_Customer_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Customer"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[Customer]"
      },
      "ListResource_Discount_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Discount",
              "title": "Discount"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[Discount]"
      },
      "ListResource_DownloadableRead_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/DownloadableRead"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[DownloadableRead]"
      },
      "ListResource_ExternalOrganization_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ExternalOrganization"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[ExternalOrganization]"
      },
      "ListResource_FileRead_": {
        "properties": {
          "items": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/DownloadableFileRead"
                },
                {
                  "$ref": "#/components/schemas/ProductMediaFileRead"
                },
                {
                  "$ref": "#/components/schemas/OrganizationAvatarFileRead"
                }
              ],
              "title": "FileRead",
              "discriminator": {
                "propertyName": "service",
                "mapping": {
                  "downloadable": "#/components/schemas/DownloadableFileRead",
                  "organization_avatar": "#/components/schemas/OrganizationAvatarFileRead",
                  "product_media": "#/components/schemas/ProductMediaFileRead"
                }
              }
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[FileRead]"
      },
      "ListResource_LicenseKeyRead_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/LicenseKeyRead"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[LicenseKeyRead]"
      },
      "ListResource_OAuth2Client_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/OAuth2Client"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[OAuth2Client]"
      },
      "ListResource_Order_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Order"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[Order]"
      },
      "ListResource_Organization_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Organization"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[Organization]"
      },
      "ListResource_Product_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Product"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[Product]"
      },
      "ListResource_Repository_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Repository"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[Repository]"
      },
      "ListResource_Subscription_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Subscription"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[Subscription]"
      },
      "Metric": {
        "properties": {
          "slug": {
            "type": "string",
            "title": "Slug",
            "description": "Unique identifier for the metric."
          },
          "display_name": {
            "type": "string",
            "title": "Display Name",
            "description": "Human-readable name for the metric."
          },
          "type": {
            "$ref": "#/components/schemas/MetricType",
            "description": "Type of the metric, useful to know the unit or format of the value."
          }
        },
        "type": "object",
        "required": [
          "slug",
          "display_name",
          "type"
        ],
        "title": "Metric",
        "description": "Information about a metric."
      },
      "MetricPeriod": {
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp",
            "description": "Timestamp of this period data."
          },
          "orders": {
            "type": "integer",
            "title": "Orders"
          },
          "revenue": {
            "type": "integer",
            "title": "Revenue"
          },
          "average_order_value": {
            "type": "integer",
            "title": "Average Order Value"
          },
          "one_time_products": {
            "type": "integer",
            "title": "One Time Products"
          },
          "one_time_products_revenue": {
            "type": "integer",
            "title": "One Time Products Revenue"
          },
          "new_subscriptions": {
            "type": "integer",
            "title": "New Subscriptions"
          },
          "new_subscriptions_revenue": {
            "type": "integer",
            "title": "New Subscriptions Revenue"
          },
          "renewed_subscriptions": {
            "type": "integer",
            "title": "Renewed Subscriptions"
          },
          "renewed_subscriptions_revenue": {
            "type": "integer",
            "title": "Renewed Subscriptions Revenue"
          },
          "active_subscriptions": {
            "type": "integer",
            "title": "Active Subscriptions"
          },
          "monthly_recurring_revenue": {
            "type": "integer",
            "title": "Monthly Recurring Revenue"
          }
        },
        "type": "object",
        "required": [
          "timestamp",
          "orders",
          "revenue",
          "average_order_value",
          "one_time_products",
          "one_time_products_revenue",
          "new_subscriptions",
          "new_subscriptions_revenue",
          "renewed_subscriptions",
          "renewed_subscriptions_revenue",
          "active_subscriptions",
          "monthly_recurring_revenue"
        ],
        "title": "MetricPeriod"
      },
      "MetricType": {
        "type": "string",
        "enum": [
          "scalar",
          "currency"
        ],
        "title": "MetricType"
      },
      "Metrics": {
        "properties": {
          "orders": {
            "$ref": "#/components/schemas/Metric"
          },
          "revenue": {
            "$ref": "#/components/schemas/Metric"
          },
          "average_order_value": {
            "$ref": "#/components/schemas/Metric"
          },
          "one_time_products": {
            "$ref": "#/components/schemas/Metric"
          },
          "one_time_products_revenue": {
            "$ref": "#/components/schemas/Metric"
          },
          "new_subscriptions": {
            "$ref": "#/components/schemas/Metric"
          },
          "new_subscriptions_revenue": {
            "$ref": "#/components/schemas/Metric"
          },
          "renewed_subscriptions": {
            "$ref": "#/components/schemas/Metric"
          },
          "renewed_subscriptions_revenue": {
            "$ref": "#/components/schemas/Metric"
          },
          "active_subscriptions": {
            "$ref": "#/components/schemas/Metric"
          },
          "monthly_recurring_revenue": {
            "$ref": "#/components/schemas/Metric"
          }
        },
        "type": "object",
        "required": [
          "orders",
          "revenue",
          "average_order_value",
          "one_time_products",
          "one_time_products_revenue",
          "new_subscriptions",
          "new_subscriptions_revenue",
          "renewed_subscriptions",
          "renewed_subscriptions_revenue",
          "active_subscriptions",
          "monthly_recurring_revenue"
        ],
        "title": "Metrics"
      },
      "MetricsIntervalLimit": {
        "properties": {
          "max_days": {
            "type": "integer",
            "title": "Max Days",
            "description": "Maximum number of days for this interval."
          }
        },
        "type": "object",
        "required": [
          "max_days"
        ],
        "title": "MetricsIntervalLimit",
        "description": "Date interval limit to get metrics for a given interval."
      },
      "MetricsIntervalsLimits": {
        "properties": {
          "hour": {
            "$ref": "#/components/schemas/MetricsIntervalLimit",
            "description": "Limits for the hour interval."
          },
          "day": {
            "$ref": "#/components/schemas/MetricsIntervalLimit",
            "description": "Limits for the day interval."
          },
          "week": {
            "$ref": "#/components/schemas/MetricsIntervalLimit",
            "description": "Limits for the week interval."
          },
          "month": {
            "$ref": "#/components/schemas/MetricsIntervalLimit",
            "description": "Limits for the month interval."
          },
          "year": {
            "$ref": "#/components/schemas/MetricsIntervalLimit",
            "description": "Limits for the year interval."
          }
        },
        "type": "object",
        "required": [
          "hour",
          "day",
          "week",
          "month",
          "year"
        ],
        "title": "MetricsIntervalsLimits",
        "description": "Date interval limits to get metrics for each interval."
      },
      "MetricsLimits": {
        "properties": {
          "min_date": {
            "type": "string",
            "format": "date",
            "title": "Min Date",
            "description": "Minimum date to get metrics."
          },
          "intervals": {
            "$ref": "#/components/schemas/MetricsIntervalsLimits",
            "description": "Limits for each interval."
          }
        },
        "type": "object",
        "required": [
          "min_date",
          "intervals"
        ],
        "title": "MetricsLimits",
        "description": "Date limits to get metrics."
      },
      "MetricsResponse": {
        "properties": {
          "periods": {
            "items": {
              "$ref": "#/components/schemas/MetricPeriod"
            },
            "type": "array",
            "title": "Periods",
            "description": "List of data for each timestamp."
          },
          "metrics": {
            "$ref": "#/components/schemas/Metrics",
            "description": "Information about the returned metrics."
          }
        },
        "type": "object",
        "required": [
          "periods",
          "metrics"
        ],
        "title": "MetricsResponse",
        "description": "Metrics response schema."
      },
      "NotPermitted": {
        "properties": {
          "error": {
            "type": "string",
            "const": "NotPermitted",
            "title": "Error"
          },
          "detail": {
            "type": "string",
            "title": "Detail"
          }
        },
        "type": "object",
        "required": [
          "error",
          "detail"
        ],
        "title": "NotPermitted"
      },
      "OAuth2Client": {
        "properties": {
          "redirect_uris": {
            "items": {
              "type": "string",
              "maxLength": 2083,
              "minLength": 1,
              "format": "uri"
            },
            "type": "array",
            "title": "Redirect Uris"
          },
          "token_endpoint_auth_method": {
            "type": "string",
            "enum": [
              "client_secret_basic",
              "client_secret_post",
              "none"
            ],
            "title": "Token Endpoint Auth Method",
            "default": "client_secret_post"
          },
          "grant_types": {
            "items": {
              "type": "string",
              "enum": [
                "authorization_code",
                "refresh_token"
              ]
            },
            "type": "array",
            "title": "Grant Types",
            "default": [
              "authorization_code",
              "refresh_token"
            ]
          },
          "response_types": {
            "items": {
              "type": "string",
              "const": "code"
            },
            "type": "array",
            "title": "Response Types",
            "default": [
              "code"
            ]
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "default": "openid profile email user:read organizations:read organizations:write custom_fields:read custom_fields:write discounts:read discounts:write checkout_links:read checkout_links:write checkouts:read checkouts:write products:read products:write benefits:read benefits:write files:read files:write subscriptions:read subscriptions:write customers:read customers:write customer_sessions:write orders:read metrics:read webhooks:read webhooks:write external_organizations:read license_keys:read license_keys:write repositories:read repositories:write issues:read issues:write customer_portal:read customer_portal:write"
          },
          "client_name": {
            "type": "string",
            "title": "Client Name"
          },
          "client_uri": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Uri"
          },
          "logo_uri": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Logo Uri"
          },
          "tos_uri": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tos Uri"
          },
          "policy_uri": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Policy Uri"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "client_id": {
            "type": "string",
            "title": "Client Id"
          },
          "client_secret": {
            "type": "string",
            "title": "Client Secret"
          },
          "client_id_issued_at": {
            "type": "integer",
            "title": "Client Id Issued At"
          },
          "client_secret_expires_at": {
            "type": "integer",
            "title": "Client Secret Expires At"
          }
        },
        "type": "object",
        "required": [
          "redirect_uris",
          "client_name",
          "created_at",
          "modified_at",
          "client_id",
          "client_secret",
          "client_id_issued_at",
          "client_secret_expires_at"
        ],
        "title": "OAuth2Client"
      },
      "OAuth2ClientConfiguration": {
        "properties": {
          "redirect_uris": {
            "items": {
              "type": "string",
              "maxLength": 2083,
              "minLength": 1,
              "format": "uri"
            },
            "type": "array",
            "title": "Redirect Uris"
          },
          "token_endpoint_auth_method": {
            "type": "string",
            "enum": [
              "client_secret_basic",
              "client_secret_post",
              "none"
            ],
            "title": "Token Endpoint Auth Method",
            "default": "client_secret_post"
          },
          "grant_types": {
            "items": {
              "type": "string",
              "enum": [
                "authorization_code",
                "refresh_token"
              ]
            },
            "type": "array",
            "title": "Grant Types",
            "default": [
              "authorization_code",
              "refresh_token"
            ]
          },
          "response_types": {
            "items": {
              "type": "string",
              "const": "code"
            },
            "type": "array",
            "title": "Response Types",
            "default": [
              "code"
            ]
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "default": "openid profile email user:read organizations:read organizations:write custom_fields:read custom_fields:write discounts:read discounts:write checkout_links:read checkout_links:write checkouts:read checkouts:write products:read products:write benefits:read benefits:write files:read files:write subscriptions:read subscriptions:write customers:read customers:write customer_sessions:write orders:read metrics:read webhooks:read webhooks:write external_organizations:read license_keys:read license_keys:write repositories:read repositories:write issues:read issues:write customer_portal:read customer_portal:write"
          },
          "client_name": {
            "type": "string",
            "title": "Client Name"
          },
          "client_uri": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Uri"
          },
          "logo_uri": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Logo Uri"
          },
          "tos_uri": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tos Uri"
          },
          "policy_uri": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Policy Uri"
          }
        },
        "type": "object",
        "required": [
          "redirect_uris",
          "client_name"
        ],
        "title": "OAuth2ClientConfiguration"
      },
      "OAuth2ClientConfigurationUpdate": {
        "properties": {
          "redirect_uris": {
            "items": {
              "type": "string",
              "maxLength": 2083,
              "minLength": 1,
              "format": "uri"
            },
            "type": "array",
            "title": "Redirect Uris"
          },
          "token_endpoint_auth_method": {
            "type": "string",
            "enum": [
              "client_secret_basic",
              "client_secret_post",
              "none"
            ],
            "title": "Token Endpoint Auth Method",
            "default": "client_secret_post"
          },
          "grant_types": {
            "items": {
              "type": "string",
              "enum": [
                "authorization_code",
                "refresh_token"
              ]
            },
            "type": "array",
            "title": "Grant Types",
            "default": [
              "authorization_code",
              "refresh_token"
            ]
          },
          "response_types": {
            "items": {
              "type": "string",
              "const": "code"
            },
            "type": "array",
            "title": "Response Types",
            "default": [
              "code"
            ]
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "default": "openid profile email user:read organizations:read organizations:write custom_fields:read custom_fields:write discounts:read discounts:write checkout_links:read checkout_links:write checkouts:read checkouts:write products:read products:write benefits:read benefits:write files:read files:write subscriptions:read subscriptions:write customers:read customers:write customer_sessions:write orders:read metrics:read webhooks:read webhooks:write external_organizations:read license_keys:read license_keys:write repositories:read repositories:write issues:read issues:write customer_portal:read customer_portal:write"
          },
          "client_name": {
            "type": "string",
            "title": "Client Name"
          },
          "client_uri": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Uri"
          },
          "logo_uri": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Logo Uri"
          },
          "tos_uri": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tos Uri"
          },
          "policy_uri": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Policy Uri"
          },
          "client_id": {
            "type": "string",
            "title": "Client Id"
          }
        },
        "type": "object",
        "required": [
          "redirect_uris",
          "client_name",
          "client_id"
        ],
        "title": "OAuth2ClientConfigurationUpdate"
      },
      "OAuth2ClientPublic": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "client_id": {
            "type": "string",
            "title": "Client Id"
          },
          "client_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Name"
          },
          "client_uri": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Uri"
          },
          "logo_uri": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Logo Uri"
          },
          "tos_uri": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tos Uri"
          },
          "policy_uri": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Policy Uri"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "client_id",
          "client_name",
          "client_uri",
          "logo_uri",
          "tos_uri",
          "policy_uri"
        ],
        "title": "OAuth2ClientPublic"
      },
      "Order": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "custom_field_data": {
            "type": "object",
            "title": "Custom Field Data",
            "description": "Key-value object storing custom field values."
          },
          "amount": {
            "type": "integer",
            "title": "Amount"
          },
          "tax_amount": {
            "type": "integer",
            "title": "Tax Amount"
          },
          "currency": {
            "type": "string",
            "title": "Currency"
          },
          "billing_reason": {
            "$ref": "#/components/schemas/OrderBillingReason"
          },
          "billing_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address"
              },
              {
                "type": "null"
              }
            ]
          },
          "customer_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Customer Id"
          },
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id"
          },
          "product_price_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Price Id"
          },
          "discount_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Id"
          },
          "subscription_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subscription Id"
          },
          "checkout_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checkout Id"
          },
          "customer": {
            "$ref": "#/components/schemas/OrderCustomer"
          },
          "user_id": {
            "type": "string",
            "format": "uuid4",
            "title": "User Id",
            "deprecated": true
          },
          "user": {
            "$ref": "#/components/schemas/OrderUser",
            "deprecated": true
          },
          "product": {
            "$ref": "#/components/schemas/OrderProduct"
          },
          "product_price": {
            "$ref": "#/components/schemas/ProductPrice"
          },
          "discount": {
            "anyOf": [
              {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/DiscountFixedOnceForeverDurationBase"
                  },
                  {
                    "$ref": "#/components/schemas/DiscountFixedRepeatDurationBase"
                  },
                  {
                    "$ref": "#/components/schemas/DiscountPercentageOnceForeverDurationBase"
                  },
                  {
                    "$ref": "#/components/schemas/DiscountPercentageRepeatDurationBase"
                  }
                ],
                "title": "OrderDiscount"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount"
          },
          "subscription": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OrderSubscription"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "metadata",
          "amount",
          "tax_amount",
          "currency",
          "billing_reason",
          "billing_address",
          "customer_id",
          "product_id",
          "product_price_id",
          "discount_id",
          "subscription_id",
          "checkout_id",
          "customer",
          "user_id",
          "user",
          "product",
          "product_price",
          "discount",
          "subscription"
        ],
        "title": "Order"
      },
      "OrderBillingReason": {
        "type": "string",
        "enum": [
          "purchase",
          "subscription_create",
          "subscription_cycle",
          "subscription_update"
        ],
        "title": "OrderBillingReason"
      },
      "OrderCustomer": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "email_verified": {
            "type": "boolean",
            "title": "Email Verified"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "billing_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address"
              },
              {
                "type": "null"
              }
            ]
          },
          "tax_id": {
            "anyOf": [
              {
                "prefixItems": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/components/schemas/TaxIDFormat"
                  }
                ],
                "type": "array",
                "maxItems": 2,
                "minItems": 2
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Id"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id"
          },
          "avatar_url": {
            "type": "string",
            "title": "Avatar Url",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "metadata",
          "email",
          "email_verified",
          "name",
          "billing_address",
          "tax_id",
          "organization_id",
          "avatar_url"
        ],
        "title": "OrderCustomer"
      },
      "OrderInvoice": {
        "properties": {
          "url": {
            "type": "string",
            "title": "Url",
            "description": "The URL to the invoice."
          }
        },
        "type": "object",
        "required": [
          "url"
        ],
        "title": "OrderInvoice",
        "description": "Order's invoice data."
      },
      "OrderProduct": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the product."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the product."
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the product."
          },
          "is_recurring": {
            "type": "boolean",
            "title": "Is Recurring",
            "description": "Whether the product is a subscription tier."
          },
          "is_archived": {
            "type": "boolean",
            "title": "Is Archived",
            "description": "Whether the product is archived and no longer available."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the product."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "name",
          "description",
          "is_recurring",
          "is_archived",
          "organization_id"
        ],
        "title": "OrderProduct"
      },
      "OrderSortProperty": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "amount",
          "-amount",
          "customer",
          "-customer",
          "product",
          "-product",
          "discount",
          "-discount",
          "subscription",
          "-subscription"
        ],
        "title": "OrderSortProperty"
      },
      "OrderSubscription": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Amount"
          },
          "currency": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Currency"
          },
          "recurring_interval": {
            "$ref": "#/components/schemas/SubscriptionRecurringInterval"
          },
          "status": {
            "$ref": "#/components/schemas/SubscriptionStatus"
          },
          "current_period_start": {
            "type": "string",
            "format": "date-time",
            "title": "Current Period Start"
          },
          "current_period_end": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Current Period End"
          },
          "cancel_at_period_end": {
            "type": "boolean",
            "title": "Cancel At Period End"
          },
          "started_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Started At"
          },
          "ended_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ended At"
          },
          "customer_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Customer Id"
          },
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id"
          },
          "price_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Price Id"
          },
          "discount_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Id"
          },
          "checkout_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checkout Id"
          },
          "user_id": {
            "type": "string",
            "format": "uuid4",
            "title": "User Id",
            "deprecated": true
          }
        },
        "type": "object",
        "required": [
          "metadata",
          "created_at",
          "modified_at",
          "id",
          "amount",
          "currency",
          "recurring_interval",
          "status",
          "current_period_start",
          "current_period_end",
          "cancel_at_period_end",
          "started_at",
          "ended_at",
          "customer_id",
          "product_id",
          "price_id",
          "discount_id",
          "checkout_id",
          "user_id"
        ],
        "title": "OrderSubscription"
      },
      "OrderUser": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "public_name": {
            "type": "string",
            "title": "Public Name"
          },
          "avatar_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avatar Url"
          },
          "github_username": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Github Username"
          }
        },
        "type": "object",
        "required": [
          "id",
          "email",
          "public_name"
        ],
        "title": "OrderUser"
      },
      "Organization": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The organization ID.",
            "x-polar-selector-widget": {
              "displayProperty": "name",
              "resourceName": "Organization",
              "resourceRoot": "/v1/organizations"
            }
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "slug": {
            "type": "string",
            "title": "Slug"
          },
          "avatar_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avatar Url"
          },
          "bio": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Bio"
          },
          "company": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Company"
          },
          "blog": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Blog"
          },
          "location": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Location"
          },
          "email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email"
          },
          "twitter_username": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Twitter Username"
          },
          "pledge_minimum_amount": {
            "type": "integer",
            "title": "Pledge Minimum Amount"
          },
          "pledge_badge_show_amount": {
            "type": "boolean",
            "title": "Pledge Badge Show Amount"
          },
          "default_upfront_split_to_contributors": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Default Upfront Split To Contributors"
          },
          "profile_settings": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OrganizationProfileSettings"
              },
              {
                "type": "null"
              }
            ],
            "description": "Settings for the organization profile"
          },
          "feature_settings": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OrganizationFeatureSettings"
              },
              {
                "type": "null"
              }
            ],
            "description": "Settings for the organization features"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "name",
          "slug",
          "avatar_url",
          "bio",
          "company",
          "blog",
          "location",
          "email",
          "twitter_username",
          "pledge_minimum_amount",
          "pledge_badge_show_amount",
          "default_upfront_split_to_contributors",
          "profile_settings",
          "feature_settings"
        ],
        "title": "Organization"
      },
      "OrganizationAvatarFileCreate": {
        "properties": {
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "mime_type": {
            "type": "string",
            "pattern": "^image\\/(jpeg|png|gif|webp|svg\\+xml)$",
            "title": "Mime Type",
            "description": "MIME type of the file. Only images are supported for this type of file."
          },
          "size": {
            "type": "integer",
            "maximum": 1048576,
            "title": "Size",
            "description": "Size of the file. A maximum of 1 MB is allowed for this type of file."
          },
          "checksum_sha256_base64": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Base64"
          },
          "upload": {
            "$ref": "#/components/schemas/S3FileCreateMultipart"
          },
          "service": {
            "type": "string",
            "const": "organization_avatar",
            "title": "Service"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version"
          }
        },
        "type": "object",
        "required": [
          "name",
          "mime_type",
          "size",
          "upload",
          "service"
        ],
        "title": "OrganizationAvatarFileCreate",
        "description": "Schema to create a file to be used as an organization avatar."
      },
      "OrganizationAvatarFileRead": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "path": {
            "type": "string",
            "title": "Path"
          },
          "mime_type": {
            "type": "string",
            "title": "Mime Type"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "storage_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Storage Version"
          },
          "checksum_etag": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Etag"
          },
          "checksum_sha256_base64": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Base64"
          },
          "checksum_sha256_hex": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Hex"
          },
          "last_modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Modified At"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version"
          },
          "service": {
            "type": "string",
            "const": "organization_avatar",
            "title": "Service"
          },
          "is_uploaded": {
            "type": "boolean",
            "title": "Is Uploaded"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "size_readable": {
            "type": "string",
            "title": "Size Readable",
            "readOnly": true
          },
          "public_url": {
            "type": "string",
            "title": "Public Url",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "id",
          "organization_id",
          "name",
          "path",
          "mime_type",
          "size",
          "storage_version",
          "checksum_etag",
          "checksum_sha256_base64",
          "checksum_sha256_hex",
          "last_modified_at",
          "version",
          "service",
          "is_uploaded",
          "created_at",
          "size_readable",
          "public_url"
        ],
        "title": "OrganizationAvatarFileRead",
        "description": "File to be used as an organization avatar."
      },
      "OrganizationCreate": {
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "title": "Name"
          },
          "slug": {
            "type": "string",
            "minLength": 3,
            "title": "Slug"
          },
          "avatar_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avatar Url"
          },
          "feature_settings": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OrganizationFeatureSettings"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "name",
          "slug"
        ],
        "title": "OrganizationCreate"
      },
      "OrganizationFeatureSettings": {
        "properties": {
          "issue_funding_enabled": {
            "type": "boolean",
            "title": "Issue Funding Enabled",
            "description": "If this organization has issue funding enabled",
            "default": false
          }
        },
        "type": "object",
        "title": "OrganizationFeatureSettings"
      },
      "OrganizationProfileSettings": {
        "properties": {
          "enabled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Enabled",
            "description": "If this organization has a profile enabled"
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 160
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "A description of the organization"
          },
          "featured_projects": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "format": "uuid4"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Featured Projects",
            "description": "A list of featured projects"
          },
          "featured_organizations": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "format": "uuid4"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Featured Organizations",
            "description": "A list of featured organizations"
          },
          "links": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "maxLength": 2083,
                  "minLength": 1,
                  "format": "uri"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Links",
            "description": "A list of links associated with the organization"
          },
          "subscribe": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OrganizationSubscribePromoteSettings"
              },
              {
                "type": "null"
              }
            ],
            "description": "Subscription promotion settings",
            "default": {
              "promote": true,
              "show_count": true,
              "count_free": true
            }
          },
          "accent_color": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Accent Color",
            "description": "Accent color for the organization"
          }
        },
        "type": "object",
        "title": "OrganizationProfileSettings"
      },
      "OrganizationSortProperty": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "name",
          "-name"
        ],
        "title": "OrganizationSortProperty"
      },
      "OrganizationSubscribePromoteSettings": {
        "properties": {
          "promote": {
            "type": "boolean",
            "title": "Promote",
            "description": "Promote email subscription (free)",
            "default": true
          },
          "show_count": {
            "type": "boolean",
            "title": "Show Count",
            "description": "Show subscription count publicly",
            "default": true
          },
          "count_free": {
            "type": "boolean",
            "title": "Count Free",
            "description": "Include free subscribers in total count",
            "default": true
          }
        },
        "type": "object",
        "title": "OrganizationSubscribePromoteSettings"
      },
      "OrganizationUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 3
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "avatar_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avatar Url"
          },
          "default_upfront_split_to_contributors": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 100,
                "minimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Default Upfront Split To Contributors"
          },
          "pledge_badge_show_amount": {
            "type": "boolean",
            "title": "Pledge Badge Show Amount",
            "default": false
          },
          "billing_email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Billing Email"
          },
          "default_badge_custom_content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Default Badge Custom Content"
          },
          "pledge_minimum_amount": {
            "type": "integer",
            "title": "Pledge Minimum Amount",
            "default": 2000
          },
          "total_monthly_spending_limit": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Monthly Spending Limit"
          },
          "per_user_monthly_spending_limit": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Per User Monthly Spending Limit"
          },
          "profile_settings": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OrganizationProfileSettings"
              },
              {
                "type": "null"
              }
            ]
          },
          "feature_settings": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OrganizationFeatureSettings"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "title": "OrganizationUpdate"
      },
      "Pagination": {
        "properties": {
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          },
          "max_page": {
            "type": "integer",
            "title": "Max Page"
          }
        },
        "type": "object",
        "required": [
          "total_count",
          "max_page"
        ],
        "title": "Pagination"
      },
      "PaymentProcessor": {
        "type": "string",
        "enum": [
          "stripe"
        ],
        "title": "PaymentProcessor"
      },
      "Platforms": {
        "type": "string",
        "enum": [
          "github"
        ],
        "title": "Platforms"
      },
      "Pledge": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "amount": {
            "type": "integer",
            "title": "Amount",
            "description": "Amount pledged towards the issue"
          },
          "currency": {
            "type": "string",
            "title": "Currency"
          },
          "state": {
            "$ref": "#/components/schemas/PledgeState",
            "description": "Current state of the pledge"
          },
          "type": {
            "$ref": "#/components/schemas/PledgeType",
            "description": "Type of pledge"
          },
          "refunded_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Refunded At",
            "description": "If and when the pledge was refunded to the pledger"
          },
          "scheduled_payout_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Scheduled Payout At",
            "description": "When the payout is scheduled to be made to the maintainers behind the issue. Disputes must be made before this date."
          },
          "issue": {
            "$ref": "#/components/schemas/Issue",
            "description": "The issue that the pledge was made towards"
          },
          "pledger": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Pledger"
              },
              {
                "type": "null"
              }
            ],
            "description": "The user or organization that made this pledge"
          },
          "hosted_invoice_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Hosted Invoice Url",
            "description": "URL of invoice for this pledge"
          },
          "authed_can_admin_sender": {
            "type": "boolean",
            "title": "Authed Can Admin Sender",
            "description": "If the currently authenticated subject can perform admin actions on behalf of the maker of the peldge",
            "default": false
          },
          "authed_can_admin_received": {
            "type": "boolean",
            "title": "Authed Can Admin Received",
            "description": "If the currently authenticated subject can perform admin actions on behalf of the receiver of the peldge",
            "default": false
          },
          "created_by": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Pledger"
              },
              {
                "type": "null"
              }
            ],
            "description": "For pledges made by an organization, or on behalf of an organization. This is the user that made the pledge. Only visible for members of said organization."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "amount",
          "currency",
          "state",
          "type",
          "issue"
        ],
        "title": "Pledge"
      },
      "PledgeState": {
        "type": "string",
        "enum": [
          "initiated",
          "created",
          "pending",
          "refunded",
          "disputed",
          "charge_disputed",
          "cancelled"
        ],
        "title": "PledgeState"
      },
      "PledgeType": {
        "type": "string",
        "enum": [
          "pay_upfront",
          "pay_on_completion",
          "pay_directly"
        ],
        "title": "PledgeType"
      },
      "Pledger": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "github_username": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Github Username"
          },
          "avatar_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avatar Url"
          }
        },
        "type": "object",
        "required": [
          "name",
          "github_username",
          "avatar_url"
        ],
        "title": "Pledger"
      },
      "Product": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the product."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the product."
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the product."
          },
          "is_recurring": {
            "type": "boolean",
            "title": "Is Recurring",
            "description": "Whether the product is a subscription tier."
          },
          "is_archived": {
            "type": "boolean",
            "title": "Is Archived",
            "description": "Whether the product is archived and no longer available."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id",
            "description": "The ID of the organization owning the product."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "prices": {
            "items": {
              "$ref": "#/components/schemas/ProductPrice"
            },
            "type": "array",
            "title": "Prices",
            "description": "List of prices for this product."
          },
          "benefits": {
            "items": {
              "$ref": "#/components/schemas/Benefit",
              "title": "Benefit"
            },
            "type": "array",
            "title": "Benefits",
            "description": "List of benefits granted by the product."
          },
          "medias": {
            "items": {
              "$ref": "#/components/schemas/ProductMediaFileRead"
            },
            "type": "array",
            "title": "Medias",
            "description": "List of medias associated to the product."
          },
          "attached_custom_fields": {
            "items": {
              "$ref": "#/components/schemas/AttachedCustomField"
            },
            "type": "array",
            "title": "Attached Custom Fields",
            "description": "List of custom fields attached to the product."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "name",
          "description",
          "is_recurring",
          "is_archived",
          "organization_id",
          "metadata",
          "prices",
          "benefits",
          "medias",
          "attached_custom_fields"
        ],
        "title": "Product",
        "description": "A product."
      },
      "ProductBenefitsUpdate": {
        "properties": {
          "benefits": {
            "items": {
              "type": "string",
              "format": "uuid4",
              "description": "The benefit ID.",
              "x-polar-selector-widget": {
                "displayProperty": "description",
                "resourceName": "Benefit",
                "resourceRoot": "/v1/benefits"
              }
            },
            "type": "array",
            "title": "Benefits",
            "description": "List of benefit IDs. Each one must be on the same organization as the product."
          }
        },
        "type": "object",
        "required": [
          "benefits"
        ],
        "title": "ProductBenefitsUpdate",
        "description": "Schema to update the benefits granted by a product."
      },
      "ProductCreate": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/ProductRecurringCreate"
          },
          {
            "$ref": "#/components/schemas/ProductOneTimeCreate"
          }
        ]
      },
      "ProductMediaFileCreate": {
        "properties": {
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "mime_type": {
            "type": "string",
            "pattern": "^image\\/(jpeg|png|gif|webp|svg\\+xml)$",
            "title": "Mime Type",
            "description": "MIME type of the file. Only images are supported for this type of file."
          },
          "size": {
            "type": "integer",
            "maximum": 10485760,
            "title": "Size",
            "description": "Size of the file. A maximum of 10 MB is allowed for this type of file."
          },
          "checksum_sha256_base64": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Base64"
          },
          "upload": {
            "$ref": "#/components/schemas/S3FileCreateMultipart"
          },
          "service": {
            "type": "string",
            "const": "product_media",
            "title": "Service"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version"
          }
        },
        "type": "object",
        "required": [
          "name",
          "mime_type",
          "size",
          "upload",
          "service"
        ],
        "title": "ProductMediaFileCreate",
        "description": "Schema to create a file to be used as a product media file."
      },
      "ProductMediaFileRead": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "path": {
            "type": "string",
            "title": "Path"
          },
          "mime_type": {
            "type": "string",
            "title": "Mime Type"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "storage_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Storage Version"
          },
          "checksum_etag": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Etag"
          },
          "checksum_sha256_base64": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Base64"
          },
          "checksum_sha256_hex": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Hex"
          },
          "last_modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Modified At"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version"
          },
          "service": {
            "type": "string",
            "const": "product_media",
            "title": "Service"
          },
          "is_uploaded": {
            "type": "boolean",
            "title": "Is Uploaded"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "size_readable": {
            "type": "string",
            "title": "Size Readable",
            "readOnly": true
          },
          "public_url": {
            "type": "string",
            "title": "Public Url",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "id",
          "organization_id",
          "name",
          "path",
          "mime_type",
          "size",
          "storage_version",
          "checksum_etag",
          "checksum_sha256_base64",
          "checksum_sha256_hex",
          "last_modified_at",
          "version",
          "service",
          "is_uploaded",
          "created_at",
          "size_readable",
          "public_url"
        ],
        "title": "ProductMediaFileRead",
        "description": "File to be used as a product media file."
      },
      "ProductOneTimeCreate": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "name": {
            "type": "string",
            "minLength": 3,
            "title": "Name",
            "description": "The name of the product."
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the product."
          },
          "prices": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ProductPriceOneTimeFixedCreate"
                },
                {
                  "$ref": "#/components/schemas/ProductPriceOneTimeCustomCreate"
                },
                {
                  "$ref": "#/components/schemas/ProductPriceOneTimeFreeCreate"
                }
              ]
            },
            "type": "array",
            "maxItems": 1,
            "minItems": 1,
            "title": "ProductPriceOneTimeCreate",
            "description": "List of available prices for this product."
          },
          "medias": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "format": "uuid4"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Medias",
            "description": "List of file IDs. Each one must be on the same organization as the product, of type `product_media` and correctly uploaded."
          },
          "attached_custom_fields": {
            "items": {
              "$ref": "#/components/schemas/AttachedCustomFieldCreate"
            },
            "type": "array",
            "title": "Attached Custom Fields",
            "description": "List of custom fields to attach."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the product. **Required unless you use an organization token.**"
          }
        },
        "type": "object",
        "required": [
          "name",
          "prices"
        ],
        "title": "ProductOneTimeCreate",
        "description": "Schema to create a one-time product."
      },
      "ProductPrice": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ProductPriceRecurring"
          },
          {
            "$ref": "#/components/schemas/ProductPriceOneTime"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "one_time": "#/components/schemas/ProductPriceOneTime",
            "recurring": "#/components/schemas/ProductPriceRecurring"
          }
        }
      },
      "ProductPriceOneTime": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ProductPriceOneTimeFixed"
          },
          {
            "$ref": "#/components/schemas/ProductPriceOneTimeCustom"
          },
          {
            "$ref": "#/components/schemas/ProductPriceOneTimeFree"
          }
        ],
        "discriminator": {
          "propertyName": "amount_type",
          "mapping": {
            "custom": "#/components/schemas/ProductPriceOneTimeCustom",
            "fixed": "#/components/schemas/ProductPriceOneTimeFixed",
            "free": "#/components/schemas/ProductPriceOneTimeFree"
          }
        }
      },
      "ProductPriceOneTimeCustom": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the price."
          },
          "amount_type": {
            "type": "string",
            "const": "custom",
            "title": "Amount Type"
          },
          "is_archived": {
            "type": "boolean",
            "title": "Is Archived",
            "description": "Whether the price is archived and no longer available."
          },
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id",
            "description": "The ID of the product owning the price."
          },
          "price_currency": {
            "type": "string",
            "title": "Price Currency",
            "description": "The currency."
          },
          "minimum_amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Minimum Amount",
            "description": "The minimum amount the customer can pay."
          },
          "maximum_amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Maximum Amount",
            "description": "The maximum amount the customer can pay."
          },
          "preset_amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Preset Amount",
            "description": "The initial amount shown to the customer."
          },
          "type": {
            "type": "string",
            "const": "one_time",
            "title": "Type",
            "description": "The type of the price."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "amount_type",
          "is_archived",
          "product_id",
          "price_currency",
          "minimum_amount",
          "maximum_amount",
          "preset_amount",
          "type"
        ],
        "title": "ProductPriceOneTimeCustom",
        "description": "A pay-what-you-want price for a one-time product."
      },
      "ProductPriceOneTimeCustomCreate": {
        "properties": {
          "type": {
            "type": "string",
            "const": "one_time",
            "title": "Type"
          },
          "amount_type": {
            "type": "string",
            "const": "custom",
            "title": "Amount Type"
          },
          "price_currency": {
            "type": "string",
            "pattern": "usd",
            "title": "Price Currency",
            "description": "The currency. Currently, only `usd` is supported.",
            "default": "usd"
          },
          "minimum_amount": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 99999999,
                "minimum": 50,
                "description": "The price in cents."
              },
              {
                "type": "null"
              }
            ],
            "title": "Minimum Amount",
            "description": "The minimum amount the customer can pay."
          },
          "maximum_amount": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 99999999,
                "minimum": 50,
                "description": "The price in cents."
              },
              {
                "type": "null"
              }
            ],
            "title": "Maximum Amount",
            "description": "The maximum amount the customer can pay."
          },
          "preset_amount": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 99999999,
                "minimum": 50,
                "description": "The price in cents."
              },
              {
                "type": "null"
              }
            ],
            "title": "Preset Amount",
            "description": "The initial amount shown to the customer."
          }
        },
        "type": "object",
        "required": [
          "type",
          "amount_type"
        ],
        "title": "ProductPriceOneTimeCustomCreate",
        "description": "Schema to create a pay-what-you-want price for a one-time product."
      },
      "ProductPriceOneTimeFixed": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the price."
          },
          "amount_type": {
            "type": "string",
            "const": "fixed",
            "title": "Amount Type"
          },
          "is_archived": {
            "type": "boolean",
            "title": "Is Archived",
            "description": "Whether the price is archived and no longer available."
          },
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id",
            "description": "The ID of the product owning the price."
          },
          "price_currency": {
            "type": "string",
            "title": "Price Currency",
            "description": "The currency."
          },
          "price_amount": {
            "type": "integer",
            "title": "Price Amount",
            "description": "The price in cents."
          },
          "type": {
            "type": "string",
            "const": "one_time",
            "title": "Type",
            "description": "The type of the price."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "amount_type",
          "is_archived",
          "product_id",
          "price_currency",
          "price_amount",
          "type"
        ],
        "title": "ProductPriceOneTimeFixed",
        "description": "A one-time price for a product."
      },
      "ProductPriceOneTimeFixedCreate": {
        "properties": {
          "type": {
            "type": "string",
            "const": "one_time",
            "title": "Type"
          },
          "amount_type": {
            "type": "string",
            "const": "fixed",
            "title": "Amount Type"
          },
          "price_amount": {
            "type": "integer",
            "maximum": 99999999,
            "minimum": 50,
            "title": "Price Amount",
            "description": "The price in cents."
          },
          "price_currency": {
            "type": "string",
            "pattern": "usd",
            "title": "Price Currency",
            "description": "The currency. Currently, only `usd` is supported.",
            "default": "usd"
          }
        },
        "type": "object",
        "required": [
          "type",
          "amount_type",
          "price_amount"
        ],
        "title": "ProductPriceOneTimeFixedCreate",
        "description": "Schema to create a one-time product price."
      },
      "ProductPriceOneTimeFree": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the price."
          },
          "amount_type": {
            "type": "string",
            "const": "free",
            "title": "Amount Type"
          },
          "is_archived": {
            "type": "boolean",
            "title": "Is Archived",
            "description": "Whether the price is archived and no longer available."
          },
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id",
            "description": "The ID of the product owning the price."
          },
          "type": {
            "type": "string",
            "const": "one_time",
            "title": "Type",
            "description": "The type of the price."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "amount_type",
          "is_archived",
          "product_id",
          "type"
        ],
        "title": "ProductPriceOneTimeFree",
        "description": "A free one-time price for a product."
      },
      "ProductPriceOneTimeFreeCreate": {
        "properties": {
          "type": {
            "type": "string",
            "const": "one_time",
            "title": "Type"
          },
          "amount_type": {
            "type": "string",
            "const": "free",
            "title": "Amount Type"
          }
        },
        "type": "object",
        "required": [
          "type",
          "amount_type"
        ],
        "title": "ProductPriceOneTimeFreeCreate",
        "description": "Schema to create a free one-time product price."
      },
      "ProductPriceRecurring": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ProductPriceRecurringFixed"
          },
          {
            "$ref": "#/components/schemas/ProductPriceRecurringCustom"
          },
          {
            "$ref": "#/components/schemas/ProductPriceRecurringFree"
          }
        ],
        "discriminator": {
          "propertyName": "amount_type",
          "mapping": {
            "custom": "#/components/schemas/ProductPriceRecurringCustom",
            "fixed": "#/components/schemas/ProductPriceRecurringFixed",
            "free": "#/components/schemas/ProductPriceRecurringFree"
          }
        }
      },
      "ProductPriceRecurringCustom": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the price."
          },
          "amount_type": {
            "type": "string",
            "const": "custom",
            "title": "Amount Type"
          },
          "is_archived": {
            "type": "boolean",
            "title": "Is Archived",
            "description": "Whether the price is archived and no longer available."
          },
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id",
            "description": "The ID of the product owning the price."
          },
          "price_currency": {
            "type": "string",
            "title": "Price Currency",
            "description": "The currency."
          },
          "minimum_amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Minimum Amount",
            "description": "The minimum amount the customer can pay."
          },
          "maximum_amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Maximum Amount",
            "description": "The maximum amount the customer can pay."
          },
          "preset_amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Preset Amount",
            "description": "The initial amount shown to the customer."
          },
          "type": {
            "type": "string",
            "const": "recurring",
            "title": "Type",
            "description": "The type of the price."
          },
          "recurring_interval": {
            "$ref": "#/components/schemas/SubscriptionRecurringInterval",
            "description": "The recurring interval of the price."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "amount_type",
          "is_archived",
          "product_id",
          "price_currency",
          "minimum_amount",
          "maximum_amount",
          "preset_amount",
          "type",
          "recurring_interval"
        ],
        "title": "ProductPriceRecurringCustom",
        "description": "A pay-what-you-want recurring price for a product, i.e. a subscription."
      },
      "ProductPriceRecurringFixed": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the price."
          },
          "amount_type": {
            "type": "string",
            "const": "fixed",
            "title": "Amount Type"
          },
          "is_archived": {
            "type": "boolean",
            "title": "Is Archived",
            "description": "Whether the price is archived and no longer available."
          },
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id",
            "description": "The ID of the product owning the price."
          },
          "price_currency": {
            "type": "string",
            "title": "Price Currency",
            "description": "The currency."
          },
          "price_amount": {
            "type": "integer",
            "title": "Price Amount",
            "description": "The price in cents."
          },
          "type": {
            "type": "string",
            "const": "recurring",
            "title": "Type",
            "description": "The type of the price."
          },
          "recurring_interval": {
            "$ref": "#/components/schemas/SubscriptionRecurringInterval",
            "description": "The recurring interval of the price."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "amount_type",
          "is_archived",
          "product_id",
          "price_currency",
          "price_amount",
          "type",
          "recurring_interval"
        ],
        "title": "ProductPriceRecurringFixed",
        "description": "A recurring price for a product, i.e. a subscription."
      },
      "ProductPriceRecurringFixedCreate": {
        "properties": {
          "type": {
            "type": "string",
            "const": "recurring",
            "title": "Type"
          },
          "amount_type": {
            "type": "string",
            "const": "fixed",
            "title": "Amount Type"
          },
          "price_amount": {
            "type": "integer",
            "maximum": 99999999,
            "minimum": 50,
            "title": "Price Amount",
            "description": "The price in cents."
          },
          "price_currency": {
            "type": "string",
            "pattern": "usd",
            "title": "Price Currency",
            "description": "The currency. Currently, only `usd` is supported.",
            "default": "usd"
          },
          "recurring_interval": {
            "$ref": "#/components/schemas/SubscriptionRecurringInterval",
            "description": "The recurring interval of the price."
          }
        },
        "type": "object",
        "required": [
          "type",
          "amount_type",
          "price_amount",
          "recurring_interval"
        ],
        "title": "ProductPriceRecurringFixedCreate",
        "description": "Schema to create a recurring product price, i.e. a subscription."
      },
      "ProductPriceRecurringFree": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the price."
          },
          "amount_type": {
            "type": "string",
            "const": "free",
            "title": "Amount Type"
          },
          "is_archived": {
            "type": "boolean",
            "title": "Is Archived",
            "description": "Whether the price is archived and no longer available."
          },
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id",
            "description": "The ID of the product owning the price."
          },
          "type": {
            "type": "string",
            "const": "recurring",
            "title": "Type",
            "description": "The type of the price."
          },
          "recurring_interval": {
            "$ref": "#/components/schemas/SubscriptionRecurringInterval",
            "description": "The recurring interval of the price."
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "amount_type",
          "is_archived",
          "product_id",
          "type",
          "recurring_interval"
        ],
        "title": "ProductPriceRecurringFree",
        "description": "A free recurring price for a product, i.e. a subscription."
      },
      "ProductPriceRecurringFreeCreate": {
        "properties": {
          "type": {
            "type": "string",
            "const": "recurring",
            "title": "Type"
          },
          "amount_type": {
            "type": "string",
            "const": "free",
            "title": "Amount Type"
          },
          "recurring_interval": {
            "$ref": "#/components/schemas/SubscriptionRecurringInterval",
            "description": "The recurring interval of the price."
          }
        },
        "type": "object",
        "required": [
          "type",
          "amount_type",
          "recurring_interval"
        ],
        "title": "ProductPriceRecurringFreeCreate",
        "description": "Schema to create a free recurring product price, i.e. a subscription."
      },
      "ProductPriceType": {
        "type": "string",
        "enum": [
          "one_time",
          "recurring"
        ],
        "title": "ProductPriceType"
      },
      "ProductRecurringCreate": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "propertyNames": {
              "maxLength": 40,
              "minLength": 1
            },
            "type": "object",
            "maxProperties": 50,
            "title": "Metadata",
            "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A boolean\n\nYou can store up to **50 key-value pairs**."
          },
          "name": {
            "type": "string",
            "minLength": 3,
            "title": "Name",
            "description": "The name of the product."
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the product."
          },
          "prices": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ProductPriceRecurringFixedCreate"
                },
                "type": "array",
                "maxItems": 2,
                "minItems": 1,
                "title": "ProductPriceRecurringFixedCreate",
                "description": "List of recurring prices. Only one price per interval (one monthly and one yearly) is allowed."
              },
              {
                "items": {
                  "$ref": "#/components/schemas/ProductPriceRecurringFreeCreate"
                },
                "type": "array",
                "maxItems": 1,
                "minItems": 1,
                "title": "ProductPriceRecurringFreeCreate",
                "description": "List with a single free recurring price."
              }
            ],
            "title": "Prices",
            "description": "List of available prices for this product."
          },
          "medias": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "format": "uuid4"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Medias",
            "description": "List of file IDs. Each one must be on the same organization as the product, of type `product_media` and correctly uploaded."
          },
          "attached_custom_fields": {
            "items": {
              "$ref": "#/components/schemas/AttachedCustomFieldCreate"
            },
            "type": "array",
            "title": "Attached Custom Fields",
            "description": "List of custom fields to attach."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4",
                "description": "The organization ID.",
                "x-polar-selector-widget": {
                  "displayProperty": "name",
                  "resourceName": "Organization",
                  "resourceRoot": "/v1/organizations"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization owning the product. **Required unless you use an organization token.**"
          }
        },
        "type": "object",
        "required": [
          "name",
          "prices"
        ],
        "title": "ProductRecurringCreate",
        "description": "Schema to create a recurring product, i.e. a subscription."
      },
      "ProductSortProperty": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "name",
          "-name",
          "price_type",
          "-price_type",
          "price_amount_type",
          "-price_amount_type",
          "price_amount",
          "-price_amount"
        ],
        "title": "ProductSortProperty"
      },
      "ProductUpdate": {
        "properties": {
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {
                      "type": "string",
                      "maxLength": 500,
                      "minLength": 1
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "boolean"
                    }
                  ]
                },
                "propertyNames": {
                  "maxLength": 40,
                  "minLength": 1
                },
                "type": "object",
                "maxProperties": 50,
                "description": "Key-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of **40 characters**.\nThe value must be either:\n\n* A string with a maximum length of **500 characters**\n* An integer\n* A boolean\n\nYou can store up to **50 key-value pairs**."
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          },
          "name": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 3,
                "description": "The name of the product."
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the product."
          },
          "is_archived": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Archived",
            "description": "Whether the product is archived. If `true`, the product won't be available for purchase anymore. Existing customers will still have access to their benefits, and subscriptions will continue normally."
          },
          "prices": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ExistingProductPrice"
                    },
                    {
                      "$ref": "#/components/schemas/ProductPriceRecurringFixedCreate"
                    },
                    {
                      "$ref": "#/components/schemas/ProductPriceRecurringFreeCreate"
                    },
                    {
                      "$ref": "#/components/schemas/ProductPriceOneTimeFixedCreate"
                    },
                    {
                      "$ref": "#/components/schemas/ProductPriceOneTimeCustomCreate"
                    },
                    {
                      "$ref": "#/components/schemas/ProductPriceOneTimeFreeCreate"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prices",
            "description": "List of available prices for this product. If you want to keep existing prices, include them in the list as an `ExistingProductPrice` object."
          },
          "medias": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "format": "uuid4"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Medias",
            "description": "List of file IDs. Each one must be on the same organization as the product, of type `product_media` and correctly uploaded."
          },
          "attached_custom_fields": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/AttachedCustomFieldCreate"
                },
                "type": "array",
                "description": "List of custom fields to attach."
              },
              {
                "type": "null"
              }
            ],
            "title": "Attached Custom Fields"
          }
        },
        "type": "object",
        "title": "ProductUpdate",
        "description": "Schema to update a product."
      },
      "Reactions": {
        "properties": {
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          },
          "plus_one": {
            "type": "integer",
            "title": "Plus One"
          },
          "minus_one": {
            "type": "integer",
            "title": "Minus One"
          },
          "laugh": {
            "type": "integer",
            "title": "Laugh"
          },
          "hooray": {
            "type": "integer",
            "title": "Hooray"
          },
          "confused": {
            "type": "integer",
            "title": "Confused"
          },
          "heart": {
            "type": "integer",
            "title": "Heart"
          },
          "rocket": {
            "type": "integer",
            "title": "Rocket"
          },
          "eyes": {
            "type": "integer",
            "title": "Eyes"
          }
        },
        "type": "object",
        "required": [
          "total_count",
          "plus_one",
          "minus_one",
          "laugh",
          "hooray",
          "confused",
          "heart",
          "rocket",
          "eyes"
        ],
        "title": "Reactions"
      },
      "Repository": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "platform": {
            "$ref": "#/components/schemas/Platforms"
          },
          "is_private": {
            "type": "boolean",
            "title": "Is Private"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "examples": [
              "MyOrg"
            ]
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "stars": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stars",
            "examples": [
              1337
            ]
          },
          "license": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "License"
          },
          "homepage": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Homepage"
          },
          "profile_settings": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RepositoryProfileSettings"
              },
              {
                "type": "null"
              }
            ],
            "description": "Settings for the repository profile"
          },
          "organization": {
            "$ref": "#/components/schemas/ExternalOrganization"
          },
          "internal_organization": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Organization"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "id",
          "platform",
          "is_private",
          "name",
          "description",
          "stars",
          "license",
          "homepage",
          "profile_settings",
          "organization",
          "internal_organization"
        ],
        "title": "Repository"
      },
      "RepositoryProfileSettings": {
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 240
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "A description of the repository"
          },
          "cover_image_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cover Image Url",
            "description": "A URL to a cover image"
          },
          "featured_organizations": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "format": "uuid4"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Featured Organizations",
            "description": "A list of featured organizations"
          },
          "highlighted_subscription_tiers": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "format": "uuid4"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Highlighted Subscription Tiers",
            "description": "A list of highlighted subscription tiers"
          },
          "links": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "maxLength": 2083,
                  "minLength": 1,
                  "format": "uri"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Links",
            "description": "A list of links related to the repository"
          }
        },
        "type": "object",
        "title": "RepositoryProfileSettings"
      },
      "RepositoryProfileSettingsUpdate": {
        "properties": {
          "set_description": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Set Description"
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 240
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "set_cover_image_url": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Set Cover Image Url"
          },
          "cover_image_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cover Image Url"
          },
          "featured_organizations": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "format": "uuid4"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Featured Organizations"
          },
          "highlighted_subscription_tiers": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "format": "uuid4"
                },
                "type": "array",
                "maxItems": 3
              },
              {
                "type": "null"
              }
            ],
            "title": "Highlighted Subscription Tiers"
          },
          "links": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "maxLength": 2083,
                  "minLength": 1,
                  "format": "uri"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Links"
          }
        },
        "type": "object",
        "title": "RepositoryProfileSettingsUpdate"
      },
      "RepositorySortProperty": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "name",
          "-name",
          "stars",
          "-stars"
        ],
        "title": "RepositorySortProperty"
      },
      "RepositoryUpdate": {
        "properties": {
          "profile_settings": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RepositoryProfileSettingsUpdate"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "title": "RepositoryUpdate"
      },
      "ResourceNotFound": {
        "properties": {
          "error": {
            "type": "string",
            "const": "ResourceNotFound",
            "title": "Error"
          },
          "detail": {
            "type": "string",
            "title": "Detail"
          }
        },
        "type": "object",
        "required": [
          "error",
          "detail"
        ],
        "title": "ResourceNotFound"
      },
      "RevokeTokenResponse": {
        "properties": {},
        "type": "object",
        "title": "RevokeTokenResponse"
      },
      "S3DownloadURL": {
        "properties": {
          "url": {
            "type": "string",
            "title": "Url"
          },
          "headers": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Headers",
            "default": {}
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "title": "Expires At"
          }
        },
        "type": "object",
        "required": [
          "url",
          "expires_at"
        ],
        "title": "S3DownloadURL"
      },
      "S3FileCreateMultipart": {
        "properties": {
          "parts": {
            "items": {
              "$ref": "#/components/schemas/S3FileCreatePart"
            },
            "type": "array",
            "title": "Parts"
          }
        },
        "type": "object",
        "required": [
          "parts"
        ],
        "title": "S3FileCreateMultipart"
      },
      "S3FileCreatePart": {
        "properties": {
          "number": {
            "type": "integer",
            "title": "Number"
          },
          "chunk_start": {
            "type": "integer",
            "title": "Chunk Start"
          },
          "chunk_end": {
            "type": "integer",
            "title": "Chunk End"
          },
          "checksum_sha256_base64": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Base64"
          }
        },
        "type": "object",
        "required": [
          "number",
          "chunk_start",
          "chunk_end"
        ],
        "title": "S3FileCreatePart"
      },
      "S3FileUploadCompletedPart": {
        "properties": {
          "number": {
            "type": "integer",
            "title": "Number"
          },
          "checksum_etag": {
            "type": "string",
            "title": "Checksum Etag"
          },
          "checksum_sha256_base64": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Base64"
          }
        },
        "type": "object",
        "required": [
          "number",
          "checksum_etag",
          "checksum_sha256_base64"
        ],
        "title": "S3FileUploadCompletedPart"
      },
      "S3FileUploadMultipart": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "path": {
            "type": "string",
            "title": "Path"
          },
          "parts": {
            "items": {
              "$ref": "#/components/schemas/S3FileUploadPart"
            },
            "type": "array",
            "title": "Parts"
          }
        },
        "type": "object",
        "required": [
          "id",
          "path",
          "parts"
        ],
        "title": "S3FileUploadMultipart"
      },
      "S3FileUploadPart": {
        "properties": {
          "number": {
            "type": "integer",
            "title": "Number"
          },
          "chunk_start": {
            "type": "integer",
            "title": "Chunk Start"
          },
          "chunk_end": {
            "type": "integer",
            "title": "Chunk End"
          },
          "checksum_sha256_base64": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum Sha256 Base64"
          },
          "url": {
            "type": "string",
            "title": "Url"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "title": "Expires At"
          },
          "headers": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Headers",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "number",
          "chunk_start",
          "chunk_end",
          "url",
          "expires_at"
        ],
        "title": "S3FileUploadPart"
      },
      "Scope": {
        "type": "string",
        "enum": [
          "openid",
          "profile",
          "email",
          "user:read",
          "admin",
          "web_default",
          "organizations:read",
          "organizations:write",
          "custom_fields:read",
          "custom_fields:write",
          "discounts:read",
          "discounts:write",
          "checkout_links:read",
          "checkout_links:write",
          "checkouts:read",
          "checkouts:write",
          "products:read",
          "products:write",
          "benefits:read",
          "benefits:write",
          "files:read",
          "files:write",
          "subscriptions:read",
          "subscriptions:write",
          "customers:read",
          "customers:write",
          "customer_sessions:write",
          "orders:read",
          "metrics:read",
          "webhooks:read",
          "webhooks:write",
          "external_organizations:read",
          "license_keys:read",
          "license_keys:write",
          "repositories:read",
          "repositories:write",
          "issues:read",
          "issues:write",
          "customer_portal:read",
          "customer_portal:write"
        ],
        "title": "Scope",
        "enumNames": {
          "benefits:read": "Read benefits",
          "benefits:write": "Create or modify benefits",
          "checkout_links:read": "Read checkout links",
          "checkout_links:write": "Create or modify checkout links",
          "checkouts:read": "Read checkout sessions",
          "checkouts:write": "Create or modify checkout sessions",
          "custom_fields:read": "Read custom fields",
          "custom_fields:write": "Create or modify custom fields",
          "customer_portal:read": "Read your orders, subscriptions and benefits",
          "customer_portal:write": "Create or modify your orders, subscriptions and benefits",
          "customers:read": "Read customers",
          "customers:write": "Create or modify customers",
          "discounts:read": "Read discounts",
          "discounts:write": "Create or modify discounts",
          "email": "Read your email address",
          "files:read": "Read file uploads",
          "files:write": "Create or modify file uploads",
          "license_keys:read": "Read license keys",
          "license_keys:write": "Modify license keys",
          "metrics:read": "Read metrics",
          "openid": "OpenID",
          "orders:read": "Read orders made on your organizations",
          "organizations:read": "Read your organizations",
          "organizations:write": "Create or modify organizations",
          "products:read": "Read products",
          "products:write": "Create or modify products",
          "profile": "Read your profile",
          "subscriptions:read": "Read subscriptions made on your organizations",
          "subscriptions:write": "Create or modify subscriptions made on your organizations",
          "user:read": "User Read",
          "web_default": "Web Default",
          "webhooks:read": "Read webhooks",
          "webhooks:write": "Create or modify webhooks"
        }
      },
      "State": {
        "type": "string",
        "enum": [
          "open",
          "closed"
        ],
        "title": "State"
      },
      "SubType": {
        "type": "string",
        "enum": [
          "user",
          "organization"
        ],
        "title": "SubType"
      },
      "Subscription": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Amount"
          },
          "currency": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Currency"
          },
          "recurring_interval": {
            "$ref": "#/components/schemas/SubscriptionRecurringInterval"
          },
          "status": {
            "$ref": "#/components/schemas/SubscriptionStatus"
          },
          "current_period_start": {
            "type": "string",
            "format": "date-time",
            "title": "Current Period Start"
          },
          "current_period_end": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Current Period End"
          },
          "cancel_at_period_end": {
            "type": "boolean",
            "title": "Cancel At Period End"
          },
          "started_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Started At"
          },
          "ended_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ended At"
          },
          "customer_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Customer Id"
          },
          "product_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Product Id"
          },
          "price_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Price Id"
          },
          "discount_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Id"
          },
          "checkout_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid4"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checkout Id"
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "custom_field_data": {
            "type": "object",
            "title": "Custom Field Data",
            "description": "Key-value object storing custom field values."
          },
          "customer": {
            "$ref": "#/components/schemas/SubscriptionCustomer"
          },
          "user_id": {
            "type": "string",
            "format": "uuid4",
            "title": "User Id",
            "deprecated": true
          },
          "user": {
            "$ref": "#/components/schemas/SubscriptionUser",
            "deprecated": true
          },
          "product": {
            "$ref": "#/components/schemas/Product"
          },
          "price": {
            "$ref": "#/components/schemas/ProductPriceRecurring"
          },
          "discount": {
            "anyOf": [
              {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/DiscountFixedOnceForeverDurationBase"
                  },
                  {
                    "$ref": "#/components/schemas/DiscountFixedRepeatDurationBase"
                  },
                  {
                    "$ref": "#/components/schemas/DiscountPercentageOnceForeverDurationBase"
                  },
                  {
                    "$ref": "#/components/schemas/DiscountPercentageRepeatDurationBase"
                  }
                ],
                "title": "SubscriptionDiscount"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "amount",
          "currency",
          "recurring_interval",
          "status",
          "current_period_start",
          "current_period_end",
          "cancel_at_period_end",
          "started_at",
          "ended_at",
          "customer_id",
          "product_id",
          "price_id",
          "discount_id",
          "checkout_id",
          "metadata",
          "customer",
          "user_id",
          "user",
          "product",
          "price",
          "discount"
        ],
        "title": "Subscription"
      },
      "SubscriptionCustomer": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The ID of the object."
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Metadata"
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "email_verified": {
            "type": "boolean",
            "title": "Email Verified"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "billing_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address"
              },
              {
                "type": "null"
              }
            ]
          },
          "tax_id": {
            "anyOf": [
              {
                "prefixItems": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/components/schemas/TaxIDFormat"
                  }
                ],
                "type": "array",
                "maxItems": 2,
                "minItems": 2
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Id"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id"
          },
          "avatar_url": {
            "type": "string",
            "title": "Avatar Url",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "metadata",
          "email",
          "email_verified",
          "name",
          "billing_address",
          "tax_id",
          "organization_id",
          "avatar_url"
        ],
        "title": "SubscriptionCustomer"
      },
      "SubscriptionRecurringInterval": {
        "type": "string",
        "enum": [
          "month",
          "year"
        ],
        "title": "SubscriptionRecurringInterval"
      },
      "SubscriptionSortProperty": {
        "type": "string",
        "enum": [
          "customer",
          "-customer",
          "status",
          "-status",
          "started_at",
          "-started_at",
          "current_period_end",
          "-current_period_end",
          "amount",
          "-amount",
          "product",
          "-product",
          "discount",
          "-discount"
        ],
        "title": "SubscriptionSortProperty"
      },
      "SubscriptionStatus": {
        "type": "string",
        "enum": [
          "incomplete",
          "incomplete_expired",
          "trialing",
          "active",
          "past_due",
          "canceled",
          "unpaid"
        ],
        "title": "SubscriptionStatus"
      },
      "SubscriptionUser": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "public_name": {
            "type": "string",
            "title": "Public Name"
          },
          "avatar_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avatar Url"
          },
          "github_username": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Github Username"
          }
        },
        "type": "object",
        "required": [
          "id",
          "email",
          "public_name"
        ],
        "title": "SubscriptionUser"
      },
      "TaxIDFormat": {
        "type": "string",
        "enum": [
          "ad_nrt",
          "ae_trn",
          "ar_cuit",
          "au_abn",
          "au_arn",
          "bg_uic",
          "bh_vat",
          "bo_tin",
          "br_cnpj",
          "br_cpf",
          "ca_bn",
          "ca_gst_hst",
          "ca_pst_bc",
          "ca_pst_mb",
          "ca_pst_sk",
          "ca_qst",
          "ch_uid",
          "ch_vat",
          "cl_tin",
          "cn_tin",
          "co_nit",
          "cr_tin",
          "de_stn",
          "do_rcn",
          "ec_ruc",
          "eg_tin",
          "es_cif",
          "eu_oss_vat",
          "eu_vat",
          "gb_vat",
          "ge_vat",
          "hk_br",
          "hr_oib",
          "hu_tin",
          "id_npwp",
          "il_vat",
          "in_gst",
          "is_vat",
          "jp_cn",
          "jp_rn",
          "jp_trn",
          "ke_pin",
          "kr_brn",
          "kz_bin",
          "li_uid",
          "mx_rfc",
          "my_frp",
          "my_itn",
          "my_sst",
          "ng_tin",
          "no_vat",
          "no_voec",
          "nz_gst",
          "om_vat",
          "pe_ruc",
          "ph_tin",
          "ro_tin",
          "rs_pib",
          "ru_inn",
          "ru_kpp",
          "sa_vat",
          "sg_gst",
          "sg_uen",
          "si_tin",
          "sv_nit",
          "th_vat",
          "tr_tin",
          "tw_vat",
          "ua_vat",
          "us_ein",
          "uy_ruc",
          "ve_rif",
          "vn_tin",
          "za_vat"
        ],
        "title": "TaxIDFormat",
        "description": "List of supported tax ID formats.\n\nRef: https://docs.stripe.com/billing/customer/tax-ids#supported-tax-id"
      },
      "TokenResponse": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token"
          },
          "token_type": {
            "type": "string",
            "const": "Bearer",
            "title": "Token Type"
          },
          "expires_in": {
            "type": "integer",
            "title": "Expires In"
          },
          "refresh_token": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Refresh Token"
          },
          "scope": {
            "type": "string",
            "title": "Scope"
          },
          "id_token": {
            "type": "string",
            "title": "Id Token"
          }
        },
        "type": "object",
        "required": [
          "access_token",
          "token_type",
          "expires_in",
          "refresh_token",
          "scope",
          "id_token"
        ],
        "title": "TokenResponse"
      },
      "Unauthorized": {
        "properties": {
          "error": {
            "type": "string",
            "const": "Unauthorized",
            "title": "Error"
          },
          "detail": {
            "type": "string",
            "title": "Detail"
          }
        },
        "type": "object",
        "required": [
          "error",
          "detail"
        ],
        "title": "Unauthorized"
      },
      "UserInfoOrganization": {
        "properties": {
          "sub": {
            "type": "string",
            "title": "Sub"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          }
        },
        "type": "object",
        "required": [
          "sub"
        ],
        "title": "UserInfoOrganization"
      },
      "UserInfoUser": {
        "properties": {
          "sub": {
            "type": "string",
            "title": "Sub"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email"
          },
          "email_verified": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email Verified"
          }
        },
        "type": "object",
        "required": [
          "sub"
        ],
        "title": "UserInfoUser"
      },
      "ValidatedLicenseKey": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Organization Id"
          },
          "user_id": {
            "type": "string",
            "format": "uuid4",
            "title": "User Id",
            "deprecated": true
          },
          "customer_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Customer Id"
          },
          "user": {
            "$ref": "#/components/schemas/LicenseKeyUser",
            "deprecated": true
          },
          "customer": {
            "$ref": "#/components/schemas/LicenseKeyCustomer"
          },
          "benefit_id": {
            "type": "string",
            "format": "uuid4",
            "title": "Benefit Id",
            "description": "The benefit ID.",
            "x-polar-selector-widget": {
              "displayProperty": "description",
              "resourceName": "Benefit",
              "resourceRoot": "/v1/benefits"
            }
          },
          "key": {
            "type": "string",
            "title": "Key"
          },
          "display_key": {
            "type": "string",
            "title": "Display Key"
          },
          "status": {
            "$ref": "#/components/schemas/LicenseKeyStatus"
          },
          "limit_activations": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit Activations"
          },
          "usage": {
            "type": "integer",
            "title": "Usage"
          },
          "limit_usage": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit Usage"
          },
          "validations": {
            "type": "integer",
            "title": "Validations"
          },
          "last_validated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Validated At"
          },
          "expires_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expires At"
          },
          "activation": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LicenseKeyActivationBase"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "id",
          "organization_id",
          "user_id",
          "customer_id",
          "user",
          "customer",
          "benefit_id",
          "key",
          "display_key",
          "status",
          "limit_activations",
          "usage",
          "limit_usage",
          "validations",
          "last_validated_at",
          "expires_at"
        ],
        "title": "ValidatedLicenseKey"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "WebhookBenefitCreatedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "benefit.created",
            "title": "Type"
          },
          "data": {
            "$ref": "#/components/schemas/Benefit",
            "title": "Benefit"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookBenefitCreatedPayload",
        "description": "Sent when a new benefit is created.\n\n**Discord & Slack support:** Basic"
      },
      "WebhookBenefitGrantCreatedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "benefit_grant.created",
            "title": "Type"
          },
          "data": {
            "$ref": "#/components/schemas/BenefitGrantWebhook"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookBenefitGrantCreatedPayload",
        "description": "Sent when a new benefit grant is created.\n\n**Discord & Slack support:** Basic"
      },
      "WebhookBenefitGrantRevokedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "benefit_grant.revoked",
            "title": "Type"
          },
          "data": {
            "$ref": "#/components/schemas/BenefitGrantWebhook"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookBenefitGrantRevokedPayload",
        "description": "Sent when a new benefit grant is revoked.\n\n**Discord & Slack support:** Basic"
      },
      "WebhookBenefitGrantUpdatedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "benefit_grant.updated",
            "title": "Type"
          },
          "data": {
            "$ref": "#/components/schemas/BenefitGrantWebhook"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookBenefitGrantUpdatedPayload",
        "description": "Sent when a new benefit grant is updated.\n\n**Discord & Slack support:** Basic"
      },
      "WebhookBenefitUpdatedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "benefit.updated",
            "title": "Type"
          },
          "data": {
            "$ref": "#/components/schemas/Benefit",
            "title": "Benefit"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookBenefitUpdatedPayload",
        "description": "Sent when a benefit is updated.\n\n**Discord & Slack support:** Basic"
      },
      "WebhookCheckoutCreatedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "checkout.created",
            "title": "Type"
          },
          "data": {
            "$ref": "#/components/schemas/Checkout"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookCheckoutCreatedPayload",
        "description": "Sent when a new checkout is created.\n\n**Discord & Slack support:** Basic"
      },
      "WebhookCheckoutUpdatedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "checkout.updated",
            "title": "Type"
          },
          "data": {
            "$ref": "#/components/schemas/Checkout"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookCheckoutUpdatedPayload",
        "description": "Sent when a checkout is updated.\n\n**Discord & Slack support:** Basic"
      },
      "WebhookOrderCreatedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "order.created",
            "title": "Type"
          },
          "data": {
            "$ref": "#/components/schemas/Order"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookOrderCreatedPayload",
        "description": "Sent when a new order is created.\n\n**Discord & Slack support:** Full"
      },
      "WebhookOrganizationUpdatedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "organization.updated",
            "title": "Type"
          },
          "data": {
            "$ref": "#/components/schemas/Organization"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookOrganizationUpdatedPayload",
        "description": "Sent when a organization is updated.\n\n**Discord & Slack support:** Basic"
      },
      "WebhookPledgeCreatedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "pledge.created",
            "title": "Type"
          },
          "data": {
            "$ref": "#/components/schemas/Pledge"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookPledgeCreatedPayload",
        "description": "Sent when a new pledge is created. Note that this does mean that the pledge has been paid yet.\n\n**Discord & Slack support:** Full"
      },
      "WebhookPledgeUpdatedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "pledge.updated",
            "title": "Type"
          },
          "data": {
            "$ref": "#/components/schemas/Pledge"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookPledgeUpdatedPayload",
        "description": "Sent when a pledge is updated.\n\n**Discord & Slack support:** Basic"
      },
      "WebhookProductCreatedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "product.created",
            "title": "Type"
          },
          "data": {
            "$ref": "#/components/schemas/Product"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookProductCreatedPayload",
        "description": "Sent when a new product is created.\n\n**Discord & Slack support:** Basic"
      },
      "WebhookProductUpdatedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "product.updated",
            "title": "Type"
          },
          "data": {
            "$ref": "#/components/schemas/Product"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookProductUpdatedPayload",
        "description": "Sent when a product is updated.\n\n**Discord & Slack support:** Basic"
      },
      "WebhookSubscriptionActivePayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "subscription.active",
            "title": "Type"
          },
          "data": {
            "$ref": "#/components/schemas/Subscription"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookSubscriptionActivePayload",
        "description": "Sent when a subscription becomes active,\nwhether because it's a new paid subscription or because payment was recovered.\n\n**Discord & Slack support:** Full"
      },
      "WebhookSubscriptionCanceledPayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "subscription.canceled",
            "title": "Type"
          },
          "data": {
            "$ref": "#/components/schemas/Subscription"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookSubscriptionCanceledPayload",
        "description": "Sent when a subscription is canceled by the user.\nThey might still have access until the end of the current period.\n\n**Discord & Slack support:** Full"
      },
      "WebhookSubscriptionCreatedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "subscription.created",
            "title": "Type"
          },
          "data": {
            "$ref": "#/components/schemas/Subscription"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookSubscriptionCreatedPayload",
        "description": "Sent when a new subscription is created.\n\n**Discord & Slack support:** Full"
      },
      "WebhookSubscriptionRevokedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "subscription.revoked",
            "title": "Type"
          },
          "data": {
            "$ref": "#/components/schemas/Subscription"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookSubscriptionRevokedPayload",
        "description": "Sent when a subscription is revoked, the user looses access immediately.\nHappens when the subscription is canceled, or payment is past due.\n\n**Discord & Slack support:** Full"
      },
      "WebhookSubscriptionUpdatedPayload": {
        "properties": {
          "type": {
            "type": "string",
            "const": "subscription.updated",
            "title": "Type"
          },
          "data": {
            "$ref": "#/components/schemas/Subscription"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "WebhookSubscriptionUpdatedPayload",
        "description": "Sent when a subscription is updated. This event fires for all changes to the subscription, including renewals.\n\nIf you want more specific events, you can listen to `subscription.active`, `subscription.canceled`, and `subscription.revoked`.\n\nTo listen specifically for renewals, you can listen to `order.created` events and check the `billing_reason` field.\n\n**Discord & Slack support:** On cancellation and revocation. Renewals are skipped."
      }
    },
    "securitySchemes": {
      "oidc": {
        "type": "openIdConnect",
        "openIdConnectUrl": "/.well-known/openid-configuration"
      },
      "pat": {
        "type": "http",
        "description": "You can generate a **Personal Access Token** from your [settings](https://polar.sh/settings).",
        "scheme": "bearer"
      },
      "customer_session": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "tags": [
    {
      "name": "private",
      "description": "Endpoints that should appear in the schema only in development to generate our internal JS SDK."
    },
    {
      "name": "documented",
      "description": "Endpoints shown and documented in the Polar API documentation."
    },
    {
      "name": "featured",
      "description": "Endpoints featured in the Polar API documentation for their interest in common use-cases."
    },
    {
      "name": "issue_funding",
      "description": "Endpoints related to issue funding and rewards in the Polar API."
    }
  ]
}
