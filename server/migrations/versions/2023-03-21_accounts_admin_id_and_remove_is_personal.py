"""accounts admin_id and remove is_personal

Revision ID: cbca2a00e6e9
Revises: 8a14e99b6079
Create Date: 2023-03-21 10:00:02.908879

"""

import sqlalchemy as sa
from alembic import op

# Polar Custom Imports

# revision identifiers, used by Alembic.
revision = "cbca2a00e6e9"
down_revision = "8a14e99b6079"
branch_labels: tuple[str] | None = None
depends_on: tuple[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("accounts", sa.Column("admin_id", sa.UUID(), nullable=False))
    op.drop_constraint("accounts_email_key", "accounts", type_="unique")
    op.drop_constraint("accounts_user_id_key", "accounts", type_="unique")
    op.drop_constraint("accounts_user_id_fkey", "accounts", type_="foreignkey")
    op.create_foreign_key(
        op.f("accounts_admin_id_fkey"), "accounts", "users", ["admin_id"], ["id"]
    )
    op.drop_column("accounts", "is_personal")
    op.drop_column("accounts", "user_id")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "accounts", sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False)
    )
    op.add_column(
        "accounts",
        sa.Column("is_personal", sa.BOOLEAN(), autoincrement=False, nullable=False),
    )
    op.drop_constraint(op.f("accounts_admin_id_fkey"), "accounts", type_="foreignkey")
    op.create_foreign_key(
        "accounts_user_id_fkey", "accounts", "users", ["user_id"], ["id"]
    )
    op.create_unique_constraint("accounts_user_id_key", "accounts", ["user_id"])
    op.create_unique_constraint("accounts_email_key", "accounts", ["email"])
    op.drop_column("accounts", "admin_id")
    # ### end Alembic commands ###
