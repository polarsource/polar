"""Reverse Account relationships

Revision ID: b7634771f3fa
Revises: a2e9937406e0
Create Date: 2023-12-08 08:24:55.488812

"""

import sqlalchemy as sa
from alembic import op

# Polar Custom Imports
from polar.kit.extensions.sqlalchemy import PostgresUUID

# revision identifiers, used by Alembic.
revision = "b7634771f3fa"
down_revision = "a2e9937406e0"
branch_labels: tuple[str] | None = None
depends_on: tuple[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("organizations", sa.Column("account_id", sa.UUID(), nullable=True))
    op.create_foreign_key(
        op.f("organizations_account_id_fkey"),
        "organizations",
        "accounts",
        ["account_id"],
        ["id"],
        ondelete="set null",
    )

    op.add_column("users", sa.Column("account_id", sa.UUID(), nullable=True))
    op.create_foreign_key(
        op.f("users_account_id_fkey"),
        "users",
        "accounts",
        ["account_id"],
        ["id"],
        ondelete="set null",
    )

    op.execute(
        """
        UPDATE organizations
        SET account_id = accounts.id
        FROM accounts
        WHERE accounts.organization_id = organizations.id
    """
    )

    op.execute(
        """
        UPDATE users
        SET account_id = accounts.id
        FROM accounts
        WHERE accounts.user_id = users.id
    """
    )

    op.drop_constraint("accounts_organization_id_key", "accounts", type_="unique")
    op.drop_constraint("accounts_user_id_key", "accounts", type_="unique")
    op.drop_constraint("accounts_organization_id_fkey", "accounts", type_="foreignkey")
    op.drop_constraint("accounts_user_id_fkey", "accounts", type_="foreignkey")
    op.drop_column("accounts", "user_id")
    op.drop_column("accounts", "organization_id")

    # Set accounts for users had either
    # personal user or personal organization accounts, but not both.
    op.execute(
        """
        UPDATE organizations
        SET account_id = users.account_id
        FROM users
        WHERE organizations.account_id IS NULL
        AND users.username = organizations.name
        AND organizations.is_personal IS TRUE
        """
    )

    op.execute(
        """
        UPDATE users
        SET account_id = organizations.account_id
        FROM organizations
        WHERE users.account_id IS NULL
        AND users.username = organizations.name
        AND organizations.is_personal IS TRUE
        """
    )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "accounts",
        sa.Column("organization_id", sa.UUID(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "accounts", sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=True)
    )
    op.create_foreign_key(
        "accounts_user_id_fkey", "accounts", "users", ["user_id"], ["id"]
    )
    op.create_foreign_key(
        "accounts_organization_id_fkey",
        "accounts",
        "organizations",
        ["organization_id"],
        ["id"],
    )
    op.create_unique_constraint("accounts_user_id_key", "accounts", ["user_id"])
    op.create_unique_constraint(
        "accounts_organization_id_key", "accounts", ["organization_id"]
    )

    op.execute(
        """
        UPDATE accounts
        SET organization_id = organizations.id
        FROM organizations
        WHERE organizations.account_id = accounts.id
    """
    )

    op.execute(
        """
        UPDATE accounts
        SET user_id = users.id
        FROM users
        WHERE users.account_id = accounts.id
    """
    )

    op.drop_constraint(op.f("users_account_id_fkey"), "users", type_="foreignkey")
    op.drop_column("users", "account_id")
    op.drop_constraint(
        op.f("organizations_account_id_fkey"), "organizations", type_="foreignkey"
    )
    op.drop_column("organizations", "account_id")
    # ### end Alembic commands ###
