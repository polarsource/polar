"""Create SubscriptionTierPrice

Revision ID: 0708dc72969e
Revises: b33d5e1c4a6c
Create Date: 2024-03-13 09:57:25.482117

"""
import sqlalchemy as sa
from alembic import op

# Polar Custom Imports
from polar.kit.extensions.sqlalchemy import PostgresUUID

# revision identifiers, used by Alembic.
revision = "0708dc72969e"
down_revision = "b33d5e1c4a6c"
branch_labels: tuple[str] | None = None
depends_on: tuple[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "subscription_tier_prices",
        sa.Column("recurring_interval", sa.String(), nullable=False),
        sa.Column("price_amount", sa.Integer(), nullable=False),
        sa.Column("price_currency", sa.String(length=3), nullable=False),
        sa.Column("is_archived", sa.Boolean(), nullable=False),
        sa.Column("stripe_price_id", sa.String(), nullable=False),
        sa.Column("subscription_tier_id", sa.UUID(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("modified_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("deleted_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["subscription_tier_id"],
            ["subscription_tiers.id"],
            name=op.f("subscription_tier_prices_subscription_tier_id_fkey"),
            ondelete="cascade",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("subscription_tier_prices_pkey")),
    )
    op.create_index(
        op.f("ix_subscription_tier_prices_recurring_interval"),
        "subscription_tier_prices",
        ["recurring_interval"],
        unique=False,
    )

    # Create a corresponding SubscriptionTierPrice for each SubscriptionTier
    # with the same price as the SubscriptionTier's price
    op.execute(
        """
        INSERT INTO subscription_tier_prices (recurring_interval, price_amount, price_currency, is_archived, stripe_price_id, subscription_tier_id, id, created_at)
        SELECT 'month', price_amount, lower(price_currency), FALSE, stripe_price_id, id, uuid_generate_v4(), now() at time zone 'utc'
        FROM subscription_tiers
        WHERE type != 'free'
        """
    )

    op.drop_column("subscription_tiers", "price_amount")
    op.drop_column("subscription_tiers", "price_currency")
    op.drop_column("subscription_tiers", "stripe_price_id")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "subscription_tiers",
        sa.Column("stripe_price_id", sa.VARCHAR(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "subscription_tiers",
        sa.Column(
            "price_currency", sa.VARCHAR(length=3), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "subscription_tiers",
        sa.Column("price_amount", sa.INTEGER(), autoincrement=False, nullable=True),
    )

    # Set the price_amount and price_currency of each SubscriptionTier to the
    # price_amount and price_currency of the first SubscriptionTierPrice
    op.execute(
        """
        UPDATE subscription_tiers
        SET price_amount = subscription_tier_prices.price_amount,
            price_currency = subscription_tier_prices.price_currency,
            stripe_price_id = subscription_tier_prices.stripe_price_id
        FROM subscription_tier_prices
        WHERE subscription_tiers.id = subscription_tier_prices.subscription_tier_id
        """
    )

    # Set the price_amount and price_currency to 0 and "usd" for free tiers
    op.execute(
        """
        UPDATE subscription_tiers
        SET price_amount = 0,
            price_currency = 'usd'
        WHERE type = 'free'
        """
    )

    op.alter_column(
        "subscription_tiers",
        "price_amount",
        existing_type=sa.INTEGER(),
        nullable=False,
    )
    op.alter_column(
        "subscription_tiers",
        "price_currency",
        existing_type=sa.VARCHAR(length=3),
        nullable=False,
    )

    op.drop_index(
        op.f("ix_subscription_tier_prices_recurring_interval"),
        table_name="subscription_tier_prices",
    )
    op.drop_table("subscription_tier_prices")
    # ### end Alembic commands ###
