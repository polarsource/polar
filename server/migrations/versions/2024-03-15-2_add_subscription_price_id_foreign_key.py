"""Add Subscription.price_id foreign key

Revision ID: 2422ee81b025
Revises: 0708dc72969e
Create Date: 2024-03-13 13:20:25.680272

"""

import uuid

import sqlalchemy as sa
from alembic import op
from sqlalchemy.orm import Session

from polar.integrations.stripe.service import stripe as stripe_service

# Polar Custom Imports
from polar.kit.extensions.sqlalchemy import PostgresUUID

# revision identifiers, used by Alembic.
revision = "2422ee81b025"
down_revision = "0708dc72969e"
branch_labels: tuple[str] | None = None
depends_on: tuple[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("subscriptions", sa.Column("price_id", sa.UUID(), nullable=True))
    op.create_foreign_key(
        op.f("subscriptions_price_id_fkey"),
        "subscriptions",
        "subscription_tier_prices",
        ["price_id"],
        ["id"],
        ondelete="set null",
    )

    # Update the price_id for existing subscriptions
    op.execute(
        """
        UPDATE subscriptions
        SET price_id = (
            SELECT id
            FROM subscription_tier_prices
            WHERE subscription_tier_prices.subscription_tier_id = subscriptions.subscription_tier_id
            AND subscription_tier_prices.price_amount = subscriptions.price_amount
        )
        """
    )

    # Create a price for subscription where we lost the information about the price,
    # mainly for archived prices
    session = Session(bind=op.get_bind())
    statement = sa.text(
        """
        SELECT stripe_subscription_id, subscription_tier_id FROM subscriptions
        WHERE stripe_subscription_id IS NOT NULL AND price_id IS NULL
        """
    )
    result = session.execute(statement)
    for stripe_subscription_id, subscription_tier_id in result.all():
        stripe_subscription = stripe_service.get_subscription(stripe_subscription_id)
        price_id = stripe_subscription["items"].data[0].price.id
        stripe_price = stripe_service.get_price(price_id)
        subscription_tier_price_id = uuid.uuid4()
        op.execute(
            f"""
            INSERT INTO subscription_tier_prices (id, created_at, recurring_interval, price_amount, price_currency, is_archived, stripe_price_id, subscription_tier_id)
            VALUES ('{subscription_tier_price_id}', now() at time zone 'utc', 'month', {stripe_price.unit_amount}, '{stripe_price.currency}', false, '{stripe_price.id}', '{subscription_tier_id}')
            """
        )
        op.execute(
            f"""
            UPDATE subscriptions
            SET price_id = '{subscription_tier_price_id}'
            WHERE stripe_subscription_id = '{stripe_subscription_id}'
            """
        )

    op.drop_column("subscriptions", "price_currency")
    op.drop_column("subscriptions", "price_amount")

    op.add_column(
        "transactions",
        sa.Column("subscription_tier_price_id", sa.UUID(), nullable=True),
    )
    op.create_index(
        op.f("ix_transactions_subscription_tier_price_id"),
        "transactions",
        ["subscription_tier_price_id"],
        unique=False,
    )
    op.create_foreign_key(
        op.f("transactions_subscription_tier_price_id_fkey"),
        "transactions",
        "subscription_tier_prices",
        ["subscription_tier_price_id"],
        ["id"],
        ondelete="set null",
    )
    op.execute(
        """
        UPDATE transactions
        SET subscription_tier_price_id = (
            SELECT price_id
            FROM subscriptions
            WHERE subscriptions.id = transactions.subscription_id
        )
        WHERE transactions.subscription_id IS NOT NULL
        """
    )

    op.add_column(
        "held_balances",
        sa.Column("subscription_tier_price_id", sa.UUID(), nullable=True),
    )
    op.create_index(
        op.f("ix_held_balances_subscription_tier_price_id"),
        "held_balances",
        ["subscription_tier_price_id"],
        unique=False,
    )
    op.create_foreign_key(
        op.f("held_balances_subscription_tier_price_id_fkey"),
        "held_balances",
        "subscription_tier_prices",
        ["subscription_tier_price_id"],
        ["id"],
        ondelete="set null",
    )
    op.execute(
        """
        UPDATE held_balances
        SET subscription_tier_price_id = (
            SELECT price_id
            FROM subscriptions
            WHERE subscriptions.id = held_balances.subscription_id
        )
        WHERE held_balances.subscription_id IS NOT NULL
        """
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(
        op.f("held_balances_subscription_tier_price_id_fkey"),
        "held_balances",
        type_="foreignkey",
    )
    op.drop_index(
        op.f("ix_held_balances_subscription_tier_price_id"), table_name="held_balances"
    )
    op.drop_column("held_balances", "subscription_tier_price_id")

    op.drop_constraint(
        op.f("transactions_subscription_tier_price_id_fkey"),
        "transactions",
        type_="foreignkey",
    )
    op.drop_index(op.f("ix_transactions_subscription_tier_price_id"), "transactions")
    op.drop_column("transactions", "subscription_tier_price_id")

    op.add_column(
        "subscriptions",
        sa.Column("price_amount", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "subscriptions",
        sa.Column(
            "price_currency", sa.VARCHAR(length=3), autoincrement=False, nullable=True
        ),
    )

    op.execute(
        """
        UPDATE subscriptions
        SET (price_amount, price_currency) = (
            SELECT price_amount, price_currency
            FROM subscription_tier_prices
            WHERE subscription_tier_prices.id = subscriptions.price_id
        )
        """
    )

    op.execute(
        """
        UPDATE subscriptions
        SET price_amount = 0, price_currency = 'usd'
        FROM subscription_tiers WHERE subscription_tiers.id = subscriptions.subscription_tier_id
        AND price_id IS NULL
        """
    )

    op.alter_column("subscriptions", "price_currency", nullable=False)
    op.alter_column("subscriptions", "price_amount", nullable=False)

    op.drop_constraint(
        op.f("subscriptions_price_id_fkey"), "subscriptions", type_="foreignkey"
    )
    op.drop_column("subscriptions", "price_id")
    # ### end Alembic commands ###
