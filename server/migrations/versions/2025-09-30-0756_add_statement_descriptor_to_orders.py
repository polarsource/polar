"""Add statement_descriptor to orders

Revision ID: a28d9135d1a7
Revises: 1ec8eb5dcb44
Create Date: 2025-09-30 07:56:55.530282

"""

import sqlalchemy as sa
from alembic import op

# Polar Custom Imports

# revision identifiers, used by Alembic.
revision = "a28d9135d1a7"
down_revision = "1ec8eb5dcb44"
branch_labels: tuple[str] | None = None
depends_on: tuple[str] | None = None


def upgrade() -> None:
    # Add the column as nullable first
    op.add_column(
        "orders", sa.Column("statement_descriptor", sa.String(), nullable=True)
    )
    
    # Populate the column with statement descriptors
    # Logic: POLAR# + LEFT(organizations.slug, 15) for normal orders
    # Logic: POLAR# + LEFT(organizations.slug, 4) + ' TRIAL OVER' for first payment after trial
    
    # First, populate all orders with normal statement descriptors
    op.execute("""
        UPDATE orders 
        SET statement_descriptor = 'POLAR# ' || LEFT(organizations.slug, 15)
        FROM orders o
        JOIN customers ON o.customer_id = customers.id
        JOIN organizations ON customers.organization_id = organizations.id
        WHERE orders.id = o.id
    """)
    
    # Then, update orders that are the first payment after trial with "TRIAL OVER" descriptor
    # An order is the first payment after trial if:
    # 1. It has a subscription
    # 2. The subscription had a trial (trial_end is not null)
    # 3. The subscription is not currently trialing (status != 'trialing')
    # 4. It's the first paid order after trial_end for that subscription
    op.execute("""
        UPDATE orders 
        SET statement_descriptor = 'POLAR# ' || LEFT(organizations.slug, 4) || ' TRIAL OVER'
        FROM orders o
        JOIN customers ON o.customer_id = customers.id
        JOIN organizations ON customers.organization_id = organizations.id
        JOIN subscriptions ON o.subscription_id = subscriptions.id
        WHERE orders.id = o.id
        AND subscriptions.trial_end IS NOT NULL
        AND subscriptions.status != 'trialing'
        AND orders.status = 'paid'
        AND o.created_at = (
            SELECT MIN(o2.created_at)
            FROM orders o2
            WHERE o2.subscription_id = subscriptions.id
            AND o2.status = 'paid'
            AND o2.created_at > subscriptions.trial_end
        )
    """)
    
    # Make the column non-nullable
    op.alter_column("orders", "statement_descriptor", nullable=False)


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("orders", "statement_descriptor")
    # ### end Alembic commands ###
