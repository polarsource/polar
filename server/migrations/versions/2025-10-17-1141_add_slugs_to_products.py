"""Add slugs to products

Revision ID: 02ae611a9004
Revises: 59a5d45ae3fd
Create Date: 2025-10-17 11:41:38.305228

"""

import sqlalchemy as sa
from alembic import op
from slugify import slugify
from sqlalchemy.dialects import postgresql

# Polar Custom Imports

# revision identifiers, used by Alembic.
revision = "02ae611a9004"
down_revision = "59a5d45ae3fd"
branch_labels: tuple[str] | None = None
depends_on: tuple[str] | None = None


def upgrade() -> None:
    # Add the slug column as nullable first
    op.add_column("products", sa.Column("slug", postgresql.CITEXT(), nullable=True))

    # Generate slugs for existing products
    connection = op.get_bind()

    # Get all organizations
    organizations = connection.execute(
        sa.text("SELECT id FROM organizations")
    ).fetchall()

    # Process products per organization to ensure slug uniqueness within each org
    for (organization_id,) in organizations:
        # Get all products for this organization
        products = connection.execute(
            sa.text(
                "SELECT id, name FROM products WHERE organization_id = :org_id ORDER BY created_at"
            ),
            {"org_id": organization_id},
        ).fetchall()

        # Track used slugs within this organization
        used_slugs = set()

        for product_id, product_name in products:
            # Generate base slug from name
            base_slug = slugify(
                product_name,
                max_length=128,
                word_boundary=True,
            )

            # Handle collisions by appending a number
            slug = base_slug
            n = 0
            while slug in used_slugs:
                n += 1
                slug = f"{base_slug}-{n}"
                if n > 100:  # Safety check
                    raise Exception(
                        f"Could not generate unique slug for product {product_id} in organization {organization_id}"
                    )

            # Update the product with the slug
            connection.execute(
                sa.text("UPDATE products SET slug = :slug WHERE id = :id"),
                {"slug": slug, "id": product_id},
            )

            used_slugs.add(slug)

    # Make the column non-nullable
    op.alter_column("products", "slug", nullable=False)

    op.create_index(
        op.f("ix_product_slug"),
        "products",
        ["organization_id", "slug"],
        unique=True,
    )


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        "ix_product_slug",
        table_name="products",
    )

    op.drop_column("products", "slug")
    # ### end Alembic commands ###
