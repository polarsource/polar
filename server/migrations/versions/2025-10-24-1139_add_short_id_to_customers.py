"""add short_id to customers

Revision ID: aee75623c4bb
Revises: 8c9ef8060e95
Create Date: 2025-10-24 11:39:54.946342

"""

import sqlalchemy as sa
from alembic import op

# Polar Custom Imports
from migrations.functions import (
    FUNCTION_GENERATE_CUSTOMER_SHORT_ID,
    SEQUENCE_CREATE_CUSTOMER_SHORT_ID,
)

# revision identifiers, used by Alembic.
revision = "aee75623c4bb"
down_revision = "8c9ef8060e95"
branch_labels: tuple[str] | None = None
depends_on: tuple[str] | None = None


def upgrade() -> None:
    op.execute(SEQUENCE_CREATE_CUSTOMER_SHORT_ID)

    # Create Instagram-style ID generator
    # Combines timestamp (milliseconds since epoch) + sequence number
    op.execute(FUNCTION_GENERATE_CUSTOMER_SHORT_ID)

    op.add_column(
        "customers",
        sa.Column("short_id", sa.BigInteger(), nullable=True),
    )

    op.execute(
        """
        UPDATE customers
        SET short_id = generate_customer_short_id();
        """
    )

    op.alter_column("customers", "short_id", nullable=False)

    op.execute(
        """
        ALTER TABLE customers
        ALTER COLUMN short_id SET DEFAULT generate_customer_short_id();
        """
    )

    op.create_unique_constraint(
        op.f("customers_organization_id_short_id_key"),
        "customers",
        ["organization_id", "short_id"],
    )
    op.create_index(
        op.f("ix_customers_short_id"), "customers", ["short_id"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_customers_short_id"), table_name="customers")
    op.drop_constraint(
        op.f("customers_organization_id_short_id_key"), "customers", type_="unique"
    )
    op.drop_column("customers", "short_id")
    op.execute("DROP FUNCTION IF EXISTS generate_customer_short_id();")
    op.execute("DROP SEQUENCE IF EXISTS customer_short_id_seq;")
    # ### end Alembic commands ###
