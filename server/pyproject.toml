[tool.poetry]
name = "polar"
version = "0.1.0"
description = ""
authors = ["Birk Jernstr√∂m <birkjernstrom@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
fastapi = "^0.114.2"
uvicorn = {version = "^0.31.0", extras = ["standard"]}
asyncpg = "^0.29.0"
alembic = "^1.9.2"
sqlalchemy = { extras = ["asyncio"], version = "^2.0.34" }
greenlet = "^3.1.1"
structlog = "^24.4.0"
githubkit = "0.11.4"
redis = "^5.0.4"
sse-starlette = "^2.0.0"
arq = "^0.25.0"
stripe = "^10.12.0"
pyjwt = "^2.6.0"
pydantic = { version = "^2.7.0b1", allow-prereleases = true}
jinja2 = "^3.1.2"
sentry-sdk = {extras = ["fastapi", "sqlalchemy"], version = "^2.16.0"}
discord-webhook = { extras = ["async"], version = "^1.3.0" }
posthog = "^3.6.0"
sqlalchemy-citext = { git = "https://github.com/akolov/sqlalchemy-citext.git", rev = "15b3de84730bb4645c83d890a73f5c9b6b289531" }
python-slugify = "^8.0.1"
resend = "^2.4.0"
python-multipart = "^0.0.12"
safe-redirect-url = "^0.1.1"
httpx-oauth = "^0.15.1"
httpx = "^0.23.0"
pydantic-settings = "^2.5.2"
email-validator = "^2.1.0.post1"
python-dateutil = "^2.9.0.post0"
pydantic-extra-types = "^2.9.0"
sqlalchemy-utils = "^0.41.1"
authlib = "^1.3.2"
standardwebhooks = "^1.0.0"
typer = "^0.12.5"
logfire = "^0.51.0"
opentelemetry-instrumentation-fastapi = "^0.45b0"
opentelemetry-instrumentation-httpx = "^0.45b0"
opentelemetry-instrumentation-sqlalchemy = "^0.45b0"
opentelemetry-instrumentation-redis = "^0.45b0"
netaddr = "^1.2.1"
makefun = "^1.15.6"
boto3 = "^1.35.15"
itsdangerous = "^2.2.0"
cryptography = "^43.0.1"
babel = "^2.16.0"
pycountry = "^24.6.1"
python-stdnum = "^1.20"
ipinfo-db = "^0.0.4"
taskipy = "^1.10.3"
psycopg2-binary = "^2.9.5"

[tool.poetry.group.backoffice]
optional = true

[tool.poetry.group.backoffice.dependencies]
textual = "^0.82.0"
halo = "^0.0.31"

[tool.poetry.group.dev.dependencies]
mypy = "^1.6.0"
pytest = "<9"
pytest-sugar = "^1.0.0"
typer = "^0.12.5"
coverage = "^7.6.0"
pytest-mock = "^3.10.0"
ruff = "^0.6.8"
pytest-asyncio = "^0.21"
types-redis = "^4.6.0.20240903"
pytest-subtests = "^0.13.1"
pytest-recording = "^0.13.1"
respx = "^0.21.1"
pytest-cov = "^5.0.0"
types-python-slugify = "^8.0.0.3"
types-requests = "^2.31.0.10"
boto3-stubs = {extras = ["s3"], version = "^1.35.10"}
freezegun = "^1.5.1"

[tool.taskipy.tasks]
api = { cmd = "task verify_github_app && env AUTHLIB_INSECURE_TRANSPORT=true uvicorn polar.app:app --reload --workers 1 --host 127.0.0.1 --port 8000", help = "run api service" }
worker = { cmd = "arq run_worker.WorkerSettings --watch polar --custom-log-dict run_worker.silent_logger_config_dict", help = "run arq worker" }
worker_github_crawl = { cmd = "arq run_worker.WorkerSettingsGitHubCrawl --watch polar --custom-log-dict run_worker.silent_logger_config_dict", help = "run arq worker" }
test = { cmd = "POLAR_ENV=testing coverage run --source polar -m pytest && coverage report -m", help = "run all tests" }
lint = { cmd = "ruff format . && ruff check --fix .", help = "run linters with autofix" }
lint_check = { cmd = "ruff format --check . && ruff check .", help = "run ruff linter" }
lint_types = { cmd = "mypy polar scripts tests", help = "run mypy type verify" }
db_migrate = { cmd = "python -m scripts.db upgrade", help = "run alembic upgrade" }
db_recreate = { cmd = "python -m scripts.db recreate", help = "drop and recreate database" }
clean = { cmd = "find * -name '*.pyc' -delete && find * -name '__pycache__' -delete", help = "clean up .pyc and __pycache__" }
verify_github_app = { cmd = "python -m polar.verify_github_app", help = "verify that the github app is correctly configured" }
generate_dev_jwks = { cmd = "python -m polar.kit.jwk polar_dev > ./.jwks.json", help = "generate a development JWKS file" }
pre_deploy = { cmd = "task db_migrate", help = "Pre-deploy command run by Render"}

[tool.pytest.ini_options]
markers = ["auth", "http_auto_expunge", "skip_db_asserts", "override_current_user"]
asyncio_mode = "strict"

[tool.coverage.run]
concurrency = ["greenlet"]

[tool.coverage.report]
exclude_lines = ["pragma: no cover", "if TYPE_CHECKING:"]  # See: https://github.com/nedbat/coveragepy/issues/831

[tool.ruff]
target-version = "py311"

[tool.ruff.lint]
  extend-select = ["I", "UP", "T20"]
  ignore = [
      "F841", # remove unused variables
  ]

[tool.ruff.lint.per-file-ignores]
  "migrations/*" = [
      "F401", # remove unused import
  ]
  "scripts/*" = [
      "T20"
  ]

[tool.mypy]
ignore_missing_imports = true
plugins = ["pydantic.mypy"]
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
strict_equality = true
disallow_untyped_defs = true
skip_cache_mtime_checks = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
