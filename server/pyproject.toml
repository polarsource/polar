[tool.poetry]
name = "polar"
version = "0.1.0"
description = ""
authors = ["Birk Jernstr√∂m <birkjernstrom@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.95.2"
uvicorn = { extras = ["standard"], version = "^0.23.2" }
python-dotenv = "^0.21.1"
asyncpg = "^0.27.0"
alembic = "^1.9.2"
sqlalchemy = { extras = ["asyncio"], version = "^2.0.20" }
greenlet = "^2.0.2"                                        # Need to be explicit, M1 Mac issue (https://github.com/python-poetry/poetry/issues/5429)
structlog = "^22.3.0"
# Temp githubkit fix. See https://github.com/polarsource/polar/issues/1241
githubkit = { extras = [
    "auth-app",
], git = "https://github.com/polarsource/githubkit.git", rev = "a89b25d624aa701c8d097770f5f3d7d930aafdbf" }
redis = "^5.0.0"
sse-starlette = "^1.4.0"
arq = "^0.25.0"
stripe = "^6.4.0"
sqlalchemy-searchable = "^1.4.1"
pyjwt = "^2.6.0"
httpx-oauth = "^0.11.0"
pydantic = { extras = ["email"], version = "^1.10.7" }
jinja2 = "^3.1.2"
sentry-sdk = { extras = ["fastapi"], version = "^1.20.0" }
sendgrid = "^6.10.0"
discord-webhook = { extras = ["async"], version = "^1.3.0" }
posthog = "^3.0.1"
sqlalchemy-citext = { git = "https://github.com/akolov/sqlalchemy-citext.git", rev = "15b3de84730bb4645c83d890a73f5c9b6b289531" }

[tool.poetry.group.dev.dependencies]
mypy = "^1.6.0"
pytest = "^7.2.1"
httpx = "^0.23.3"
pytest-sugar = "^0.9.6"
typer = "^0.7.0"
psycopg2-binary = "^2.9.5"
coverage = "^7.1.0"
pytest-mock = "^3.10.0"
nest-asyncio = "^1.5.6"
sqlalchemy-utils = "^0.40.0"
ruff = "^0.1.0"
pytest-asyncio = "^0.20.3"
taskipy = "^1.10.3"
types-redis = "4.6.0.6"
pytest-subtests = "^0.10.0"
types-stripe = "^3.5.2.14"
pytest-recording = "^0.12.2"
respx = "^0.20.1"

[tool.taskipy.tasks]
api = { cmd = "task verify_github_app && uvicorn polar.app:app --reload --workers 1 --host 127.0.0.1 --port 8000", help = "run api service" }
worker = { cmd = "arq run_worker.WorkerSettings --watch polar --custom-log-dict run_worker.silent_logger_config_dict", help = "run arq worker" }
test = { cmd = "POLAR_ENV=testing coverage run --source polar -m pytest && coverage report -m", help = "run all tests" }
lint = { cmd = "ruff format . && ruff check --fix .", help = "run linters with autofix" }
lint_check = { cmd = "ruff format --check . && ruff check .", help = "run ruff linter" }
lint_types = { cmd = "mypy polar scripts tests", help = "run mypy type verify" }
db_migrate = { cmd = "python -m scripts.db upgrade", help = "run alembic upgrade" }
db_recreate = { cmd = "python -m scripts.db recreate", help = "drop and recreate database" }
clean = { cmd = "find * -name '*.pyc' -delete && find * -name '__pycache__' -delete", help = "clean up .pyc and __pycache__" }
verify_github_app = { cmd = "python -m polar.verify_github_app", help = "verify that the github app is correctly configured" }
pre_deploy = { cmd = "task db_migrate", help = "Pre-deploy command run by Render"}

[tool.pytest.ini_options]
markers = ["authenticated"]
asyncio_mode = "strict"

[tool.coverage.run]
concurrency = ["greenlet"]

[tool.coverage.report]
exclude_lines = ["pragma: no cover", "if TYPE_CHECKING:"]  # See: https://github.com/nedbat/coveragepy/issues/831

[tool.ruff]
target-version = "py311"
extend-select = ["I", "UP"]
ignore = [
    "F401", # remove unused import
    "F841", # remove unused variables
]

[tool.mypy]
ignore_missing_imports = true
plugins = ["pydantic.mypy"]
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
strict_equality = true
disallow_untyped_defs = true
skip_cache_mtime_checks = true
enable_incomplete_feature = ["Unpack"]

[[tool.mypy.overrides]]
module = "polar.email.sender"
# false positives with sendgrid
warn_unused_ignores = false

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
